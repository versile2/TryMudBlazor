@page "/snippet/{snippetId?}"
@layout MainLayout

<style>
    .mud-drawer-mini {
        z-index: calc(var(--mud-zindex-drawer) + 2);
    }

    .mud-drawer-one {
        left: calc(var(--mud-drawer-width-mini-left) + 2px) !important;
        z-index: calc(var(--mud-zindex-drawer) + 2);
    }

    .mud-drawer--closed {
        display: none;
        visibility: collapse;
    }

    .force-mini {
        width: var(--mud-drawer-width-mini-left) !important;
        overflow: hidden;
    }

    .try-component-menu {
        width: 100%;
    }

        .try-component-menu > button {
            display: flex;
            justify-content: space-between;
            width: 100%;
            background-color: white;
            border-radius: var(--mud-default-borderradius);
            padding: 6px 10px;
        }

            .try-component-menu > button:hover {
                background-color: #f0f0f0;
            }

    .try-component-boxes {
        width: 92%;
        margin-top: 6px;
        margin-bottom: 3px;
    }
        /* Force input to use Text Color for Highlights */
        .try-component-boxes .mud-input {
            /* This falls back to the base from(currentColor)
                * Base support is 78% with 13% missing from browsers like Opera
                * This provides fallback support making the text from 0.8 to 1 opacity
                */
            color: currentColor;
        }

        .try-component-boxes .mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
            color: hsl(from currentColor h s l / 0.8);
        }

        .try-component-boxes .mud-input > input.mud-input-root,
        .try-component-boxes div.mud-input-slot.mud-input-root {
            color: hsl(from currentColor h s l / 1);
        }

        .try-component-boxes .mud-input:focus-within ~ label.mud-input-label.mud-input-label-inputcontrol {
            color: currentColor
        }

        .try-component-boxes .mud-input.mud-input-outlined:focus-within .mud-input-outlined-border {
            border-color: currentColor
        }

        .try-component-boxes .mud-input.mud-input-filled.mud-input-underline:after {
            border-color: currentColor;
        }

    .static-asset-badge > span.mud-badge-wrapper {
        top: 14px;
        left: -14px;
    }
</style>
<div class="try-layout" style="@LayoutStyle()">
    <MudDrawer Open="true" Fixed="false" Elevation="1" Variant="@DrawerVariant.Persistent" Class="try-drawer mud-drawer-mini force-mini">
        <MudIconButton title="Run (Ctrl + S)" OnClick="@CompileAsync" Disabled="@Loading" Icon="@Icons.Material.Rounded.PlayArrow" Color="@(LayoutService.IsDarkMode ? Color.Success : Color.Inherit)" />
        <MudTooltip Text="Save or Share" Delay="800" Arrow="true" Placement="Placement.Right" Color="Color.Dark">
            @if (!_examplesOpen)
            {
                @PopupFragment
            }
            <MudIconButton OnClick="ShowSaveSnippetPopup" Icon="@Icons.Material.Outlined.Save" Color="@(LayoutService.IsDarkMode ? Color.Info : Color.Inherit)" />
        </MudTooltip>
        <MudTooltip Text="Static Assets" Delay="800" Arrow Placement="Placement.Right" Color="Color.Dark">
            <MudBadge Content="@cssORjsFiles.Count" Overlap Class="static-asset-badge">
                <MudIconButton OnClick="ShowStaticAssetsPopup" Icon="@Icons.Material.Filled.DocumentScanner" Color="@(LayoutService.IsDarkMode ? Color.Info : Color.Inherit)" />
            </MudBadge>
        </MudTooltip>
        <MudTooltip Text="Doc Examples" Delay="800" Arrow Placement="Placement.Right" Color="Color.Dark">
            <MudIconButton OnClick="@ToggleExamples" Icon="@Icons.Material.Filled.SettingsInputComponent" Color="@(LayoutService.IsDarkMode ? Color.Info : Color.Inherit)" />
        </MudTooltip>
        <MudTooltip Text="@(LayoutService.IsDarkMode ? "Switch to Light Theme" : "Switch to Dark Theme")" Delay="800" Arrow="true" Placement="Placement.Right" Color="Color.Dark">
            <MudIconButton OnClick="@UpdateTheme" Icon="@(LayoutService.IsDarkMode ? @Icons.Material.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)" Color="@(LayoutService.IsDarkMode ? Color.Warning : Color.Inherit)" />
        </MudTooltip>
        <MudSpacer />
        <MudStack Class="mb-12" AlignItems="AlignItems.Center" Justify="Justify.Center">
            <MudAvatar Color="Color.Info" Size="Size.Small" Class="my-auto">T</MudAvatar>
            <MudAvatar Color="Color.Info" Size="Size.Small" Class="my-auto">R</MudAvatar>
            <MudAvatar Color="Color.Info" Size="Size.Small" Class="my-auto">Y</MudAvatar>
            <MudAvatar Color="Color.Error" Size="Size.Small" Class="my-auto">M</MudAvatar>
            <MudAvatar Color="Color.Error" Size="Size.Small" Class="my-auto">U</MudAvatar>
            <MudAvatar Color="Color.Error" Size="Size.Small" Class="my-auto">D</MudAvatar>
            <MudAvatar Color="Color.Error" Size="Size.Small" Class="my-auto">B</MudAvatar>
            <MudAvatar Color="Color.Error" Size="Size.Small" Class="my-auto">L</MudAvatar>
            <MudAvatar Color="Color.Error" Size="Size.Small" Class="my-auto">A</MudAvatar>
            <MudAvatar Color="Color.Error" Size="Size.Small" Class="my-auto">Z</MudAvatar>
            <MudAvatar Color="Color.Error" Size="Size.Small" Class="my-auto">O</MudAvatar>
            <MudAvatar Color="Color.Error" Size="Size.Small" Class="my-auto">R</MudAvatar>
            <MudTooltip Text="Cleanup and Clear Compiler Cache" Delay="800" Arrow Placement="Placement.Right" Color="Color.Dark">
                <MudIconButton OnClick="@ClearCache" Icon="@Icons.Material.Filled.CleanHands" Color="@(LayoutService.IsDarkMode ? Color.Info : Color.Inherit)" />
            </MudTooltip>
        </MudStack>
    </MudDrawer>
    @if (_examplesOpen)
    {
        <MudDrawer Open="true" Anchor="Anchor.Start" ClipMode="DrawerClipMode.Docked" Variant="@DrawerVariant.Temporary"
                   Overlay="false" Fixed
                   Class="mud-drawer-one try-drawer"
                   Elevation="1">
            <MudStack Class="pa-3" Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudText Typo="Typo.h6">Doc Examples</MudText>
                <MudIconButton Class="ma-0 pa-0"
                               Icon="@(_dockExamples ? Icons.Material.Filled.ArrowLeft : Icons.Material.Filled.ArrowDropDown)"
                               OnClick="@(() => ToggleDock("examples"))" />
            </MudStack>
            @PopupFragment
            @if (_compList.Any())
            {
                <div class="try-component-boxes">
                    <MudTextField @bind-Value="@_compSearch"
                                  Label="Search"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Filled"
                                  Adornment="@Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Class="ml-3"
                                  Style="width: 102%;"
                                  Immediate Clearable />                    
                </div>
                <MudPaper Elevation="0" Style="overflow-y: auto;background-color: transparent">
                    @foreach (var main in _compList.Where(x => x.ComponentName.Contains(_compSearch, StringComparison.InvariantCultureIgnoreCase)).OrderBy(x => x.ComponentName).Select(x => x.ComponentName).Distinct().ToList())
                    {
                        <div class="try-component-boxes">
                            <MudMenu Label="@main"
                                     AnchorOrigin="@Origin.TopRight"
                                     EndIcon="@Icons.Material.Filled.Add"
                                     Class="mx-2 pa-1 try-component-menu">
                                @foreach (var comp in _compList.Where(x => x.ComponentName == main).ToList())
                                {
                                    <MudMenuItem Label="@comp.ExampleFullName" OnClick="@(() => ConfirmExample(comp))" />
                                }
                            </MudMenu>
                        </div>
                    }
                </MudPaper>                
            }
            else
            {
                <MudPaper Class="ma-6" Elevation="0">
                    <MudSkeleton />
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Height="100px" />
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100%" />
                </MudPaper>
            }
        </MudDrawer>
    }
    <div class="try-editor" style="margin-left: var(--mud-drawer-width-mini-left) !important">
        <MudOverlay Visible="Loading" Absolute="true" DarkBackground="true">
            <MudText Typo="Typo.h4" Class="white-text">@LoaderText</MudText>
        </MudOverlay>
        <MudOverlay Visible="@_overlayExamples" Absolute="true" OnClick="@OverlayClicked">
        </MudOverlay>
        <div id="user-code-editor-container">
            <TabManager Tabs="@CodeFileNames" OnTabActivate="@HandleTabActivate" OnTabClose="@HandleTabClose" OnTabCreate="@HandleTabCreate" />
            <CodeEditor @ref="@CodeEditorComponent" Code="@CodeEditorContent" CodeFileType="@CodeFileType" />
            <ErrorList @bind-Show="@ShowDiagnostics" Diagnostics="@Diagnostics" />
        </div>
        <div id="user-page-window-container">
            <iframe id="user-page-window" src="/user-page" style="height: 98vh;"></iframe>
        </div>
    </div>
    <MudAppBar Bottom="true" Fixed="true" Color="@GetBottomAppBarColor()" Elevation="0" Class="try-errorlist repl-navbar">
        <div class="try-errorlist-button d-flex align-center" @onclick="@ToggleDiagnostics">
            <MudIcon Icon="@Icons.Material.Outlined.ErrorOutline" />
            <MudText>@ErrorsCount</MudText>
            <MudIcon Icon="@Icons.Material.Outlined.WarningAmber" />
            <MudText>@WarningsCount</MudText>
            @if (ErrorsCount != 0 || WarningsCount != 0)
            {
                <MudIcon Icon="@(ShowDiagnostics ? $"{Icons.Material.Outlined.ExpandMore}" : $"{Icons.Material.Outlined.ExpandLess}")" />
            }
        </div>
        <MudSpacer />
        <MudLink Typo="Typo.body2" Class="ml-10 version-info" Color="Color.Inherit" Href="https://dotnet.microsoft.com/download" Target="_blank">.net @Environment.Version.ToString()</MudLink>
        <MudLink Typo="Typo.body2" Class="ml-5 version-info" Color="Color.Inherit" Href="https://github.com/MudBlazor/MudBlazor/releases" Target="_blank">mudblazor @Version</MudLink>
    </MudAppBar>
</div>
@code {
    public RenderFragment PopupFragment => @<div>
        <SaveSnippetPopup @bind-Visible="SaveSnippetPopupVisible" StaticAssets="this.cssORjsFiles"
                          CodeFiles="@(CodeFiles.Values.ToList())" UpdateActiveCodeFileContentAction="UpdateActiveCodeFileContent" />
        <StaticAssetsPopup @bind-Visible="StaticAssetsPopupVisible" @bind-AddLinks="@cssORjsFiles" />
        <ShowConfirmExamplePopup @bind-Visible="ShowConfirmExamplePopupVisible" ReturnResult="@ConfirmExampleChanged" />
    </div>;


    public Color GetBottomAppBarColor()
    {
        if (ErrorsCount != 0)
        {
            return Color.Error;
        }
        else if (WarningsCount != 0)
        {
            return Color.Warning;
        }
        else
        {
            return Color.Inherit;
        }
    }
}