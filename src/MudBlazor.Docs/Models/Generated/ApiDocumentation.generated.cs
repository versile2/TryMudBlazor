// Copyright (c) MudBlazor 2025
// MudBlazor licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//-----------------------------------------------------------------------
// Generated by MudBlazor.Docs.Compiler.ApiDocumentationWriter
// Any changes to this file will be overwritten on build
// <auto-generated />
//-----------------------------------------------------------------------

using System.CodeDom.Compiler;

namespace MudBlazor.Docs.Models;

/// <summary>
/// Represents all of the XML documentation for public-facing classes.
/// </summary>
[GeneratedCodeAttribute("MudBlazor.Docs.Compiler", "1.0.0.0")]
public static partial class ApiDocumentation
{
    static ApiDocumentation()
    {
        // Build all of the documented properties
        Properties = new()
        {
            { "Microsoft.AspNetCore.Components.ComponentBase.Assets", new() { Name = "Assets", TypeName = "Microsoft.AspNetCore.Components.ResourceAssetCollection", TypeFriendlyName = "ResourceAssetCollection", IsProtected = true, }},
            { "Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode", new() { Name = "AssignedRenderMode", TypeName = "Microsoft.AspNetCore.Components.IComponentRenderMode", TypeFriendlyName = "IComponentRenderMode", IsProtected = true, }},
            { "Microsoft.AspNetCore.Components.ComponentBase.RendererInfo", new() { Name = "RendererInfo", TypeName = "Microsoft.AspNetCore.Components.RendererInfo", TypeFriendlyName = "RendererInfo", IsProtected = true, }},
            { "MudBlazor.AggregateDefinition`1.Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Remarks = @"Defaults to null.", Summary = @"An object that supplies culture-specific formatting information.", }},
            { "MudBlazor.AggregateDefinition`1.CustomAggregate", new() { Name = "CustomAggregate", TypeName = "", TypeFriendlyName = "Func<IEnumerable<T>, string>", Remarks = @"This function is used when <see cref=""P:MudBlazor.AggregateDefinition`1.Type"" /> is <see cref=""F:MudBlazor.AggregateType.Custom"" />.", Summary = @"The custom function used to calculate aggregate values.", }},
            { "MudBlazor.AggregateDefinition`1.DisplayFormat", new() { Name = "DisplayFormat", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <c>{value}</c>.", Summary = @"The format used to display aggregate values with prepended or appended text.", }},
            { "MudBlazor.AggregateDefinition`1.NumberFormat", new() { Name = "NumberFormat", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to null.", Summary = @"A numeric format string.", }},
            { "MudBlazor.AggregateDefinition`1.Type", new() { Name = "Type", TypeName = "MudBlazor.AggregateType", TypeFriendlyName = "AggregateType", Remarks = @"Defaults to <see cref=""F:MudBlazor.AggregateType.Count"" />.  When <see cref=""F:MudBlazor.AggregateType.Custom"" />, the function defined in <see cref=""P:MudBlazor.AggregateDefinition`1.CustomAggregate"" /> is used.", Summary = @"The type of aggregate calculation to perform.", }},
            { "MudBlazor.BaseMask.AllowOnlyDelimiters", new() { Name = "AllowOnlyDelimiters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Allows showing text which consists only of delimiter characters.", }},
            { "MudBlazor.BaseMask.CaretPos", new() { Name = "CaretPos", TypeName = "System.Int32", TypeFriendlyName = "int", }},
            { "MudBlazor.BaseMask.Mask", new() { Name = "Mask", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.BaseMask.MaskChars", new() { Name = "MaskChars", TypeName = "MudBlazor.MaskChar[]", TypeFriendlyName = "MaskChar[]", Remarks = @"Defaults to <c>a</c> for letters, <c>0</c> for digits, and <c>*</c> for letters or digits.", Summary = @"The list of mask characters and their meanings.", }},
            { "MudBlazor.BaseMask.Selection", new() { Name = "Selection", TypeName = "System.Nullable`1[[System.ValueTuple`2[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Nullable<ValueTuple<int, int>>", }},
            { "MudBlazor.BaseMask.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.BaseTypography.FontFamily", new() { Name = "FontFamily", TypeName = "System.String[]", TypeFriendlyName = "string[]", Summary = @"Gets or sets the font family.", }},
            { "MudBlazor.BaseTypography.FontSize", new() { Name = "FontSize", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the font size.", }},
            { "MudBlazor.BaseTypography.FontWeight", new() { Name = "FontWeight", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the font weight.", }},
            { "MudBlazor.BaseTypography.LetterSpacing", new() { Name = "LetterSpacing", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the letter spacing.", }},
            { "MudBlazor.BaseTypography.LineHeight", new() { Name = "LineHeight", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the line height.", }},
            { "MudBlazor.BaseTypography.TextTransform", new() { Name = "TextTransform", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the text transform.", }},
            { "MudBlazor.Block.MaskChar", new() { Name = "MaskChar", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"The mask character.", }},
            { "MudBlazor.Block.Max", new() { Name = "Max", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The maximum allowed number of characters.", }},
            { "MudBlazor.Block.Min", new() { Name = "Min", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The minimum required number of characters.", }},
            { "MudBlazor.BlockMask.Blocks", new() { Name = "Blocks", TypeName = "MudBlazor.Block[]", TypeFriendlyName = "Block[]", Summary = @"The sets of characters used to build this mask.", }},
            { "MudBlazor.BreadcrumbItem.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Prevents this item from being clicked.", }},
            { "MudBlazor.BreadcrumbItem.EqualityContract", new() { Name = "EqualityContract", TypeName = "System.Type", TypeFriendlyName = "Type", IsProtected = true, }},
            { "MudBlazor.BreadcrumbItem.Href", new() { Name = "Href", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The URL to navigate to when clicked.", }},
            { "MudBlazor.BreadcrumbItem.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The custom icon for this item.", }},
            { "MudBlazor.BreadcrumbItem.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text to display.", }},
            { "MudBlazor.BreadcrumbLink.Item", new() { Name = "Item", TypeName = "MudBlazor.BreadcrumbItem", TypeFriendlyName = "BreadcrumbItem", IsParameter = true, Summary = @"The item to display.", }},
            { "MudBlazor.BreadcrumbLink.Parent", new() { Name = "Parent", TypeName = "MudBlazor.MudBreadcrumbs", TypeFriendlyName = "MudBreadcrumbs", Summary = @"The parent breadcrumb component.", }},
            { "MudBlazor.BreadcrumbSeparator.Parent", new() { Name = "Parent", TypeName = "MudBlazor.MudBreadcrumbs", TypeFriendlyName = "MudBreadcrumbs", Summary = @"The parent breadcrumb component.", }},
            { "MudBlazor.Breakpoints.lg", new() { Name = "lg", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the breakpoint value for large screens (lg).Default value is ""1280px"".", }},
            { "MudBlazor.Breakpoints.md", new() { Name = "md", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the breakpoint value for medium screens (md).Default value is ""960px"".", }},
            { "MudBlazor.Breakpoints.sm", new() { Name = "sm", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the breakpoint value for small screens (sm).Default value is ""600px"".", }},
            { "MudBlazor.Breakpoints.xl", new() { Name = "xl", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the breakpoint value for extra large screens (xl).Default value is ""1920px"".", }},
            { "MudBlazor.Breakpoints.xs", new() { Name = "xs", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the breakpoint value for extra small screens (xs).Default value is ""0px"".", }},
            { "MudBlazor.Breakpoints.xxl", new() { Name = "xxl", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the breakpoint value for extra extra large screens (xxl).Default value is ""2560px"".", }},
            { "MudBlazor.BrowserViewportEventArgs.Breakpoint", new() { Name = "Breakpoint", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"Gets the breakpoint associated with the browser size.", }},
            { "MudBlazor.BrowserViewportEventArgs.BrowserWindowSize", new() { Name = "BrowserWindowSize", TypeName = "MudBlazor.Services.BrowserWindowSize", TypeFriendlyName = "BrowserWindowSize", Summary = @"Gets the browser window size.", }},
            { "MudBlazor.BrowserViewportEventArgs.IsImmediate", new() { Name = "IsImmediate", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Gets a value indicating whether this is the first event that was fired.This is true when you set <c>fireImmediately</c> to <c>true</c> in the <see cref=""M:MudBlazor.IBrowserViewportService.SubscribeAsync(MudBlazor.IBrowserViewportObserver,System.Boolean)"" />, <see cref=""M:MudBlazor.IBrowserViewportService.SubscribeAsync(System.Guid,System.Action{MudBlazor.BrowserViewportEventArgs},MudBlazor.Services.ResizeOptions,System.Boolean)"" />, <see cref=""M:MudBlazor.IBrowserViewportService.SubscribeAsync(System.Guid,System.Func{MudBlazor.BrowserViewportEventArgs,System.Threading.Tasks.Task},MudBlazor.Services.ResizeOptions,System.Boolean)"" />  method.", }},
            { "MudBlazor.BrowserViewportEventArgs.JavaScriptListenerId", new() { Name = "JavaScriptListenerId", TypeName = "System.Guid", TypeFriendlyName = "Guid", Summary = @"Gets the ID of the JavaScript listener.", }},
            { "MudBlazor.CellContext`1.Actions", new() { Name = "Actions", TypeName = "", TypeFriendlyName = "CellActio<T>", Summary = @"The behaviors which can be performed in the cell.", }},
            { "MudBlazor.CellContext`1.Item", new() { Name = "Item", TypeName = "", TypeFriendlyName = "T", Summary = @"The item displayed in the cell.", }},
            { "MudBlazor.CellContext`1.Open", new() { Name = "Open", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates if the cell is currently in an open hierarchy.", }},
            { "MudBlazor.CellContext`1.Selected", new() { Name = "Selected", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates if the cell is currently selected.", }},
            { "MudBlazor.CellContext`1+CellActions.CancelEditingItemAsync", new() { Name = "CancelEditingItemAsync", TypeName = "System.Func`1[[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<Task>", Summary = @"The function which ends editing.", }},
            { "MudBlazor.CellContext`1+CellActions.SetSelectedItemAsync", new() { Name = "SetSelectedItemAsync", TypeName = "System.Func`2[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<bool, Task>", Summary = @"The function which selects the cell.", }},
            { "MudBlazor.CellContext`1+CellActions.StartEditingItemAsync", new() { Name = "StartEditingItemAsync", TypeName = "System.Func`1[[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<Task>", Summary = @"The function which begins editing.", }},
            { "MudBlazor.CellContext`1+CellActions.ToggleHierarchyVisibilityForItemAsync", new() { Name = "ToggleHierarchyVisibilityForItemAsync", TypeName = "System.Func`1[[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<Task>", Summary = @"The function which toggles hierarchy visibility.", }},
            { "MudBlazor.ChartOptions.ChartPalette", new() { Name = "ChartPalette", TypeName = "System.String[]", TypeFriendlyName = "string[]", Remarks = @"Defaults to an array of <c>20</c> colors.", Summary = @"The list of colors applied to series values.", }},
            { "MudBlazor.ChartOptions.EnableSmoothGradient", new() { Name = "EnableSmoothGradient", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Enables smooth color transitions for heatmap cells and removes all padding between cells in a <see cref=""F:MudBlazor.ChartType.HeatMap"" />Defaults to false", }},
            { "MudBlazor.ChartOptions.InterpolationOption", new() { Name = "InterpolationOption", TypeName = "MudBlazor.InterpolationOption", TypeFriendlyName = "InterpolationOption", Remarks = @"Defaults to <see cref=""F:MudBlazor.InterpolationOption.Straight"" />.  Only takes effect when the <see cref=""T:MudBlazor.MudChart"" /> type is <see cref=""F:MudBlazor.ChartType.Line"" />.", Summary = @"The technique used to smooth lines.", }},
            { "MudBlazor.ChartOptions.LineStrokeWidth", new() { Name = "LineStrokeWidth", TypeName = "System.Double", TypeFriendlyName = "double", Remarks = @"Defaults to <c>3</c> for three pixels.  Only takes effect when the <see cref=""T:MudBlazor.MudChart"" /> type is <see cref=""F:MudBlazor.ChartType.Line"" />.", Summary = @"The width of lines, in pixels.", }},
            { "MudBlazor.ChartOptions.MaxNumYAxisTicks", new() { Name = "MaxNumYAxisTicks", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"If the number of ticks calculated exceeds this value, the tick marks will automatically be thinned out.", Summary = @"The maximum allowed number of vertical tick marks.", }},
            { "MudBlazor.ChartOptions.ShowLabels", new() { Name = "ShowLabels", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Enables labels for every box in a <see cref=""F:MudBlazor.ChartType.HeatMap"" />Defaults to true", }},
            { "MudBlazor.ChartOptions.ShowLegend", new() { Name = "ShowLegend", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the chart series legend.", }},
            { "MudBlazor.ChartOptions.ShowLegendLabels", new() { Name = "ShowLegendLabels", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Enables label values for the legend boxes in a <see cref=""F:MudBlazor.ChartType.HeatMap"" />Defaults to false", }},
            { "MudBlazor.ChartOptions.ShowToolTips", new() { Name = "ShowToolTips", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Enables tooltips for values in a <see cref=""F:MudBlazor.ChartType.HeatMap"" />Defaults to true", }},
            { "MudBlazor.ChartOptions.ValueFormatString", new() { Name = "ValueFormatString", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The format applied to labels for every box in a <see cref=""F:MudBlazor.ChartType.HeatMap"" />Defaults to ""F2""", }},
            { "MudBlazor.ChartOptions.XAxisLabelPosition", new() { Name = "XAxisLabelPosition", TypeName = "MudBlazor.XAxisLabelPosition", TypeFriendlyName = "XAxisLabelPosition", Summary = @"The position of the X axis labels as either top or bottom in a <see cref=""F:MudBlazor.ChartType.HeatMap"" />.Defaults to <see cref=""F:MudBlazor.XAxisLabelPosition.Bottom"" />", }},
            { "MudBlazor.ChartOptions.XAxisLines", new() { Name = "XAxisLines", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows horizontal axis lines.", }},
            { "MudBlazor.ChartOptions.YAxisFormat", new() { Name = "YAxisFormat", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Values in this property are standard .NET format strings, such as those passed into the <c>ToString()</c> method.  For a list of common formats, see: <see href=""https://learn.microsoft.com/dotnet/standard/base-types/formatting-types"" />", Summary = @"The format applied to numbers on the vertical axis.", }},
            { "MudBlazor.ChartOptions.YAxisLabelPosition", new() { Name = "YAxisLabelPosition", TypeName = "MudBlazor.YAxisLabelPosition", TypeFriendlyName = "YAxisLabelPosition", Summary = @"The position of the Y axis labels as either left or right in a <see cref=""F:MudBlazor.ChartType.HeatMap"" />.Defaults to <see cref=""F:MudBlazor.YAxisLabelPosition.Left"" />", }},
            { "MudBlazor.ChartOptions.YAxisLines", new() { Name = "YAxisLines", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows vertical axis lines.", }},
            { "MudBlazor.ChartOptions.YAxisRequireZeroPoint", new() { Name = "YAxisRequireZeroPoint", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.ChartOptions.YAxisTicks", new() { Name = "YAxisTicks", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"Defaults to <c>20</c>.", Summary = @"The spacing between vertical tick marks.", }},
            { "MudBlazor.Charts.Bar.MudChartParent", new() { Name = "MudChartParent", TypeName = "MudBlazor.MudChart", TypeFriendlyName = "MudChart", Summary = @"The chart, if any, containing this component.", }},
            { "MudBlazor.Charts.Donut.MudChartParent", new() { Name = "MudChartParent", TypeName = "MudBlazor.MudChart", TypeFriendlyName = "MudChart", Summary = @"The chart, if any, containing this component.", }},
            { "MudBlazor.Charts.Donut.ParentHeight", new() { Name = "ParentHeight", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.Charts.Donut.ParentWidth", new() { Name = "ParentWidth", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.Charts.HeatMap.MudChartParent", new() { Name = "MudChartParent", TypeName = "MudBlazor.MudChart", TypeFriendlyName = "MudChart", Summary = @"The chart, if any, containing this component.", }},
            { "MudBlazor.Charts.HeatMapCell.Column", new() { Name = "Column", TypeName = "System.Int32", TypeFriendlyName = "int", }},
            { "MudBlazor.Charts.HeatMapCell.CustomFragment", new() { Name = "CustomFragment", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", }},
            { "MudBlazor.Charts.HeatMapCell.Height", new() { Name = "Height", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", }},
            { "MudBlazor.Charts.HeatMapCell.MudColor", new() { Name = "MudColor", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.Charts.HeatMapCell.Row", new() { Name = "Row", TypeName = "System.Int32", TypeFriendlyName = "int", }},
            { "MudBlazor.Charts.HeatMapCell.Value", new() { Name = "Value", TypeName = "System.Nullable`1[[System.Double, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "double?", }},
            { "MudBlazor.Charts.HeatMapCell.Width", new() { Name = "Width", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", }},
            { "MudBlazor.Charts.Legend.Data", new() { Name = "Data", TypeName = "System.Collections.Generic.List`1[[MudBlazor.SvgLegend, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "List<SvgLegend>", IsParameter = true, Summary = @"The data labels for this legend.", }},
            { "MudBlazor.Charts.Legend.MudChartParent", new() { Name = "MudChartParent", TypeName = "MudBlazor.MudChartBase", TypeFriendlyName = "MudChartBase", Summary = @"The chart, if any, containing this component.", }},
            { "MudBlazor.Charts.Line.MudChartParent", new() { Name = "MudChartParent", TypeName = "MudBlazor.MudChart", TypeFriendlyName = "MudChart", Summary = @"The chart, if any, containing this component.", }},
            { "MudBlazor.Charts.Pie.MudChartParent", new() { Name = "MudChartParent", TypeName = "MudBlazor.MudChart", TypeFriendlyName = "MudChart", Summary = @"The chart, if any, containing this component.", }},
            { "MudBlazor.Charts.StackedBar.MudChartParent", new() { Name = "MudChartParent", TypeName = "MudBlazor.MudChart", TypeFriendlyName = "MudChart", Summary = @"The chart, if any, containing this component.", }},
            { "MudBlazor.Charts.TimeSeries.MudChartParent", new() { Name = "MudChartParent", TypeName = "MudBlazor.MudTimeSeriesChartBase", TypeFriendlyName = "MudTimeSeriesChartBase", }},
            { "MudBlazor.ChartSeries.Data", new() { Name = "Data", TypeName = "System.Double[]", TypeFriendlyName = "double[]", Remarks = @"The number of values in this array is typically equal to the number of values in the <see cref=""T:MudBlazor.MudChart"" /> <c>XAxisLabels</c> property.", Summary = @"The values to display.", }},
            { "MudBlazor.ChartSeries.Index", new() { Name = "Index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The position of this series within a list.", }},
            { "MudBlazor.ChartSeries.Name", new() { Name = "Name", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The legend label for this series.", }},
            { "MudBlazor.ChartSeries.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Displays this series in the chart.", }},
            { "MudBlazor.Column`1.AggregateDefinition", new() { Name = "AggregateDefinition", TypeName = "", TypeFriendlyName = "AggregateDefinition<T>", IsParameter = true, Summary = @"The function which calculates aggregates for this column.", }},
            { "MudBlazor.Column`1.AggregateTemplate", new() { Name = "AggregateTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<IEnumerable<T>>", IsParameter = true, Summary = @"The template used to display this column's aggregate.", }},
            { "MudBlazor.Column`1.CellClass", new() { Name = "CellClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes to apply to the cell.", }},
            { "MudBlazor.Column`1.CellClassFunc", new() { Name = "CellClassFunc", TypeName = "", TypeFriendlyName = "Func<T, string>", IsParameter = true, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The function used to determine CSS classes for this cell.", }},
            { "MudBlazor.Column`1.CellStyle", new() { Name = "CellStyle", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The CSS styles to apply to this cell.", }},
            { "MudBlazor.Column`1.CellStyleFunc", new() { Name = "CellStyleFunc", TypeName = "", TypeFriendlyName = "Func<T, string>", IsParameter = true, Summary = @"The function which calculates CSS styles for this cell.", }},
            { "MudBlazor.Column`1.CellTemplate", new() { Name = "CellTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<CellContext<T>>", IsParameter = true, Summary = @"The template used to display this column's value cells.", }},
            { "MudBlazor.Column`1.Comparer", new() { Name = "Comparer", TypeName = "System.Collections.Generic.IComparer`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "IComparer<object>", IsParameter = true, Summary = @"The comparison used for values in this column.", }},
            { "MudBlazor.Column`1.Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""P:MudBlazor.MudDataGrid`1.Culture"" />.", Summary = @"The culture used to parse, filter, and display values in this column.", }},
            { "MudBlazor.Column`1.DataGrid", new() { Name = "DataGrid", TypeName = "", TypeFriendlyName = "MudDataGrid<T>", Summary = @"The data grid which owns this column.", }},
            { "MudBlazor.Column`1.DragAndDropEnabled", new() { Name = "DragAndDropEnabled", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.DragDropColumnReordering"" /> property.", Summary = @"Allows this column to be reordered via drag-and-drop operations.", }},
            { "MudBlazor.Column`1.Editable", new() { Name = "Editable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.", Summary = @"Allows editing for this cell.", }},
            { "MudBlazor.Column`1.EditTemplate", new() { Name = "EditTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<CellContext<T>>", IsParameter = true, Summary = @"The template for editing values in this cell.", }},
            { "MudBlazor.Column`1.EnableFooterSelection", new() { Name = "EnableFooterSelection", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Summary = @"Allows the footer to be selected.", }},
            { "MudBlazor.Column`1.Filterable", new() { Name = "Filterable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.Filterable"" /> property.", Summary = @"Allows filters to be used on this column.", }},
            { "MudBlazor.Column`1.FilterContext", new() { Name = "FilterContext", TypeName = "", TypeFriendlyName = "FilterContext<T>", Summary = @"The context used for filtering values in this column.", }},
            { "MudBlazor.Column`1.FilterOperators", new() { Name = "FilterOperators", TypeName = "System.Collections.Generic.HashSet`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "HashSet<string>", IsParameter = true, Summary = @"The operators to use for this column's filter.", }},
            { "MudBlazor.Column`1.FilterTemplate", new() { Name = "FilterTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<FilterContext<T>>", IsParameter = true, Summary = @"The template used to display this column's filter.", }},
            { "MudBlazor.Column`1.FooterClass", new() { Name = "FooterClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to this column's footer.", }},
            { "MudBlazor.Column`1.FooterClassFunc", new() { Name = "FooterClassFunc", TypeName = "", TypeFriendlyName = "Func<IEnumerable<T>, string>", IsParameter = true, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The function which calculates CSS classes for this column's footer.", }},
            { "MudBlazor.Column`1.FooterColSpan", new() { Name = "FooterColSpan", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Remarks = @"Defaults to <c>1</c>.", Summary = @"The number of columns spanned by this column in the footer.", }},
            { "MudBlazor.Column`1.FooterStyle", new() { Name = "FooterStyle", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The CSS styles to apply to this column's footer.", }},
            { "MudBlazor.Column`1.FooterStyleFunc", new() { Name = "FooterStyleFunc", TypeName = "", TypeFriendlyName = "Func<IEnumerable<T>, string>", IsParameter = true, Summary = @"The function which calculates CSS styles for this column's footer.", }},
            { "MudBlazor.Column`1.FooterTemplate", new() { Name = "FooterTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<FooterContext<T>>", IsParameter = true, Summary = @"The template used to display this column's footer.", }},
            { "MudBlazor.Column`1.Groupable", new() { Name = "Groupable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.Groupable"" /> property.", Summary = @"Allows values in this column to be grouped.", }},
            { "MudBlazor.Column`1.GroupBy", new() { Name = "GroupBy", TypeName = "", TypeFriendlyName = "Func<T, object>", IsParameter = true, Summary = @"The function which groups values in this column.", }},
            { "MudBlazor.Column`1.Grouping", new() { Name = "Grouping", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Summary = @"Indicates whether this column is currently grouped.", }},
            { "MudBlazor.Column`1.GroupTemplate", new() { Name = "GroupTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<GroupDefinition<T>>", IsParameter = true, Summary = @"The template used to display this column's grouping.", }},
            { "MudBlazor.Column`1.HeaderClass", new() { Name = "HeaderClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  Separate multiple classes with spaces.", Summary = @"The CSS class applied to the header.", }},
            { "MudBlazor.Column`1.HeaderClassFunc", new() { Name = "HeaderClassFunc", TypeName = "", TypeFriendlyName = "Func<IEnumerable<T>, string>", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  Separate multiple classes with spaces.", Summary = @"The function which calculates CSS classes for the header.", }},
            { "MudBlazor.Column`1.HeaderColSpan", new() { Name = "HeaderColSpan", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Remarks = @"Defaults to <c>1</c>.", Summary = @"The number of columns spanned by this column in the header.", }},
            { "MudBlazor.Column`1.HeaderStyle", new() { Name = "HeaderStyle", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The CSS style applied to this column's header.", }},
            { "MudBlazor.Column`1.HeaderStyleFunc", new() { Name = "HeaderStyleFunc", TypeName = "", TypeFriendlyName = "Func<IEnumerable<T>, string>", IsParameter = true, Summary = @"The function which calculates CSS styles for the header.", }},
            { "MudBlazor.Column`1.HeaderTemplate", new() { Name = "HeaderTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<HeaderContext<T>>", IsParameter = true, Summary = @"The template used to display this column's header.", }},
            { "MudBlazor.Column`1.Hidden", new() { Name = "Hidden", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides this column.", }},
            { "MudBlazor.Column`1.Hideable", new() { Name = "Hideable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.Hideable"" /> property.", Summary = @"Allows this column to be hidden.", }},
            { "MudBlazor.Column`1.HideSmall", new() { Name = "HideSmall", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides this column.", }},
            { "MudBlazor.Column`1.Identifier", new() { Name = "Identifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique identifier for this column.", }},
            { "MudBlazor.Column`1.InitialDirection", new() { Name = "InitialDirection", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.SortDirection.None"" />.", Summary = @"The sorting direction applied when <see cref=""P:MudBlazor.Column`1.Sortable"" /> is <c>true</c>.", }},
            { "MudBlazor.Column`1.PropertyName", new() { Name = "PropertyName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the property used for sorting this column's values.", }},
            { "MudBlazor.Column`1.Required", new() { Name = "Required", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.", Summary = @"Requires a value to be set.", }},
            { "MudBlazor.Column`1.Resizable", new() { Name = "Resizable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Summary = @"Allows this column's width to be changed.", }},
            { "MudBlazor.Column`1.ShowColumnOptions", new() { Name = "ShowColumnOptions", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.ShowColumnOptions"" /> property.", Summary = @"Shows options for this column.", }},
            { "MudBlazor.Column`1.ShowFilterIcon", new() { Name = "ShowFilterIcon", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.ShowFilterIcons"" /> property.", Summary = @"Shows the filter icon.", }},
            { "MudBlazor.Column`1.Sortable", new() { Name = "Sortable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.SortMode"" /> property.", Summary = @"Sorts values in this column.", }},
            { "MudBlazor.Column`1.SortBy", new() { Name = "SortBy", TypeName = "", TypeFriendlyName = "Func<T, object>", IsParameter = true, Summary = @"The function used to sort values in this column.", }},
            { "MudBlazor.Column`1.SortIcon", new() { Name = "SortIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The icon shown when <see cref=""P:MudBlazor.Column`1.Sortable"" /> is <c>true</c>.", }},
            { "MudBlazor.Column`1.StickyLeft", new() { Name = "StickyLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"When <c>true</c>, this column will be visible even as the container is scrolled horizontally.", Summary = @"Fixes this column to the left side.", }},
            { "MudBlazor.Column`1.StickyRight", new() { Name = "StickyRight", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"When <c>true</c>, this column will be visible even as the container is scrolled horizontally.", Summary = @"Fixes this column to the right side.", }},
            { "MudBlazor.Column`1.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The display text for this column.", }},
            { "MudBlazor.Column`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", IsParameter = true, Summary = @"The value stored in this column.", }},
            { "MudBlazor.CommonSnackbarOptions.BackgroundBlurred", new() { Name = "BackgroundBlurred", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.", Summary = @"Blurs the background of the snackbar.", }},
            { "MudBlazor.CommonSnackbarOptions.ErrorIcon", new() { Name = "ErrorIcon", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ErrorOutline"" />.", Summary = @"The icon displayed for <c>Error</c> severity snackbars.", }},
            { "MudBlazor.CommonSnackbarOptions.HideTransitionDuration", new() { Name = "HideTransitionDuration", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"Defaults to <c>2000</c> (two seconds).", Summary = @"The time, in milliseconds, to hide the snackbar.", }},
            { "MudBlazor.CommonSnackbarOptions.IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The default icon size for the snackbar.", }},
            { "MudBlazor.CommonSnackbarOptions.InfoIcon", new() { Name = "InfoIcon", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Outlined.Info"" />.", Summary = @"The icon displayed for <c>Info</c> severity snackbars.", }},
            { "MudBlazor.CommonSnackbarOptions.MaximumOpacity", new() { Name = "MaximumOpacity", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"Defaults to <c>95</c>.  The maximum value is <c>100</c>.", Summary = @"The maximum opacity for the snackbar.", }},
            { "MudBlazor.CommonSnackbarOptions.NormalIcon", new() { Name = "NormalIcon", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Outlined.EventNote"" />.", Summary = @"The icon displayed for <c>Normal</c> severity snackbars.", }},
            { "MudBlazor.CommonSnackbarOptions.RequireInteraction", new() { Name = "RequireInteraction", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows the snackbar until a user manually closes it.", }},
            { "MudBlazor.CommonSnackbarOptions.ShowCloseIcon", new() { Name = "ShowCloseIcon", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays a close icon for the snackbar.", }},
            { "MudBlazor.CommonSnackbarOptions.ShowTransitionDuration", new() { Name = "ShowTransitionDuration", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"Defaults to <c>1000</c> (one second).", Summary = @"The time, in milliseconds, to animate showing the snackbar.", }},
            { "MudBlazor.CommonSnackbarOptions.SnackbarVariant", new() { Name = "SnackbarVariant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Filled"" />.", Summary = @"The default display variant for the snackbar.", }},
            { "MudBlazor.CommonSnackbarOptions.SuccessIcon", new() { Name = "SuccessIcon", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Custom.Uncategorized.AlertSuccess"" />.", Summary = @"The icon displayed for <c>Success</c> severity snackbars.", }},
            { "MudBlazor.CommonSnackbarOptions.VisibleStateDuration", new() { Name = "VisibleStateDuration", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"Defaults to <c>5000</c> (five seconds).", Summary = @"The time, in milliseconds, to show the snackbar.", }},
            { "MudBlazor.CommonSnackbarOptions.WarningIcon", new() { Name = "WarningIcon", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Outlined.ReportProblem"" />.", Summary = @"The icon displayed for <c>Warning</c> severity snackbars.", }},
            { "MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageMarkupString.Message", new() { Name = "Message", TypeName = "Microsoft.AspNetCore.Components.MarkupString", TypeFriendlyName = "MarkupString", IsParameter = true, Remarks = @"This property allows you to pass an HTML-formatted message using <see cref=""T:Microsoft.AspNetCore.Components.MarkupString"" />.", Summary = @"Sets the message to be displayed as HTML content.", }},
            { "MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageRenderFragment.Message", new() { Name = "Message", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Remarks = @"This property allows you to define a custom UI using <see cref=""T:Microsoft.AspNetCore.Components.RenderFragment"" />. It can be used to pass in components, markup, or other content.", Summary = @"Sets the message to be rendered as a custom fragment of UI.", }},
            { "MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageText.Message", new() { Name = "Message", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"This property is used to pass a plain string message. It does not support HTML or UI fragments.", Summary = @"Gets or sets the plain text message to be displayed.", }},
            { "MudBlazor.Converter`1.Format", new() { Name = "Format", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Custom Format to be applied on bidirectional way.", }},
            { "MudBlazor.Converter`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format", new() { Name = "Format", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Custom Format to be applied on bidirectional way.", }},
            { "MudBlazor.Converter`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format", new() { Name = "Format", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Custom Format to be applied on bidirectional way.", }},
            { "MudBlazor.Converter`2.Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Summary = @"The culture info being used for decimal points, date and time format, etc.", }},
            { "MudBlazor.Converter`2.GetError", new() { Name = "GetError", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Converter`2.GetErrorMessage", new() { Name = "GetErrorMessage", TypeName = "System.Nullable`1[[System.ValueTuple`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Nullable<ValueTuple<string, Object[]>>", }},
            { "MudBlazor.Converter`2.GetFunc", new() { Name = "GetFunc", TypeName = "", TypeFriendlyName = "Func<bool?, T>", }},
            { "MudBlazor.Converter`2.OnError", new() { Name = "OnError", TypeName = "System.Action`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Action<string, Object[]>", }},
            { "MudBlazor.Converter`2.SetError", new() { Name = "SetError", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Converter`2.SetErrorMessage", new() { Name = "SetErrorMessage", TypeName = "System.Nullable`1[[System.ValueTuple`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Nullable<ValueTuple<string, Object[]>>", }},
            { "MudBlazor.Converter`2.SetFunc", new() { Name = "SetFunc", TypeName = "", TypeFriendlyName = "Func<T, bool?>", }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Summary = @"The culture info being used for decimal points, date and time format, etc.", }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetError", new() { Name = "GetError", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorMessage", new() { Name = "GetErrorMessage", TypeName = "System.Nullable`1[[System.ValueTuple`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Nullable<ValueTuple<string, Object[]>>", }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetFunc", new() { Name = "GetFunc", TypeName = "System.Func`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<string, DateTime>", }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnError", new() { Name = "OnError", TypeName = "System.Action`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Action<string, Object[]>", }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetError", new() { Name = "SetError", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetErrorMessage", new() { Name = "SetErrorMessage", TypeName = "System.Nullable`1[[System.ValueTuple`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Nullable<ValueTuple<string, Object[]>>", }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFunc", new() { Name = "SetFunc", TypeName = "System.Func`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<DateTime, string>", }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Summary = @"The culture info being used for decimal points, date and time format, etc.", }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetError", new() { Name = "GetError", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorMessage", new() { Name = "GetErrorMessage", TypeName = "System.Nullable`1[[System.ValueTuple`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Nullable<ValueTuple<string, Object[]>>", }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetFunc", new() { Name = "GetFunc", TypeName = "System.Func`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<string, DateTime?>", }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnError", new() { Name = "OnError", TypeName = "System.Action`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Action<string, Object[]>", }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetError", new() { Name = "SetError", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetErrorMessage", new() { Name = "SetErrorMessage", TypeName = "System.Nullable`1[[System.ValueTuple`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Nullable<ValueTuple<string, Object[]>>", }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFunc", new() { Name = "SetFunc", TypeName = "System.Func`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<DateTime?, string>", }},
            { "MudBlazor.Converters.DefaultCulture", new() { Name = "DefaultCulture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", }},
            { "MudBlazor.Converters.IsoDate", new() { Name = "IsoDate", TypeName = "MudBlazor.Converter`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<DateTime>", }},
            { "MudBlazor.Converters.NullableIsoDate", new() { Name = "NullableIsoDate", TypeName = "MudBlazor.Converter`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<DateTime?>", }},
            { "MudBlazor.DataGridRowClickEventArgs`1.Item", new() { Name = "Item", TypeName = "", TypeFriendlyName = "T", Summary = @"The item which was clicked.", }},
            { "MudBlazor.DataGridRowClickEventArgs`1.MouseEventArgs", new() { Name = "MouseEventArgs", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", Summary = @"The coordinates of the pointer for this click.", }},
            { "MudBlazor.DataGridRowClickEventArgs`1.RowIndex", new() { Name = "RowIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the row.", }},
            { "MudBlazor.DataGridRowValidator.Errors", new() { Name = "Errors", TypeName = "System.String[]", TypeFriendlyName = "string[]", Summary = @"Any validation errors for this row.", }},
            { "MudBlazor.DataGridRowValidator.IsValid", new() { Name = "IsValid", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates whether the row is valid.", }},
            { "MudBlazor.DataGridRowValidator.Model", new() { Name = "Model", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The data to validate for this row.", }},
            { "MudBlazor.DateConverter.DateFormat", new() { Name = "DateFormat", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.DefaultConverter`1.DefaultTimeSpanFormat", new() { Name = "DefaultTimeSpanFormat", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.DefaultLocalizationInterceptor.IgnoreDefaultEnglish", new() { Name = "IgnoreDefaultEnglish", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Gets or sets a value indicating whether to ignore default English translations.", }},
            { "MudBlazor.DialogOptions.BackdropClick", new() { Name = "BackdropClick", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Remarks = @"Defaults to <c>true</c>.", Summary = @"Allows closing the dialog by clicking outside of the dialog.", }},
            { "MudBlazor.DialogOptions.BackgroundClass", new() { Name = "BackgroundClass", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The custom CSS classes to apply to the dialog background.", }},
            { "MudBlazor.DialogOptions.CloseButton", new() { Name = "CloseButton", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows a close button in the top-right corner of the dialog.", }},
            { "MudBlazor.DialogOptions.CloseOnEscapeKey", new() { Name = "CloseOnEscapeKey", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Summary = @"Allows closing the dialog by pressing the Escape key.", }},
            { "MudBlazor.DialogOptions.EqualityContract", new() { Name = "EqualityContract", TypeName = "System.Type", TypeFriendlyName = "Type", IsProtected = true, }},
            { "MudBlazor.DialogOptions.FullScreen", new() { Name = "FullScreen", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Remarks = @"Defaults to <c>false</c>.", Summary = @"Sets the size of the dialog to the entire screen.", }},
            { "MudBlazor.DialogOptions.FullWidth", new() { Name = "FullWidth", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Remarks = @"Defaults to <c>false</c>.", Summary = @"Sets the width of the dialog to the width of the screen.", }},
            { "MudBlazor.DialogOptions.MaxWidth", new() { Name = "MaxWidth", TypeName = "System.Nullable`1[[MudBlazor.MaxWidth, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "MaxWidth?", Remarks = @"Defaults to <c>null</c>.", Summary = @"The maximum allowed width of the dialog.", }},
            { "MudBlazor.DialogOptions.NoHeader", new() { Name = "NoHeader", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the dialog header.", }},
            { "MudBlazor.DialogOptions.Position", new() { Name = "Position", TypeName = "System.Nullable`1[[MudBlazor.DialogPosition, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "DialogPosition?", Remarks = @"Defaults to <c>null</c>.", Summary = @"The location of the dialog.", }},
            { "MudBlazor.DialogParameters.Count", new() { Name = "Count", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The number of parameters.", }},
            { "MudBlazor.DialogParameters.Item", new() { Name = "Item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"Gets or sets a parameter.", }},
            { "MudBlazor.DialogReference.Dialog", new() { Name = "Dialog", TypeName = "System.Object", TypeFriendlyName = "object", }},
            { "MudBlazor.DialogReference.Id", new() { Name = "Id", TypeName = "System.Guid", TypeFriendlyName = "Guid", }},
            { "MudBlazor.DialogReference.RenderFragment", new() { Name = "RenderFragment", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", }},
            { "MudBlazor.DialogReference.Result", new() { Name = "Result", TypeName = "System.Threading.Tasks.Task`1[[MudBlazor.DialogResult, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Task<DialogResult>", }},
            { "MudBlazor.DialogResult.Canceled", new() { Name = "Canceled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates whether the user clicked a cancel button.", }},
            { "MudBlazor.DialogResult.Data", new() { Name = "Data", TypeName = "System.Object", TypeFriendlyName = "object", Remarks = @"This value is typically a custom object related to the dialog, such as the object which will be affected by the user's response.", Summary = @"The data included with the result.", }},
            { "MudBlazor.DialogResult.DataType", new() { Name = "DataType", TypeName = "System.Type", TypeFriendlyName = "Type", Summary = @"The type of object in the <see cref=""P:MudBlazor.DialogResult.Data"" /> property.", }},
            { "MudBlazor.DropdownSettings.Fixed", new() { Name = "Fixed", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the dropdown popover in a fixed position, even while scrolling.", }},
            { "MudBlazor.DropdownSettings.OverflowBehavior", new() { Name = "OverflowBehavior", TypeName = "MudBlazor.OverflowBehavior", TypeFriendlyName = "OverflowBehavior", Remarks = @"Defaults to <see cref=""F:MudBlazor.OverflowBehavior.FlipOnOpen"" />.", Summary = @"The behavior applied when there is not enough space for the dropdown popover to be visible.", }},
            { "MudBlazor.EditButtonContext.ButtonAction", new() { Name = "ButtonAction", TypeName = "System.Action", TypeFriendlyName = "Action", Summary = @"The action which occurs when the edit button is clicked.", }},
            { "MudBlazor.EditButtonContext.ButtonDisabled", new() { Name = "ButtonDisabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Prevents the user from clicking the button.", }},
            { "MudBlazor.EditButtonContext.Item", new() { Name = "Item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The item being edited.", }},
            { "MudBlazor.FieldType.InnerType", new() { Name = "InnerType", TypeName = "System.Type", TypeFriendlyName = "Type", Summary = @"The type to examine.", }},
            { "MudBlazor.FieldType.IsBoolean", new() { Name = "IsBoolean", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the <see cref=""P:MudBlazor.FieldType.InnerType"" /> represents a true/false value.", }},
            { "MudBlazor.FieldType.IsDateTime", new() { Name = "IsDateTime", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the <see cref=""P:MudBlazor.FieldType.InnerType"" /> represents a date and time.", }},
            { "MudBlazor.FieldType.IsEnum", new() { Name = "IsEnum", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the <see cref=""P:MudBlazor.FieldType.InnerType"" /> represents an enumeration.", }},
            { "MudBlazor.FieldType.IsGuid", new() { Name = "IsGuid", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the <see cref=""P:MudBlazor.FieldType.InnerType"" /> represents a <see cref=""T:System.Guid"" /> value.", }},
            { "MudBlazor.FieldType.IsNumber", new() { Name = "IsNumber", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the <see cref=""P:MudBlazor.FieldType.InnerType"" /> represents a number.", }},
            { "MudBlazor.FieldType.IsString", new() { Name = "IsString", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the <see cref=""P:MudBlazor.FieldType.InnerType"" /> represents a string.", }},
            { "MudBlazor.FilterContext`1.Actions", new() { Name = "Actions", TypeName = "", TypeFriendlyName = "FilterActio<T>", Summary = @"The behaviors which occur when filters are applied or cleared.", }},
            { "MudBlazor.FilterContext`1.FilterDefinition", new() { Name = "FilterDefinition", TypeName = "", TypeFriendlyName = "IFilterDefinition<T>", Summary = @"The definition of this filter.", }},
            { "MudBlazor.FilterContext`1.FilterDefinitions", new() { Name = "FilterDefinitions", TypeName = "", TypeFriendlyName = "List<IFilterDefinition<T>>", Summary = @"The definitions of all filters in the grid.", }},
            { "MudBlazor.FilterContext`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Summary = @"The items to filter.", }},
            { "MudBlazor.FilterContext`1+FilterActions.ApplyFilterAsync", new() { Name = "ApplyFilterAsync", TypeName = "", TypeFriendlyName = "Func<IFilterDefinition<T>, Task>", Summary = @"The function which applies a single filter.", }},
            { "MudBlazor.FilterContext`1+FilterActions.ApplyFiltersAsync", new() { Name = "ApplyFiltersAsync", TypeName = "", TypeFriendlyName = "Func<IEnumerable<IFilterDefinition<T>>, Task>", Summary = @"The function which applies multiple filters.", }},
            { "MudBlazor.FilterContext`1+FilterActions.ClearFilterAsync", new() { Name = "ClearFilterAsync", TypeName = "", TypeFriendlyName = "Func<IFilterDefinition<T>, Task>", Summary = @"The function which clears a single filter.", }},
            { "MudBlazor.FilterContext`1+FilterActions.ClearFiltersAsync", new() { Name = "ClearFiltersAsync", TypeName = "", TypeFriendlyName = "Func<IEnumerable<IFilterDefinition<T>>, Task>", Summary = @"The function which clears multiple filters.", }},
            { "MudBlazor.FilterDefinition`1.Column", new() { Name = "Column", TypeName = "", TypeFriendlyName = "Column<T>", }},
            { "MudBlazor.FilterDefinition`1.FieldType", new() { Name = "FieldType", TypeName = "MudBlazor.FieldType", TypeFriendlyName = "FieldType", Summary = @"The type of column being filtered.", }},
            { "MudBlazor.FilterDefinition`1.FilterFunction", new() { Name = "FilterFunction", TypeName = "", TypeFriendlyName = "Func<T, bool>", Summary = @"The function which performs the filter.", }},
            { "MudBlazor.FilterDefinition`1.Id", new() { Name = "Id", TypeName = "System.Guid", TypeFriendlyName = "Guid", }},
            { "MudBlazor.FilterDefinition`1.Operator", new() { Name = "Operator", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.FilterDefinition`1.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.FilterDefinition`1.Value", new() { Name = "Value", TypeName = "System.Object", TypeFriendlyName = "object", }},
            { "MudBlazor.FilterHeaderCell`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this filter cell.", }},
            { "MudBlazor.FilterHeaderCell`1.Column", new() { Name = "Column", TypeName = "", TypeFriendlyName = "Column<T>", IsParameter = true, Summary = @"The column associated with this filter cell.", }},
            { "MudBlazor.FilterHeaderCell`1.DataGrid", new() { Name = "DataGrid", TypeName = "", TypeFriendlyName = "MudDataGrid<T>", Summary = @"The <see cref=""T:MudBlazor.MudDataGrid`1"" /> containing this filter cell.", }},
            { "MudBlazor.FilterOptions.Default", new() { Name = "Default", TypeName = "MudBlazor.FilterOptions", TypeFriendlyName = "FilterOptions", Summary = @"The default options applied when no options are given.", }},
            { "MudBlazor.FilterOptions.FilterCaseSensitivity", new() { Name = "FilterCaseSensitivity", TypeName = "MudBlazor.DataGridFilterCaseSensitivity", TypeFriendlyName = "DataGridFilterCaseSensitivity", Remarks = @"Defaults to <see cref=""F:MudBlazor.DataGridFilterCaseSensitivity.Default"" />.", Summary = @"The case sensitivity to apply for filters on <c>string</c> columns.", }},
            { "MudBlazor.FooterCell`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this footer cell.", }},
            { "MudBlazor.FooterCell`1.Column", new() { Name = "Column", TypeName = "", TypeFriendlyName = "Column<T>", IsParameter = true, Summary = @"The column related to this footer cell.", }},
            { "MudBlazor.FooterCell`1.CurrentItems", new() { Name = "CurrentItems", TypeName = "", TypeFriendlyName = "IEnumerable<T>", IsParameter = true, Summary = @"The current values related to this footer cell.", }},
            { "MudBlazor.FooterCell`1.DataGrid", new() { Name = "DataGrid", TypeName = "", TypeFriendlyName = "MudDataGrid<T>", Summary = @"The <see cref=""T:MudBlazor.MudDataGrid`1"" /> which contains this footer cell.", }},
            { "MudBlazor.FooterContext`1.Actions", new() { Name = "Actions", TypeName = "", TypeFriendlyName = "FooterActio<T>", Summary = @"The behaviors which can be performed on this footer.", }},
            { "MudBlazor.FooterContext`1.IsAllSelected", new() { Name = "IsAllSelected", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Summary = @"Indicates whether all values are currently selected.", }},
            { "MudBlazor.FooterContext`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Summary = @"The items which apply to the footer.", }},
            { "MudBlazor.FooterContext`1+FooterActions.SetSelectAllAsync", new() { Name = "SetSelectAllAsync", TypeName = "System.Func`2[[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<bool?, Task>", Summary = @"The function which selects all values.", }},
            { "MudBlazor.GridData`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Summary = @"The items to display in the grid.", }},
            { "MudBlazor.GridData`1.TotalItems", new() { Name = "TotalItems", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"This property is used to determine the number of pages of data.", Summary = @"The total number of items, excluding page size.", }},
            { "MudBlazor.GridState`1.FilterDefinitions", new() { Name = "FilterDefinitions", TypeName = "", TypeFriendlyName = "ICollection<IFilterDefinition<T>>", Summary = @"The current filters applied to grid values.", }},
            { "MudBlazor.GridState`1.Page", new() { Name = "Page", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The current page being displayed. The page index is zero-based.", }},
            { "MudBlazor.GridState`1.PageSize", new() { Name = "PageSize", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The maximum number of items displayed on each page.", }},
            { "MudBlazor.GridState`1.SortDefinitions", new() { Name = "SortDefinitions", TypeName = "", TypeFriendlyName = "ICollection<SortDefinition<T>>", Summary = @"The current sorting applied to grid values.", }},
            { "MudBlazor.GridStateVirtualize`1.Count", new() { Name = "Count", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The requested number of items to be provided. The actual number of provided items does not need to matchthis value.", }},
            { "MudBlazor.GridStateVirtualize`1.FilterDefinitions", new() { Name = "FilterDefinitions", TypeName = "", TypeFriendlyName = "IReadOnlyCollection<IFilterDefinition<T>>", Summary = @"The current filters applied to grid values.", }},
            { "MudBlazor.GridStateVirtualize`1.SortDefinitions", new() { Name = "SortDefinitions", TypeName = "", TypeFriendlyName = "IReadOnlyCollection<SortDefinition<T>>", Summary = @"The current sorting applied to grid values.", }},
            { "MudBlazor.GridStateVirtualize`1.StartIndex", new() { Name = "StartIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The zero-based index of the first item to be supplied.", }},
            { "MudBlazor.GroupDefinition`1.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>False</c>.", Summary = @"Expands this group.", }},
            { "MudBlazor.GroupDefinition`1.Grouping", new() { Name = "Grouping", TypeName = "", TypeFriendlyName = "IGrouping<object, T>", Summary = @"The LINQ definition of the grouping.", }},
            { "MudBlazor.HeaderCell`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this header cell.", }},
            { "MudBlazor.HeaderCell`1.Column", new() { Name = "Column", TypeName = "", TypeFriendlyName = "Column<T>", IsParameter = true, Summary = @"The column associated with this header cell.", }},
            { "MudBlazor.HeaderCell`1.DataGrid", new() { Name = "DataGrid", TypeName = "", TypeFriendlyName = "MudDataGrid<T>", Summary = @"The <see cref=""T:MudBlazor.MudDataGrid`1"" /> which contains this header cell.", }},
            { "MudBlazor.HeaderCell`1.IsOnlyHeader", new() { Name = "IsOnlyHeader", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the header cell display in the header area and will not display cells with data like a normal column.  This property is set automatically when adding a header to the grid manually.", Summary = @"Shows this cell only in the header area.", }},
            { "MudBlazor.HeaderCell`1.SortDirection", new() { Name = "SortDirection", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.SortDirection.None"" />.", Summary = @"The direction to sort values in this column.", }},
            { "MudBlazor.HeaderCell`1.Width", new() { Name = "Width", TypeName = "System.Nullable`1[[System.Double, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "double?", Remarks = @"Defaults to <c>null</c>.", Summary = @"The width for this header cell, in pixels.", }},
            { "MudBlazor.HeaderContext`1.Actions", new() { Name = "Actions", TypeName = "", TypeFriendlyName = "HeaderActio<T>", Summary = @"The behaviors which are allowed for this header.", }},
            { "MudBlazor.HeaderContext`1.IsAllSelected", new() { Name = "IsAllSelected", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Summary = @"Indicates whether all items are currently selected.", }},
            { "MudBlazor.HeaderContext`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Summary = @"The items to apply to the header.", }},
            { "MudBlazor.HeaderContext`1+HeaderActions.SetSelectAllAsync", new() { Name = "SetSelectAllAsync", TypeName = "System.Func`2[[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<bool?, Task>", Summary = @"The function which selects all items.", }},
            { "MudBlazor.HierarchyColumn`1.ButtonDisabledFunc", new() { Name = "ButtonDisabledFunc", TypeName = "", TypeFriendlyName = "Func<T, bool>", IsParameter = true, Summary = @"The function which determines whether buttons are disabled.", }},
            { "MudBlazor.HierarchyColumn`1.ClosedIcon", new() { Name = "ClosedIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ChevronRight"" />.", Summary = @"The icon to display for the close button.", }},
            { "MudBlazor.HierarchyColumn`1.DragAndDropEnabled", new() { Name = "DragAndDropEnabled", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>. When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.DragDropColumnReordering"" /> property.", Summary = @"Allows this column to be reordered via drag-and-drop operations.", }},
            { "MudBlazor.HierarchyColumn`1.Hidden", new() { Name = "Hidden", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides this column.", }},
            { "MudBlazor.HierarchyColumn`1.Hideable", new() { Name = "Hideable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.Hideable"" /> property.", Summary = @"Allows this column to be hidden.", }},
            { "MudBlazor.HierarchyColumn`1.IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", IsParameter = true, Summary = @"The size of the open and close icons.", }},
            { "MudBlazor.HierarchyColumn`1.InitiallyExpandedFunc", new() { Name = "InitiallyExpandedFunc", TypeName = "", TypeFriendlyName = "Func<T, bool>", IsParameter = true, Remarks = @"This function takes an item of type <typeparamref name=""T"" /> as input and returns a boolean indicatingwhether the row should be expanded.Defaults to a function that always returns <c>false</c>.", Summary = @"The function which determines whether the row should be initially expanded.", }},
            { "MudBlazor.HierarchyColumn`1.OpenIcon", new() { Name = "OpenIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ExpandMore"" />.", Summary = @"The icon to display for the open button.", }},
            { "MudBlazor.Internal.MudInputAdornment.AriaLabel", new() { Name = "AriaLabel", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"More information on accessible names can be found <see href=""https://developer.mozilla.org/docs/Glossary/Accessible_name"">here</see>.", Summary = @"The accessible name for this adornment.", }},
            { "MudBlazor.Internal.MudInputAdornment.Class", new() { Name = "Class", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Multiple classes must be separate by spaces.", Summary = @"The CSS classes for this adornment.", }},
            { "MudBlazor.Internal.MudInputAdornment.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.Internal.MudInputAdornment.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the icon button.", }},
            { "MudBlazor.Internal.MudInputAdornment.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The icon for this adornment.", }},
            { "MudBlazor.Internal.MudInputAdornment.Placement", new() { Name = "Placement", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Adornment.None"" />.", Summary = @"Specifies the position of the adornment within the field.", }},
            { "MudBlazor.Internal.MudInputAdornment.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the icon.", }},
            { "MudBlazor.Internal.MudInputAdornment.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The text for this adornment.", }},
            { "MudBlazor.Interop.BoundingClientRect.AbsoluteBottom", new() { Name = "AbsoluteBottom", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.AbsoluteLeft", new() { Name = "AbsoluteLeft", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.AbsoluteRight", new() { Name = "AbsoluteRight", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.AbsoluteTop", new() { Name = "AbsoluteTop", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.Bottom", new() { Name = "Bottom", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.Height", new() { Name = "Height", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.IsOutsideBottom", new() { Name = "IsOutsideBottom", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Interop.BoundingClientRect.IsOutsideLeft", new() { Name = "IsOutsideLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Interop.BoundingClientRect.IsOutsideRight", new() { Name = "IsOutsideRight", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Interop.BoundingClientRect.IsOutsideTop", new() { Name = "IsOutsideTop", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Interop.BoundingClientRect.Left", new() { Name = "Left", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.Right", new() { Name = "Right", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.ScrollX", new() { Name = "ScrollX", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"the horizontal offset since the left of the page", }},
            { "MudBlazor.Interop.BoundingClientRect.ScrollY", new() { Name = "ScrollY", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"the vertical offset since the top of the page", }},
            { "MudBlazor.Interop.BoundingClientRect.Top", new() { Name = "Top", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.Width", new() { Name = "Width", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.WindowHeight", new() { Name = "WindowHeight", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"height of the viewport", }},
            { "MudBlazor.Interop.BoundingClientRect.WindowWidth", new() { Name = "WindowWidth", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"width of the viewport", }},
            { "MudBlazor.Interop.BoundingClientRect.X", new() { Name = "X", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.Interop.BoundingClientRect.Y", new() { Name = "Y", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.LayoutProperties.AppbarHeight", new() { Name = "AppbarHeight", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the height of the appbar.", }},
            { "MudBlazor.LayoutProperties.DefaultBorderRadius", new() { Name = "DefaultBorderRadius", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the default border radius.", }},
            { "MudBlazor.LayoutProperties.DrawerMiniWidthLeft", new() { Name = "DrawerMiniWidthLeft", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the width of the mini drawer on the left side.", }},
            { "MudBlazor.LayoutProperties.DrawerMiniWidthRight", new() { Name = "DrawerMiniWidthRight", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the width of the mini drawer on the right side.", }},
            { "MudBlazor.LayoutProperties.DrawerWidthLeft", new() { Name = "DrawerWidthLeft", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the width of the drawer on the left side.", }},
            { "MudBlazor.LayoutProperties.DrawerWidthRight", new() { Name = "DrawerWidthRight", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the width of the drawer on the right side.", }},
            { "MudBlazor.MaskChar.Char", new() { Name = "Char", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"The character to use in the mask.", }},
            { "MudBlazor.MaskChar.Regex", new() { Name = "Regex", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The regular expression defining allowed characters.", }},
            { "MudBlazor.MaskOption.Id", new() { Name = "Id", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique name for this mask.", }},
            { "MudBlazor.MaskOption.Mask", new() { Name = "Mask", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The mask characters defining this mask.", }},
            { "MudBlazor.MaskOption.Regex", new() { Name = "Regex", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The regular expression which, when matched, causes this mask to be used.", }},
            { "MudBlazor.MessageBoxOptions.CancelText", new() { Name = "CancelText", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <c>null</c>.  When <c>null</c>, this button will be hidden.", Summary = @"The default label of the cancel button.", }},
            { "MudBlazor.MessageBoxOptions.MarkupMessage", new() { Name = "MarkupMessage", TypeName = "Microsoft.AspNetCore.Components.MarkupString", TypeFriendlyName = "MarkupString", Summary = @"The main HTML content of the message box.", }},
            { "MudBlazor.MessageBoxOptions.Message", new() { Name = "Message", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The main content of the message box.", }},
            { "MudBlazor.MessageBoxOptions.NoText", new() { Name = "NoText", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <c>null</c>.  When <c>null</c>, this button will be hidden.", Summary = @"The default label of the No button.", }},
            { "MudBlazor.MessageBoxOptions.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text at the top of the message box.", }},
            { "MudBlazor.MessageBoxOptions.YesText", new() { Name = "YesText", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <c>OK</c>.  When <c>null</c>, this button will be hidden.", Summary = @"The default label of the Yes button.", }},
            { "MudBlazor.MudAlert.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property allows for custom content to displayed inside of the alert, but it is not required.", Summary = @"Gets or sets the content within the alert.", }},
            { "MudBlazor.MudAlert.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAlert.ClassPosition", new() { Name = "ClassPosition", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAlert.CloseIcon", new() { Name = "CloseIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Close"" />. This icon is only displayed when the <see cref=""P:MudBlazor.MudAlert.ShowCloseIcon"" /> property is <c>true</c>.", Summary = @"Gets or sets the icon used for the close button.", }},
            { "MudBlazor.MudAlert.ContentAlignment", new() { Name = "ContentAlignment", TypeName = "MudBlazor.HorizontalAlignment", TypeFriendlyName = "HorizontalAlignment", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.HorizontalAlignment.Left"" />.", Summary = @"Gets or sets the position of the text to the start (Left in LTR and right in RTL).", }},
            { "MudBlazor.MudAlert.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Gets or sets whether compact padding will be used.", }},
            { "MudBlazor.MudAlert.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>0</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"Gets or sets the size of the drop shadow.", }},
            { "MudBlazor.MudAlert.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  When set, the custom icon will be displayed.  Otherwise, the icon will depend on the <see cref=""P:MudBlazor.MudAlert.Severity"" /> property.", Summary = @"Gets or sets the icon displayed for this alert.", }},
            { "MudBlazor.MudAlert.NoIcon", new() { Name = "NoIcon", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  To customize the icon, use the <see cref=""P:MudBlazor.MudAlert.Icon"" /> property.", Summary = @"Gets or sets whether no icon is displayed.", }},
            { "MudBlazor.MudAlert.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudAlert.Severity", new() { Name = "Severity", TypeName = "MudBlazor.Severity", TypeFriendlyName = "Severity", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"The severity determines the color and icon used.", Summary = @"Gets or sets the severity of the alert.", }},
            { "MudBlazor.MudAlert.ShowCloseIcon", new() { Name = "ShowCloseIcon", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"To customize which icon is displayed for the close icon, set the <see cref=""P:MudBlazor.MudAlert.CloseIcon"" /> property.", Summary = @"Gets or sets whether a close icon is displayed.", }},
            { "MudBlazor.MudAlert.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />", Summary = @"Gets or sets whether rounded corners are disabled.", }},
            { "MudBlazor.MudAlert.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />. The variant changes the appearance of the alert, such as <c>Text</c>, <c>Outlined</c>, or <c>Filled</c>.", Summary = @"Gets or sets the display variant to use.", }},
            { "MudBlazor.MudAppBar.Bottom", new() { Name = "Bottom", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Places the appbar at the bottom of the screen instead of the top.", }},
            { "MudBlazor.MudAppBar.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudAppBar.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAppBar.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Theme colors are supported.", Summary = @"The color of this appbar.", }},
            { "MudBlazor.MudAppBar.Contextual", new() { Name = "Contextual", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>. When <c>true</c>, can be overridden by <see cref=""T:MudBlazor.MudContextualActionBar"" />", Summary = @"Allows the app bar to be overridden with page specific actions", }},
            { "MudBlazor.MudAppBar.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact padding.", }},
            { "MudBlazor.MudAppBar.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>4</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudAppBar.Fixed", new() { Name = "Fixed", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  When <c>false</c>, the appbar will scroll with other page content.", Summary = @"Fixes this appbar in place as the page is scrolled.", }},
            { "MudBlazor.MudAppBar.Gutters", new() { Name = "Gutters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Adds left and right padding to this appbar.", }},
            { "MudBlazor.MudAppBar.ToolBarClass", new() { Name = "ToolBarClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  You can use spaces to separate multiple classes.", Summary = @"The CSS classes applied to the nested toolbar.", }},
            { "MudBlazor.MudAppBar.ToolBarClassname", new() { Name = "ToolBarClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAppBar.WrapContent", new() { Name = "WrapContent", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows appbar content to wrap.", }},
            { "MudBlazor.MudAutocomplete`1.AfterItemsTemplate", new() { Name = "AfterItemsTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudAutocomplete`1.BeforeItemsTemplate"" /> property to control content displayed above items.", Summary = @"The custom template shown below the list of items, if <see cref=""P:MudBlazor.MudAutocomplete`1.SearchFunc"" /> returns items to display.  Otherwise, the fragment is hidden.", }},
            { "MudBlazor.MudAutocomplete`1.AnchorOrigin", new() { Name = "AnchorOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.BottomLeft"" />.", Summary = @"The location where the popover will open from.", }},
            { "MudBlazor.MudAutocomplete`1.AutocompleteClassname", new() { Name = "AutocompleteClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAutocomplete`1.BeforeItemsTemplate", new() { Name = "BeforeItemsTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudAutocomplete`1.AfterItemsTemplate"" /> property to control content displayed below items.", Summary = @"The custom template shown above the list of items, if <see cref=""P:MudBlazor.MudAutocomplete`1.SearchFunc"" /> returns items to display.  Otherwise, the fragment is hidden.", }},
            { "MudBlazor.MudAutocomplete`1.CircularProgressClassname", new() { Name = "CircularProgressClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAutocomplete`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAutocomplete`1.Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, an icon is displayed which, when clicked, clears the Text and Value.  Use the <c>ClearIcon</c> property to control the Clear button icon.", Summary = @"Displays the Clear icon button.", }},
            { "MudBlazor.MudAutocomplete`1.ClearIcon", new() { Name = "ClearIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Custom clear icon when <see cref=""P:MudBlazor.MudAutocomplete`1.Clearable"" /> is enabled.", }},
            { "MudBlazor.MudAutocomplete`1.CloseIcon", new() { Name = "CloseIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ArrowDropDown"" />.", Summary = @"The ""close"" Autocomplete icon.", }},
            { "MudBlazor.MudAutocomplete`1.CoerceText", new() { Name = "CoerceText", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  When <c>true</c>, selecting a value will update the Text property.  When <c>false</c>, incomplete values for Text are allowed.", Summary = @"Overrides the <c>Text</c> property when an item is selected.", }},
            { "MudBlazor.MudAutocomplete`1.CoerceValue", new() { Name = "CoerceValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the user input will be applied to the Value property which allows it to be validated and show an error message.", Summary = @"Sets the <c>Value</c> property even if no match is found by <see cref=""P:MudBlazor.MudAutocomplete`1.SearchFunc"" />.", }},
            { "MudBlazor.MudAutocomplete`1.DebounceInterval", new() { Name = "DebounceInterval", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>100</c>.  A higher value can help reduce the number of calls to <see cref=""P:MudBlazor.MudAutocomplete`1.SearchFunc"" />, which can improve responsiveness.", Summary = @"The debounce interval, in milliseconds.", }},
            { "MudBlazor.MudAutocomplete`1.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact padding.", }},
            { "MudBlazor.MudAutocomplete`1.DropdownSettings", new() { Name = "DropdownSettings", TypeName = "MudBlazor.DropdownSettings", TypeFriendlyName = "DropdownSettings", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""P:MudBlazor.DropdownSettings.Fixed"" /> falseDefaults to <see cref=""P:MudBlazor.DropdownSettings.OverflowBehavior"" /> <see cref=""F:MudBlazor.OverflowBehavior.FlipOnOpen"" />", Summary = @"The behavior of the dropdown popover menu", }},
            { "MudBlazor.MudAutocomplete`1.InputClass", new() { Name = "InputClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Input's classnames, separated by space.", }},
            { "MudBlazor.MudAutocomplete`1.InputClassname", new() { Name = "InputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAutocomplete`1.ItemDisabledFunc", new() { Name = "ItemDisabledFunc", TypeName = "", TypeFriendlyName = "Func<T, bool>", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.", Summary = @"The function used to determine if an item should be disabled.", }},
            { "MudBlazor.MudAutocomplete`1.ItemDisabledTemplate", new() { Name = "ItemDisabledTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.", Summary = @"The custom template used to display disabled items.", }},
            { "MudBlazor.MudAutocomplete`1.ItemSelectedTemplate", new() { Name = "ItemSelectedTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudAutocomplete`1.ItemTemplate"" /> property to control the display of unselected items.", Summary = @"The custom template used to display selected items.", }},
            { "MudBlazor.MudAutocomplete`1.ItemTemplate", new() { Name = "ItemTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudAutocomplete`1.ItemSelectedTemplate"" /> property to control the display of selected items.", Summary = @"The custom template used to display unselected items.", }},
            { "MudBlazor.MudAutocomplete`1.ListClass", new() { Name = "ListClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>null</c>.  You can use spaces to separate multiple classes.", Summary = @"The CSS classes applied to the internal list.", }},
            { "MudBlazor.MudAutocomplete`1.ListItemClass", new() { Name = "ListItemClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>null</c>.  You can use spaces to separate multiple classes.", Summary = @"The CSS classes applied to internal list items.", }},
            { "MudBlazor.MudAutocomplete`1.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>300</c>.", Summary = @"The maximum height, in pixels, of the Autocomplete when it is open.", }},
            { "MudBlazor.MudAutocomplete`1.MaxItems", new() { Name = "MaxItems", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>10</c>.  A value of <c>null</c> will display all items.", Summary = @"The maximum number of items to display.", }},
            { "MudBlazor.MudAutocomplete`1.MinCharacters", new() { Name = "MinCharacters", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>0</c>.", Summary = @"The minimum number of characters typed to initiate a search.", }},
            { "MudBlazor.MudAutocomplete`1.MoreItemsTemplate", new() { Name = "MoreItemsTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.", Summary = @"The custom template used when the number of items returned by <see cref=""P:MudBlazor.MudAutocomplete`1.SearchFunc"" /> is more than the value of the <see cref=""P:MudBlazor.MudAutocomplete`1.MaxItems"" /> property.", }},
            { "MudBlazor.MudAutocomplete`1.NoItemsTemplate", new() { Name = "NoItemsTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.", Summary = @"The custom template used when no items are returned by <see cref=""P:MudBlazor.MudAutocomplete`1.SearchFunc"" />.", }},
            { "MudBlazor.MudAutocomplete`1.Open", new() { Name = "Open", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When this property changes, the <see cref=""P:MudBlazor.MudAutocomplete`1.OpenChanged"" /> event will occur.", Summary = @"Displays the search result drop-down.", }},
            { "MudBlazor.MudAutocomplete`1.OpenIcon", new() { Name = "OpenIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ArrowDropDown"" />.", Summary = @"The ""open"" Autocomplete icon.", }},
            { "MudBlazor.MudAutocomplete`1.OpenOnFocus", new() { Name = "OpenOnFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>true</c>.", Summary = @"Additionally, opens the list when focus is received on the input element; otherwise only opens on click.", }},
            { "MudBlazor.MudAutocomplete`1.PopoverClass", new() { Name = "PopoverClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>null</c>.  You can use spaces to separate multiple classes.", Summary = @"The CSS classes applied to the popover.", }},
            { "MudBlazor.MudAutocomplete`1.ProgressIndicatorColor", new() { Name = "ProgressIndicatorColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  This property is used when <see cref=""P:MudBlazor.MudAutocomplete`1.ShowProgressIndicator"" /> is <c>true</c>.", Summary = @"The color of the progress indicator.", }},
            { "MudBlazor.MudAutocomplete`1.ProgressIndicatorInPopoverTemplate", new() { Name = "ProgressIndicatorInPopoverTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudAutocomplete`1.ProgressIndicatorTemplate"" /> property to control content displayed for the progress indicator.", Summary = @"The custom template used for the progress indicator inside the popover when <see cref=""P:MudBlazor.MudAutocomplete`1.ShowProgressIndicator"" /> is <c>true</c>.", }},
            { "MudBlazor.MudAutocomplete`1.ProgressIndicatorTemplate", new() { Name = "ProgressIndicatorTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudAutocomplete`1.ProgressIndicatorInPopoverTemplate"" /> property to control content displayed for the progress indicator inside the popover.", Summary = @"The custom template used for the progress indicator when <see cref=""P:MudBlazor.MudAutocomplete`1.ShowProgressIndicator"" /> is <c>true</c>.", }},
            { "MudBlazor.MudAutocomplete`1.RelativeWidth", new() { Name = "RelativeWidth", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"<para>Defaults to <see cref=""F:MudBlazor.DropdownWidth.Relative"" />. </para><para>When <see cref=""F:MudBlazor.DropdownWidth.Relative"" />, restricts the max-width of the component to the width of the parent container</para><para>When <see cref=""F:MudBlazor.DropdownWidth.Adaptive"" />, restricts the min-width of the component to the width of the parent container</para>", Summary = @"Determines the width of this Popover dropdown in relation to the parent container.", }},
            { "MudBlazor.MudAutocomplete`1.ResetValueOnEmptyText", new() { Name = "ResetValueOnEmptyText", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Reset the selected value if the user deletes the text.", }},
            { "MudBlazor.MudAutocomplete`1.SearchFunc", new() { Name = "SearchFunc", TypeName = "", TypeFriendlyName = "Func<string, CancellationToken, Task<IEnumerable<T>>>", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"This function searches for items containing the specified <c>string</c> value, and returns items which match up to the <see cref=""P:MudBlazor.MudAutocomplete`1.MaxItems"" /> property.  You can use the provided <see cref=""T:System.Threading.CancellationToken"" /> which is marked as canceled when the user changes the search text or selects a value from the list.", Summary = @"The function used to search for items.", }},
            { "MudBlazor.MudAutocomplete`1.SelectOnActivation", new() { Name = "SelectOnActivation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.Previously known as <c>SelectOnClick</c>.", Summary = @"Highlights the text when the component receives focus.", }},
            { "MudBlazor.MudAutocomplete`1.SelectValueOnTab", new() { Name = "SelectValueOnTab", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>false</c>.", Summary = @"Updates the Value to the currently selected item when pressing the Tab key.", }},
            { "MudBlazor.MudAutocomplete`1.ShowProgressIndicator", new() { Name = "ShowProgressIndicator", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  The progress indicator uses the color specified in the <see cref=""P:MudBlazor.MudAutocomplete`1.ProgressIndicatorColor"" /> property.", Summary = @"Shows the progress indicator during searches.", }},
            { "MudBlazor.MudAutocomplete`1.Strict", new() { Name = "Strict", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  When <c>true</c>, selecting an option will trigger a <see cref=""P:MudBlazor.MudAutocomplete`1.SearchFunc"" /> with the current Text.  Otherwise, an empty string is passed which can make it easier to view and select other options without resetting the Value. When <c>false</c>, <c>T</c> must either be a <c>record</c> or override the <c>GetHashCode</c> and <c>Equals</c> methods.", Summary = @"Selects items without resetting the <c>Value</c>.", }},
            { "MudBlazor.MudAutocomplete`1.ToStringFunc", new() { Name = "ToStringFunc", TypeName = "", TypeFriendlyName = "Func<T, string>", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to the <c>ToString()</c> method of items.", Summary = @"The function used to get the display text for each item.", }},
            { "MudBlazor.MudAutocomplete`1.TransformOrigin", new() { Name = "TransformOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopLeft"" />.", Summary = @"The transform origin point for the popover.", }},
            { "MudBlazor.MudAvatar.AvatarGroup", new() { Name = "AvatarGroup", TypeName = "MudBlazor.MudAvatarGroup", TypeFriendlyName = "MudAvatarGroup", IsProtected = true, }},
            { "MudBlazor.MudAvatar.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property allows for custom content to displayed inside of the avatar, but it is not required.", Summary = @"The content within the avatar.", }},
            { "MudBlazor.MudAvatar.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAvatar.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Theme colors are supported.", Summary = @"The color of the avatar.", }},
            { "MudBlazor.MudAvatar.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>0</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudAvatar.Rounded", new() { Name = "Rounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.When <c>true</c>, the <c>border-radius</c> style is set to the theme's default value.", Summary = @"Uses rounded corners instead of a circle.", }},
            { "MudBlazor.MudAvatar.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the avatar.", }},
            { "MudBlazor.MudAvatar.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />", Summary = @"Disables rounded corners.", }},
            { "MudBlazor.MudAvatar.Stylesname", new() { Name = "Stylesname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAvatar.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Filled"" />. The variant changes the appearance of the avatar, such as <c>Text</c>, <c>Outlined</c>, or <c>Filled</c>.", Summary = @"The display variant to use.", }},
            { "MudBlazor.MudAvatarGroup.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudAvatarGroup.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAvatarGroup.Max", new() { Name = "Max", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Avatars above this limit are hidden, and a ""+#"" is shown for the number of avatars in excess. Defaults to <see cref=""F:System.Int32.MaxValue"" />.", Summary = @"The maximum allowed avatars to display.", }},
            { "MudBlazor.MudAvatarGroup.MaxAvatarClass", new() { Name = "MaxAvatarClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The CSS class applied when the number of avatars exceeds <see cref=""P:MudBlazor.MudAvatarGroup.Max"" />.", }},
            { "MudBlazor.MudAvatarGroup.MaxAvatarClassname", new() { Name = "MaxAvatarClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudAvatarGroup.MaxAvatarsTemplate", new() { Name = "MaxAvatarsTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "RenderFragment<int>", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The template used to render avatars when the number of avatars exceeds <see cref=""P:MudBlazor.MudAvatarGroup.Max"" />.", }},
            { "MudBlazor.MudAvatarGroup.MaxColor", new() { Name = "MaxColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Theme colors are supported.", Summary = @"The color of the avatar when the number of avatars exceeds <see cref=""P:MudBlazor.MudAvatarGroup.Max"" />.", }},
            { "MudBlazor.MudAvatarGroup.MaxElevation", new() { Name = "MaxElevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>0</c>.", Summary = @"The size of the drop shadow when the number of avatars exceeds <see cref=""P:MudBlazor.MudAvatarGroup.Max"" />.", }},
            { "MudBlazor.MudAvatarGroup.MaxRounded", new() { Name = "MaxRounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the <c>border-radius</c> style is set to the theme's default value.", Summary = @"Shows rounded corners when the number of avatars exceeds <see cref=""P:MudBlazor.MudAvatarGroup.Max"" />.", }},
            { "MudBlazor.MudAvatarGroup.MaxSize", new() { Name = "MaxSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the avatar when the number of avatars exceeds <see cref=""P:MudBlazor.MudAvatarGroup.Max"" />.", }},
            { "MudBlazor.MudAvatarGroup.MaxSquare", new() { Name = "MaxSquare", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the <c>border-radius</c> CSS style is set to <c>0</c>.", Summary = @"Disables rounded corners when the number of avatars exceeds <see cref=""P:MudBlazor.MudAvatarGroup.Max"" />.", }},
            { "MudBlazor.MudAvatarGroup.MaxVariant", new() { Name = "MaxVariant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Filled"" />. The variant changes the appearance of the avatar, such as <c>Text</c>, <c>Outlined</c>, or <c>Filled</c>.", Summary = @"The display variant to use when the number of avatars exceeds <see cref=""P:MudBlazor.MudAvatarGroup.Max"" />.", }},
            { "MudBlazor.MudAvatarGroup.OutlineColor", new() { Name = "OutlineColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the outline when <see cref=""P:MudBlazor.MudAvatarGroup.Outlined"" /> is <c>true</c>.", }},
            { "MudBlazor.MudAvatarGroup.Outlined", new() { Name = "Outlined", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.  This property is useful to differentiate avatars which are the same color or use images.", Summary = @"Displays an outline for the group.", }},
            { "MudBlazor.MudAvatarGroup.Spacing", new() { Name = "Spacing", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>3</c>.", Summary = @"The amount of space between avatars, between <c>0</c> and <c>16</c>.", }},
            { "MudBlazor.MudBadge.BadgeAriaLabel", new() { Name = "BadgeAriaLabel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The <c>aria-label</c> for the badge.", }},
            { "MudBlazor.MudBadge.BadgeClass", new() { Name = "BadgeClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  You can use spaces to separate multiple classes.", Summary = @"The CSS classes applied to the badge.", }},
            { "MudBlazor.MudBadge.BadgeClassname", new() { Name = "BadgeClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBadge.Bordered", new() { Name = "Bordered", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays a border around the badge.", }},
            { "MudBlazor.MudBadge.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this badge.", }},
            { "MudBlazor.MudBadge.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBadge.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Theme colors are supported.", Summary = @"The color of the badge.", }},
            { "MudBlazor.MudBadge.Content", new() { Name = "Content", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Supported types are <c>string</c> and <c>int</c>.", Summary = @"The <c>string</c> or <c>int</c> value to display inside the badge.", }},
            { "MudBlazor.MudBadge.Dot", new() { Name = "Dot", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays a dot instead of any content.", }},
            { "MudBlazor.MudBadge.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>0</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudBadge.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The icon to display in the badge.", }},
            { "MudBlazor.MudBadge.Max", new() { Name = "Max", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>99</c>.", Summary = @"The maximum number allowed in the <see cref=""P:MudBlazor.MudBadge.Content"" /> property.", }},
            { "MudBlazor.MudBadge.Origin", new() { Name = "Origin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopRight"" />.", Summary = @"The location of the badge.", }},
            { "MudBlazor.MudBadge.Overlap", new() { Name = "Overlap", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays <see cref=""P:MudBlazor.MudBadge.ChildContent"" /> over the main badge content.", }},
            { "MudBlazor.MudBadge.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays this badge.", }},
            { "MudBlazor.MudBadge.WrapperClass", new() { Name = "WrapperClass", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBaseBindableItemsControl`2.ItemsSource", new() { Name = "ItemsSource", TypeName = "", TypeFriendlyName = "IEnumerable<TData>", Category = "Data", IsParameter = true, Order = 0, Summary = @"The alternate source of items if <c>Items</c> is not set.", }},
            { "MudBlazor.MudBaseBindableItemsControl`2.ItemTemplate", new() { Name = "ItemTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<TData>", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The template used to display each item.", }},
            { "MudBlazor.MudBaseBindableItemsControl`2.SelectedItem", new() { Name = "SelectedItem", TypeName = "System.Object", TypeFriendlyName = "object", Remarks = @"This property will return either an item from the <c>Items</c> property, or an item from <see cref=""P:MudBlazor.MudBaseBindableItemsControl`2.ItemsSource"" /> if <c>Items</c> is <c>null</c>.", Summary = @"The currently selected item.", }},
            { "MudBlazor.MudBaseButton.Activatable", new() { Name = "Activatable", TypeName = "MudBlazor.Interfaces.IActivatable", TypeFriendlyName = "IActivatable", IsProtected = true, Remarks = @"Default to <c>null</c>.  This property is used to implement a custom behavior beyond a basic button click.  The activation will occur during the <see cref=""P:MudBlazor.MudBaseButton.OnClick"" /> event.", Summary = @"The custom activation behavior.", }},
            { "MudBlazor.MudBaseButton.ButtonType", new() { Name = "ButtonType", TypeName = "MudBlazor.ButtonType", TypeFriendlyName = "ButtonType", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>Button</c>. Other values are <c>Submit</c> to submit a form, and <c>Reset</c> to clear a form.", Summary = @"The type of button.", }},
            { "MudBlazor.MudBaseButton.ClickPropagation", new() { Name = "ClickPropagation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows the click event to bubble up to the parent component.", }},
            { "MudBlazor.MudBaseButton.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows the user to interact with this button.", }},
            { "MudBlazor.MudBaseButton.DropShadow", new() { Name = "DropShadow", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays a shadow.", }},
            { "MudBlazor.MudBaseButton.Href", new() { Name = "Href", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>null</c>. When clicked, the browser will navigate to this URL.  Use the <see cref=""P:MudBlazor.MudBaseButton.Target"" /> property to target a specific tab.", Summary = @"The URL to navigate to when the button is clicked.", }},
            { "MudBlazor.MudBaseButton.HtmlTag", new() { Name = "HtmlTag", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/Button"">button</see>,or <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/a"">a</see> if <see cref=""P:MudBlazor.MudBaseButton.Href"" /> is set.", Summary = @"The HTML tag rendered for this component.", }},
            { "MudBlazor.MudBaseButton.Rel", new() { Name = "Rel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"This property is typically used by web crawlers to get more information about a link.  Common values can be found here: <see href=""https://www.w3schools.com/tags/att_a_rel.asp"" />", Summary = @"The relationship between the current document and the linked document when <see cref=""P:MudBlazor.MudBaseButton.Href"" /> is set.", }},
            { "MudBlazor.MudBaseButton.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a ripple effect when the user clicks the button.", }},
            { "MudBlazor.MudBaseButton.Target", new() { Name = "Target", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>null</c>. This property allows navigation to open a new tab/window or to reuse a specific tab.  Possible values are <c>_blank</c>, <c>_self</c>, <c>_parent</c>, <c>_top</c>, <c>noopener</c>, or the name of an <c>iframe</c> element.", Summary = @"The browser tab/window opened when a click occurs and <see cref=""P:MudBlazor.MudBaseButton.Href"" /> is set.", }},
            { "MudBlazor.MudBaseDatePicker.AdditionalDateClassesFunc", new() { Name = "AdditionalDateClassesFunc", TypeName = "System.Func`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<DateTime, string>", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The function which returns CSS classes for a date.", }},
            { "MudBlazor.MudBaseDatePicker.AutoClose", new() { Name = "AutoClose", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>false</c>.", Summary = @"Closes this picker when a value is selected.", }},
            { "MudBlazor.MudBaseDatePicker.ClosingDelay", new() { Name = "ClosingDelay", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>100</c>.<br />This delay helps the user see that a date has been selected before the popover disappears.", Summary = @"The delay, in milliseconds, before closing the picker after a value is selected.", }},
            { "MudBlazor.MudBaseDatePicker.DateFormat", new() { Name = "DateFormat", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The format for selected dates.", }},
            { "MudBlazor.MudBaseDatePicker.DisplayMonths", new() { Name = "DisplayMonths", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>1</c>.", Summary = @"The number of months to display in the calendar.", }},
            { "MudBlazor.MudBaseDatePicker.FirstDayOfWeek", new() { Name = "FirstDayOfWeek", TypeName = "System.Nullable`1[[System.DayOfWeek, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DayOfWeek?", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to the current culture's <c>DateTimeFormat.FirstDayOfWeek</c>.", Summary = @"The day representing the first day of the week.", }},
            { "MudBlazor.MudBaseDatePicker.FixDay", new() { Name = "FixDay", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>null</c>.", Summary = @"The day to use, which cannot be changed.", }},
            { "MudBlazor.MudBaseDatePicker.FixMonth", new() { Name = "FixMonth", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>null</c>.", Summary = @"The month to use, which cannot be changed.", }},
            { "MudBlazor.MudBaseDatePicker.FixYear", new() { Name = "FixYear", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>null</c>.", Summary = @"The year to use, which cannot be changed.", }},
            { "MudBlazor.MudBaseDatePicker.IsDateDisabledFunc", new() { Name = "IsDateDisabledFunc", TypeName = "System.Func`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<DateTime, bool>", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.<br />When set, a date will be disabled if the function returns <c>true</c>.", Summary = @"The function used to disable one or more dates.", }},
            { "MudBlazor.MudBaseDatePicker.IsRange", new() { Name = "IsRange", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudBaseDatePicker.MaxDate", new() { Name = "MaxDate", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", Category = "Validation", IsParameter = true, Order = 1, Summary = @"The maximum selectable date.", }},
            { "MudBlazor.MudBaseDatePicker.MaxMonthColumns", new() { Name = "MaxMonthColumns", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>null</c>.<br />When <c>null</c>, the <see cref=""P:MudBlazor.MudBaseDatePicker.DisplayMonths"" /> is used.", Summary = @"The maximum number of months allowed in one row.", }},
            { "MudBlazor.MudBaseDatePicker.MinDate", new() { Name = "MinDate", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", Category = "Validation", IsParameter = true, Order = 1, Summary = @"The minimum selectable date.", }},
            { "MudBlazor.MudBaseDatePicker.NextIcon", new() { Name = "NextIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ChevronRight"" />.", Summary = @"The icon for the button which navigates to the next month or year.", }},
            { "MudBlazor.MudBaseDatePicker.OpenTo", new() { Name = "OpenTo", TypeName = "MudBlazor.OpenTo", TypeFriendlyName = "OpenTo", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <see cref=""F:MudBlazor.OpenTo.Date"" />.", Summary = @"The initial view to display.", }},
            { "MudBlazor.MudBaseDatePicker.PickerContent", new() { Name = "PickerContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudBaseDatePicker.PickerMonth", new() { Name = "PickerMonth", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to the current month.<br />When bound via <c>@bind-PickerMonth</c>, controls the initial month displayed.  This value is always the first day of a month.", Summary = @"The current month shown in the date picker.", }},
            { "MudBlazor.MudBaseDatePicker.PreviousIcon", new() { Name = "PreviousIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ChevronLeft"" />.", Summary = @"The icon for the button that navigates to the previous month or year.", }},
            { "MudBlazor.MudBaseDatePicker.ScrollManager", new() { Name = "ScrollManager", TypeName = "MudBlazor.IScrollManager", TypeFriendlyName = "IScrollManager", IsProtected = true, }},
            { "MudBlazor.MudBaseDatePicker.ShowWeekNumbers", new() { Name = "ShowWeekNumbers", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows week numbers at the start of each week.", }},
            { "MudBlazor.MudBaseDatePicker.StartMonth", new() { Name = "StartMonth", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", Category = "Picker behavior", IsParameter = true, Order = 404, Summary = @"The start month when opening the picker.", }},
            { "MudBlazor.MudBaseDatePicker.TitleDateFormat", new() { Name = "TitleDateFormat", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>ddd, dd MMM</c>.<br />Supported date formats can be found here: <see href=""https://learn.microsoft.com/dotnet/standard/base-types/standard-date-and-time-format-strings"" />.", Summary = @"The format of the selected date in the title.", }},
            { "MudBlazor.MudBaseInput`1.Adornment", new() { Name = "Adornment", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Adornment.None"" />.  When set to <c>Start</c> or <c>End</c>, the <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentText"" /> will be displayed, or <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentIcon"" /> if no adornment text is specified.", Summary = @"The location of the adornment icon or text.", }},
            { "MudBlazor.MudBaseInput`1.AdornmentAriaLabel", new() { Name = "AdornmentAriaLabel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The <c>aria-label</c> for the adornment.", }},
            { "MudBlazor.MudBaseInput`1.AdornmentColor", new() { Name = "AdornmentColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Theme colors are supported.", Summary = @"The color of <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentText"" /> or <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentIcon"" />.", }},
            { "MudBlazor.MudBaseInput`1.AdornmentIcon", new() { Name = "AdornmentIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  This icon will be displayed when <see cref=""P:MudBlazor.MudBaseInput`1.Adornment"" /> is <c>Start</c> or <c>End</c>, and no value for <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentText"" /> is set.", Summary = @"The icon displayed for the adornment.", }},
            { "MudBlazor.MudBaseInput`1.AdornmentText", new() { Name = "AdornmentText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  This text will be displayed when <see cref=""P:MudBlazor.MudBaseInput`1.Adornment"" /> is <c>Start</c> or <c>End</c>.  The <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentIcon"" /> property will be ignored if this property is set.", Summary = @"The text displayed for the adornment.", }},
            { "MudBlazor.MudBaseInput`1.AutoFocus", new() { Name = "AutoFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the input will receive focus automatically.", Summary = @"Automatically receives focus.", }},
            { "MudBlazor.MudBaseInput`1.Counter", new() { Name = "Counter", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  When <c>0</c>, the current character count is displayed.  When <c>1</c> or greater, the character count and this count are displayed.", Summary = @"The optional character count and stop count.", }},
            { "MudBlazor.MudBaseInput`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows the component to receive input.", }},
            { "MudBlazor.MudBaseInput`1.Format", new() { Name = "Format", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is passed into the <c>ToString()</c> method of the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property, such as formatting <c>int</c>, <c>float</c>, <c>DateTime</c> and <c>TimeSpan</c> values.", Summary = @"The format applied to values.", }},
            { "MudBlazor.MudBaseInput`1.FullWidth", new() { Name = "FullWidth", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Fills the full width of the parent container.", }},
            { "MudBlazor.MudBaseInput`1.HelperId", new() { Name = "HelperId", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  When set it is appended to the <c>aria-describedby</c> attribute to improve accessibility for users. This ID takes precedence over the helper element rendered when <see cref=""P:MudBlazor.MudBaseInput`1.HelperText"" /> is provided.", Summary = @"The ID of the helper element, for use by <c>aria-describedby</c>.", }},
            { "MudBlazor.MudBaseInput`1.HelperText", new() { Name = "HelperText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to help the user understand what kind of input is allowed.  The <see cref=""P:MudBlazor.MudBaseInput`1.HelperTextOnFocus"" /> property controls when this text is visible.", Summary = @"The text displayed below the text field.", }},
            { "MudBlazor.MudBaseInput`1.HelperTextOnFocus", new() { Name = "HelperTextOnFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the <see cref=""P:MudBlazor.MudBaseInput`1.HelperText"" /> only when this input has focus.", }},
            { "MudBlazor.MudBaseInput`1.IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the icon.", }},
            { "MudBlazor.MudBaseInput`1.Immediate", new() { Name = "Immediate", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property will be updated any time user input occurs.  Otherwise, <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> is updated when the user presses <c>Enter</c> or the input loses focus.", Summary = @"Changes the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> as soon as input is received.", }},
            { "MudBlazor.MudBaseInput`1.InputElementId", new() { Name = "InputElementId", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"The resolved input element ID.", }},
            { "MudBlazor.MudBaseInput`1.InputId", new() { Name = "InputId", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When set takes precedence over any internally generated IDs.", Summary = @"The ID of the input element.", }},
            { "MudBlazor.MudBaseInput`1.InputMode", new() { Name = "InputMode", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.InputMode.text"" />.", Summary = @"The type of input expected.", }},
            { "MudBlazor.MudBaseInput`1.KeyDownPreventDefault", new() { Name = "KeyDownPreventDefault", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <c>true</c>, the browser will not perform its default behavior when a key-down occurs.  This is typically used when a key-down needs to override a browser's default behavior.", Summary = @"Allows the default key-down action to occur.", }},
            { "MudBlazor.MudBaseInput`1.KeyUpPreventDefault", new() { Name = "KeyUpPreventDefault", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <c>true</c>, the browser will not perform its default behavior when a key-up occurs.  This is typically used when a key-up needs to override the browser's default behavior.", Summary = @"Prevents the default key-up action.", }},
            { "MudBlazor.MudBaseInput`1.Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"If no <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> is specified, the label will be displayed in the input.  Otherwise, it will be scaled down to the top of the input.", Summary = @"The label for this input.", }},
            { "MudBlazor.MudBaseInput`1.Lines", new() { Name = "Lines", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"A multiline input (textarea) will be shown, if set to more than one line.", }},
            { "MudBlazor.MudBaseInput`1.Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Margin.None"" /> in <see cref=""P:MudBlazor.MudGlobal.InputDefaults.Margin"" />.", Summary = @"The amount of vertical spacing for this input.", }},
            { "MudBlazor.MudBaseInput`1.MaxLength", new() { Name = "MaxLength", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>524288</c>.  This value is typically set to a maximum length such as the size of a database column the value will be persisted to.", Summary = @"The maximum number of characters allowed.", }},
            { "MudBlazor.MudBaseInput`1.OnlyValidateIfDirty", new() { Name = "OnlyValidateIfDirty", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>. When <c>true</c>, validation only occurs if the user has changed the input value at least once.", Summary = @"Limits validation to when the user changes the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" />.", }},
            { "MudBlazor.MudBaseInput`1.Pattern", new() { Name = "Pattern", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  This property is used to validate the input against a regular expression.  Not supported if <see cref=""P:MudBlazor.MudBaseInput`1.Lines"" /> is <c>2</c> or greater.  Must be a valid JavaScript regular expression.", Summary = @"The regular expression used to validate the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property.", }},
            { "MudBlazor.MudBaseInput`1.Placeholder", new() { Name = "Placeholder", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to give the user a hint as to what kind of input is expected.", Summary = @"The text displayed in the input if no <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> is specified.", }},
            { "MudBlazor.MudBaseInput`1.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the user can copy text in the control, but cannot change the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" />.", Summary = @"Prevents the input from being changed by the user.", }},
            { "MudBlazor.MudBaseInput`1.ShrinkLabel", new() { Name = "ShrinkLabel", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c> in <see cref=""P:MudBlazor.MudGlobal.InputDefaults.ShrinkLabel"" />.When <c>true</c>, the label will not move into the input when the input is empty.", Summary = @"Shows the label inside the input if no <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> is specified.", }},
            { "MudBlazor.MudBaseInput`1.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Data", IsParameter = true, Order = 0, Summary = @"The text displayed in the input.", }},
            { "MudBlazor.MudBaseInput`1.TextUpdateSuppression", new() { Name = "TextUpdateSuppression", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  Applies only to Blazor Server (BSS) applications.  When <c>false</c>, the input's text can be updated programmatically while the input has focus.", Summary = @"Prevents the text from being updated via a bound value.", }},
            { "MudBlazor.MudBaseInput`1.Typo", new() { Name = "Typo", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Typography for the input text.", }},
            { "MudBlazor.MudBaseInput`1.Underline", new() { Name = "Underline", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays an underline for the input.", }},
            { "MudBlazor.MudBaseInput`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Data", IsParameter = true, Order = 0, Remarks = @"This property represents the strongly typed value for the input.  It is typically the result of parsing raw input via the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> property.", Summary = @"The value for this input.", }},
            { "MudBlazor.MudBaseInput`1.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" /> in <see cref=""P:MudBlazor.MudGlobal.InputDefaults.Variant"" />.", Summary = @"The appearance variation to use.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment", new() { Name = "Adornment", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Adornment.None"" />.  When set to <c>Start</c> or <c>End</c>, the <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentText"" /> will be displayed, or <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentIcon"" /> if no adornment text is specified.", Summary = @"The location of the adornment icon or text.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel", new() { Name = "AdornmentAriaLabel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The <c>aria-label</c> for the adornment.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor", new() { Name = "AdornmentColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Theme colors are supported.", Summary = @"The color of <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentText"" /> or <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentIcon"" />.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon", new() { Name = "AdornmentIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  This icon will be displayed when <see cref=""P:MudBlazor.MudBaseInput`1.Adornment"" /> is <c>Start</c> or <c>End</c>, and no value for <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentText"" /> is set.", Summary = @"The icon displayed for the adornment.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentText", new() { Name = "AdornmentText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  This text will be displayed when <see cref=""P:MudBlazor.MudBaseInput`1.Adornment"" /> is <c>Start</c> or <c>End</c>.  The <see cref=""P:MudBlazor.MudBaseInput`1.AdornmentIcon"" /> property will be ignored if this property is set.", Summary = @"The text displayed for the adornment.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AutoFocus", new() { Name = "AutoFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the input will receive focus automatically.", Summary = @"Automatically receives focus.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Counter", new() { Name = "Counter", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  When <c>0</c>, the current character count is displayed.  When <c>1</c> or greater, the character count and this count are displayed.", Summary = @"The optional character count and stop count.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows the component to receive input.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format", new() { Name = "Format", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is passed into the <c>ToString()</c> method of the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property, such as formatting <c>int</c>, <c>float</c>, <c>DateTime</c> and <c>TimeSpan</c> values.", Summary = @"The format applied to values.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FullWidth", new() { Name = "FullWidth", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Fills the full width of the parent container.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperId", new() { Name = "HelperId", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  When set it is appended to the <c>aria-describedby</c> attribute to improve accessibility for users. This ID takes precedence over the helper element rendered when <see cref=""P:MudBlazor.MudBaseInput`1.HelperText"" /> is provided.", Summary = @"The ID of the helper element, for use by <c>aria-describedby</c>.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText", new() { Name = "HelperText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to help the user understand what kind of input is allowed.  The <see cref=""P:MudBlazor.MudBaseInput`1.HelperTextOnFocus"" /> property controls when this text is visible.", Summary = @"The text displayed below the text field.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus", new() { Name = "HelperTextOnFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the <see cref=""P:MudBlazor.MudBaseInput`1.HelperText"" /> only when this input has focus.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the icon.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Immediate", new() { Name = "Immediate", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property will be updated any time user input occurs.  Otherwise, <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> is updated when the user presses <c>Enter</c> or the input loses focus.", Summary = @"Changes the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> as soon as input is received.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputElementId", new() { Name = "InputElementId", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"The resolved input element ID.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputId", new() { Name = "InputId", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When set takes precedence over any internally generated IDs.", Summary = @"The ID of the input element.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputMode", new() { Name = "InputMode", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.InputMode.text"" />.", Summary = @"The type of input expected.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].KeyDownPreventDefault", new() { Name = "KeyDownPreventDefault", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <c>true</c>, the browser will not perform its default behavior when a key-down occurs.  This is typically used when a key-down needs to override a browser's default behavior.", Summary = @"Allows the default key-down action to occur.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].KeyUpPreventDefault", new() { Name = "KeyUpPreventDefault", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <c>true</c>, the browser will not perform its default behavior when a key-up occurs.  This is typically used when a key-up needs to override the browser's default behavior.", Summary = @"Prevents the default key-up action.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"If no <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> is specified, the label will be displayed in the input.  Otherwise, it will be scaled down to the top of the input.", Summary = @"The label for this input.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Lines", new() { Name = "Lines", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"A multiline input (textarea) will be shown, if set to more than one line.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Margin.None"" /> in <see cref=""P:MudBlazor.MudGlobal.InputDefaults.Margin"" />.", Summary = @"The amount of vertical spacing for this input.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MaxLength", new() { Name = "MaxLength", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>524288</c>.  This value is typically set to a maximum length such as the size of a database column the value will be persisted to.", Summary = @"The maximum number of characters allowed.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnlyValidateIfDirty", new() { Name = "OnlyValidateIfDirty", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>. When <c>true</c>, validation only occurs if the user has changed the input value at least once.", Summary = @"Limits validation to when the user changes the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" />.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Pattern", new() { Name = "Pattern", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  This property is used to validate the input against a regular expression.  Not supported if <see cref=""P:MudBlazor.MudBaseInput`1.Lines"" /> is <c>2</c> or greater.  Must be a valid JavaScript regular expression.", Summary = @"The regular expression used to validate the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder", new() { Name = "Placeholder", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to give the user a hint as to what kind of input is expected.", Summary = @"The text displayed in the input if no <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> is specified.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the user can copy text in the control, but cannot change the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" />.", Summary = @"Prevents the input from being changed by the user.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShrinkLabel", new() { Name = "ShrinkLabel", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c> in <see cref=""P:MudBlazor.MudGlobal.InputDefaults.ShrinkLabel"" />.When <c>true</c>, the label will not move into the input when the input is empty.", Summary = @"Shows the label inside the input if no <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> is specified.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Data", IsParameter = true, Order = 0, Summary = @"The text displayed in the input.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextUpdateSuppression", new() { Name = "TextUpdateSuppression", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  Applies only to Blazor Server (BSS) applications.  When <c>false</c>, the input's text can be updated programmatically while the input has focus.", Summary = @"Prevents the text from being updated via a bound value.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Typo", new() { Name = "Typo", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Typography for the input text.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline", new() { Name = "Underline", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays an underline for the input.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Value", new() { Name = "Value", TypeName = "System.String", TypeFriendlyName = "string", Category = "Data", IsParameter = true, Order = 0, Remarks = @"This property represents the strongly typed value for the input.  It is typically the result of parsing raw input via the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> property.", Summary = @"The value for this input.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" /> in <see cref=""P:MudBlazor.MudGlobal.InputDefaults.Variant"" />.", Summary = @"The appearance variation to use.", }},
            { "MudBlazor.MudBaseItemsControl`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Data", IsParameter = true, Order = 0, Summary = @"The content within this component.", }},
            { "MudBlazor.MudBaseItemsControl`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "List<TChildComponent>", Remarks = @"This property is ignored when <c>ItemsSource</c> is not null.", Summary = @"The list of items.", }},
            { "MudBlazor.MudBaseItemsControl`1.LastContainer", new() { Name = "LastContainer", TypeName = "", TypeFriendlyName = "TChildComponent", Summary = @"The previously selected item.", }},
            { "MudBlazor.MudBaseItemsControl`1.SelectedContainer", new() { Name = "SelectedContainer", TypeName = "", TypeFriendlyName = "TChildComponent", Remarks = @"This property returns the item in the <see cref=""P:MudBlazor.MudBaseItemsControl`1.Items"" /> property at the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" />.", Summary = @"The currently selected item.", }},
            { "MudBlazor.MudBaseItemsControl`1.SelectedIndex", new() { Name = "SelectedIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When this property changes, the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndexChanged"" /> event occurs.", Summary = @"The index of the currently selected item.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Data", IsParameter = true, Order = 0, Summary = @"The content within this component.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Items", new() { Name = "Items", TypeName = "System.Collections.Generic.List`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "List<MudCarouselItem>", Remarks = @"This property is ignored when <c>ItemsSource</c> is not null.", Summary = @"The list of items.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].LastContainer", new() { Name = "LastContainer", TypeName = "MudBlazor.MudCarouselItem", TypeFriendlyName = "MudCarouselItem", Summary = @"The previously selected item.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedContainer", new() { Name = "SelectedContainer", TypeName = "MudBlazor.MudCarouselItem", TypeFriendlyName = "MudCarouselItem", Remarks = @"This property returns the item in the <see cref=""P:MudBlazor.MudBaseItemsControl`1.Items"" /> property at the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" />.", Summary = @"The currently selected item.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex", new() { Name = "SelectedIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When this property changes, the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndexChanged"" /> event occurs.", Summary = @"The index of the currently selected item.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Data", IsParameter = true, Order = 0, Summary = @"The content within this component.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Items", new() { Name = "Items", TypeName = "System.Collections.Generic.List`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "List<MudTimelineItem>", Remarks = @"This property is ignored when <c>ItemsSource</c> is not null.", Summary = @"The list of items.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].LastContainer", new() { Name = "LastContainer", TypeName = "MudBlazor.MudTimelineItem", TypeFriendlyName = "MudTimelineItem", Summary = @"The previously selected item.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedContainer", new() { Name = "SelectedContainer", TypeName = "MudBlazor.MudTimelineItem", TypeFriendlyName = "MudTimelineItem", Remarks = @"This property returns the item in the <see cref=""P:MudBlazor.MudBaseItemsControl`1.Items"" /> property at the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" />.", Summary = @"The currently selected item.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex", new() { Name = "SelectedIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When this property changes, the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndexChanged"" /> event occurs.", Summary = @"The index of the currently selected item.", }},
            { "MudBlazor.MudBooleanInput`1.BoolValue", new() { Name = "BoolValue", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsProtected = true, }},
            { "MudBlazor.MudBooleanInput`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, }},
            { "MudBlazor.MudBooleanInput`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBooleanInput`1.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the component. It supports the theme colors.", }},
            { "MudBlazor.MudBooleanInput`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this input.", }},
            { "MudBlazor.MudBooleanInput`1.IconClassname", new() { Name = "IconClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBooleanInput`1.Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The text/label will be displayed next to the switch if set.", }},
            { "MudBlazor.MudBooleanInput`1.LabelClassname", new() { Name = "LabelClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBooleanInput`1.LabelPlacement", new() { Name = "LabelPlacement", TypeName = "MudBlazor.Placement", TypeFriendlyName = "Placement", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The location of the label relative to the input icon.", }},
            { "MudBlazor.MudBooleanInput`1.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the user can copy the input but cannot change it.", Summary = @"Prevents the user from changing the input.", }},
            { "MudBlazor.MudBooleanInput`1.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudBooleanInput`1.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Gets or sets whether to show a ripple effect when the user clicks the button. Default is true.", }},
            { "MudBlazor.MudBooleanInput`1.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The Size of the component.", }},
            { "MudBlazor.MudBooleanInput`1.StopClickPropagation", new() { Name = "StopClickPropagation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  When <c>true</c>, the click will not bubble up to parent components.", Summary = @"Prevents the parent component from receiving click events.", }},
            { "MudBlazor.MudBooleanInput`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Data", IsParameter = true, Order = 0, Summary = @"The currently selected value.", }},
            { "MudBlazor.MudBreadcrumbs.Collapsed", new() { Name = "Collapsed", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>true</c>.", Summary = @"Collapses items when the number of items exceeds <see cref=""P:MudBlazor.MudBreadcrumbs.MaxItems"" />.", }},
            { "MudBlazor.MudBreadcrumbs.ExpanderIcon", new() { Name = "ExpanderIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.SettingsEthernet"" />.  Displays when <see cref=""P:MudBlazor.MudBreadcrumbs.Collapsed"" /> and the number of items exceeds <see cref=""P:MudBlazor.MudBreadcrumbs.MaxItems"" />.", Summary = @"The icon to display when items are collapsed.", }},
            { "MudBlazor.MudBreadcrumbs.Items", new() { Name = "Items", TypeName = "System.Collections.Generic.IReadOnlyList`1[[MudBlazor.BreadcrumbItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IReadOnlyList<BreadcrumbItem>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The list of items to display.", }},
            { "MudBlazor.MudBreadcrumbs.ItemTemplate", new() { Name = "ItemTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.BreadcrumbItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<BreadcrumbItem>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The custom template used to display items.", }},
            { "MudBlazor.MudBreadcrumbs.MaxItems", new() { Name = "MaxItems", TypeName = "System.Nullable`1[[System.Byte, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Byte?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  If <see cref=""P:MudBlazor.MudBreadcrumbs.Collapsed"" /> is <c>true</c> and the number of items exceeds this value, the breadcrumbs will automatically collapse.", Summary = @"The maximum number of items to display.", }},
            { "MudBlazor.MudBreadcrumbs.Separator", new() { Name = "Separator", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>/</c>.  Will not be shown if <see cref=""P:MudBlazor.MudBreadcrumbs.SeparatorTemplate"" /> is set.", Summary = @"The separator shown between items.", }},
            { "MudBlazor.MudBreadcrumbs.SeparatorTemplate", new() { Name = "SeparatorTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The content shown between items.", }},
            { "MudBlazor.MudBreakpointProvider.Breakpoint", new() { Name = "Breakpoint", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Remarks = @"Defaults to <see cref=""F:MudBlazor.Breakpoint.Always"" />.", Summary = @"The current breakpoint.", }},
            { "MudBlazor.MudBreakpointProvider.BrowserViewportService", new() { Name = "BrowserViewportService", TypeName = "MudBlazor.IBrowserViewportService", TypeFriendlyName = "IBrowserViewportService", IsProtected = true, }},
            { "MudBlazor.MudBreakpointProvider.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudButton.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudButton.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudButton.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" /> in <see cref=""P:MudBlazor.MudGlobal.ButtonDefaults.Color"" />.", Summary = @"The color of the button.", }},
            { "MudBlazor.MudButton.EndIcon", new() { Name = "EndIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  Use <see cref=""P:MudBlazor.MudButton.StartIcon"" /> to display an icon before the text.", Summary = @"The icon displayed after the text.", }},
            { "MudBlazor.MudButton.EndIconClass", new() { Name = "EndIconClass", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudButton.FullWidth", new() { Name = "FullWidth", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Expands the button to 100% of the container width.", }},
            { "MudBlazor.MudButton.IconClass", new() { Name = "IconClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  You can use spaces to separate multiple classes.", Summary = @"The CSS classes applied to icons.", }},
            { "MudBlazor.MudButton.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.", Summary = @"The color of icons.", }},
            { "MudBlazor.MudButton.IconSize", new() { Name = "IconSize", TypeName = "System.Nullable`1[[MudBlazor.Size, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Size?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  When <c>null</c>, the value of <see cref=""P:MudBlazor.MudButton.Size"" /> is used.", Summary = @"The size of icons.", }},
            { "MudBlazor.MudButton.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.Use the <see cref=""P:MudBlazor.MudButton.IconSize"" /> property to set the size of icons.", Summary = @"The size of the button.", }},
            { "MudBlazor.MudButton.StartIcon", new() { Name = "StartIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  Use <see cref=""P:MudBlazor.MudButton.EndIcon"" /> to display an icon after the text.", Summary = @"The icon displayed before the text.", }},
            { "MudBlazor.MudButton.StartIconClass", new() { Name = "StartIconClass", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudButton.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" /> in <see cref=""P:MudBlazor.MudGlobal.ButtonDefaults.Variant"" />.", Summary = @"The display variation to use.", }},
            { "MudBlazor.MudButtonGroup.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property allows for custom content to displayed inside of the group, but it is not required.", Summary = @"The custom content within this group.", }},
            { "MudBlazor.MudButtonGroup.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudButtonGroup.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Theme colors are supported.", Summary = @"The color of all buttons in this group.", }},
            { "MudBlazor.MudButtonGroup.DropShadow", new() { Name = "DropShadow", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays a shadow.", }},
            { "MudBlazor.MudButtonGroup.FullWidth", new() { Name = "FullWidth", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, the button group will take up 100% of available width.", }},
            { "MudBlazor.MudButtonGroup.OverrideStyles", new() { Name = "OverrideStyles", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.  When <c>true</c>, the button styles are defined by this group.", Summary = @"Overrides individual button styles with this group's style.", }},
            { "MudBlazor.MudButtonGroup.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudButtonGroup.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of all buttons in the group.", }},
            { "MudBlazor.MudButtonGroup.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.  Other supported values are <see cref=""F:MudBlazor.Variant.Outlined"" /> and <see cref=""F:MudBlazor.Variant.Filled"" />.", Summary = @"The display variant of all buttons in the group.", }},
            { "MudBlazor.MudButtonGroup.Vertical", new() { Name = "Vertical", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, buttons will be displayed vertically, otherwise horizontally.", Summary = @"Displays buttons vertically.", }},
            { "MudBlazor.MudCard.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudCard.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCard.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>1</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudCard.Outlined", new() { Name = "Outlined", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  This property is useful to differentiate cards which are the same color or use images.", Summary = @"Displays an outline.", }},
            { "MudBlazor.MudCard.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"Disables rounded corners.", }},
            { "MudBlazor.MudCardActions.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudCardActions.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCardContent.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudCardContent.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCardHeader.CardHeaderActions", new() { Name = "CardHeaderActions", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The actions displayed within this header.", }},
            { "MudBlazor.MudCardHeader.CardHeaderAvatar", new() { Name = "CardHeaderAvatar", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The avatar to display within this header.", }},
            { "MudBlazor.MudCardHeader.CardHeaderContent", new() { Name = "CardHeaderContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The main content of this header.", }},
            { "MudBlazor.MudCardHeader.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The custom content within this header.", }},
            { "MudBlazor.MudCardHeader.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCardMedia.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCardMedia.Height", new() { Name = "Height", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>300</c>.", Summary = @"The height, in pixels, of the <see cref=""P:MudBlazor.MudCardMedia.Image"" />.", }},
            { "MudBlazor.MudCardMedia.Image", new() { Name = "Image", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The URL of the image to display.", }},
            { "MudBlazor.MudCardMedia.StyleString", new() { Name = "StyleString", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCardMedia.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"Text for the <c>title</c> attribute which provides a basic tooltip.", }},
            { "MudBlazor.MudCarousel`1.ArrowsPosition", new() { Name = "ArrowsPosition", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Position.Center"" />.", Summary = @"The position where the arrows are displayed, if <see cref=""P:MudBlazor.MudCarousel`1.ShowArrows"" /> is <c>true</c>.", }},
            { "MudBlazor.MudCarousel`1.AutoCycle", new() { Name = "AutoCycle", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the <see cref=""T:MudBlazor.MudCarouselItem"" /> items will be rotated after the delay specified in <see cref=""P:MudBlazor.MudCarousel`1.AutoCycleTime"" />.", Summary = @"Automatically cycles items based on <see cref=""P:MudBlazor.MudCarousel`1.AutoCycleTime"" />.", }},
            { "MudBlazor.MudCarousel`1.AutoCycleTime", new() { Name = "AutoCycleTime", TypeName = "System.TimeSpan", TypeFriendlyName = "TimeSpan", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:System.TimeSpan.Zero"" />.", Summary = @"The delay before displaying the next <see cref=""T:MudBlazor.MudCarouselItem"" /> when <see cref=""P:MudBlazor.MudCarousel`1.AutoCycle"" /> is <c>true</c>.", }},
            { "MudBlazor.MudCarousel`1.BulletsButtonsClassName", new() { Name = "BulletsButtonsClassName", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCarousel`1.BulletsClass", new() { Name = "BulletsClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Separate each CSS class with spaces.", Summary = @"The custom CSS classes for bullets when <see cref=""P:MudBlazor.MudCarousel`1.ShowBullets"" /> is <c>true</c>.", }},
            { "MudBlazor.MudCarousel`1.BulletsColor", new() { Name = "BulletsColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  When <c>null</c> the <see cref=""P:MudBlazor.MudCarouselItem.Color"" /> property is used.", Summary = @"The color of bullets when <see cref=""P:MudBlazor.MudCarousel`1.ShowBullets"" /> is <c>true</c>.", }},
            { "MudBlazor.MudCarousel`1.BulletsPosition", new() { Name = "BulletsPosition", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Position.Bottom"" />.", Summary = @"The location of the bullets when <see cref=""P:MudBlazor.MudCarousel`1.ShowBullets"" /> is <c>true</c>.", }},
            { "MudBlazor.MudCarousel`1.BulletTemplate", new() { Name = "BulletTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "RenderFragment<bool>", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"When set, the template will be used and the <see cref=""P:MudBlazor.MudCarousel`1.CheckedIcon"" /> and <see cref=""P:MudBlazor.MudCarousel`1.UncheckedIcon"" /> properties will be ignored.", Summary = @"The custom template for bullets.", }},
            { "MudBlazor.MudCarousel`1.CheckedIcon", new() { Name = "CheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The icon displayed for the current <see cref=""T:MudBlazor.MudCarouselItem"" /> when no <see cref=""P:MudBlazor.MudCarousel`1.BulletTemplate"" /> is set.", }},
            { "MudBlazor.MudCarousel`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCarousel`1.EnableSwipeGesture", new() { Name = "EnableSwipeGesture", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  When <c>true</c>, swipe gestures on touch devices can be used to change the current <see cref=""T:MudBlazor.MudCarouselItem"" />.", Summary = @"Allows swipe gestures for touch devices.", }},
            { "MudBlazor.MudCarousel`1.NavigationButtonsClass", new() { Name = "NavigationButtonsClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Separate each CSS class with spaces.", Summary = @"The custom CSS classes for the ""Next"" and ""Previous"" icons when <see cref=""P:MudBlazor.MudCarousel`1.ShowArrows"" /> is <c>true</c>.", }},
            { "MudBlazor.MudCarousel`1.NavigationButtonsClassName", new() { Name = "NavigationButtonsClassName", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCarousel`1.NextButtonTemplate", new() { Name = "NextButtonTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The custom template for the ""Next"" button.", }},
            { "MudBlazor.MudCarousel`1.NextIcon", new() { Name = "NextIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.NavigateNext"" />.", Summary = @"The ""Next"" button icon when <see cref=""P:MudBlazor.MudCarousel`1.ShowBullets"" /> is <c>true</c> and no <see cref=""P:MudBlazor.MudCarousel`1.NextButtonTemplate"" /> is set.", }},
            { "MudBlazor.MudCarousel`1.PreviousButtonTemplate", new() { Name = "PreviousButtonTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The custom template for the ""Previous"" button.", }},
            { "MudBlazor.MudCarousel`1.PreviousIcon", new() { Name = "PreviousIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.NavigateBefore"" />.", Summary = @"The ""Previous"" button icon when <see cref=""P:MudBlazor.MudCarousel`1.ShowBullets"" /> is <c>true</c> and no <see cref=""P:MudBlazor.MudCarousel`1.PreviousButtonTemplate"" /> is set.", }},
            { "MudBlazor.MudCarousel`1.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudCarousel`1.ShowArrows", new() { Name = "ShowArrows", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Displays ""Next"" and ""Previous"" arrows.", }},
            { "MudBlazor.MudCarousel`1.ShowBullets", new() { Name = "ShowBullets", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays a bullet for each <see cref=""T:MudBlazor.MudCarouselItem"" />.", }},
            { "MudBlazor.MudCarousel`1.UncheckedIcon", new() { Name = "UncheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The icon displayed for unselected <see cref=""T:MudBlazor.MudCarouselItem"" />s when no <see cref=""P:MudBlazor.MudCarousel`1.BulletTemplate"" /> is set.", }},
            { "MudBlazor.MudCarouselItem.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content displayed within this component.", }},
            { "MudBlazor.MudCarouselItem.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCarouselItem.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Theme colors are supported.", Summary = @"The color of this item.", }},
            { "MudBlazor.MudCarouselItem.CustomTransitionEnter", new() { Name = "CustomTransitionEnter", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The custom CSS transition used to blend into this carousel item.", }},
            { "MudBlazor.MudCarouselItem.CustomTransitionExit", new() { Name = "CustomTransitionExit", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The custom CSS transition used to blend away from this carousel item.", }},
            { "MudBlazor.MudCarouselItem.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudCarouselItem.Transition", new() { Name = "Transition", TypeName = "MudBlazor.Transition", TypeFriendlyName = "Transition", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Transition.Slide"" />.", Summary = @"The effect used to blend from this item to a different <see cref=""T:MudBlazor.MudCarouselItem"" />.", }},
            { "MudBlazor.MudCarouselItem.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Displays this item.", }},
            { "MudBlazor.MudCategoryChartBase.ChartSeries", new() { Name = "ChartSeries", TypeName = "System.Collections.Generic.List`1[[MudBlazor.ChartSeries, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "List<ChartSeries>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The series of values to display.", }},
            { "MudBlazor.MudCategoryChartBase.InputData", new() { Name = "InputData", TypeName = "System.Double[]", TypeFriendlyName = "double[]", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Applies to <c>Pie</c> and <c>Donut</c> charts.  The number of values in this array should be the same as the number of labels in the <see cref=""P:MudBlazor.MudCategoryChartBase.InputLabels"" /> property.", Summary = @"The data to be displayed.", }},
            { "MudBlazor.MudCategoryChartBase.InputLabels", new() { Name = "InputLabels", TypeName = "System.String[]", TypeFriendlyName = "string[]", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Applies to <c>Pie</c> and <c>Donut</c> charts.  The number of labels in this array is typically the same as the number of values in the <see cref=""P:MudBlazor.MudCategoryChartBase.InputData"" /> property.", Summary = @"The labels describing data values.", }},
            { "MudBlazor.MudCategoryChartBase.XAxisLabels", new() { Name = "XAxisLabels", TypeName = "System.String[]", TypeFriendlyName = "string[]", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Applies to <c>Line</c>, <c>Bar</c>, and <c>StackedBar</c> charts.  The number of values in this array is typically equal to the number of values in the <see cref=""P:MudBlazor.ChartSeries.Data"" /> property.", Summary = @"The labels applied to the horizontal axis.", }},
            { "MudBlazor.MudChartBase.CanHideSeries", new() { Name = "CanHideSeries", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <c>true</c>, checkboxes are displayed which can toggle visibility of each line.", Summary = @"Allows series to be hidden when <see cref=""P:MudBlazor.MudChartBase.ChartType"" /> is <see cref=""F:MudBlazor.ChartType.Line"" />.", }},
            { "MudBlazor.MudChartBase.ChartOptions", new() { Name = "ChartOptions", TypeName = "MudBlazor.ChartOptions", TypeFriendlyName = "ChartOptions", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The display options applied to the chart.", }},
            { "MudBlazor.MudChartBase.ChartType", new() { Name = "ChartType", TypeName = "MudBlazor.ChartType", TypeFriendlyName = "ChartType", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The type of chart to display.", }},
            { "MudBlazor.MudChartBase.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"ChildContent for this component", }},
            { "MudBlazor.MudChartBase.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudChartBase.CustomGraphics", new() { Name = "CustomGraphics", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The custom graphics within this chart.", }},
            { "MudBlazor.MudChartBase.Height", new() { Name = "Height", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>80%</c>.  Values can be a percentage or pixel width such as <c>200px</c>.", Summary = @"The height of the chart, as a CSS style.", }},
            { "MudBlazor.MudChartBase.LegendPosition", new() { Name = "LegendPosition", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Position.Bottom"" />.", Summary = @"The location of series labels.", }},
            { "MudBlazor.MudChartBase.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", Order = 100, }},
            { "MudBlazor.MudChartBase.SelectedIndex", new() { Name = "SelectedIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When this property changes, the <see cref=""P:MudBlazor.MudChartBase.SelectedIndexChanged"" /> event occurs.", Summary = @"The currently selected data point.", }},
            { "MudBlazor.MudChartBase.Width", new() { Name = "Width", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>80%</c>.  Values can be a percentage or pixel width such as <c>200px</c>.", Summary = @"The width of the chart, as a CSS style.", }},
            { "MudBlazor.MudChat.ArrowPosition", new() { Name = "ArrowPosition", TypeName = "MudBlazor.ChatArrowPosition", TypeFriendlyName = "ChatArrowPosition", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to Top", Summary = @"The Chat Bubble Arrow Position.", }},
            { "MudBlazor.MudChat.ChatPosition", new() { Name = "ChatPosition", TypeName = "MudBlazor.ChatBubblePosition", TypeFriendlyName = "ChatBubblePosition", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Chat bubble position.", }},
            { "MudBlazor.MudChat.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of component.", }},
            { "MudBlazor.MudChat.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudChat.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Child chat bubbles default color, can be overridden by bubble.", }},
            { "MudBlazor.MudChat.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Gets or sets whether compact padding will be used.", }},
            { "MudBlazor.MudChat.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>0</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"Gets or sets the size of the drop shadow.", }},
            { "MudBlazor.MudChat.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudChat.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"Gets or sets whether rounded corners are disabled.", }},
            { "MudBlazor.MudChat.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />. The variant changes the appearance of the chat bubbles, such as <c>Text</c>, <c>Outlined</c>, or <c>Filled</c>.", Summary = @"Gets or sets the display variant to use.", }},
            { "MudBlazor.MudChatBubble.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of component.", }},
            { "MudBlazor.MudChatBubble.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudChatBubble.Color", new() { Name = "Color", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the component. It supports the theme colors.", }},
            { "MudBlazor.MudChatBubble.ElementReference", new() { Name = "ElementReference", TypeName = "Microsoft.AspNetCore.Components.ElementReference", TypeFriendlyName = "ElementReference", Summary = @"The containing div Element Reference", }},
            { "MudBlazor.MudChatBubble.ParentArrowPosition", new() { Name = "ParentArrowPosition", TypeName = "MudBlazor.ChatArrowPosition", TypeFriendlyName = "ChatArrowPosition", }},
            { "MudBlazor.MudChatBubble.ParentColor", new() { Name = "ParentColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", }},
            { "MudBlazor.MudChatBubble.ParentVariant", new() { Name = "ParentVariant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", }},
            { "MudBlazor.MudChatBubble.Variant", new() { Name = "Variant", TypeName = "System.Nullable`1[[MudBlazor.Variant, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Variant?", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the component. It supports the theme colors.", }},
            { "MudBlazor.MudChatFooter.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of component.", }},
            { "MudBlazor.MudChatFooter.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudChatFooter.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The time to display within this header.", }},
            { "MudBlazor.MudChatHeader.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of component.", }},
            { "MudBlazor.MudChatHeader.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudChatHeader.Name", new() { Name = "Name", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The name to display within this header.", }},
            { "MudBlazor.MudChatHeader.Time", new() { Name = "Time", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The time to display within this header.", }},
            { "MudBlazor.MudCheckBox`1.CheckedIcon", new() { Name = "CheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.CheckBox"" />.", Summary = @"The icon to display for a checked state.", }},
            { "MudBlazor.MudCheckBox`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCheckBox`1.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact padding.", }},
            { "MudBlazor.MudCheckBox`1.IconClassname", new() { Name = "IconClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCheckBox`1.IndeterminateIcon", new() { Name = "IndeterminateIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.IndeterminateCheckBox"" />.", Summary = @"The icon to display for an indeterminate state.", }},
            { "MudBlazor.MudCheckBox`1.KeyboardEnabled", new() { Name = "KeyboardEnabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  The <c>Space</c> key cycles through true and false values (or true/false/null states if <see cref=""P:MudBlazor.MudCheckBox`1.TriState"" /> is <c>true</c>). <c>Delete</c> will clear the checkbox. <c>Enter</c> (or <c>NumPadEnter</c>) will set the checkbox.  <c>Backspace</c> will set an indeterminate value.", Summary = @"Allows this checkbox to be controlled via the keyboard.", }},
            { "MudBlazor.MudCheckBox`1.LabelClassname", new() { Name = "LabelClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCheckBox`1.TriState", new() { Name = "TriState", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the checkbox can support an indeterminate state such as a <c>null</c> value, in addition to <c>true</c> and <c>false</c>.", Summary = @"Allows the checkbox to have an indeterminate state.", }},
            { "MudBlazor.MudCheckBox`1.UncheckedColor", new() { Name = "UncheckedColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Theme colors are supported.", Summary = @"The color of the checkbox when its <c>Value</c> is <c>false</c> or <c>null</c>.", }},
            { "MudBlazor.MudCheckBox`1.UncheckedIcon", new() { Name = "UncheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.CheckBoxOutlineBlank"" />.", Summary = @"The icon to display for an unchecked state.", }},
            { "MudBlazor.MudChip`1.AvatarContent", new() { Name = "AvatarContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The avatar content to display inside the chip.", }},
            { "MudBlazor.MudChip`1.CheckedIcon", new() { Name = "CheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The icon to display when <see cref=""P:MudBlazor.MudChip`1.Selected"" /> is <c>true</c>.", }},
            { "MudBlazor.MudChip`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this chip.", }},
            { "MudBlazor.MudChip`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudChip`1.CloseIcon", new() { Name = "CloseIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The close icon to display when <see cref=""P:MudBlazor.MudChip`1.OnClose"" /> is set.", }},
            { "MudBlazor.MudChip`1.Color", new() { Name = "Color", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  When <see cref=""P:MudBlazor.MudChip`1.SelectedColor"" /> is set, this color is used when the chip is unselected.", Summary = @"The color of this chip.", }},
            { "MudBlazor.MudChip`1.Default", new() { Name = "Default", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"Selects this chip by default when part of a <see cref=""T:MudBlazor.MudChipSet`1"" />.", }},
            { "MudBlazor.MudChip`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the chip is visibly disabled and interaction is not allowed.", Summary = @"Prevents the user from interacting with this chip.", }},
            { "MudBlazor.MudChip`1.Href", new() { Name = "Href", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"<para>Defaults to <c>null</c>.  Use <see cref=""P:MudBlazor.MudChip`1.Target"" /> to control where the URL is opened.</para><para>Note: The close button cannot be enabled if this is set because <see href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#technical_summary"">interactive content violates the HTML spec</see>.</para>", Summary = @"The URL to navigate to when the chip is clicked.", }},
            { "MudBlazor.MudChip`1.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudChip`1.IconColor"" /> to control the color of this icon.", Summary = @"The icon to display within the chip.", }},
            { "MudBlazor.MudChip`1.IconColor", new() { Name = "IconColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The color of the <see cref=""P:MudBlazor.MudChip`1.Icon"" />.", }},
            { "MudBlazor.MudChip`1.JsApiService", new() { Name = "JsApiService", TypeName = "MudBlazor.IJsApiService", TypeFriendlyName = "IJsApiService", Summary = @"The service used to perform browser actions such as navigation.", }},
            { "MudBlazor.MudChip`1.Label", new() { Name = "Label", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  When <c>true</c>, the <see cref=""P:MudBlazor.LayoutProperties.DefaultBorderRadius"" /> is used for chip edges.", Summary = @"Uses the theme border radius for chip edges.", }},
            { "MudBlazor.MudChip`1.Rel", new() { Name = "Rel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"This property is typically used by web crawlers to get more information about a link.  Common values can be found here: <see href=""https://www.w3schools.com/tags/att_a_rel.asp"" />", Summary = @"The relationship between the current document and the linked document when <see cref=""P:MudBlazor.MudChip`1.Href"" /> is set.", }},
            { "MudBlazor.MudChip`1.Ripple", new() { Name = "Ripple", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"Displays a ripple effect when this chip is clicked.", }},
            { "MudBlazor.MudChip`1.Selected", new() { Name = "Selected", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <c>true</c>, the chip is displayed in a selected state.", Summary = @"Selects this chip.", }},
            { "MudBlazor.MudChip`1.SelectedColor", new() { Name = "SelectedColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  When set, this color is used for a selected chip, otherwise <see cref=""P:MudBlazor.MudChip`1.Color"" /> is used.", Summary = @"The color of the chip when it is selected.", }},
            { "MudBlazor.MudChip`1.Size", new() { Name = "Size", TypeName = "System.Nullable`1[[MudBlazor.Size, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Size?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The size of the chip.", }},
            { "MudBlazor.MudChip`1.Target", new() { Name = "Target", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>null</c>.  This value is typically <c>_blank</c>, <c>_self</c>, <c>_parent</c>, <c>_top</c>, or the name of an <c>iframe</c>.", Summary = @"The target to open URLs if <see cref=""P:MudBlazor.MudChip`1.Href"" /> is set.", }},
            { "MudBlazor.MudChip`1.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  This will be shown so long as <see cref=""P:MudBlazor.MudChip`1.ChildContent"" /> is not set.", Summary = @"The text label for the chip.", }},
            { "MudBlazor.MudChip`1.UriHelper", new() { Name = "UriHelper", TypeName = "Microsoft.AspNetCore.Components.NavigationManager", TypeFriendlyName = "NavigationManager", Summary = @"The service used to navigate the browser to another URL.", }},
            { "MudBlazor.MudChip`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When part of a <see cref=""T:MudBlazor.MudChipSet`1"" />, the <see cref=""P:MudBlazor.MudChipSet`1.SelectedValue"" /> is set to this value when the chip is selected.  Once set, the value should not change.", Summary = @"The value applied when the chip is selected.", }},
            { "MudBlazor.MudChip`1.Variant", new() { Name = "Variant", TypeName = "System.Nullable`1[[MudBlazor.Variant, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Variant?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The display variation to use.", }},
            { "MudBlazor.MudChipSet`1.AllClosable", new() { Name = "AllClosable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows all chips in this set to be closed.", }},
            { "MudBlazor.MudChipSet`1.CheckedIcon", new() { Name = "CheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Check"" />.  Can be overridden by setting <see cref=""P:MudBlazor.MudChip`1.CheckedIcon"" />.", Summary = @"The default icon shown for selected chips in this set.", }},
            { "MudBlazor.MudChipSet`1.CheckMark", new() { Name = "CheckMark", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Shows checkmarks for selected chips.", }},
            { "MudBlazor.MudChipSet`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this chipset.", }},
            { "MudBlazor.MudChipSet`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudChipSet`1.CloseIcon", new() { Name = "CloseIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Cancel"" />.  Can be overridden by setting <see cref=""P:MudBlazor.MudChip`1.CloseIcon"" />.", Summary = @"The default close icon shown for closeable chips in this set.", }},
            { "MudBlazor.MudChipSet`1.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Can be overridden by setting <see cref=""P:MudBlazor.MudChip`1.Color"" />.", Summary = @"The default color for all chips in this set.", }},
            { "MudBlazor.MudChipSet`1.Comparer", new() { Name = "Comparer", TypeName = "", TypeFriendlyName = "IEqualityComparer<T>", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""P:System.Collections.Generic.EqualityComparer`1.Default"" />.", Summary = @"The comparer used to determine when a selection has changed.", }},
            { "MudBlazor.MudChipSet`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the all chips are visibly disabled and interaction is not allowed.  Overrides any value set for <see cref=""P:MudBlazor.MudChip`1.Disabled"" />.", Summary = @"Prevents the user from interacting with chips in this set.", }},
            { "MudBlazor.MudChipSet`1.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.  Can be overridden by setting <see cref=""P:MudBlazor.MudChip`1.IconColor"" />.", Summary = @"The default icon color for all chips in this set.", }},
            { "MudBlazor.MudChipSet`1.Label", new() { Name = "Label", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the <see cref=""P:MudBlazor.LayoutProperties.DefaultBorderRadius"" /> is used for chip edges.  Can be overridden by setting <see cref=""P:MudBlazor.MudChip`1.Label"" />.", Summary = @"Uses the theme border radius for chips in this set.", }},
            { "MudBlazor.MudChipSet`1.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, chips cannot be clicked even if <see cref=""P:MudBlazor.MudChip`1.OnClick"" /> is set.", Summary = @"Prevents chips in this set from being clicked.", }},
            { "MudBlazor.MudChipSet`1.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.  Can be overridden by setting <see cref=""P:MudBlazor.MudChip`1.Ripple"" />.", Summary = @"Shows a ripple effect when a chip is clicked.", }},
            { "MudBlazor.MudChipSet`1.SelectedColor", new() { Name = "SelectedColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.  Can be overridden by setting <see cref=""P:MudBlazor.MudChip`1.SelectedColor"" />.", Summary = @"The default color for all selected chips in this set.", }},
            { "MudBlazor.MudChipSet`1.SelectedValue", new() { Name = "SelectedValue", TypeName = "", TypeFriendlyName = "T", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is used when <see cref=""P:MudBlazor.MudChipSet`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.SingleSelection"" /> or <see cref=""F:MudBlazor.SelectionMode.ToggleSelection"" />.", Summary = @"The currently selected value.", }},
            { "MudBlazor.MudChipSet`1.SelectedValues", new() { Name = "SelectedValues", TypeName = "", TypeFriendlyName = "IReadOnlyCollection<T>", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This event occurs when <see cref=""P:MudBlazor.MudChipSet`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.MultiSelection"" />.", Summary = @"The currently selected chips in this set.", }},
            { "MudBlazor.MudChipSet`1.SelectionMode", new() { Name = "SelectionMode", TypeName = "MudBlazor.SelectionMode", TypeFriendlyName = "SelectionMode", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.SelectionMode.SingleSelection"" />.  Other values include <see cref=""F:MudBlazor.SelectionMode.MultiSelection"" /> and <see cref=""F:MudBlazor.SelectionMode.ToggleSelection"" />.", Summary = @"The mode controlling how many selections are allowed.", }},
            { "MudBlazor.MudChipSet`1.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.  Can be overridden by setting <see cref=""P:MudBlazor.MudChip`1.Size"" />.", Summary = @"The default size for all chips in this set.", }},
            { "MudBlazor.MudChipSet`1.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Filled"" />.  Can be overridden by setting <see cref=""P:MudBlazor.MudChip`1.Variant"" />.", Summary = @"The default variant for all chips in this set.", }},
            { "MudBlazor.MudCollapse.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this panel.", }},
            { "MudBlazor.MudCollapse.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudCollapse.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays content within this panel.", }},
            { "MudBlazor.MudCollapse.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.", Summary = @"The maximum allowed height of this panel, in pixels.", }},
            { "MudBlazor.MudCollapse.Stylename", new() { Name = "Stylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudColorPicker.CloseIcon", new() { Name = "CloseIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Close"" />.", Summary = @"The custom icon to dislay for the close button.", }},
            { "MudBlazor.MudColorPicker.ColorPickerMode", new() { Name = "ColorPickerMode", TypeName = "MudBlazor.ColorPickerMode", TypeFriendlyName = "ColorPickerMode", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <see cref=""F:MudBlazor.ColorPickerMode.RGB"" />.  Other values are <see cref=""F:MudBlazor.ColorPickerMode.HEX"" /> for hexadecimal values and <see cref=""F:MudBlazor.ColorPickerMode.HSL"" /> for hue/saturation/lightness mode.", Summary = @"The initial color channels shown.", }},
            { "MudBlazor.MudColorPicker.ColorPickerView", new() { Name = "ColorPickerView", TypeName = "MudBlazor.ColorPickerView", TypeFriendlyName = "ColorPickerView", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <see cref=""F:MudBlazor.ColorPickerView.Spectrum"" />.   The view can be changed if <c>ShowToolbar</c> is <c>true</c>.", Summary = @"The initial view.", }},
            { "MudBlazor.MudColorPicker.DragEffect", new() { Name = "DragEffect", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>true</c>.  When <c>false</c>, conditions like long latency are better supported and can be adjusted via the <see cref=""P:MudBlazor.MudColorPicker.ThrottleInterval"" /> property.", Summary = @"Continues to update the selected color while the mouse button is down.", }},
            { "MudBlazor.MudColorPicker.GridIcon", new() { Name = "GridIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Apps"" />.", Summary = @"The icon to display for the grid mode button.", }},
            { "MudBlazor.MudColorPicker.ImportExportIcon", new() { Name = "ImportExportIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ImportExport"" />.", Summary = @"The icon to display for the import/export button.", }},
            { "MudBlazor.MudColorPicker.Palette", new() { Name = "Palette", TypeName = "System.Collections.Generic.IEnumerable`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IEnumerable<MudColor>", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to a list of <c>35</c> colors.  The first five colors show as the quick colors when the preview dot is clicked.", Summary = @"The list of quick colors to display.", }},
            { "MudBlazor.MudColorPicker.PaletteIcon", new() { Name = "PaletteIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Palette"" />.", Summary = @"The icon to display for the custom palette button.", }},
            { "MudBlazor.MudColorPicker.PickerContent", new() { Name = "PickerContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudColorPicker.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudColorPicker.ShowAlpha", new() { Name = "ShowAlpha", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>true</c>.  When <c>true</c>, alpha options will be displayed and color output will be <c>RGBA</c>, <c>HSLA</c> or <c>HEXA</c> instead of <c>RGB</c>, <c>HSL</c> or <c>HEX</c>.", Summary = @"Shows alpha transparency options.", }},
            { "MudBlazor.MudColorPicker.ShowColorField", new() { Name = "ShowColorField", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays the color field.", }},
            { "MudBlazor.MudColorPicker.ShowInputs", new() { Name = "ShowInputs", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays the text inputs, current mode, and mode switch.", }},
            { "MudBlazor.MudColorPicker.ShowModeSwitch", new() { Name = "ShowModeSwitch", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays the switch to change the color mode.", }},
            { "MudBlazor.MudColorPicker.ShowPreview", new() { Name = "ShowPreview", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>true</c>.  When <c>true</c>, the preview color can be used as a button for collection colors.", Summary = @"Displays a preview of the color.", }},
            { "MudBlazor.MudColorPicker.ShowSliders", new() { Name = "ShowSliders", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays hue and alpha sliders.", }},
            { "MudBlazor.MudColorPicker.SpectrumIcon", new() { Name = "SpectrumIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Tune"" />.", Summary = @"The icon to display for the spectrum mode button.", }},
            { "MudBlazor.MudColorPicker.ThrottleInterval", new() { Name = "ThrottleInterval", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"Defaults to <c>300</c> milliseconds between updates.", Summary = @"The delay, in milliseconds, between updates to the selected color when <see cref=""P:MudBlazor.MudColorPicker.DragEffect"" /> is <c>true</c>.", }},
            { "MudBlazor.MudColorPicker.UpdateBindingIfOnlyHSLChanged", new() { Name = "UpdateBindingIfOnlyHSLChanged", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the bound value changes when HSL values change, even if the RGB values have not changed.", Summary = @"Limits updates to the bound value to when HSL values change.", }},
            { "MudBlazor.MudColorPicker.Value", new() { Name = "Value", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Category = "Data", IsParameter = true, Order = 0, Remarks = @"You can use properties in <see cref=""T:MudBlazor.Utilities.MudColor"" /> to get color channel values such as <c>RGB</c>, <c>HSL</c>, <c>HEX</c> and more.  When this value changes, the <see cref=""P:MudBlazor.MudColorPicker.ValueChanged"" /> event occurs.", Summary = @"The currently selected color as a <see cref=""T:MudBlazor.Utilities.MudColor"" />.", }},
            { "MudBlazor.MudComponentBase.Class", new() { Name = "Class", TypeName = "System.String", TypeFriendlyName = "string", Category = "Common", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  You can use spaces to separate multiple classes.  Use the <see cref=""P:MudBlazor.MudComponentBase.Style"" /> property to apply custom CSS styles.", Summary = @"The CSS classes applied to this component.", }},
            { "MudBlazor.MudComponentBase.FieldId", new() { Name = "FieldId", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"If the UserAttributes contain an ID make it accessible for WCAG labelling of input fields", }},
            { "MudBlazor.MudComponentBase.IsJSRuntimeAvailable", new() { Name = "IsJSRuntimeAvailable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, Remarks = @"When <c>true</c>, JavaScript interop calls can be made.", Summary = @"Whether the <see cref=""T:Microsoft.JSInterop.JSRuntime"" /> is available.", }},
            { "MudBlazor.MudComponentBase.Logger", new() { Name = "Logger", TypeName = "Microsoft.Extensions.Logging.ILogger", TypeFriendlyName = "ILogger", IsProtected = true, }},
            { "MudBlazor.MudComponentBase.Style", new() { Name = "Style", TypeName = "System.String", TypeFriendlyName = "string", Category = "Common", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudComponentBase.Class"" /> property to apply CSS classes.", Summary = @"The CSS styles applied to this component.", }},
            { "MudBlazor.MudComponentBase.Tag", new() { Name = "Tag", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Common", IsParameter = true, Remarks = @"This property is typically used to associate additional information with this component, such as a model containing data for this component.", Summary = @"The arbitrary object to link to this component.", }},
            { "MudBlazor.MudComponentBase.UserAttributes", new() { Name = "UserAttributes", TypeName = "System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Dictionary<string, object>", Category = "Common", IsParameter = true, Remarks = @"This property is typically used to provide additional HTML attributes during rendering such as ARIA accessibility tags or a custom ID.", Summary = @"The additional HTML attributes to apply to this component.", }},
            { "MudBlazor.MudContainer.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of component.", }},
            { "MudBlazor.MudContainer.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudContainer.Fixed", new() { Name = "Fixed", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Set the max-width to match the min-width of the current breakpoint. This is useful if you'd prefer to design for a fixed set of sizes instead of trying to accommodate a fully fluid viewport. It's fluid by default.", }},
            { "MudBlazor.MudContainer.Gutters", new() { Name = "Gutters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Default is <c>true</c>.", Summary = @"Adds left and right padding to the container itself.", }},
            { "MudBlazor.MudContainer.MaxWidth", new() { Name = "MaxWidth", TypeName = "MudBlazor.MaxWidth", TypeFriendlyName = "MaxWidth", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth.", }},
            { "MudBlazor.MudContextualActionBar.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Determines if the action bar is visible.", }},
            { "MudBlazor.MudDataGrid`1.ApplyDropClassesOnDragStarted", new() { Name = "ApplyDropClassesOnDragStarted", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows drop locations for columns even when not currently dragging a column.", }},
            { "MudBlazor.MudDataGrid`1.Bordered", new() { Name = "Bordered", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows left and right borders for each column.", }},
            { "MudBlazor.MudDataGrid`1.Breakpoint", new() { Name = "Breakpoint", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Breakpoint.Xs"" />.  Supported values are <c>None</c>, <c>Xs</c>, <c>Sm</c>, <c>Md</c>, <c>Lg</c> and <c>Xl</c>.", Summary = @"The breakpoint at which the grid switches to mobile layout.", }},
            { "MudBlazor.MudDataGrid`1.CanCancelEdit", new() { Name = "CanCancelEdit", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a cancel button during inline editing when <see cref=""P:MudBlazor.MudDataGrid`1.EditMode"" /> is <see cref=""F:MudBlazor.DataGridEditMode.Cell"" />.", }},
            { "MudBlazor.MudDataGrid`1.ChildRowContent", new() { Name = "ChildRowContent", TypeName = "", TypeFriendlyName = "RenderFragment<CellContext<T>>", IsParameter = true, Summary = @"The content shown for each cell.", }},
            { "MudBlazor.MudDataGrid`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDataGrid`1.CloneStrategy", new() { Name = "CloneStrategy", TypeName = "", TypeFriendlyName = "ICloneStrategy<T>", IsParameter = true, Remarks = @"During edit mode, a copy of the item is edited, in order to allow an edit to be canceled.  This property controls how that copy is made.", Summary = @"The technique used to copy items for editing.", }},
            { "MudBlazor.MudDataGrid`1.ColGroup", new() { Name = "ColGroup", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Remarks = @"<para>This property specifies a group of one or more columns in a table for formatting.  For example:</para><para>table    colgroup       col span=""2"" style=""background-color:red""       col style=""background-color:yellow""     colgroup     header     bodytable</para>", Summary = @"The content for any column groupings.", }},
            { "MudBlazor.MudDataGrid`1.ColumnResizeMode", new() { Name = "ColumnResizeMode", TypeName = "MudBlazor.ResizeMode", TypeFriendlyName = "ResizeMode", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.ResizeMode.None"" />.  Other values include <see cref=""F:MudBlazor.ResizeMode.Column"" /> and <see cref=""F:MudBlazor.ResizeMode.Container"" />.", Summary = @"The column resizing behavior for this grid.", }},
            { "MudBlazor.MudDataGrid`1.Columns", new() { Name = "Columns", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"Any custom content for this grid's columns.", }},
            { "MudBlazor.MudDataGrid`1.ColumnsPanelReordering", new() { Name = "ColumnsPanelReordering", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows columns to be reordered via the columns panel.", }},
            { "MudBlazor.MudDataGrid`1.Comparer", new() { Name = "Comparer", TypeName = "", TypeFriendlyName = "IEqualityComparer<T>", IsParameter = true, Remarks = @"Defaults to <c>null</c>. When set, this comparer will be used to determine if a row is selected.", Summary = @"The comparer used to determine row selection.", }},
            { "MudBlazor.MudDataGrid`1.Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", IsParameter = true, Remarks = @"Defaults to <see cref=""P:System.Globalization.CultureInfo.InvariantCulture"" />.", Summary = @"The culture used to format numeric and date values.  Can be overridden by <see cref=""P:MudBlazor.Column`1.Culture"" />.", }},
            { "MudBlazor.MudDataGrid`1.CurrentPage", new() { Name = "CurrentPage", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Remarks = @"Defaults to <c>0</c>.  Applies when the <see cref=""P:MudBlazor.MudDataGrid`1.PagerContent"" /> section contains a <see cref=""T:MudBlazor.MudTablePager"" />.", Summary = @"The current page being displayed.", }},
            { "MudBlazor.MudDataGrid`1.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact padding.", }},
            { "MudBlazor.MudDataGrid`1.DragDropColumnReordering", new() { Name = "DragDropColumnReordering", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Can be overridden for individual columns via <see cref=""P:MudBlazor.Column`1.DragAndDropEnabled"" />.", Summary = @"Allows columns to be reordered via drag-and-drop.", }},
            { "MudBlazor.MudDataGrid`1.DragIndicatorIcon", new() { Name = "DragIndicatorIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.DragIndicator"" />.  Use the <see cref=""P:MudBlazor.MudDataGrid`1.DragIndicatorSize"" /> property to control this icon's size.", Summary = @"The icon displayed when hovering over a draggable column.", }},
            { "MudBlazor.MudDataGrid`1.DragIndicatorSize", new() { Name = "DragIndicatorSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Small"" />.  Use the <see cref=""P:MudBlazor.MudDataGrid`1.DragIndicatorIcon"" /> property to control which icon is displayed.", Summary = @"The size of the icon displayed when hovering over a draggable column.", }},
            { "MudBlazor.MudDataGrid`1.DropAllowedClass", new() { Name = "DropAllowedClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <c>drop-allowed</c>.", Summary = @"The CSS class applied to columns where a dragged column can be dropped.", }},
            { "MudBlazor.MudDataGrid`1.DropNotAllowedClass", new() { Name = "DropNotAllowedClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <c>drop-not-allowed</c>.", Summary = @"The CSS class applied to columns where a dragged column cannot be dropped.", }},
            { "MudBlazor.MudDataGrid`1.EditDialogOptions", new() { Name = "EditDialogOptions", TypeName = "MudBlazor.DialogOptions", TypeFriendlyName = "DialogOptions", IsParameter = true, Summary = @"Any options applied to the edit dialog when <see cref=""P:MudBlazor.MudDataGrid`1.EditMode"" /> is <see cref=""F:MudBlazor.DataGridEditMode.Form"" />.", }},
            { "MudBlazor.MudDataGrid`1.EditMode", new() { Name = "EditMode", TypeName = "System.Nullable`1[[MudBlazor.DataGridEditMode, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "DataGridEditMode?", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.DataGridEditMode.Cell"" />.  Only works when <see cref=""P:MudBlazor.MudDataGrid`1.ReadOnly"" /> is <c>false</c>.", Summary = @"Controls how cell values are edited.", }},
            { "MudBlazor.MudDataGrid`1.EditTrigger", new() { Name = "EditTrigger", TypeName = "System.Nullable`1[[MudBlazor.DataGridEditTrigger, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "DataGridEditTrigger?", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.DataGridEditTrigger.Manual"" />.", Summary = @"The behavior which begins editing a cell when <see cref=""P:MudBlazor.MudDataGrid`1.EditMode"" /> is <see cref=""F:MudBlazor.DataGridEditMode.Form"" />.", }},
            { "MudBlazor.MudDataGrid`1.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Remarks = @"Defaults to <c>1</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudDataGrid`1.Filterable", new() { Name = "Filterable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Can be overridden for individual columns via <see cref=""P:MudBlazor.Column`1.Filterable"" />.", Summary = @"Allows filtering of data in this grid.", }},
            { "MudBlazor.MudDataGrid`1.FilterCaseSensitivity", new() { Name = "FilterCaseSensitivity", TypeName = "MudBlazor.DataGridFilterCaseSensitivity", TypeFriendlyName = "DataGridFilterCaseSensitivity", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.DataGridFilterCaseSensitivity.Default"" />.", Summary = @"The case sensitivity setting for columns with <c>string</c> values.", }},
            { "MudBlazor.MudDataGrid`1.FilterDefinitions", new() { Name = "FilterDefinitions", TypeName = "", TypeFriendlyName = "List<IFilterDefinition<T>>", IsParameter = true, Remarks = @"When using a <see cref=""P:MudBlazor.MudDataGrid`1.FilterMode"" /> of <see cref=""F:MudBlazor.DataGridFilterMode.Simple"" />, this property is managed automatically.", Summary = @"The filter definitions for all columns.", }},
            { "MudBlazor.MudDataGrid`1.FilteredItems", new() { Name = "FilteredItems", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Summary = @"The items which remain after applying filters.", }},
            { "MudBlazor.MudDataGrid`1.FilterMode", new() { Name = "FilterMode", TypeName = "MudBlazor.DataGridFilterMode", TypeFriendlyName = "DataGridFilterMode", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.DataGridFilterMode.Simple"" />.", Summary = @"The way that this grid filters data.", }},
            { "MudBlazor.MudDataGrid`1.FilterTemplate", new() { Name = "FilterTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<MudDataGrid<T>>", IsParameter = true, Summary = @"The template used to display each filter.", }},
            { "MudBlazor.MudDataGrid`1.FixedFooter", new() { Name = "FixedFooter", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Set the <see cref=""P:MudBlazor.MudDataGrid`1.Height"" /> property to make this grid scrollable.", Summary = @"Fixes the footer in place even as the grid is scrolled.", }},
            { "MudBlazor.MudDataGrid`1.FixedHeader", new() { Name = "FixedHeader", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Set the <see cref=""P:MudBlazor.MudDataGrid`1.Height"" /> property to make this grid scrollable.", Summary = @"Fixes the header in place even as the grid is scrolled.", }},
            { "MudBlazor.MudDataGrid`1.FootClassname", new() { Name = "FootClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDataGrid`1.FooterClass", new() { Name = "FooterClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"These classes are applied to the <c>tfoot</c> tag of the grid.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the grid footer.", }},
            { "MudBlazor.MudDataGrid`1.Groupable", new() { Name = "Groupable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, columns can be used to group sets of items.  Can be overridden for individual columns via <see cref=""P:MudBlazor.Column`1.Groupable"" />.", Summary = @"Allows grouping of columns in this grid.", }},
            { "MudBlazor.MudDataGrid`1.GroupClass", new() { Name = "GroupClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Applies when <see cref=""P:MudBlazor.MudDataGrid`1.Groupable"" /> is <c>true</c>.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to column groups.", }},
            { "MudBlazor.MudDataGrid`1.GroupClassFunc", new() { Name = "GroupClassFunc", TypeName = "", TypeFriendlyName = "Func<GroupDefinition<T>, string>", IsParameter = true, Remarks = @"Applies when <see cref=""P:MudBlazor.MudDataGrid`1.Groupable"" /> is <c>true</c>.", Summary = @"The function which determines CSS classes for column groups.", }},
            { "MudBlazor.MudDataGrid`1.GroupExpanded", new() { Name = "GroupExpanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Applies when <see cref=""P:MudBlazor.MudDataGrid`1.Groupable"" /> is <c>true</c>.", Summary = @"Expands grouped columns by default.", }},
            { "MudBlazor.MudDataGrid`1.GroupStyle", new() { Name = "GroupStyle", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Applies when <see cref=""P:MudBlazor.MudDataGrid`1.Groupable"" /> is <c>true</c>.", Summary = @"The CSS styles applied to column groups.", }},
            { "MudBlazor.MudDataGrid`1.GroupStyleFunc", new() { Name = "GroupStyleFunc", TypeName = "", TypeFriendlyName = "Func<GroupDefinition<T>, string>", IsParameter = true, Remarks = @"Applies when <see cref=""P:MudBlazor.MudDataGrid`1.Groupable"" /> is <c>true</c>.", Summary = @"The function which determines CSS styles for column groups.", }},
            { "MudBlazor.MudDataGrid`1.HasPager", new() { Name = "HasPager", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates if a <see cref=""T:MudBlazor.MudDataGridPager`1"" /> is present.", }},
            { "MudBlazor.MudDataGrid`1.HeadClassname", new() { Name = "HeadClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDataGrid`1.Header", new() { Name = "Header", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"Any custom content for this grid's header.", }},
            { "MudBlazor.MudDataGrid`1.HeaderClass", new() { Name = "HeaderClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"These classes are applied to the <c>thead</c> tag of the grid.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the grid header.", }},
            { "MudBlazor.MudDataGrid`1.HeaderFooterStyle", new() { Name = "HeaderFooterStyle", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDataGrid`1.Height", new() { Name = "Height", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  Values such as <c>30%</c> and <c>500px</c> are allowed.  When <c>null</c>, the grid will try to grow in height.  Must be set when <see cref=""P:MudBlazor.MudDataGrid`1.Virtualize"" /> is <c>true</c>.", Summary = @"The height of this grid.", }},
            { "MudBlazor.MudDataGrid`1.Hideable", new() { Name = "Hideable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Can be overridden for individual columns via <see cref=""P:MudBlazor.Column`1.Hideable"" />.", Summary = @"Allows columns to be hidden.", }},
            { "MudBlazor.MudDataGrid`1.HorizontalScrollbar", new() { Name = "HorizontalScrollbar", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows a horizontal scrollbar.", }},
            { "MudBlazor.MudDataGrid`1.Hover", new() { Name = "Hover", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Highlights rows when hovering over them.", }},
            { "MudBlazor.MudDataGrid`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", IsParameter = true, Remarks = @"One row will be displayed per item.  Use the <see cref=""P:MudBlazor.MudDataGrid`1.ServerData"" /> function instead of this property to get data on demand.", Summary = @"The data for this grid when <see cref=""P:MudBlazor.MudDataGrid`1.ServerData"" /> is not set.", }},
            { "MudBlazor.MudDataGrid`1.ItemSize", new() { Name = "ItemSize", TypeName = "System.Single", TypeFriendlyName = "float", IsParameter = true, Summary = @"The height of each row, in pixels, when <see cref=""P:MudBlazor.MudDataGrid`1.Virtualize"" /> is <c>true</c>.", }},
            { "MudBlazor.MudDataGrid`1.Loading", new() { Name = "Loading", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  This property is <c>true</c> while the <see cref=""P:MudBlazor.MudDataGrid`1.ServerData"" /> function is executing.", Summary = @"Shows a loading animation while querying data.", }},
            { "MudBlazor.MudDataGrid`1.LoadingContent", new() { Name = "LoadingContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content shown while <see cref=""P:MudBlazor.MudDataGrid`1.Loading"" /> is <c>true</c>.", }},
            { "MudBlazor.MudDataGrid`1.LoadingProgressColor", new() { Name = "LoadingProgressColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Info"" />.  Theme colors are supported.", Summary = @"The color of the loading progress indicator while <see cref=""P:MudBlazor.MudDataGrid`1.Loading"" /> is <c>true</c>.", }},
            { "MudBlazor.MudDataGrid`1.MultiSelection", new() { Name = "MultiSelection", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows selection of more than one row.", }},
            { "MudBlazor.MudDataGrid`1.NoRecordsContent", new() { Name = "NoRecordsContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content shown when there are no rows to display.", }},
            { "MudBlazor.MudDataGrid`1.numPages", new() { Name = "numPages", TypeName = "System.Int32", TypeFriendlyName = "int", IsProtected = true, }},
            { "MudBlazor.MudDataGrid`1.Outlined", new() { Name = "Outlined", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows an outline around this grid.", }},
            { "MudBlazor.MudDataGrid`1.OverscanCount", new() { Name = "OverscanCount", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Remarks = @"Defaults to <c>3</c>.  This value can reduce the amount of rendering during scrolling, but higher values can affect performance.", Summary = @"The number of additional items rendered outside the visible region when <see cref=""P:MudBlazor.MudDataGrid`1.Virtualize"" /> is <c>true</c>.", }},
            { "MudBlazor.MudDataGrid`1.PagerContent", new() { Name = "PagerContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Remarks = @"A <see cref=""T:MudBlazor.MudTablePager"" /> is typically added here to break up rows into multiple pages.", Summary = @"The content shown for pagination.", }},
            { "MudBlazor.MudDataGrid`1.PagerStateHasChangedEvent", new() { Name = "PagerStateHasChangedEvent", TypeName = "System.Action", TypeFriendlyName = "Action", Summary = @"Occurs when the pager state has changed.", }},
            { "MudBlazor.MudDataGrid`1.QuickFilter", new() { Name = "QuickFilter", TypeName = "", TypeFriendlyName = "Func<T, bool>", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  This function is typically used to implement a custom search.", Summary = @"The function which determines visibility of each item in this grid.", }},
            { "MudBlazor.MudDataGrid`1.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.  When <c>false</c>, the edit behavior is controlled via <see cref=""P:MudBlazor.MudDataGrid`1.EditMode"" />.", Summary = @"Prevents values from being edited.", }},
            { "MudBlazor.MudDataGrid`1.RowClass", new() { Name = "RowClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Multiple classes must be separated by spaces.  Note that some CSS settings are overridden by other styles, such as those from <see cref=""T:MudBlazor.MudTd"" />.", Summary = @"The CSS class applied to each row.", }},
            { "MudBlazor.MudDataGrid`1.RowClassFunc", new() { Name = "RowClassFunc", TypeName = "", TypeFriendlyName = "Func<T, int, string>", IsParameter = true, Remarks = @"The function passes the current item and row index as parameters.", Summary = @"The function which calculates CSS classes for each row.", }},
            { "MudBlazor.MudDataGrid`1.RowLoadingContent", new() { Name = "RowLoadingContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"A RenderFragment that will be used as a placeholder when the Virtualize component is asynchronously loading data.This placeholder is displayed for each item in the data source that is yet to be loaded. Useful for presenting a loading indicator in a data grid row while the actual data is being fetched from the server.", }},
            { "MudBlazor.MudDataGrid`1.RowsPerPage", new() { Name = "RowsPerPage", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Remarks = @"Defaults to <c>10</c>.  Applies when the <see cref=""P:MudBlazor.MudDataGrid`1.PagerContent"" /> section contains a <see cref=""T:MudBlazor.MudTablePager"" />.  When this property changes, the <see cref=""P:MudBlazor.MudDataGrid`1.RowsPerPageChanged"" /> event occurs.", Summary = @"The number of rows displayed for each page.", }},
            { "MudBlazor.MudDataGrid`1.RowStyle", new() { Name = "RowStyle", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Some CSS settings are overridden by other styles, such as those from <see cref=""T:MudBlazor.MudTd"" />.", Summary = @"The CSS styles applied to each row.", }},
            { "MudBlazor.MudDataGrid`1.RowStyleFunc", new() { Name = "RowStyleFunc", TypeName = "", TypeFriendlyName = "Func<T, int, string>", IsParameter = true, Remarks = @"The function passes the current item and row index as parameters.", Summary = @"The function which calculates CSS styles for each row.", }},
            { "MudBlazor.MudDataGrid`1.SelectedItem", new() { Name = "SelectedItem", TypeName = "", TypeFriendlyName = "T", IsParameter = true, Remarks = @"This property can be bound (<c>@bind-SelectedItem</c>) to initially select a row.  Use <see cref=""P:MudBlazor.MudDataGrid`1.SelectedItems"" /> when <see cref=""P:MudBlazor.MudDataGrid`1.MultiSelection"" /> is <c>true</c>.", Summary = @"The currently selected row when <see cref=""P:MudBlazor.MudDataGrid`1.MultiSelection"" /> is <c>false</c>.", }},
            { "MudBlazor.MudDataGrid`1.SelectedItems", new() { Name = "SelectedItems", TypeName = "", TypeFriendlyName = "HashSet<T>", IsParameter = true, Remarks = @"This property can be bound (<c>@bind-SelectedItems</c>) to initially select rows.  Use <see cref=""P:MudBlazor.MudDataGrid`1.SelectedItem"" /> when <see cref=""P:MudBlazor.MudDataGrid`1.MultiSelection"" /> is <c>false</c>.", Summary = @"The currently selected rows when <see cref=""P:MudBlazor.MudDataGrid`1.MultiSelection"" /> is <c>true</c>.", }},
            { "MudBlazor.MudDataGrid`1.Selection", new() { Name = "Selection", TypeName = "", TypeFriendlyName = "HashSet<T>", Summary = @"The currently selected items.", }},
            { "MudBlazor.MudDataGrid`1.SelectOnRowClick", new() { Name = "SelectOnRowClick", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.", Summary = @"Toggles the row checkbox when the row is clicked.", }},
            { "MudBlazor.MudDataGrid`1.ServerData", new() { Name = "ServerData", TypeName = "", TypeFriendlyName = "Func<GridState<T>, Task<GridData<T>>>", IsParameter = true, Remarks = @"The function accepts a <see cref=""T:MudBlazor.GridState`1"" /> with current sorting, filtering, and pagination parameters.  Then, return a <see cref=""T:MudBlazor.GridData`1"" /> with a page of values, and the total (unpaginated) items set in <see cref=""P:MudBlazor.GridData`1.TotalItems"" />.  When set, the <see cref=""P:MudBlazor.MudDataGrid`1.Items"" /> property cannot be set.", Summary = @"The function which gets data for this grid.", }},
            { "MudBlazor.MudDataGrid`1.ServerItems", new() { Name = "ServerItems", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Summary = @"The items returned by the <see cref=""P:MudBlazor.MudDataGrid`1.ServerData"" /> function.", }},
            { "MudBlazor.MudDataGrid`1.ShowColumnOptions", new() { Name = "ShowColumnOptions", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.  Can be overridden for individual columns via <see cref=""P:MudBlazor.Column`1.ShowColumnOptions"" />.", Summary = @"Shows options for columns.", }},
            { "MudBlazor.MudDataGrid`1.ShowFilterIcons", new() { Name = "ShowFilterIcons", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.  Can be overridden for individual columns via <see cref=""P:MudBlazor.Column`1.ShowFilterIcon"" />.", Summary = @"Shows icons for each column filter.", }},
            { "MudBlazor.MudDataGrid`1.ShowMenuIcon", new() { Name = "ShowMenuIcon", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, an icon will be displayed to control column visibility, collapse all columns, or expand all columns.", Summary = @"Shows the settings icon in the grid header.", }},
            { "MudBlazor.MudDataGrid`1.SortDefinitions", new() { Name = "SortDefinitions", TypeName = "", TypeFriendlyName = "Dictionary<string, SortDefinition<T>>", IsParameter = true, Remarks = @"When using a <see cref=""P:MudBlazor.MudDataGrid`1.FilterMode"" /> of <see cref=""F:MudBlazor.DataGridFilterMode.Simple"" />, this property is managed automatically.", Summary = @"The sort definitions for all columns.", }},
            { "MudBlazor.MudDataGrid`1.SortMode", new() { Name = "SortMode", TypeName = "MudBlazor.SortMode", TypeFriendlyName = "SortMode", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.SortMode.Multiple"" />.  Can be overridden for individual columns via <see cref=""P:MudBlazor.Column`1.Sortable"" />.", Summary = @"Sorts data in the grid.", }},
            { "MudBlazor.MudDataGrid`1.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />", Summary = @"Disables rounded corners.", }},
            { "MudBlazor.MudDataGrid`1.Striped", new() { Name = "Striped", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows alternating row styles.", }},
            { "MudBlazor.MudDataGrid`1.Stylename", new() { Name = "Stylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDataGrid`1.TableClass", new() { Name = "TableClass", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDataGrid`1.TableStyle", new() { Name = "TableStyle", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDataGrid`1.ToolBarContent", new() { Name = "ToolBarContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"Any custom content to show in this grid's toolbar.", }},
            { "MudBlazor.MudDataGrid`1.Validator", new() { Name = "Validator", TypeName = "MudBlazor.Interfaces.IForm", TypeFriendlyName = "IForm", IsParameter = true, Remarks = @"Use to bind validation and touched handling to outer form.", Summary = @"The validator which validates values in each row.", }},
            { "MudBlazor.MudDataGrid`1.Virtualize", new() { Name = "Virtualize", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Only works when <see cref=""P:MudBlazor.MudDataGrid`1.Height"" /> is set.  This feature can improve performance for large data sets.", Summary = @"Renders only visible items instead of all items.", }},
            { "MudBlazor.MudDataGrid`1.VirtualizeServerData", new() { Name = "VirtualizeServerData", TypeName = "", TypeFriendlyName = "Func<GridStateVirtualize<T>, CancellationToken, Task<GridData<T>>>", IsParameter = true, Remarks = @"The function accepts a <see cref=""T:MudBlazor.GridStateVirtualize`1"" /> with current sorting, filtering, and pagination parameters.Then, return a <see cref=""T:MudBlazor.GridData`1"" /> with a list of values, and the total (unpaginated) items count in <see cref=""P:MudBlazor.GridData`1.TotalItems"" />.This property is used when you need to display a list without a paginator, but with loading data from the server as the scroll position changes.", Summary = @"The function which gets data for this grid.", }},
            { "MudBlazor.MudDataGridPager`1.AllItemsText", new() { Name = "AllItemsText", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"Defines the text shown in the items per page dropdown when a user provides int.MaxValue as an option", }},
            { "MudBlazor.MudDataGridPager`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDataGridPager`1.DataGrid", new() { Name = "DataGrid", TypeName = "", TypeFriendlyName = "MudDataGrid<T>", Summary = @"The grid which contains this pager.", }},
            { "MudBlazor.MudDataGridPager`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Disables the back button, forward button, and page-size drop-down list.", }},
            { "MudBlazor.MudDataGridPager`1.InfoFormat", new() { Name = "InfoFormat", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <c>{first_item}-{last_item} of {all_items}</c> (e.g. <c>0-25 of 77</c>).  Available values are <c>{first_item}</c>, <c>{last_item}</c>, and <c>{all_items}</c>.", Summary = @"The format for the first item, last item, and number of total items.", }},
            { "MudBlazor.MudDataGridPager`1.PageSizeOptions", new() { Name = "PageSizeOptions", TypeName = "System.Int32[]", TypeFriendlyName = "int[]", IsParameter = true, Summary = @"The allowed page sizes when <see cref=""P:MudBlazor.MudDataGridPager`1.PageSizeSelector"" /> is <c>true</c>.  Defaults to <c>10</c>, <c>25</c>, <c>50</c>, <c>100</c>.", }},
            { "MudBlazor.MudDataGridPager`1.PageSizeSelector", new() { Name = "PageSizeSelector", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.  Use <see cref=""P:MudBlazor.MudDataGridPager`1.PageSizeOptions"" /> to control the allowed page sizes.", Summary = @"Shows the page-size drop-down list.", }},
            { "MudBlazor.MudDataGridPager`1.RowsPerPageString", new() { Name = "RowsPerPageString", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <c>Rows per page:</c>.  Can be localized to other languages.", Summary = @"The text to show for the ""Rows per page:"" label.", }},
            { "MudBlazor.MudDataGridPager`1.ShowNavigation", new() { Name = "ShowNavigation", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the pagination buttons.", }},
            { "MudBlazor.MudDataGridPager`1.ShowPageNumber", new() { Name = "ShowPageNumber", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the current page number.", }},
            { "MudBlazor.MudDatePicker.Date", new() { Name = "Date", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", Category = "Data", IsParameter = true, Order = 0, Summary = @"The currently selected date.", }},
            { "MudBlazor.MudDatePicker.TimeProvider", new() { Name = "TimeProvider", TypeName = "System.TimeProvider", TypeFriendlyName = "TimeProvider", IsProtected = true, }},
            { "MudBlazor.MudDateRangePicker.AllowDisabledDatesInRange", new() { Name = "AllowDisabledDatesInRange", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"By default, it will always ignore disabled dates. This parameter will take effect when <see cref=""P:MudBlazor.MudBaseDatePicker.IsDateDisabledFunc"" /> is set.", Summary = @"Enables capture for disabled dates within the selected date range.", }},
            { "MudBlazor.MudDateRangePicker.DateRange", new() { Name = "DateRange", TypeName = "MudBlazor.DateRange", TypeFriendlyName = "DateRange", Category = "Data", IsParameter = true, Order = 0, Summary = @"The currently selected date range.", }},
            { "MudBlazor.MudDateRangePicker.InputContent", new() { Name = "InputContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudDateRangePicker.IsRange", new() { Name = "IsRange", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudDateRangePicker.PlaceholderEnd", new() { Name = "PlaceholderEnd", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to give the user a hint as to what kind of input is expected.", Summary = @"The text displayed in the end input if no date is specified.", }},
            { "MudBlazor.MudDateRangePicker.PlaceholderStart", new() { Name = "PlaceholderStart", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to give the user a hint as to what kind of input is expected.", Summary = @"The text displayed in the start input if no date is specified.", }},
            { "MudBlazor.MudDateRangePicker.SeparatorIcon", new() { Name = "SeparatorIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ArrowRightAlt"" />.", Summary = @"The icon displayed between start and end dates.", }},
            { "MudBlazor.MudDebouncedInput`1.DebounceInterval", new() { Name = "DebounceInterval", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The number of milliseconds to wait before updating the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> value.", }},
            { "MudBlazor.MudDialog.ActionsClass", new() { Name = "ActionsClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the action buttons content.", }},
            { "MudBlazor.MudDialog.ActionsClassname", new() { Name = "ActionsClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDialog.ContentClass", new() { Name = "ContentClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the main dialog content.", }},
            { "MudBlazor.MudDialog.ContentClassname", new() { Name = "ContentClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDialog.ContentStyle", new() { Name = "ContentStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The CSS styles applied to the main dialog content.", }},
            { "MudBlazor.MudDialog.DefaultFocus", new() { Name = "DefaultFocus", TypeName = "MudBlazor.DefaultFocus", TypeFriendlyName = "DefaultFocus", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.DefaultFocus.Element"" /> in <see cref=""P:MudBlazor.MudGlobal.DialogDefaults.DefaultFocus"" />.", Summary = @"The element which will receive focus when this dialog is shown.", }},
            { "MudBlazor.MudDialog.DialogActions", new() { Name = "DialogActions", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The custom actions for this dialog.", }},
            { "MudBlazor.MudDialog.DialogContent", new() { Name = "DialogContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The main content for this dialog.", }},
            { "MudBlazor.MudDialog.DialogService", new() { Name = "DialogService", TypeName = "MudBlazor.IDialogService", TypeFriendlyName = "IDialogService", IsProtected = true, }},
            { "MudBlazor.MudDialog.Gutters", new() { Name = "Gutters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Adds padding to the sides of this dialog.", }},
            { "MudBlazor.MudDialog.Options", new() { Name = "Options", TypeName = "MudBlazor.DialogOptions", TypeFriendlyName = "DialogOptions", Category = "Misc", IsParameter = true, Order = 2147483646, Remarks = @"These options are used if none are provided during the <see cref=""M:MudBlazor.MudDialog.ShowAsync(System.String,MudBlazor.DialogOptions)"" /> method.  This is typically used for inline dialogs.", Summary = @"The default options for this dialog.", }},
            { "MudBlazor.MudDialog.TitleClass", new() { Name = "TitleClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes to apply to the title.", }},
            { "MudBlazor.MudDialog.TitleContent", new() { Name = "TitleContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <c>null</c>, the <see cref=""P:MudBlazor.MudDialogContainer.Title"" /> will be used.", Summary = @"The custom content for this dialog's title.", }},
            { "MudBlazor.MudDialog.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />This can be bound via <c>@bind-Visible</c> to show or hide inline dialogs.  For regular dialogs, use the <see cref=""M:MudBlazor.DialogService.ShowAsync(System.Type)"" /> and <see cref=""M:MudBlazor.IMudDialogInstance.Close"" /> methods.", Summary = @"For inline dialogs, shows this dialog.", }},
            { "MudBlazor.MudDialogContainer.BackgroundClassname", new() { Name = "BackgroundClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDialogContainer.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDialogContainer.CloseIcon", new() { Name = "CloseIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Close"" />.", Summary = @"The custom icon displayed in the upper-right corner for closing this dialog.", }},
            { "MudBlazor.MudDialogContainer.Content", new() { Name = "Content", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to the content of the <see cref=""T:MudBlazor.MudDialog"" /> being displayed.", Summary = @"The content within this dialog.", }},
            { "MudBlazor.MudDialogContainer.Id", new() { Name = "Id", TypeName = "System.Guid", TypeFriendlyName = "Guid", Category = "Behavior", IsParameter = true, Order = 100, }},
            { "MudBlazor.MudDialogContainer.Options", new() { Name = "Options", TypeName = "MudBlazor.DialogOptions", TypeFriendlyName = "DialogOptions", Category = "Misc", IsParameter = true, Order = 2147483646, Remarks = @"Defaults to the options in the <see cref=""T:MudBlazor.MudDialog"" /> or options passed during <see cref=""M:MudBlazor.DialogService.ShowAsync(System.Type)"" /> methods.", Summary = @"The options used for this dialog.", }},
            { "MudBlazor.MudDialogContainer.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudDialogContainer.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The text displayed at the top of this dialog if <see cref=""P:MudBlazor.MudDialogContainer.TitleContent"" /> is not set.", }},
            { "MudBlazor.MudDialogContainer.TitleClassname", new() { Name = "TitleClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDialogContainer.TitleContent", new() { Name = "TitleContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This content will display so long as <see cref=""P:MudBlazor.MudDialogContainer.Title"" /> is not set.", Summary = @"The custom content at the top of this dialog.", }},
            { "MudBlazor.MudDialogProvider.BackdropClick", new() { Name = "BackdropClick", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Allows dialogs to be closed by clicking outside of them by default.", }},
            { "MudBlazor.MudDialogProvider.BackgroundClass", new() { Name = "BackgroundClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The custom CSS classes to apply to dialogs by default.", }},
            { "MudBlazor.MudDialogProvider.CloseButton", new() { Name = "CloseButton", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"Shows a close button in the top-right corner for all dialogs by default.", }},
            { "MudBlazor.MudDialogProvider.CloseOnEscapeKey", new() { Name = "CloseOnEscapeKey", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Allows dialogs to be closed by pressing the Escape key by default.", }},
            { "MudBlazor.MudDialogProvider.FullWidth", new() { Name = "FullWidth", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"Sets the width of dialogs to the width of the screen by default.", }},
            { "MudBlazor.MudDialogProvider.MaxWidth", new() { Name = "MaxWidth", TypeName = "System.Nullable`1[[MudBlazor.MaxWidth, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "MaxWidth?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The maximum allowed with of the dialog.", }},
            { "MudBlazor.MudDialogProvider.NoHeader", new() { Name = "NoHeader", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"Hides headers for all dialogs by default.", }},
            { "MudBlazor.MudDialogProvider.Position", new() { Name = "Position", TypeName = "System.Nullable`1[[MudBlazor.DialogPosition, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "DialogPosition?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The location of dialogs by default.", }},
            { "MudBlazor.MudDivider.Absolute", new() { Name = "Absolute", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses an absolute position for this divider.", }},
            { "MudBlazor.MudDivider.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDivider.DividerType", new() { Name = "DividerType", TypeName = "MudBlazor.DividerType", TypeFriendlyName = "DividerType", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.DividerType.FullWidth"" />.", Summary = @"The type of divider to display.", }},
            { "MudBlazor.MudDivider.FlexItem", new() { Name = "FlexItem", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"For vertical dividers, uses the correct height within a flex container.", }},
            { "MudBlazor.MudDivider.Light", new() { Name = "Light", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses a lighter color.", }},
            { "MudBlazor.MudDivider.Vertical", new() { Name = "Vertical", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the divider vertically.", }},
            { "MudBlazor.MudDragAndDropIndexChangedEventArgs.Index", new() { Name = "Index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the zone.", }},
            { "MudBlazor.MudDragAndDropIndexChangedEventArgs.OldZoneIdentifier", new() { Name = "OldZoneIdentifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique identifier of the previous zone.", }},
            { "MudBlazor.MudDragAndDropIndexChangedEventArgs.ZoneIdentifier", new() { Name = "ZoneIdentifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique identifier of the zone.", }},
            { "MudBlazor.MudDragAndDropItemTransaction`1.CurrentZone", new() { Name = "CurrentZone", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique ID of the current destination zone.", }},
            { "MudBlazor.MudDragAndDropItemTransaction`1.Index", new() { Name = "Index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the item in the current drop zone.", }},
            { "MudBlazor.MudDragAndDropItemTransaction`1.Item", new() { Name = "Item", TypeName = "", TypeFriendlyName = "T", Summary = @"The item being dragged.", }},
            { "MudBlazor.MudDragAndDropItemTransaction`1.SourceIndex", new() { Name = "SourceIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the item when the transaction started.", }},
            { "MudBlazor.MudDragAndDropItemTransaction`1.SourceZoneIdentifier", new() { Name = "SourceZoneIdentifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique ID of the zone where the transaction started.", }},
            { "MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.DestinationDropzoneIdentifier", new() { Name = "DestinationDropzoneIdentifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique ID of the zone where the drag-and-drop finished.", }},
            { "MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.DestinationIndex", new() { Name = "DestinationIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the zone where the drag-and-drop finished.", }},
            { "MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.Item", new() { Name = "Item", TypeName = "", TypeFriendlyName = "T", Summary = @"The item which was dropped.", }},
            { "MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.OriginatedDropzoneIdentifier", new() { Name = "OriginatedDropzoneIdentifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique ID of the zone where the drag-and-drop started.", }},
            { "MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.OriginIndex", new() { Name = "OriginIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the zone where the drag-and-drop started.", }},
            { "MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.Success", new() { Name = "Success", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.", Summary = @"Whether the drag-and-drop completed successfully.", }},
            { "MudBlazor.MudDrawer.Anchor", new() { Name = "Anchor", TypeName = "MudBlazor.Anchor", TypeFriendlyName = "Anchor", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Anchor.Start"" />.", Summary = @"The edge of the container that the drawer will appear.", }},
            { "MudBlazor.MudDrawer.Breakpoint", new() { Name = "Breakpoint", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Breakpoint.Md"" />.  Supported breakpoints are: <list type=""bullet""> <item><description><see cref=""F:MudBlazor.Breakpoint.Xs"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.Sm"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.Md"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.Lg"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.Xl"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.Xxl"" /></description></item> </list> Other breakpoint combinations are aliased as follows: <list type=""bullet""> <item><description><see cref=""F:MudBlazor.Breakpoint.SmAndDown"" />: Aliases to <see cref=""F:MudBlazor.Breakpoint.Sm"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.MdAndDown"" />: Aliases to <see cref=""F:MudBlazor.Breakpoint.Md"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.LgAndDown"" />: Aliases to <see cref=""F:MudBlazor.Breakpoint.Lg"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.XlAndDown"" />: Aliases to <see cref=""F:MudBlazor.Breakpoint.Xl"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.SmAndUp"" />: Aliases to <see cref=""F:MudBlazor.Breakpoint.Sm"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.MdAndUp"" />: Aliases to <see cref=""F:MudBlazor.Breakpoint.Md"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.LgAndUp"" />: Aliases to <see cref=""F:MudBlazor.Breakpoint.Lg"" /></description></item> <item><description><see cref=""F:MudBlazor.Breakpoint.XlAndUp"" />: Aliases to <see cref=""F:MudBlazor.Breakpoint.Xl"" /></description></item> </list> <para>Setting the value to <see cref=""F:MudBlazor.Breakpoint.None"" /> will always close the drawer, while <see cref=""F:MudBlazor.Breakpoint.Always"" /> will always keep it open.</para><para>Applies when <see cref=""P:MudBlazor.MudDrawer.Variant"" /> is set to <see cref=""F:MudBlazor.DrawerVariant.Responsive"" /> or <see cref=""F:MudBlazor.DrawerVariant.Mini"" />.</para>", Summary = @"The browser width at which responsive drawers are hidden.", }},
            { "MudBlazor.MudDrawer.BrowserViewportService", new() { Name = "BrowserViewportService", TypeName = "MudBlazor.IBrowserViewportService", TypeFriendlyName = "IBrowserViewportService", IsProtected = true, }},
            { "MudBlazor.MudDrawer.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this drawer.", }},
            { "MudBlazor.MudDrawer.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDrawer.ClipMode", new() { Name = "ClipMode", TypeName = "MudBlazor.DrawerClipMode", TypeFriendlyName = "DrawerClipMode", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The position of this drawer when opened, relative to a <see cref=""T:MudBlazor.MudAppBar"" /> when inside a <see cref=""T:MudBlazor.MudLayout"" />.", }},
            { "MudBlazor.MudDrawer.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the drawer.", }},
            { "MudBlazor.MudDrawer.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>1</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudDrawer.Fixed", new() { Name = "Fixed", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the drawer in the same position even if the page is scrolled.", }},
            { "MudBlazor.MudDrawer.Height", new() { Name = "Height", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Values such as <c>300px</c> and <c>30%</c> are supported. Applies to drawers achored to the top or bottom.", Summary = @"The height of this drawer.", }},
            { "MudBlazor.MudDrawer.MiniWidth", new() { Name = "MiniWidth", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Values such as <c>300px</c> and <c>30%</c> are supported. Applies to <see cref=""F:MudBlazor.DrawerVariant.Mini"" /> drawers achored to the left or right.", Summary = @"For mini drawers, the width of this drawer.", }},
            { "MudBlazor.MudDrawer.Open", new() { Name = "Open", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  Raises the <see cref=""P:MudBlazor.MudDrawer.OpenChanged"" /> event upon change.  When bound via <c>@bind-Open</c>, this property is updated when this drawer closes itself.", Summary = @"Displays this drawer.", }},
            { "MudBlazor.MudDrawer.OpenMiniOnHover", new() { Name = "OpenMiniOnHover", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  Applies when <see cref=""P:MudBlazor.MudDrawer.Variant"" /> is set to <see cref=""F:MudBlazor.DrawerVariant.Mini"" />.", Summary = @"For mini drawers, opens this drawer when the pointer hovers over it.", }},
            { "MudBlazor.MudDrawer.Overlay", new() { Name = "Overlay", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  Applies when <see cref=""P:MudBlazor.MudDrawer.Variant"" /> is <see cref=""F:MudBlazor.DrawerVariant.Responsive"" /> or <see cref=""F:MudBlazor.DrawerVariant.Temporary"" />.", Summary = @"For responsive and temporary drawers, darkens the screen with an overlay when displaying this drawer.", }},
            { "MudBlazor.MudDrawer.OverlayAutoClose", new() { Name = "OverlayAutoClose", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"If the <see cref=""P:MudBlazor.MudDrawer.Variant"" /> is set to <see cref=""F:MudBlazor.DrawerVariant.Temporary"" />, an overlay will be displayed. When this property is <c>true</c>, clicking on the overlay will close it automatically. When this property is <c>false</c>, the overlay will not close automatically.Defaults to <c>true</c>.", Summary = @"Sets a value indicating whether the overlay should automatically close when clicked.", }},
            { "MudBlazor.MudDrawer.OverlayClass", new() { Name = "OverlayClass", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDrawer.Stylename", new() { Name = "Stylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDrawer.Variant", new() { Name = "Variant", TypeName = "MudBlazor.DrawerVariant", TypeFriendlyName = "DrawerVariant", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.DrawerVariant.Responsive"" />.", Summary = @"The display variant of this drawer.", }},
            { "MudBlazor.MudDrawer.Width", new() { Name = "Width", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Values such as <c>300px</c> and <c>30%</c> are supported.  Applies to non-fixed or <see cref=""F:MudBlazor.DrawerVariant.Temporary"" /> drawers anchored to the left or right.", Summary = @"For non-fixed or temporary drawers, the width of this drawer.", }},
            { "MudBlazor.MudDrawerContainer.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The custom content inside this drawer.", }},
            { "MudBlazor.MudDrawerContainer.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDrawerContainer.Fixed", new() { Name = "Fixed", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudDrawerContainer.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudDrawerContainer.Stylename", new() { Name = "Stylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDrawerHeader.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Custom content within this component.", }},
            { "MudBlazor.MudDrawerHeader.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDrawerHeader.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact padding.", }},
            { "MudBlazor.MudDrawerHeader.LinkToIndex", new() { Name = "LinkToIndex", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the component will link to index page upon click.", Summary = @"Navigates to the index page on click.", }},
            { "MudBlazor.MudDropContainer`1.ApplyDropClassesOnDragStarted", new() { Name = "ApplyDropClassesOnDragStarted", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "DropRules", IsParameter = true, Order = 211, Remarks = @"Defaults to <c>false</c>.  The <see cref=""P:MudBlazor.MudDropContainer`1.CanDrop"" /> function determines which classes are applied.", Summary = @"Applies either <see cref=""P:MudBlazor.MudDropContainer`1.CanDropClass"" /> or <see cref=""P:MudBlazor.MudDropContainer`1.NoDropClass"" /> to drop zones during a drag-and-drop transaction.", }},
            { "MudBlazor.MudDropContainer`1.CanDrop", new() { Name = "CanDrop", TypeName = "", TypeFriendlyName = "Func<T, string, bool>", Category = "DropRules", IsParameter = true, Order = 211, Remarks = @"When a drop zone is allowed, the <see cref=""P:MudBlazor.MudDropContainer`1.CanDropClass"" /> is applied, otherwise <see cref=""P:MudBlazor.MudDropContainer`1.NoDropClass"" /> is applied.", Summary = @"The function which determines whether an item can be dropped within a drop zone.", }},
            { "MudBlazor.MudDropContainer`1.CanDropClass", new() { Name = "CanDropClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "DropRules", IsParameter = true, Order = 211, Remarks = @"This class is applied when <see cref=""P:MudBlazor.MudDropContainer`1.CanDrop"" /> returns <c>true</c> for an item.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to valid drop zones.", }},
            { "MudBlazor.MudDropContainer`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"The content should include at least two <see cref=""T:MudBlazor.MudDropZone`1"" /> components.", Summary = @"The content within this container.", }},
            { "MudBlazor.MudDropContainer`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDropContainer`1.DisabledClass", new() { Name = "DisabledClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Disable", IsParameter = true, Order = 209, Remarks = @"This class is applied when <see cref=""P:MudBlazor.MudDropContainer`1.ItemDisabled"" /> returns <c>true</c> for an item.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to disabled drop items.", }},
            { "MudBlazor.MudDropContainer`1.DraggingClass", new() { Name = "DraggingClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "DraggingClass", IsParameter = true, Order = 210, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to drop zones during a drag-and-drop operation.", }},
            { "MudBlazor.MudDropContainer`1.ItemDisabled", new() { Name = "ItemDisabled", TypeName = "", TypeFriendlyName = "Func<T, bool>", Category = "Disable", IsParameter = true, Order = 209, Remarks = @"If no value is given, all items can be dragged by default.  When an item is disabled, the <see cref=""P:MudBlazor.MudDropContainer`1.DisabledClass"" /> is applied.", Summary = @"The function which determines whether an item cannot be dragged.", }},
            { "MudBlazor.MudDropContainer`1.ItemDraggingClass", new() { Name = "ItemDraggingClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "DraggingClass", IsParameter = true, Order = 210, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to items during a drag-and-drop operation.", }},
            { "MudBlazor.MudDropContainer`1.ItemRenderer", new() { Name = "ItemRenderer", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "Items", IsParameter = true, Order = 208, Summary = @"The template used to render items within a drop zone.", }},
            { "MudBlazor.MudDropContainer`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Category = "Items", IsParameter = true, Order = 208, Summary = @"The items that can be dragged and dropped within this container.", }},
            { "MudBlazor.MudDropContainer`1.ItemsClassSelector", new() { Name = "ItemsClassSelector", TypeName = "", TypeFriendlyName = "Func<T, string, string>", Category = "Items", IsParameter = true, Order = 208, Summary = @"The function which determines the CSS classes for each item.", }},
            { "MudBlazor.MudDropContainer`1.ItemsSelector", new() { Name = "ItemsSelector", TypeName = "", TypeFriendlyName = "Func<T, string, bool>", Category = "Items", IsParameter = true, Order = 208, Summary = @"The function which determines whether an item can be dropped within a drop zone.", }},
            { "MudBlazor.MudDropContainer`1.NoDropClass", new() { Name = "NoDropClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "DropRules", IsParameter = true, Order = 211, Remarks = @"This class is applied when <see cref=""P:MudBlazor.MudDropContainer`1.CanDrop"" /> returns <c>false</c> for an item.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to invalid drop zones.", }},
            { "MudBlazor.MudDropZone`1.AllowReorder", new() { Name = "AllowReorder", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows items to be reordered within a zone.", }},
            { "MudBlazor.MudDropZone`1.ApplyDropClassesOnDragStarted", new() { Name = "ApplyDropClassesOnDragStarted", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "DropRules", IsParameter = true, Order = 211, Remarks = @"Defaults to <c>false</c>.  The <see cref=""P:MudBlazor.MudDropZone`1.CanDrop"" /> function determines which classes are applied.  When set, overrides <see cref=""P:MudBlazor.MudDropContainer`1.ApplyDropClassesOnDragStarted"" />.", Summary = @"Applies either <see cref=""P:MudBlazor.MudDropZone`1.CanDropClass"" /> or <see cref=""P:MudBlazor.MudDropZone`1.NoDropClass"" /> to drop zones during a drag-and-drop transaction.", }},
            { "MudBlazor.MudDropZone`1.CanDrop", new() { Name = "CanDrop", TypeName = "", TypeFriendlyName = "Func<T, bool>", Category = "DropRules", IsParameter = true, Order = 211, Remarks = @"When a drop zone is allowed, the <see cref=""P:MudBlazor.MudDropZone`1.CanDropClass"" /> is applied, otherwise <see cref=""P:MudBlazor.MudDropZone`1.NoDropClass"" /> is applied.  When set, overrides <see cref=""P:MudBlazor.MudDropContainer`1.CanDrop"" />.", Summary = @"The function which determines whether an item can be dropped within a drop zone.", }},
            { "MudBlazor.MudDropZone`1.CanDropClass", new() { Name = "CanDropClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "DropRules", IsParameter = true, Order = 211, Remarks = @"This class is applied when <see cref=""P:MudBlazor.MudDropZone`1.CanDrop"" /> returns <c>true</c> for an item.  Multiple classes must be separated by spaces.  When set, overrides <see cref=""P:MudBlazor.MudDropContainer`1.CanDropClass"" />.", Summary = @"The CSS classes applied to valid drop zones.", }},
            { "MudBlazor.MudDropZone`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The custom content within this drop zone.", }},
            { "MudBlazor.MudDropZone`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDropZone`1.Container", new() { Name = "Container", TypeName = "", TypeFriendlyName = "MudDropContainer<T>", IsProtected = true, }},
            { "MudBlazor.MudDropZone`1.DisabledClass", new() { Name = "DisabledClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Disable", IsParameter = true, Order = 209, Remarks = @"This class is applied when <see cref=""P:MudBlazor.MudDropZone`1.ItemDisabled"" /> returns <c>true</c> for an item.  Multiple classes must be separated by spaces.  When set, overrides <see cref=""P:MudBlazor.MudDropContainer`1.DisabledClass"" />.", Summary = @"The CSS classes applied to disabled drop items.", }},
            { "MudBlazor.MudDropZone`1.DraggingClass", new() { Name = "DraggingClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "DraggingClass", IsParameter = true, Order = 210, Remarks = @"Multiple classes must be separated by spaces.  When set, overrides <see cref=""P:MudBlazor.MudDropContainer`1.DraggingClass"" />.", Summary = @"The CSS classes applied to drop zones during a drag-and-drop operation.", }},
            { "MudBlazor.MudDropZone`1.Identifier", new() { Name = "Identifier", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Drag-and-drop zones each have a unique identifier to differentiate them during drag-and-drop operations.", Summary = @"The unique identifier for this drop zone.", }},
            { "MudBlazor.MudDropZone`1.ItemDisabled", new() { Name = "ItemDisabled", TypeName = "", TypeFriendlyName = "Func<T, bool>", Category = "Disable", IsParameter = true, Order = 209, Remarks = @"If no value is given, all items can be dragged by default.  When an item is disabled, the <see cref=""P:MudBlazor.MudDropZone`1.DisabledClass"" /> is applied.  When set, overrides <see cref=""P:MudBlazor.MudDropContainer`1.ItemDisabled"" />.", Summary = @"The function which determines whether an item cannot be dragged.", }},
            { "MudBlazor.MudDropZone`1.ItemDraggingClass", new() { Name = "ItemDraggingClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "DraggingClass", IsParameter = true, Order = 210, Remarks = @"Multiple classes must be separated by spaces.  When set, overrides <see cref=""P:MudBlazor.MudDropContainer`1.ItemDraggingClass"" />.", Summary = @"The CSS classes applied to items during a drag-and-drop operation.", }},
            { "MudBlazor.MudDropZone`1.ItemRenderer", new() { Name = "ItemRenderer", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "Items", IsParameter = true, Order = 208, Remarks = @"When set, overrides the <see cref=""P:MudBlazor.MudDropContainer`1.ItemRenderer"" />.", Summary = @"The template used to render items within this drop zone.", }},
            { "MudBlazor.MudDropZone`1.ItemsClassSelector", new() { Name = "ItemsClassSelector", TypeName = "", TypeFriendlyName = "Func<T, string>", Category = "Items", IsParameter = true, Order = 208, Remarks = @"When set, overrides <see cref=""P:MudBlazor.MudDropContainer`1.ItemsClassSelector"" />.", Summary = @"The function which determines the CSS classes for each item.", }},
            { "MudBlazor.MudDropZone`1.ItemsSelector", new() { Name = "ItemsSelector", TypeName = "", TypeFriendlyName = "Func<T, bool>", Category = "Items", IsParameter = true, Order = 208, Remarks = @"When set, overrides the <see cref=""P:MudBlazor.MudDropContainer`1.ItemsSelector"" /> function.", Summary = @"The function which determines whether an item can be dropped within this drop zone.", }},
            { "MudBlazor.MudDropZone`1.NoDropClass", new() { Name = "NoDropClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "DropRules", IsParameter = true, Order = 211, Remarks = @"This class is applied when <see cref=""P:MudBlazor.MudDropZone`1.CanDrop"" /> returns <c>false</c> for an item.  Multiple classes must be separated by spaces.  When set, overrides <see cref=""P:MudBlazor.MudDropContainer`1.NoDropClass"" />.", Summary = @"The CSS classes applied to invalid drop zones.", }},
            { "MudBlazor.MudDropZone`1.OnlyZone", new() { Name = "OnlyZone", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows this zone to only receive dropped items.", }},
            { "MudBlazor.MudDropZone`1.PlaceholderClassname", new() { Name = "PlaceholderClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDynamicDropItem`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Child content of component", }},
            { "MudBlazor.MudDynamicDropItem`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDynamicDropItem`1.Container", new() { Name = "Container", TypeName = "", TypeFriendlyName = "MudDropContainer<T>", IsProtected = true, }},
            { "MudBlazor.MudDynamicDropItem`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Disable", IsParameter = true, Order = 209, Summary = @"When true, the item can't be dragged. defaults to false", }},
            { "MudBlazor.MudDynamicDropItem`1.DisabledClass", new() { Name = "DisabledClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Disable", IsParameter = true, Order = 209, Summary = @"The class that is applied when disabled <see cref=""P:MudBlazor.MudDynamicDropItem`1.Disabled"" /> is set to true", }},
            { "MudBlazor.MudDynamicDropItem`1.DraggingClass", new() { Name = "DraggingClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "DraggingClass", IsParameter = true, Order = 210, Summary = @"An additional class that is applied to this element when a drag operation is in progress", }},
            { "MudBlazor.MudDynamicDropItem`1.HideContent", new() { Name = "HideContent", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Sorting", IsParameter = true, Order = 203, }},
            { "MudBlazor.MudDynamicDropItem`1.Index", new() { Name = "Index", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Sorting", IsParameter = true, Order = 203, }},
            { "MudBlazor.MudDynamicDropItem`1.Item", new() { Name = "Item", TypeName = "", TypeFriendlyName = "T", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"the data item that is represented by this item", }},
            { "MudBlazor.MudDynamicDropItem`1.ZoneIdentifier", new() { Name = "ZoneIdentifier", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The zone identifier of the corresponding drop zone", }},
            { "MudBlazor.MudDynamicTabs.AddIconClass", new() { Name = "AddIconClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Classes that are applied to the icon button of the add button", }},
            { "MudBlazor.MudDynamicTabs.AddIconStyle", new() { Name = "AddIconStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Styles that are applied to the icon button of the add button", }},
            { "MudBlazor.MudDynamicTabs.AddIconToolTip", new() { Name = "AddIconToolTip", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Tooltip that shown when a user hovers of the add button. Empty or null, if no tooltip should be visible", }},
            { "MudBlazor.MudDynamicTabs.AddTabIcon", new() { Name = "AddTabIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The icon used for the add button", }},
            { "MudBlazor.MudDynamicTabs.CloseIconClass", new() { Name = "CloseIconClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Classes that are applied to the icon button of the close button", }},
            { "MudBlazor.MudDynamicTabs.CloseIconStyle", new() { Name = "CloseIconStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Styles that are applied to the icon button of the close button", }},
            { "MudBlazor.MudDynamicTabs.CloseIconToolTip", new() { Name = "CloseIconToolTip", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Tooltip that shown when a user hovers of the close button. Empty or null, if no tooltip should be visible", }},
            { "MudBlazor.MudDynamicTabs.CloseTabIcon", new() { Name = "CloseTabIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The icon used for the close button", }},
            { "MudBlazor.MudDynamicTabs.InternalClassName", new() { Name = "InternalClassName", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDynamicTabs.Render", new() { Name = "Render", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Summary = @"Renders the component to the supplied <see cref=""M:MudBlazor.MudDynamicTabs.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)"" />.", }},
            { "MudBlazor.MudElement.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Misc", IsParameter = true, Order = 2147483646, Summary = @"The content within this element.", }},
            { "MudBlazor.MudElement.ClickPropagation", new() { Name = "ClickPropagation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Propagates click events beyond this element.", }},
            { "MudBlazor.MudElement.HtmlTag", new() { Name = "HtmlTag", TypeName = "System.String", TypeFriendlyName = "string", Category = "Misc", IsParameter = true, Order = 2147483646, Remarks = @"Defaults to <c>span</c>.", Summary = @"The HTML tag rendered for this element.", }},
            { "MudBlazor.MudElement.PreventDefault", new() { Name = "PreventDefault", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>, allowing default actions.", Summary = @"Prevents the default action when this element is clicked.", }},
            { "MudBlazor.MudElement.Ref", new() { Name = "Ref", TypeName = "System.Nullable`1[[Microsoft.AspNetCore.Components.ElementReference, Microsoft.AspNetCore.Components, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "ElementReference?", Category = "Misc", IsParameter = true, Order = 2147483646, Remarks = @"This is typically bound via <c>@bind-Ref=""myRef""</c>.  When this property changes, the <see cref=""P:MudBlazor.MudElement.RefChanged"" /> event occurs.", Summary = @"The <see cref=""T:Microsoft.AspNetCore.Components.ElementReference"" /> to bind to.", }},
            { "MudBlazor.MudExpansionPanel.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this panel.", }},
            { "MudBlazor.MudExpansionPanel.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudExpansionPanel.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Removes vertical padding from the panel.", }},
            { "MudBlazor.MudExpansionPanel.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Disables user interaction and prevents <see cref=""M:MudBlazor.MudExpansionPanel.ToggleExpansionAsync"" />.", }},
            { "MudBlazor.MudExpansionPanel.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the panel content.", }},
            { "MudBlazor.MudExpansionPanel.Gutters", new() { Name = "Gutters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Adds left and right padding.", }},
            { "MudBlazor.MudExpansionPanel.HeaderClass", new() { Name = "HeaderClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"User class names, separated by space.", }},
            { "MudBlazor.MudExpansionPanel.HeaderClassname", new() { Name = "HeaderClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudExpansionPanel.HideIcon", new() { Name = "HideIcon", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the expand icon.", }},
            { "MudBlazor.MudExpansionPanel.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ExpandMore"" />.", Summary = @"The icon for expanding this panel.", }},
            { "MudBlazor.MudExpansionPanel.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  When <c>null</c>, the CSS default is used for maximum height.", Summary = @"The maximum allowed height, in pixels.", }},
            { "MudBlazor.MudExpansionPanel.NextPanelExpanded", new() { Name = "NextPanelExpanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates whether the next panel is currently expanded.", }},
            { "MudBlazor.MudExpansionPanel.PanelContentClassname", new() { Name = "PanelContentClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudExpansionPanel.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The text displayed in this panel, if <see cref=""P:MudBlazor.MudExpansionPanel.TitleContent"" /> is not set.", }},
            { "MudBlazor.MudExpansionPanel.TitleContent", new() { Name = "TitleContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  When set, overrides the <see cref=""P:MudBlazor.MudExpansionPanel.Text"" /> property.", Summary = @"The content within the title area.", }},
            { "MudBlazor.MudExpansionPanels.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudExpansionPanels.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudExpansionPanels.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact padding for all panels.", }},
            { "MudBlazor.MudExpansionPanels.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>1</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudExpansionPanels.Gutters", new() { Name = "Gutters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Adds left and right padding to all panels.", }},
            { "MudBlazor.MudExpansionPanels.MultiExpansion", new() { Name = "MultiExpansion", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows multiple panels to be expanded at the same time.", }},
            { "MudBlazor.MudExpansionPanels.Outlined", new() { Name = "Outlined", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows borders around each panel.", }},
            { "MudBlazor.MudExpansionPanels.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"Uses square corners for the panel.", }},
            { "MudBlazor.MudFab.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudFab.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Theme colors are supported.", Summary = @"The color of the button.", }},
            { "MudBlazor.MudFab.EndIcon", new() { Name = "EndIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudFab.StartIcon"" /> property to show an icon before text.", Summary = @"The icon shown after any text.", }},
            { "MudBlazor.MudFab.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.  Controls the color of <see cref=""P:MudBlazor.MudFab.StartIcon"" /> and <see cref=""P:MudBlazor.MudFab.EndIcon"" /> icons.", Summary = @"The color of any icons.", }},
            { "MudBlazor.MudFab.IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the icon.", }},
            { "MudBlazor.MudFab.Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The text displayed in the button.", }},
            { "MudBlazor.MudFab.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Large"" />.", Summary = @"The size of the button.", }},
            { "MudBlazor.MudFab.StartIcon", new() { Name = "StartIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  Use the <see cref=""P:MudBlazor.MudFab.EndIcon"" /> property to show an icon after text.", Summary = @"The icon shown before any text.", }},
            { "MudBlazor.MudField.Adornment", new() { Name = "Adornment", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Adornment.None"" />.  When set to <c>Start</c> or <c>End</c>, the <see cref=""P:MudBlazor.MudField.AdornmentText"" /> will be displayed, or <see cref=""P:MudBlazor.MudField.AdornmentIcon"" /> if no adornment text is specified.", Summary = @"The location of the adornment icon or text.", }},
            { "MudBlazor.MudField.AdornmentClassname", new() { Name = "AdornmentClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudField.AdornmentColor", new() { Name = "AdornmentColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of <see cref=""P:MudBlazor.MudField.AdornmentText"" /> or <see cref=""P:MudBlazor.MudField.AdornmentIcon"" />.", }},
            { "MudBlazor.MudField.AdornmentIcon", new() { Name = "AdornmentIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  This icon will be displayed when <see cref=""P:MudBlazor.MudField.Adornment"" /> is <c>Start</c> or <c>End</c>, and no value for <see cref=""P:MudBlazor.MudField.AdornmentText"" /> is set.", Summary = @"The icon displayed for the adornment.", }},
            { "MudBlazor.MudField.AdornmentText", new() { Name = "AdornmentText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  This text will be displayed when <see cref=""P:MudBlazor.MudField.Adornment"" /> is <c>Start</c> or <c>End</c>.  The <see cref=""P:MudBlazor.MudField.AdornmentIcon"" /> property will be ignored if this property is set.", Summary = @"The text displayed for the adornment.", }},
            { "MudBlazor.MudField.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Data", IsParameter = true, Order = 0, Summary = @"The content within this field.", }},
            { "MudBlazor.MudField.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudField.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this field.", }},
            { "MudBlazor.MudField.Error", new() { Name = "Error", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the error in <see cref=""P:MudBlazor.MudField.ErrorText"" />.", }},
            { "MudBlazor.MudField.ErrorText", new() { Name = "ErrorText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Summary = @"A description of this field's error that is displayed under the field when <see cref=""P:MudBlazor.MudField.Error"" /> is <c>true</c>.", }},
            { "MudBlazor.MudField.FullWidth", new() { Name = "FullWidth", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Sets the width of the field to the width of the container.", }},
            { "MudBlazor.MudField.HelperText", new() { Name = "HelperText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Typically used to help the user understand what kind of input is allowed.", Summary = @"The text displayed below the text field.", }},
            { "MudBlazor.MudField.IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the icon.", }},
            { "MudBlazor.MudField.InnerClassname", new() { Name = "InnerClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudField.InnerPadding", new() { Name = "InnerPadding", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays padding for the content within this field.", }},
            { "MudBlazor.MudField.InputControlClassname", new() { Name = "InputControlClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudField.Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"If no value is specified, the label will be displayed in the input.  Otherwise, it will be scaled down to the top of the input.", Summary = @"The label for this input.", }},
            { "MudBlazor.MudField.Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Margin.None"" />.", Summary = @"The vertical spacing for this field.", }},
            { "MudBlazor.MudField.Typo", new() { Name = "Typo", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Typography for the field text.", }},
            { "MudBlazor.MudField.Underline", new() { Name = "Underline", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays an underline for this field.", }},
            { "MudBlazor.MudField.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.", Summary = @"The display variant of the field.", }},
            { "MudBlazor.MudFileUpload`1.Accept", new() { Name = "Accept", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c> for any file type.  Multiple file extensions must be separated by commas (e.g. <c>"".png, .jpg""</c>).", Summary = @"The accepted file extensions, separated by commas.", }},
            { "MudBlazor.MudFileUpload`1.ActivatorContent", new() { Name = "ActivatorContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The custom content which, when clicked, opens the file picker.", }},
            { "MudBlazor.MudFileUpload`1.AppendMultipleFiles", new() { Name = "AppendMultipleFiles", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>. This applies when <c>T</c> is <see cref=""T:System.Collections.Generic.IReadOnlyList`1"">IReadOnlyList&lt;IBrowserFile&gt;</see>.", Summary = @"Appends additional files to the existing list.", }},
            { "MudBlazor.MudFileUpload`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudFileUpload`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from uploading files.", }},
            { "MudBlazor.MudFileUpload`1.Files", new() { Name = "Files", TypeName = "", TypeFriendlyName = "T", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <c>T</c> is <see cref=""T:Microsoft.AspNetCore.Components.Forms.IBrowserFile"" />, a single file is returned.<br />When <c>T</c> is <see cref=""T:System.Collections.Generic.IReadOnlyList`1"">IReadOnlyList&lt;IBrowserFile&gt;</see>, multiple files are returned.", Summary = @"The uploaded file or files.", }},
            { "MudBlazor.MudFileUpload`1.Hidden", new() { Name = "Hidden", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.  When <c>false</c>, files can be uploaded via drag-and-drop.", Summary = @"Hides the inner <see cref=""T:Microsoft.AspNetCore.Components.Forms.InputFile"" /> component.", }},
            { "MudBlazor.MudFileUpload`1.InputClass", new() { Name = "InputClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"These styles apply when <see cref=""P:MudBlazor.MudFileUpload`1.Hidden"" /> is <c>false</c>. Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the internal <see cref=""T:Microsoft.AspNetCore.Components.Forms.InputFile"" />.", }},
            { "MudBlazor.MudFileUpload`1.InputStyle", new() { Name = "InputStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"These styles apply when <see cref=""P:MudBlazor.MudFileUpload`1.Hidden"" /> is <c>false</c>.", Summary = @"The CSS styles applied to the internal <see cref=""T:Microsoft.AspNetCore.Components.Forms.InputFile"" />.", }},
            { "MudBlazor.MudFileUpload`1.MaximumFileCount", new() { Name = "MaximumFileCount", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>10</c>.  This property does not limit the total number of uploaded files allowed; a limit should be validated manually, such as during the <see cref=""P:MudBlazor.MudFileUpload`1.FilesChanged"" /> event.", Summary = @"The maximum number of files retrieved during a call to <see cref=""M:Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs.GetMultipleFiles(System.Int32)"" />.", }},
            { "MudBlazor.MudFileUpload`1.SelectedTemplate", new() { Name = "SelectedTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The template used for selected files.", }},
            { "MudBlazor.MudFileUpload`1.SuppressOnChangeWhenInvalid", new() { Name = "SuppressOnChangeWhenInvalid", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents raising <see cref=""P:MudBlazor.MudFileUpload`1.OnFilesChanged"" /> if validation fails during an upload.", }},
            { "MudBlazor.MudFlexBreak.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"Class names separated by spaces.", }},
            { "MudBlazor.MudFocusTrap.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this focus trap.", }},
            { "MudBlazor.MudFocusTrap.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudFocusTrap.DefaultFocus", new() { Name = "DefaultFocus", TypeName = "MudBlazor.DefaultFocus", TypeFriendlyName = "DefaultFocus", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.DefaultFocus.FirstChild"" />.", Summary = @"The element which receives focus when this focus trap is created or enabled.", }},
            { "MudBlazor.MudFocusTrap.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this focus trap.", }},
            { "MudBlazor.MudForm.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Validated data", IsParameter = true, Order = 2, Summary = @"The content within this form.", }},
            { "MudBlazor.MudForm.ChildForms", new() { Name = "ChildForms", TypeName = "System.Collections.Generic.HashSet`1[[MudBlazor.MudForm, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "HashSet<MudForm>", IsProtected = true, }},
            { "MudBlazor.MudForm.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudForm.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this form.", }},
            { "MudBlazor.MudForm.Errors", new() { Name = "Errors", TypeName = "System.String[]", TypeFriendlyName = "string[]", Category = "Validation result", IsParameter = true, Order = 3, Remarks = @"When this property changes, <see cref=""P:MudBlazor.MudForm.ErrorsChanged"" /> occurs.", Summary = @"The validation errors for inputs within this form.", }},
            { "MudBlazor.MudForm.IsTouched", new() { Name = "IsTouched", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <c>true</c>, an input has changed in this form or any child forms.  Becomes <c>false</c> when input values have been reset.  When this value changes, <see cref=""P:MudBlazor.MudForm.IsTouchedChanged"" /> occurs.", Summary = @"Whether any input's value has changed.", }},
            { "MudBlazor.MudForm.IsValid", new() { Name = "IsValid", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation result", IsParameter = true, Order = 3, Remarks = @"Defaults to <c>true</c>.  When this value changes, <see cref=""P:MudBlazor.MudForm.IsValidChanged"" /> occurs.", Summary = @"Whether all inputs and child forms passed validation.", }},
            { "MudBlazor.MudForm.Model", new() { Name = "Model", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Validated data", IsParameter = true, Order = 2, Remarks = @"Properties of this model are typically linked to form input components via their <see cref=""P:MudBlazor.MudFormComponent`2.For"" />.", Summary = @"The model populated by this form.", }},
            { "MudBlazor.MudForm.OverrideFieldValidation", new() { Name = "OverrideFieldValidation", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Validation", IsParameter = true, Order = 1, Summary = @"Overrides input validation with the function or attribute in <see cref=""P:MudBlazor.MudForm.Validation"" />.", }},
            { "MudBlazor.MudForm.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from changing any inputs.", }},
            { "MudBlazor.MudForm.Spacing", new() { Name = "Spacing", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>0</c>.  A spacing of <c>1</c> means <c>4px</c>, <c>2</c> means <c>8px</c>, and so on.", Summary = @"The amount of spacing between input components, in increments of <c>4px</c>.", }},
            { "MudBlazor.MudForm.SuppressImplicitSubmission", new() { Name = "SuppressImplicitSubmission", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.  When <c>false</c>, the form will submit when <c>Enter</c> is pressed, and any parent dialog will close.  See: <see href=""https://www.w3.org/TR/2018/SPSD-html5-20180327/forms.html#implicit-submission"">Implicit Form Submission</see>.", Summary = @"Prevents this form from being submitted when <c>Enter</c> is pressed.", }},
            { "MudBlazor.MudForm.SuppressRenderingOnValidation", new() { Name = "SuppressRenderingOnValidation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, rendering performance may improve for larger forms and older devices.", Summary = @"Prevents child components from rendering when <see cref=""P:MudBlazor.MudForm.IsValid"" /> changes.", }},
            { "MudBlazor.MudForm.Validation", new() { Name = "Validation", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Supported values are:<para>1. A <c>Func&lt;T,bool&gt;</c> or <c>Func&lt;T,Task&lt;bool&gt;&gt;</c> function.  Returns <c>true</c> if valid.  When <c>false</c>, a standard <c>""Invalid""</c> message is shown.</para><para>2. A <c>Func&lt;T,string&gt;</c> or <c>Func&lt;T,Task&lt;string&gt;&gt;</c> function.  Returns <c>null</c> if valid, or a string explaining the error.</para><para>3. A <c>Func&lt;T,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;T,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Returns an empty list if valid, or a list of validation errors.</para><para>3. A <c>Func&lt;object,string,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;object,string,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Given the form model and path to the member, returns an empty list if valid, or a list of validation errors.</para><para>4. A <see cref=""T:System.ComponentModel.DataAnnotations.ValidationAttribute"" /> object.</para>", Summary = @"The default function or attribute used to validate form components which cannot validate themselves.", }},
            { "MudBlazor.MudForm.ValidationDelay", new() { Name = "ValidationDelay", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>300</c> (300 milliseconds).  This delay can improve rendering performance for larger forms with inputs which set <see cref=""P:MudBlazor.MudBaseInput`1.Immediate"" /> to <c>true</c>.", Summary = @"The delay, in milliseconds, before performing validation.", }},
            { "MudBlazor.MudFormComponent`2.ConversionError", new() { Name = "ConversionError", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"Indicates a problem has occurred during conversion.", }},
            { "MudBlazor.MudFormComponent`2.ConversionErrorMessage", new() { Name = "ConversionErrorMessage", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"When set, returns the reason that the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"The error describing why type conversion failed.", }},
            { "MudBlazor.MudFormComponent`2.Converter", new() { Name = "Converter", TypeName = "", TypeFriendlyName = "Converter<T, string>", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property provides a way to customize conversions between <typeparamref name=""T"" /> objects and <typeparamref name=""U"" /> values.  If no converter is specified, a default will be chosen based on the kind of input.", Summary = @"The type converter for this input.", }},
            { "MudBlazor.MudFormComponent`2.Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""P:System.Globalization.CultureInfo.InvariantCulture"" />.", Summary = @"The culture used to format and interpret values such as dates and currency.", }},
            { "MudBlazor.MudFormComponent`2.Error", new() { Name = "Error", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the text in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> is displayed.", Summary = @"Displays an error.", }},
            { "MudBlazor.MudFormComponent`2.ErrorId", new() { Name = "ErrorId", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  When set and the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, an <c>aria-describedby</c> attribute is rendered to improve accessibility for users.", Summary = @"The ID of the error description element, for use by <c>aria-describedby</c> when <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2.ErrorText", new() { Name = "ErrorText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Summary = @"The text displayed if the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2.For", new() { Name = "For", TypeName = "", TypeFriendlyName = "Expression<Func<T>>", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using an <see cref=""T:Microsoft.AspNetCore.Components.Forms.EditForm"" />, this property is used to find data annotation validation attributes such as <see cref=""T:System.ComponentModel.DataAnnotations.MaxLengthAttribute"" /> used to perform validation.", Summary = @"The model field containing validation attributes.", }},
            { "MudBlazor.MudFormComponent`2.HasErrors", new() { Name = "HasErrors", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionError"" /> is <c>true</c>, or one or more <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> exists.", Summary = @"Indicates any error, conversion error, or validation error with this input.", }},
            { "MudBlazor.MudFormComponent`2.IsForNull", new() { Name = "IsForNull", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates whether the <see cref=""P:MudBlazor.MudFormComponent`2.For"" /> property is <c>null</c>.", }},
            { "MudBlazor.MudFormComponent`2.Required", new() { Name = "Required", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, an error with the text in <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> will be shown during validation if no input was given.", Summary = @"Requires an input value.", }},
            { "MudBlazor.MudFormComponent`2.RequiredError", new() { Name = "RequiredError", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>""Required""</c>.  This text is only shown when <see cref=""P:MudBlazor.MudFormComponent`2.Required"" /> is <c>true</c>.", Summary = @"The text displayed during validation if no input was given.", }},
            { "MudBlazor.MudFormComponent`2.Touched", new() { Name = "Touched", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the user has performed input, or focus has moved away from this input.  This property is typically used to show the <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> text only after the user has interacted with this input.", Summary = @"Indicates whether the user has interacted with this input or the focus has been released.", }},
            { "MudBlazor.MudFormComponent`2.Validation", new() { Name = "Validation", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property can be any of several kinds of functions:<para>1. A <c>Func&lt;T,bool&gt;</c> or <c>Func&lt;T,Task&lt;bool&gt;&gt;</c> function.  Returns <c>true</c> if valid.  When <c>false</c>, a standard <c>""Invalid""</c> message is shown.</para><para>2. A <c>Func&lt;T,string&gt;</c> or <c>Func&lt;T,Task&lt;string&gt;&gt;</c> function.  Returns <c>null</c> if valid, or a string explaining the error.</para><para>3. A <c>Func&lt;T,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;T,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Returns an empty list if valid, or a list of validation errors.</para><para>3. A <c>Func&lt;object,string,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;object,string,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Given the form model and path to the member, returns an empty list if valid, or a list of validation errors.</para><para>4. A <see cref=""T:System.ComponentModel.DataAnnotations.ValidationAttribute"" /> object.</para>", Summary = @"The function used to detect problems with the input.", }},
            { "MudBlazor.MudFormComponent`2.ValidationErrors", new() { Name = "ValidationErrors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property is updated when validation has been performed.  Use the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property to control what validations are performed.", Summary = @"The list of problems with the current input value.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError", new() { Name = "ConversionError", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"Indicates a problem has occurred during conversion.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage", new() { Name = "ConversionErrorMessage", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"When set, returns the reason that the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"The error describing why type conversion failed.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter", new() { Name = "Converter", TypeName = "MudBlazor.Converter`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<MudColor, string>", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property provides a way to customize conversions between <typeparamref name=""T"" /> objects and <typeparamref name=""U"" /> values.  If no converter is specified, a default will be chosen based on the kind of input.", Summary = @"The type converter for this input.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""P:System.Globalization.CultureInfo.InvariantCulture"" />.", Summary = @"The culture used to format and interpret values such as dates and currency.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error", new() { Name = "Error", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the text in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> is displayed.", Summary = @"Displays an error.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId", new() { Name = "ErrorId", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  When set and the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, an <c>aria-describedby</c> attribute is rendered to improve accessibility for users.", Summary = @"The ID of the error description element, for use by <c>aria-describedby</c> when <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText", new() { Name = "ErrorText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Summary = @"The text displayed if the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For", new() { Name = "For", TypeName = "System.Linq.Expressions.Expression`1[[System.Func`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Expression<Func<MudColor>>", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using an <see cref=""T:Microsoft.AspNetCore.Components.Forms.EditForm"" />, this property is used to find data annotation validation attributes such as <see cref=""T:System.ComponentModel.DataAnnotations.MaxLengthAttribute"" /> used to perform validation.", Summary = @"The model field containing validation attributes.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors", new() { Name = "HasErrors", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionError"" /> is <c>true</c>, or one or more <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> exists.", Summary = @"Indicates any error, conversion error, or validation error with this input.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull", new() { Name = "IsForNull", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates whether the <see cref=""P:MudBlazor.MudFormComponent`2.For"" /> property is <c>null</c>.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required", new() { Name = "Required", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, an error with the text in <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> will be shown during validation if no input was given.", Summary = @"Requires an input value.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError", new() { Name = "RequiredError", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>""Required""</c>.  This text is only shown when <see cref=""P:MudBlazor.MudFormComponent`2.Required"" /> is <c>true</c>.", Summary = @"The text displayed during validation if no input was given.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched", new() { Name = "Touched", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the user has performed input, or focus has moved away from this input.  This property is typically used to show the <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> text only after the user has interacted with this input.", Summary = @"Indicates whether the user has interacted with this input or the focus has been released.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation", new() { Name = "Validation", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property can be any of several kinds of functions:<para>1. A <c>Func&lt;T,bool&gt;</c> or <c>Func&lt;T,Task&lt;bool&gt;&gt;</c> function.  Returns <c>true</c> if valid.  When <c>false</c>, a standard <c>""Invalid""</c> message is shown.</para><para>2. A <c>Func&lt;T,string&gt;</c> or <c>Func&lt;T,Task&lt;string&gt;&gt;</c> function.  Returns <c>null</c> if valid, or a string explaining the error.</para><para>3. A <c>Func&lt;T,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;T,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Returns an empty list if valid, or a list of validation errors.</para><para>3. A <c>Func&lt;object,string,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;object,string,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Given the form model and path to the member, returns an empty list if valid, or a list of validation errors.</para><para>4. A <see cref=""T:System.ComponentModel.DataAnnotations.ValidationAttribute"" /> object.</para>", Summary = @"The function used to detect problems with the input.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors", new() { Name = "ValidationErrors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property is updated when validation has been performed.  Use the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property to control what validations are performed.", Summary = @"The list of problems with the current input value.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError", new() { Name = "ConversionError", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"Indicates a problem has occurred during conversion.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage", new() { Name = "ConversionErrorMessage", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"When set, returns the reason that the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"The error describing why type conversion failed.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter", new() { Name = "Converter", TypeName = "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<DateTime?, string>", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property provides a way to customize conversions between <typeparamref name=""T"" /> objects and <typeparamref name=""U"" /> values.  If no converter is specified, a default will be chosen based on the kind of input.", Summary = @"The type converter for this input.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""P:System.Globalization.CultureInfo.InvariantCulture"" />.", Summary = @"The culture used to format and interpret values such as dates and currency.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error", new() { Name = "Error", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the text in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> is displayed.", Summary = @"Displays an error.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId", new() { Name = "ErrorId", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  When set and the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, an <c>aria-describedby</c> attribute is rendered to improve accessibility for users.", Summary = @"The ID of the error description element, for use by <c>aria-describedby</c> when <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText", new() { Name = "ErrorText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Summary = @"The text displayed if the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For", new() { Name = "For", TypeName = "System.Linq.Expressions.Expression`1[[System.Func`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Expression<Func<DateTime?>>", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using an <see cref=""T:Microsoft.AspNetCore.Components.Forms.EditForm"" />, this property is used to find data annotation validation attributes such as <see cref=""T:System.ComponentModel.DataAnnotations.MaxLengthAttribute"" /> used to perform validation.", Summary = @"The model field containing validation attributes.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors", new() { Name = "HasErrors", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionError"" /> is <c>true</c>, or one or more <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> exists.", Summary = @"Indicates any error, conversion error, or validation error with this input.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull", new() { Name = "IsForNull", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates whether the <see cref=""P:MudBlazor.MudFormComponent`2.For"" /> property is <c>null</c>.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required", new() { Name = "Required", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, an error with the text in <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> will be shown during validation if no input was given.", Summary = @"Requires an input value.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError", new() { Name = "RequiredError", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>""Required""</c>.  This text is only shown when <see cref=""P:MudBlazor.MudFormComponent`2.Required"" /> is <c>true</c>.", Summary = @"The text displayed during validation if no input was given.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched", new() { Name = "Touched", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the user has performed input, or focus has moved away from this input.  This property is typically used to show the <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> text only after the user has interacted with this input.", Summary = @"Indicates whether the user has interacted with this input or the focus has been released.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation", new() { Name = "Validation", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property can be any of several kinds of functions:<para>1. A <c>Func&lt;T,bool&gt;</c> or <c>Func&lt;T,Task&lt;bool&gt;&gt;</c> function.  Returns <c>true</c> if valid.  When <c>false</c>, a standard <c>""Invalid""</c> message is shown.</para><para>2. A <c>Func&lt;T,string&gt;</c> or <c>Func&lt;T,Task&lt;string&gt;&gt;</c> function.  Returns <c>null</c> if valid, or a string explaining the error.</para><para>3. A <c>Func&lt;T,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;T,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Returns an empty list if valid, or a list of validation errors.</para><para>3. A <c>Func&lt;object,string,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;object,string,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Given the form model and path to the member, returns an empty list if valid, or a list of validation errors.</para><para>4. A <see cref=""T:System.ComponentModel.DataAnnotations.ValidationAttribute"" /> object.</para>", Summary = @"The function used to detect problems with the input.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors", new() { Name = "ValidationErrors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property is updated when validation has been performed.  Use the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property to control what validations are performed.", Summary = @"The list of problems with the current input value.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError", new() { Name = "ConversionError", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"Indicates a problem has occurred during conversion.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage", new() { Name = "ConversionErrorMessage", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"When set, returns the reason that the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"The error describing why type conversion failed.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter", new() { Name = "Converter", TypeName = "MudBlazor.Converter`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<TimeSpan?, string>", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property provides a way to customize conversions between <typeparamref name=""T"" /> objects and <typeparamref name=""U"" /> values.  If no converter is specified, a default will be chosen based on the kind of input.", Summary = @"The type converter for this input.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""P:System.Globalization.CultureInfo.InvariantCulture"" />.", Summary = @"The culture used to format and interpret values such as dates and currency.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error", new() { Name = "Error", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the text in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> is displayed.", Summary = @"Displays an error.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId", new() { Name = "ErrorId", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  When set and the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, an <c>aria-describedby</c> attribute is rendered to improve accessibility for users.", Summary = @"The ID of the error description element, for use by <c>aria-describedby</c> when <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText", new() { Name = "ErrorText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Summary = @"The text displayed if the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For", new() { Name = "For", TypeName = "System.Linq.Expressions.Expression`1[[System.Func`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Expression<Func<TimeSpan?>>", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using an <see cref=""T:Microsoft.AspNetCore.Components.Forms.EditForm"" />, this property is used to find data annotation validation attributes such as <see cref=""T:System.ComponentModel.DataAnnotations.MaxLengthAttribute"" /> used to perform validation.", Summary = @"The model field containing validation attributes.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors", new() { Name = "HasErrors", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionError"" /> is <c>true</c>, or one or more <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> exists.", Summary = @"Indicates any error, conversion error, or validation error with this input.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull", new() { Name = "IsForNull", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates whether the <see cref=""P:MudBlazor.MudFormComponent`2.For"" /> property is <c>null</c>.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required", new() { Name = "Required", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, an error with the text in <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> will be shown during validation if no input was given.", Summary = @"Requires an input value.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError", new() { Name = "RequiredError", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>""Required""</c>.  This text is only shown when <see cref=""P:MudBlazor.MudFormComponent`2.Required"" /> is <c>true</c>.", Summary = @"The text displayed during validation if no input was given.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched", new() { Name = "Touched", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the user has performed input, or focus has moved away from this input.  This property is typically used to show the <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> text only after the user has interacted with this input.", Summary = @"Indicates whether the user has interacted with this input or the focus has been released.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation", new() { Name = "Validation", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property can be any of several kinds of functions:<para>1. A <c>Func&lt;T,bool&gt;</c> or <c>Func&lt;T,Task&lt;bool&gt;&gt;</c> function.  Returns <c>true</c> if valid.  When <c>false</c>, a standard <c>""Invalid""</c> message is shown.</para><para>2. A <c>Func&lt;T,string&gt;</c> or <c>Func&lt;T,Task&lt;string&gt;&gt;</c> function.  Returns <c>null</c> if valid, or a string explaining the error.</para><para>3. A <c>Func&lt;T,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;T,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Returns an empty list if valid, or a list of validation errors.</para><para>3. A <c>Func&lt;object,string,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;object,string,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Given the form model and path to the member, returns an empty list if valid, or a list of validation errors.</para><para>4. A <see cref=""T:System.ComponentModel.DataAnnotations.ValidationAttribute"" /> object.</para>", Summary = @"The function used to detect problems with the input.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors", new() { Name = "ValidationErrors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property is updated when validation has been performed.  Use the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property to control what validations are performed.", Summary = @"The list of problems with the current input value.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError", new() { Name = "ConversionError", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"Indicates a problem has occurred during conversion.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage", new() { Name = "ConversionErrorMessage", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"When set, returns the reason that the <see cref=""P:MudBlazor.MudFormComponent`2.Converter"" /> was unable to convert values, usually due to invalid input.", Summary = @"The error describing why type conversion failed.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter", new() { Name = "Converter", TypeName = "MudBlazor.Converter`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<string, string>", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property provides a way to customize conversions between <typeparamref name=""T"" /> objects and <typeparamref name=""U"" /> values.  If no converter is specified, a default will be chosen based on the kind of input.", Summary = @"The type converter for this input.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""P:System.Globalization.CultureInfo.InvariantCulture"" />.", Summary = @"The culture used to format and interpret values such as dates and currency.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error", new() { Name = "Error", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the text in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> is displayed.", Summary = @"Displays an error.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId", new() { Name = "ErrorId", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>.  When set and the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, an <c>aria-describedby</c> attribute is rendered to improve accessibility for users.", Summary = @"The ID of the error description element, for use by <c>aria-describedby</c> when <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText", new() { Name = "ErrorText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Summary = @"The text displayed if the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For", new() { Name = "For", TypeName = "System.Linq.Expressions.Expression`1[[System.Func`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Expression<Func<string>>", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using an <see cref=""T:Microsoft.AspNetCore.Components.Forms.EditForm"" />, this property is used to find data annotation validation attributes such as <see cref=""T:System.ComponentModel.DataAnnotations.MaxLengthAttribute"" /> used to perform validation.", Summary = @"The model field containing validation attributes.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors", new() { Name = "HasErrors", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" /> property is <c>true</c>, or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionError"" /> is <c>true</c>, or one or more <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> exists.", Summary = @"Indicates any error, conversion error, or validation error with this input.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull", new() { Name = "IsForNull", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicates whether the <see cref=""P:MudBlazor.MudFormComponent`2.For"" /> property is <c>null</c>.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required", new() { Name = "Required", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, an error with the text in <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> will be shown during validation if no input was given.", Summary = @"Requires an input value.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError", new() { Name = "RequiredError", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>""Required""</c>.  This text is only shown when <see cref=""P:MudBlazor.MudFormComponent`2.Required"" /> is <c>true</c>.", Summary = @"The text displayed during validation if no input was given.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched", new() { Name = "Touched", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the user has performed input, or focus has moved away from this input.  This property is typically used to show the <see cref=""P:MudBlazor.MudFormComponent`2.RequiredError"" /> text only after the user has interacted with this input.", Summary = @"Indicates whether the user has interacted with this input or the focus has been released.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation", new() { Name = "Validation", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property can be any of several kinds of functions:<para>1. A <c>Func&lt;T,bool&gt;</c> or <c>Func&lt;T,Task&lt;bool&gt;&gt;</c> function.  Returns <c>true</c> if valid.  When <c>false</c>, a standard <c>""Invalid""</c> message is shown.</para><para>2. A <c>Func&lt;T,string&gt;</c> or <c>Func&lt;T,Task&lt;string&gt;&gt;</c> function.  Returns <c>null</c> if valid, or a string explaining the error.</para><para>3. A <c>Func&lt;T,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;T,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Returns an empty list if valid, or a list of validation errors.</para><para>3. A <c>Func&lt;object,string,IEnumerable&lt;string&gt;&gt;</c> or <c>Func&lt;object,string,Task&lt;IEnumerable&lt;string&gt;&gt;&gt;</c> function.  Given the form model and path to the member, returns an empty list if valid, or a list of validation errors.</para><para>4. A <see cref=""T:System.ComponentModel.DataAnnotations.ValidationAttribute"" /> object.</para>", Summary = @"The function used to detect problems with the input.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors", new() { Name = "ValidationErrors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, this property is updated when validation has been performed.  Use the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property to control what validations are performed.", Summary = @"The list of problems with the current input value.", }},
            { "MudBlazor.MudGlobal.Rounded", new() { Name = "Rounded", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Summary = @"Applies regular rounding by default; additional rounding if set to true; or squares them if set to false for MudBlazor components.", }},
            { "MudBlazor.MudGlobal.UnhandledExceptionHandler", new() { Name = "UnhandledExceptionHandler", TypeName = "System.Action`1[[System.Exception, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Action<Exception>", Remarks = @"Exceptions which use this handler are typically rare, such as errors which occur during a ""fire-and-forget"" <see cref=""T:System.Threading.Tasks.Task"" /> which cannot be awaited.<br />By default, exceptions are logged to the console via <see cref=""M:System.Console.Write(System.Object)"" />.<br />To handle all .NET exceptions, see: <see href=""https://learn.microsoft.com/aspnet/core/fundamentals/error-handling"">Handle errors in ASP.NET Core</see>.", Summary = @"The handler for unhandled MudBlazor component exceptions.", }},
            { "MudBlazor.MudGlobal+ButtonDefaults.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The color of the <see cref=""T:MudBlazor.MudButton"" />.", }},
            { "MudBlazor.MudGlobal+ButtonDefaults.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Summary = @"The display variation to use for <see cref=""T:MudBlazor.MudButton"" />.", }},
            { "MudBlazor.MudGlobal+DialogDefaults.DefaultFocus", new() { Name = "DefaultFocus", TypeName = "MudBlazor.DefaultFocus", TypeFriendlyName = "DefaultFocus", Summary = @"The element which will receive focus when this <see cref=""T:MudBlazor.MudDialog"" /> is shown.", }},
            { "MudBlazor.MudGlobal+GridDefaults.Spacing", new() { Name = "Spacing", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The gap between items in <see cref=""T:MudBlazor.MudGrid"" />, measured in increments of <c>4px</c>.", }},
            { "MudBlazor.MudGlobal+InputDefaults.Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Summary = @"The amount of vertical spacing for this input.", }},
            { "MudBlazor.MudGlobal+InputDefaults.ShrinkLabel", new() { Name = "ShrinkLabel", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Shows the label inside the input if no <c>Value</c> is specified.", }},
            { "MudBlazor.MudGlobal+InputDefaults.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Summary = @"The appearance variation to use.", }},
            { "MudBlazor.MudGlobal+LinkDefaults.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The color of the <see cref=""T:MudBlazor.MudLink"" />.", }},
            { "MudBlazor.MudGlobal+LinkDefaults.Typo", new() { Name = "Typo", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"The typography variant to use for <see cref=""T:MudBlazor.MudLink"" />.", }},
            { "MudBlazor.MudGlobal+LinkDefaults.Underline", new() { Name = "Underline", TypeName = "MudBlazor.Underline", TypeFriendlyName = "Underline", Summary = @"Applies an underline to the <see cref=""T:MudBlazor.MudLink"" />.", }},
            { "MudBlazor.MudGlobal+MenuDefaults.HoverDelay", new() { Name = "HoverDelay", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The time in milliseconds before a <see cref=""T:MudBlazor.MudMenu"" /> is activated by the cursor hovering over itor before it is hidden after the cursor leaves the menu.", }},
            { "MudBlazor.MudGlobal+PopoverDefaults.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The amount of drop shadow to apply to <see cref=""T:MudBlazor.MudPopover"" />.", }},
            { "MudBlazor.MudGlobal+StackDefaults.Spacing", new() { Name = "Spacing", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The gap between items in <see cref=""T:MudBlazor.MudStack"" />, measured in increments of <c>4px</c>.", }},
            { "MudBlazor.MudGlobal+TooltipDefaults.Delay", new() { Name = "Delay", TypeName = "System.TimeSpan", TypeFriendlyName = "TimeSpan", Summary = @"The amount of time in milliseconds to wait from opening the <see cref=""T:MudBlazor.MudTooltip"" /> before beginning to perform the transition.", }},
            { "MudBlazor.MudGlobal+TooltipDefaults.Duration", new() { Name = "Duration", TypeName = "System.TimeSpan", TypeFriendlyName = "TimeSpan", Summary = @"The length of time that the opening transition for <see cref=""T:MudBlazor.MudTooltip"" /> takes to complete.", }},
            { "MudBlazor.MudGlobal+TransitionDefaults.Delay", new() { Name = "Delay", TypeName = "System.TimeSpan", TypeFriendlyName = "TimeSpan", Summary = @"The length of time that the opening transition takes to complete.", }},
            { "MudBlazor.MudGlobal+TransitionDefaults.Duration", new() { Name = "Duration", TypeName = "System.TimeSpan", TypeFriendlyName = "TimeSpan", Summary = @"The amount of time in milliseconds to wait from opening the popover before beginning to perform the transition.", }},
            { "MudBlazor.MudGrid.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of the component.", }},
            { "MudBlazor.MudGrid.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudGrid.Justify", new() { Name = "Justify", TypeName = "MudBlazor.Justify", TypeFriendlyName = "Justify", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Defines the distribution of children along the main axis within a <see cref=""T:MudBlazor.MudStack"" /> component.", }},
            { "MudBlazor.MudGrid.Spacing", new() { Name = "Spacing", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"<para>Defaults to 6 in <see cref=""P:MudBlazor.MudGlobal.GridDefaults.Spacing"" />.</para><para>Maximum is 20.</para><para>The increment was halved in v7, so the default is now 6 instead of 3.</para>", Summary = @"The gap between items, measured in increments of <c>4px</c>.", }},
            { "MudBlazor.MudHeatMapCell.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Optional, The custom svg element you want to include", }},
            { "MudBlazor.MudHeatMapCell.Column", new() { Name = "Column", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The column of the cell you want to modify. Columns use a 0 based index.", }},
            { "MudBlazor.MudHeatMapCell.Height", new() { Name = "Height", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Optional, The height of the custom svg element you want to include. Please note the custom svg elements you provide are resized according to this value if supplied.", }},
            { "MudBlazor.MudHeatMapCell.MudColor", new() { Name = "MudColor", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Optional, Override the color of the cell", }},
            { "MudBlazor.MudHeatMapCell.Row", new() { Name = "Row", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The row of the cell you want to modify. Rows use a 0 based index.", }},
            { "MudBlazor.MudHeatMapCell.Value", new() { Name = "Value", TypeName = "System.Nullable`1[[System.Double, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "double?", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If supplied this will overwrite the value in ChartSeries", }},
            { "MudBlazor.MudHeatMapCell.Width", new() { Name = "Width", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Optional, The width of the custom svg element you want to include. Please note the custom svg elements you provide are resized according to this value if supplied.", }},
            { "MudBlazor.MudHidden.Breakpoint", new() { Name = "Breakpoint", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <see cref=""P:MudBlazor.MudHidden.Invert"" /> is <c>true</c>, this property controls when the content is shown.", Summary = @"The breakpoint at which component is not rendered, when <see cref=""P:MudBlazor.MudHidden.Invert"" /> is <c>false</c>.", }},
            { "MudBlazor.MudHidden.BrowserViewportService", new() { Name = "BrowserViewportService", TypeName = "MudBlazor.IBrowserViewportService", TypeFriendlyName = "IBrowserViewportService", IsProtected = true, }},
            { "MudBlazor.MudHidden.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudHidden.CurrentBreakpointFromProvider", new() { Name = "CurrentBreakpointFromProvider", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Remarks = @"Defaults to <see cref=""F:MudBlazor.Breakpoint.None"" />.", Summary = @"The current breakpoint.", }},
            { "MudBlazor.MudHidden.Hidden", new() { Name = "Hidden", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Hides the content within this component.", }},
            { "MudBlazor.MudHidden.Invert", new() { Name = "Invert", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Causes the <see cref=""P:MudBlazor.MudHidden.Breakpoint"" /> to control when content is displayed.", }},
            { "MudBlazor.MudHighlighter.CaseSensitive", new() { Name = "CaseSensitive", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Whether highlighted text is case sensitive.", }},
            { "MudBlazor.MudHighlighter.HighlightedText", new() { Name = "HighlightedText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The text to highlight within <see cref=""P:MudBlazor.MudHighlighter.Text"" />.", }},
            { "MudBlazor.MudHighlighter.HighlightedTexts", new() { Name = "HighlightedTexts", TypeName = "System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "IEnumerable<string>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The multiple text fragments to highlight within <see cref=""P:MudBlazor.MudHighlighter.Text"" />.", }},
            { "MudBlazor.MudHighlighter.Markup", new() { Name = "Markup", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Renders text as a <see cref=""T:Microsoft.AspNetCore.Components.RenderFragment"" />.", }},
            { "MudBlazor.MudHighlighter.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The text to consider for highlighting.", }},
            { "MudBlazor.MudHighlighter.UntilNextBoundary", new() { Name = "UntilNextBoundary", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Highlights text until the next RegEx boundary.", }},
            { "MudBlazor.MudIcon.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this icon.", }},
            { "MudBlazor.MudIcon.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudIcon.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.  When <see cref=""P:MudBlazor.MudIcon.Disabled"" /> is <c>true</c>, this value is ignored.", Summary = @"The color of this icon.", }},
            { "MudBlazor.MudIcon.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, a disabled color will be used instead of the <see cref=""P:MudBlazor.MudIcon.Color"" />.", Summary = @"Ignores any custom color.", }},
            { "MudBlazor.MudIcon.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"You can use the <see cref=""T:MudBlazor.Icons"" /> class and <see href=""https://mudblazor.com/features/icons#icons"">Icons Reference</see> for SVG paths, or a <see href=""https://fontawesome.com/icons"">Font Awesome CSS Class</see>.", Summary = @"The SVG path or Font Awesome font icon to display.", }},
            { "MudBlazor.MudIcon.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of this icon.", }},
            { "MudBlazor.MudIcon.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  Sets the <c>title</c> HTML attribute.", Summary = @"The text to display for the tooltip.", }},
            { "MudBlazor.MudIcon.ViewBox", new() { Name = "ViewBox", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>""0 0 24 24""</c>.  Applies when using the <see cref=""T:MudBlazor.Icons"" /> class to set the icon.", Summary = @"For SVG icons, the size of the SVG viewbox.", }},
            { "MudBlazor.MudIconButton.AsButton", new() { Name = "AsButton", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudIconButton.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  Only displays if <see cref=""P:MudBlazor.MudIconButton.Icon"" /> is not set.", Summary = @"The custom content within this button.", }},
            { "MudBlazor.MudIconButton.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudIconButton.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" /> in <see cref=""P:MudBlazor.MudGlobal.ButtonDefaults.Color"" />.", Summary = @"The color of the button.", }},
            { "MudBlazor.MudIconButton.Edge", new() { Name = "Edge", TypeName = "MudBlazor.Edge", TypeFriendlyName = "Edge", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Edge.False"" />.  Other values are <see cref=""F:MudBlazor.Edge.Start"" /> and <see cref=""F:MudBlazor.Edge.End"" />", Summary = @"The amount of negative margin applied.", }},
            { "MudBlazor.MudIconButton.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The icon to display.", }},
            { "MudBlazor.MudIconButton.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the button.", }},
            { "MudBlazor.MudIconButton.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" /> in <see cref=""P:MudBlazor.MudGlobal.ButtonDefaults.Variant"" />.", Summary = @"The display variation to use.", }},
            { "MudBlazor.MudImage.Alt", new() { Name = "Alt", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The alternate text for this image.", }},
            { "MudBlazor.MudImage.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudImage.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>0</c>.", Summary = @"The size of the drop shadow for this image.", }},
            { "MudBlazor.MudImage.Fluid", new() { Name = "Fluid", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Scales this image to the parent container.", }},
            { "MudBlazor.MudImage.Height", new() { Name = "Height", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The height of this image, in pixels.", }},
            { "MudBlazor.MudImage.ObjectFit", new() { Name = "ObjectFit", TypeName = "MudBlazor.ObjectFit", TypeFriendlyName = "ObjectFit", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.ObjectFit.Fill"" />.", Summary = @"Controls how this image is resized.", }},
            { "MudBlazor.MudImage.ObjectPosition", new() { Name = "ObjectPosition", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.ObjectPosition.Center"" />.", Summary = @"Controls how this image is positioned within its container.", }},
            { "MudBlazor.MudImage.Src", new() { Name = "Src", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The path to the image.", }},
            { "MudBlazor.MudImage.Width", new() { Name = "Width", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The width of this image, in pixels.", }},
            { "MudBlazor.MudInput`1.AdornmentClassname", new() { Name = "AdornmentClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1.AutoGrow", new() { Name = "AutoGrow", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Stretches this input vertically to accommodate the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> value.", }},
            { "MudBlazor.MudInput`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Remarks = @"Will only display if <see cref=""P:MudBlazor.MudInput`1.InputType"" /> is <see cref=""F:MudBlazor.InputType.Hidden"" />.", Summary = @"The content within this input component.", }},
            { "MudBlazor.MudInput`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1.Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows a button to clear this input's value.", }},
            { "MudBlazor.MudInput`1.ClearButtonClassname", new() { Name = "ClearButtonClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1.ClearIcon", new() { Name = "ClearIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Clear"" />.", Summary = @"The icon to display when <see cref=""P:MudBlazor.MudInput`1.Clearable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudInput`1.ElementReference", new() { Name = "ElementReference", TypeName = "Microsoft.AspNetCore.Components.ElementReference", TypeFriendlyName = "ElementReference", Summary = @"The reference to the HTML element for this component.", }},
            { "MudBlazor.MudInput`1.HideSpinButtons", new() { Name = "HideSpinButtons", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.", Summary = @"For <see cref=""T:MudBlazor.MudNumericField`1"" />, hides the spin buttons.", }},
            { "MudBlazor.MudInput`1.InputClassname", new() { Name = "InputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1.InputType", new() { Name = "InputType", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.InputType.Text"" />.  Represents a valid HTML5 input type.", Summary = @"The type of input collected by this component.", }},
            { "MudBlazor.MudInput`1.InputTypeString", new() { Name = "InputTypeString", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1.MaxLines", new() { Name = "MaxLines", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Remarks = @"Defaults to <c>0</c>.  When <c>0</c>. this property is ignored.", Summary = @"The maximum vertical lines to display when <see cref=""P:MudBlazor.MudInput`1.AutoGrow"" /> is <c>true</c>.", }},
            { "MudBlazor.MudInput`1.NumericDownIcon", new() { Name = "NumericDownIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.KeyboardArrowDown"" />.", Summary = @"The icon to display for the <c>Down</c> arrow button.", }},
            { "MudBlazor.MudInput`1.NumericUpIcon", new() { Name = "NumericUpIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.KeyboardArrowUp"" />.", Summary = @"The icon to display for the <c>Up</c> arrow button.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentClassname", new() { Name = "AdornmentClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AutoGrow", new() { Name = "AutoGrow", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Stretches this input vertically to accommodate the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> value.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Remarks = @"Will only display if <see cref=""P:MudBlazor.MudInput`1.InputType"" /> is <see cref=""F:MudBlazor.InputType.Hidden"" />.", Summary = @"The content within this input component.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows a button to clear this input's value.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ClearButtonClassname", new() { Name = "ClearButtonClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ClearIcon", new() { Name = "ClearIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Clear"" />.", Summary = @"The icon to display when <see cref=""P:MudBlazor.MudInput`1.Clearable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ElementReference", new() { Name = "ElementReference", TypeName = "Microsoft.AspNetCore.Components.ElementReference", TypeFriendlyName = "ElementReference", Summary = @"The reference to the HTML element for this component.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HideSpinButtons", new() { Name = "HideSpinButtons", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.", Summary = @"For <see cref=""T:MudBlazor.MudNumericField`1"" />, hides the spin buttons.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputClassname", new() { Name = "InputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputType", new() { Name = "InputType", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.InputType.Text"" />.  Represents a valid HTML5 input type.", Summary = @"The type of input collected by this component.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputTypeString", new() { Name = "InputTypeString", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MaxLines", new() { Name = "MaxLines", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Remarks = @"Defaults to <c>0</c>.  When <c>0</c>. this property is ignored.", Summary = @"The maximum vertical lines to display when <see cref=""P:MudBlazor.MudInput`1.AutoGrow"" /> is <c>true</c>.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].NumericDownIcon", new() { Name = "NumericDownIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.KeyboardArrowDown"" />.", Summary = @"The icon to display for the <c>Down</c> arrow button.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].NumericUpIcon", new() { Name = "NumericUpIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.KeyboardArrowUp"" />.", Summary = @"The icon to display for the <c>Up</c> arrow button.", }},
            { "MudBlazor.MudInputControl.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this component.", }},
            { "MudBlazor.MudInputControl.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInputControl.CounterText", new() { Name = "CounterText", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Used to help users know when they are at a maximum character limit.", Summary = @"The current and maximum number of characters, displayed below the text field.", }},
            { "MudBlazor.MudInputControl.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from changing this input's value.", }},
            { "MudBlazor.MudInputControl.Error", new() { Name = "Error", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the error in <see cref=""P:MudBlazor.MudInputControl.ErrorText"" /> will be displayed.", Summary = @"Displays the <see cref=""P:MudBlazor.MudInputControl.Label"" /> in an error state.", }},
            { "MudBlazor.MudInputControl.ErrorId", new() { Name = "ErrorId", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"When set, the <c>aria-describedby</c> attribute is set to the ID.", Summary = @"The ID that will be used by aria-describedby if <see cref=""P:MudBlazor.MudInputControl.ErrorText"" /> is set.", }},
            { "MudBlazor.MudInputControl.ErrorText", new() { Name = "ErrorText", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The description of the error to display when <see cref=""P:MudBlazor.MudInputControl.Error"" /> is <c>true</c>.", }},
            { "MudBlazor.MudInputControl.ForId", new() { Name = "ForId", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The ID of the input component related to the label specified in <see cref=""P:MudBlazor.MudInputControl.Label"" />.", }},
            { "MudBlazor.MudInputControl.FullWidth", new() { Name = "FullWidth", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Expands this input to the width of its container.", }},
            { "MudBlazor.MudInputControl.HelperClass", new() { Name = "HelperClass", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInputControl.HelperContainer", new() { Name = "HelperContainer", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInputControl.HelperId", new() { Name = "HelperId", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The ID that will be used by aria-describedby if <see cref=""P:MudBlazor.MudInputControl.HelperText"" /> is set.", }},
            { "MudBlazor.MudInputControl.HelperText", new() { Name = "HelperText", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  This text is be displayed below the text field.", Summary = @"The text which describes which kind of input is expected.", }},
            { "MudBlazor.MudInputControl.HelperTextOnFocus", new() { Name = "HelperTextOnFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the <see cref=""P:MudBlazor.MudInputControl.HelperText"" /> only when this input has focus.", }},
            { "MudBlazor.MudInputControl.InputContent", new() { Name = "InputContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The input component within this component.", }},
            { "MudBlazor.MudInputControl.Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"When this input has no value, the label is displayed inside the text box.  Otherwise, the label is scaled down to the top of the input.", Summary = @"The label for this input.", }},
            { "MudBlazor.MudInputControl.Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Margin.None"" />.", Summary = @"The spacing above and below this component.", }},
            { "MudBlazor.MudInputControl.Required", new() { Name = "Required", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays an asterisk to indicate an input is required.", }},
            { "MudBlazor.MudInputControl.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.  Other values include <see cref=""F:MudBlazor.Variant.Filled"" /> and <see cref=""F:MudBlazor.Variant.Outlined"" />.", Summary = @"The display variant for this input.", }},
            { "MudBlazor.MudInputLabel.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this label.", }},
            { "MudBlazor.MudInputLabel.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudInputLabel.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this label.", }},
            { "MudBlazor.MudInputLabel.Error", new() { Name = "Error", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays this label in an error state.", }},
            { "MudBlazor.MudInputLabel.ForId", new() { Name = "ForId", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to an empty string.", Summary = @"For WCAG accessibility, the ID of the input component related to this label.", }},
            { "MudBlazor.MudInputLabel.Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Margin.None"" />.", Summary = @"The amount of vertical spacing to apply.", }},
            { "MudBlazor.MudInputLabel.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.", Summary = @"The display variant of this label.", }},
            { "MudBlazor.MudItem.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of the component.", }},
            { "MudBlazor.MudItem.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudItem.lg", new() { Name = "lg", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the number of columns to occupy at the 'large' breakpoint.", }},
            { "MudBlazor.MudItem.md", new() { Name = "md", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the number of columns to occupy at the 'medium' breakpoint.", }},
            { "MudBlazor.MudItem.sm", new() { Name = "sm", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the number of columns to occupy at the 'small' breakpoint.", }},
            { "MudBlazor.MudItem.xl", new() { Name = "xl", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the number of columns to occupy at the 'extra large' breakpoint.", }},
            { "MudBlazor.MudItem.xs", new() { Name = "xs", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the number of columns to occupy at the 'extra small' breakpoint.", }},
            { "MudBlazor.MudItem.xxl", new() { Name = "xxl", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the number of columns to occupy at the 'extra extra large' breakpoint.", }},
            { "MudBlazor.MudItemDropInfo`1.DropzoneIdentifier", new() { Name = "DropzoneIdentifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Identifier of the zone where the transaction started", }},
            { "MudBlazor.MudItemDropInfo`1.EqualityContract", new() { Name = "EqualityContract", TypeName = "System.Type", TypeFriendlyName = "Type", IsProtected = true, }},
            { "MudBlazor.MudItemDropInfo`1.IndexInZone", new() { Name = "IndexInZone", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the item within in the drop zone", }},
            { "MudBlazor.MudItemDropInfo`1.Item", new() { Name = "Item", TypeName = "", TypeFriendlyName = "T", Summary = @"The dragged item during the transaction", }},
            { "MudBlazor.MudLayout.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudLink.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudLink.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudLink.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" /> in <see cref=""P:MudBlazor.MudGlobal.LinkDefaults.Color"" />.", Summary = @"The color of the link.", }},
            { "MudBlazor.MudLink.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents user interaction with this link.", }},
            { "MudBlazor.MudLink.Href", new() { Name = "Href", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The URL to navigate to upon click.", }},
            { "MudBlazor.MudLink.Target", new() { Name = "Target", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Possible values include <c>_blank</c>, <c>_self</c>, <c>_parent</c>, <c>_top</c>, or a <i>frame name</i>. <br />Defaults to <c>null</c>.", Summary = @"The browser frame to open this link when <see cref=""P:MudBlazor.MudLink.Href"" /> is specified.", }},
            { "MudBlazor.MudLink.Typo", new() { Name = "Typo", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Typo.body1"" /> in <see cref=""P:MudBlazor.MudGlobal.LinkDefaults.Typo"" />.", Summary = @"The typography variant to use.", }},
            { "MudBlazor.MudLink.Underline", new() { Name = "Underline", TypeName = "MudBlazor.Underline", TypeFriendlyName = "Underline", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Underline.Hover"" /> in <see cref=""P:MudBlazor.MudGlobal.LinkDefaults.Underline"" />.", Summary = @"Applies an underline to the link.", }},
            { "MudBlazor.MudList`1.CheckBoxColor", new() { Name = "CheckBoxColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of checkboxes when <see cref=""P:MudBlazor.MudList`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.MultiSelection"" />.", }},
            { "MudBlazor.MudList`1.CheckedIcon", new() { Name = "CheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.CheckBox"" />.", Summary = @"The icon to use for checked checkboxes when <see cref=""P:MudBlazor.MudList`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.MultiSelection"" />.", }},
            { "MudBlazor.MudList`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this list.", }},
            { "MudBlazor.MudList`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudList`1.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" />.", Summary = @"The color of the selected list item.", }},
            { "MudBlazor.MudList`1.Comparer", new() { Name = "Comparer", TypeName = "", TypeFriendlyName = "IEqualityComparer<T>", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"Defaults to <see cref=""P:System.Collections.Generic.EqualityComparer`1.Default"" />.", Summary = @"The comparer used to see if two list items are equal.", }},
            { "MudBlazor.MudList`1.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses less vertical space for list items.", }},
            { "MudBlazor.MudList`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents any list item from being clicked.", }},
            { "MudBlazor.MudList`1.Gutters", new() { Name = "Gutters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Applies left and right padding to all list items.", }},
            { "MudBlazor.MudList`1.Padding", new() { Name = "Padding", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Applies vertical padding to this list.", }},
            { "MudBlazor.MudList`1.ParentList", new() { Name = "ParentList", TypeName = "MudBlazor.MudList`1", TypeFriendlyName = "MudList<T>", IsProtected = true, }},
            { "MudBlazor.MudList`1.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents list items from being selected.", }},
            { "MudBlazor.MudList`1.SelectedValue", new() { Name = "SelectedValue", TypeName = "", TypeFriendlyName = "T", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"This value is updated when <see cref=""P:MudBlazor.MudList`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.SingleSelection"" />.", Summary = @"The currently selected value.", }},
            { "MudBlazor.MudList`1.SelectedValues", new() { Name = "SelectedValues", TypeName = "", TypeFriendlyName = "IReadOnlyCollection<T>", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"This value is updated when <see cref=""P:MudBlazor.MudList`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.MultiSelection"" />.", Summary = @"The currently selected values.", }},
            { "MudBlazor.MudList`1.SelectionMode", new() { Name = "SelectionMode", TypeName = "MudBlazor.SelectionMode", TypeFriendlyName = "SelectionMode", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"Defaults to <see cref=""F:MudBlazor.SelectionMode.SingleSelection"" />.<br />Use <see cref=""F:MudBlazor.SelectionMode.SingleSelection"" /> to select one list item at a time.<br />Use <see cref=""F:MudBlazor.SelectionMode.MultiSelection"" /> to allow selecting multiple list items.<br />Use <see cref=""F:MudBlazor.SelectionMode.ToggleSelection"" /> to toggle selections on and off when clicked.", Summary = @"Controls how list items are selected.", }},
            { "MudBlazor.MudList`1.UncheckedIcon", new() { Name = "UncheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.CheckBoxOutlineBlank"" />.", Summary = @"The icon to use for unchecked checkboxes when <see cref=""P:MudBlazor.MudList`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.MultiSelection"" />.", }},
            { "MudBlazor.MudListItem`1.AvatarContent", new() { Name = "AvatarContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"When a value is set, <see cref=""P:MudBlazor.MudListItem`1.Icon"" /> is ignored.", Summary = @"The custom <see cref=""T:MudBlazor.MudAvatar"" /> to display to the left of <see cref=""P:MudBlazor.MudListItem`1.Text"" />.", }},
            { "MudBlazor.MudListItem`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Display content of this list item. If set, this overrides Text", }},
            { "MudBlazor.MudListItem`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudListItem`1.Dense", new() { Name = "Dense", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses less vertical padding between items.", }},
            { "MudBlazor.MudListItem`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  This value can be overridden by <see cref=""P:MudBlazor.MudList`1.Disabled"" />.", Summary = @"Prevents this list item from being clicked.", }},
            { "MudBlazor.MudListItem`1.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Expanding", IsParameter = true, Order = 202, Summary = @"Expand or collapse nested list. Two-way bindable. Note: if you directly set this totrue or false (instead of using two-way binding) it will initialize the nested list's expansion state.", }},
            { "MudBlazor.MudListItem`1.ExpandIconColor", new() { Name = "ExpandIconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Expanding", IsParameter = true, Order = 202, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the <see cref=""P:MudBlazor.MudListItem`1.ExpandLessIcon"" /> and <see cref=""P:MudBlazor.MudListItem`1.ExpandMoreIcon"" /> icons.", }},
            { "MudBlazor.MudListItem`1.ExpandLessIcon", new() { Name = "ExpandLessIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Expanding", IsParameter = true, Order = 202, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ExpandLess"" />.", Summary = @"The icon displayed when <see cref=""P:MudBlazor.MudListItem`1.Expanded"" /> is <c>true</c>.", }},
            { "MudBlazor.MudListItem`1.ExpandMoreIcon", new() { Name = "ExpandMoreIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Expanding", IsParameter = true, Order = 202, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ExpandMore"" />.", Summary = @"The icon displayed when <see cref=""P:MudBlazor.MudListItem`1.Expanded"" /> is <c>false</c>.", }},
            { "MudBlazor.MudListItem`1.ForceLoad", new() { Name = "ForceLoad", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, bypasses client-side routing and forces the browser to load the new page from the server, whether or not the URI would normally be handled by the client-side router.See: <see cref=""M:Microsoft.AspNetCore.Components.NavigationManager.NavigateTo(System.String,System.Boolean,System.Boolean)"" />", Summary = @"Causes a full page refresh when this list item is clicked and <see cref=""P:MudBlazor.MudListItem`1.Href"" /> is set.", }},
            { "MudBlazor.MudListItem`1.Gutters", new() { Name = "Gutters", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to the value of the parent <see cref=""P:MudBlazor.MudList`1.Gutters"" />. When set, it overrides the list's setting.", Summary = @"Applies left and right padding to this list items.", }},
            { "MudBlazor.MudListItem`1.Href", new() { Name = "Href", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Summary = @"The URL to navigate to upon click.", }},
            { "MudBlazor.MudListItem`1.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <see cref=""P:MudBlazor.MudListItem`1.AvatarContent"" /> is set, this property is ignored.", Summary = @"The icon to display for this list item.", }},
            { "MudBlazor.MudListItem`1.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.  When <see cref=""P:MudBlazor.MudListItem`1.AvatarContent"" /> is set, this property is ignored.", Summary = @"The color of the <see cref=""P:MudBlazor.MudListItem`1.Icon"" />.", }},
            { "MudBlazor.MudListItem`1.IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.  When <see cref=""P:MudBlazor.MudListItem`1.AvatarContent"" /> is set, this property is ignored.", Summary = @"The size of the <see cref=""P:MudBlazor.MudListItem`1.Icon"" />.", }},
            { "MudBlazor.MudListItem`1.Inset", new() { Name = "Inset", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Applies an indent to this list item.", }},
            { "MudBlazor.MudListItem`1.MudList", new() { Name = "MudList", TypeName = "", TypeFriendlyName = "MudList<T>", IsProtected = true, }},
            { "MudBlazor.MudListItem`1.NestedList", new() { Name = "NestedList", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Add child list items here to create a nested list.", }},
            { "MudBlazor.MudListItem`1.OnClickPreventDefault", new() { Name = "OnClickPreventDefault", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If set, clicking the list item will only execute the OnClick handler and prevent all otherfunctionality such as following Href or selection.", }},
            { "MudBlazor.MudListItem`1.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a ripple effect when this item is clicked.", }},
            { "MudBlazor.MudListItem`1.SecondaryText", new() { Name = "SecondaryText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This text is displayed under <see cref=""P:MudBlazor.MudListItem`1.Text"" />, in a smaller size.", Summary = @"The secondary text displayed.", }},
            { "MudBlazor.MudListItem`1.Target", new() { Name = "Target", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Possible values include <c>_blank</c>, <c>_self</c>, <c>_parent</c>, <c>_top</c>, or a <i>frame name</i>. <br />Defaults to <c>null</c>.", Summary = @"The browser frame to open this link when <see cref=""P:MudBlazor.MudListItem`1.Href"" /> is specified.", }},
            { "MudBlazor.MudListItem`1.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The text to display.", }},
            { "MudBlazor.MudListItem`1.UriHelper", new() { Name = "UriHelper", TypeName = "Microsoft.AspNetCore.Components.NavigationManager", TypeFriendlyName = "NavigationManager", IsProtected = true, }},
            { "MudBlazor.MudListItem`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"The value associated with this item.", }},
            { "MudBlazor.MudListSubheader.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this header.", }},
            { "MudBlazor.MudListSubheader.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudListSubheader.Gutters", new() { Name = "Gutters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Applies left and right padding to all list items.", }},
            { "MudBlazor.MudListSubheader.Inset", new() { Name = "Inset", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Applies an indent to this header.", }},
            { "MudBlazor.MudLocalizer.Item", new() { Name = "Item", TypeName = "Microsoft.Extensions.Localization.LocalizedString", TypeFriendlyName = "LocalizedString", Remarks = @"The value of  <see cref=""P:Microsoft.Extensions.Localization.LocalizedString.ResourceNotFound"" /> should be <c>true</c> if no translation is available for the specified key.", Summary = @"Retrieves the translation for the specified translation key.<para /><b>NB!</b> Override this method to supply custom translations.", }},
            { "MudBlazor.MudMainContent.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the content to be rendered inside the main content area.", }},
            { "MudBlazor.MudMainContent.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"Gets the CSS class names for the component.", }},
            { "MudBlazor.MudMask.AdornmentClassname", new() { Name = "AdornmentClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudMask.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Only displays when <see cref=""P:MudBlazor.MudMask.InputType"" /> is <see cref=""F:MudBlazor.InputType.Hidden"" />.", Summary = @"The content within this input.", }},
            { "MudBlazor.MudMask.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudMask.Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "List behavior", IsParameter = true, Order = 402, Summary = @"Shows the clear button.", }},
            { "MudBlazor.MudMask.ClearButtonClassname", new() { Name = "ClearButtonClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudMask.ClearIcon", new() { Name = "ClearIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The icon displayed when <see cref=""P:MudBlazor.MudMask.Clearable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudMask.InputClassname", new() { Name = "InputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudMask.InputType", new() { Name = "InputType", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <see cref=""F:MudBlazor.InputType.Text"" />.", Summary = @"The type of the underlying input.", }},
            { "MudBlazor.MudMask.Mask", new() { Name = "Mask", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Category = "Data", IsParameter = true, Order = 0, Remarks = @"Typically set to common masks such as <see cref=""T:MudBlazor.PatternMask"" />, <see cref=""T:MudBlazor.MultiMask"" />, <see cref=""T:MudBlazor.RegexMask"" />, and <see cref=""T:MudBlazor.BlockMask"" />.When set, some properties will be ignored such as <see cref=""P:MudBlazor.MudInput`1.MaxLines"" />, <see cref=""P:MudBlazor.MudInput`1.AutoGrow"" />, and <see cref=""P:MudBlazor.MudInput`1.HideSpinButtons"" />.", Summary = @"The mask to apply to text values.", }},
            { "MudBlazor.MudMenu.ActivationEvent", new() { Name = "ActivationEvent", TypeName = "MudBlazor.MouseEvent", TypeFriendlyName = "MouseEvent", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.MouseEvent.LeftClick"" />.", Summary = @"The action which opens the menu, when <see cref=""P:MudBlazor.MudMenu.ActivatorContent"" /> is set.", }},
            { "MudBlazor.MudMenu.ActivatorClassname", new() { Name = "ActivatorClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"The CSS class for the activator element (button or custom content).", }},
            { "MudBlazor.MudMenu.ActivatorContent", new() { Name = "ActivatorContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Can be a <see cref=""T:MudBlazor.MudButton"" />, <see cref=""T:MudBlazor.MudIconButton"" />, or any other component.", Summary = @"Overrides the default button with a custom component.", }},
            { "MudBlazor.MudMenu.AnchorOrigin", new() { Name = "AnchorOrigin", TypeName = "System.Nullable`1[[MudBlazor.Origin, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Origin?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The origin point for the menu's anchor. If set, overrides Nested Menus, and PositionatCursor Anchor points.", }},
            { "MudBlazor.MudMenu.AriaLabel", new() { Name = "AriaLabel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The <c>aria-label</c> for the menu button when <see cref=""P:MudBlazor.MudMenu.ActivatorContent"" /> is not set.", }},
            { "MudBlazor.MudMenu.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Popup behavior", IsParameter = true, Order = 400, Summary = @"The <see cref=""T:MudBlazor.MudMenuItem"" /> components within this menu.", }},
            { "MudBlazor.MudMenu.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"The CSS class for the root menu container.", }},
            { "MudBlazor.MudMenu.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of this menu's button when <see cref=""P:MudBlazor.MudMenu.Icon"" /> is not set.", }},
            { "MudBlazor.MudMenu.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Popup appearance", IsParameter = true, Order = 401, Remarks = @"Defaults to <c>false</c>.", Summary = @"Applies compact vertical padding to all menu items.", }},
            { "MudBlazor.MudMenu.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this menu.", }},
            { "MudBlazor.MudMenu.DropdownSettings", new() { Name = "DropdownSettings", TypeName = "MudBlazor.DropdownSettings", TypeFriendlyName = "DropdownSettings", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""P:MudBlazor.DropdownSettings.Fixed"" /> falseDefaults to <see cref=""P:MudBlazor.DropdownSettings.OverflowBehavior"" /> <see cref=""F:MudBlazor.OverflowBehavior.FlipOnOpen"" />", Summary = @"The behavior of the dropdown popover menu", }},
            { "MudBlazor.MudMenu.DropShadow", new() { Name = "DropShadow", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays a drop shadow under the activator button.", }},
            { "MudBlazor.MudMenu.EndIcon", new() { Name = "EndIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The icon displayed after the text.", }},
            { "MudBlazor.MudMenu.FullWidth", new() { Name = "FullWidth", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Popup appearance", IsParameter = true, Order = 401, Remarks = @"Defaults to <c>false</c>.", Summary = @"Expands this menu to the same width as its parent.", }},
            { "MudBlazor.MudMenu.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When set, this menu will display a <see cref=""T:MudBlazor.MudIconButton"" />.", Summary = @"The icon displayed for this menu.", }},
            { "MudBlazor.MudMenu.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.", Summary = @"The color of the icon when <see cref=""P:MudBlazor.MudMenu.Icon"" /> is set.", }},
            { "MudBlazor.MudMenu.Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The text shown for this menu.", }},
            { "MudBlazor.MudMenu.ListClass", new() { Name = "ListClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Popup appearance", IsParameter = true, Order = 401, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to items in this menu.", }},
            { "MudBlazor.MudMenu.ListClassname", new() { Name = "ListClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"The CSS class for the list containing menu items.", }},
            { "MudBlazor.MudMenu.LockScroll", new() { Name = "LockScroll", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Popup appearance", IsParameter = true, Order = 401, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the page from scrolling while this menu is open.", }},
            { "MudBlazor.MudMenu.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Popup appearance", IsParameter = true, Order = 401, Remarks = @"Defaults to <c>null</c>.", Summary = @"Sets the maximum allowed height for this menu, when open.", }},
            { "MudBlazor.MudMenu.Open", new() { Name = "Open", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Popup behavior", IsParameter = true, Order = 400, Remarks = @"When this property changes, <see cref=""P:MudBlazor.MudMenu.OpenChanged"" /> occurs.", Summary = @"Whether this menu is open and the menu items are visible.", }},
            { "MudBlazor.MudMenu.ParentMenu", new() { Name = "ParentMenu", TypeName = "MudBlazor.MudMenu", TypeFriendlyName = "MudMenu", IsProtected = true, }},
            { "MudBlazor.MudMenu.PopoverClass", new() { Name = "PopoverClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Popup appearance", IsParameter = true, Order = 401, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the popover for this menu.", }},
            { "MudBlazor.MudMenu.PopoverClassname", new() { Name = "PopoverClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"The CSS class for the menu's popover container.", }},
            { "MudBlazor.MudMenu.PositionAtCursor", new() { Name = "PositionAtCursor", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Popup behavior", IsParameter = true, Order = 400, Remarks = @"Defaults to <c>false</c>.  Typically used for larger-sized activators.", Summary = @"Opens this menu at the cursor's location instead of the button's location.", }},
            { "MudBlazor.MudMenu.RelativeWidth", new() { Name = "RelativeWidth", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"<para>Defaults to <see cref=""F:MudBlazor.DropdownWidth.Ignore"" />. </para><para>When <see cref=""F:MudBlazor.DropdownWidth.Relative"" />, restricts the max-width of the component to the width of the parent container</para><para>When <see cref=""F:MudBlazor.DropdownWidth.Adaptive"" />, restricts the min-width of the component to the width of the parent container</para>", Summary = @"Determines the width of the Popover dropdown in relation the parent container.", }},
            { "MudBlazor.MudMenu.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a ripple animation when the user clicks the activator button.", }},
            { "MudBlazor.MudMenu.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The size of this menu's button when <see cref=""P:MudBlazor.MudMenu.Icon"" /> is not set.", }},
            { "MudBlazor.MudMenu.StartIcon", new() { Name = "StartIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The icon displayed before the text.", }},
            { "MudBlazor.MudMenu.Stylename", new() { Name = "Stylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"Inline styles for positioning the menu at the cursor's location.", }},
            { "MudBlazor.MudMenu.TransformOrigin", new() { Name = "TransformOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Popup appearance", IsParameter = true, Order = 401, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopLeft"" />.", Summary = @"Sets the direction the menu will open from the anchor.", }},
            { "MudBlazor.MudMenu.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.", Summary = @"The display variant to use.", }},
            { "MudBlazor.MudMenuItem.ActivatesSubMenu", new() { Name = "ActivatesSubMenu", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, Summary = @"The menu item is acting as the activator for a sub menu.", }},
            { "MudBlazor.MudMenuItem.AutoClose", new() { Name = "AutoClose", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>true</c>.  When <c>false</c>, the menu will remain open after this item is clicked.", Summary = @"Closes the menu when this item is clicked.", }},
            { "MudBlazor.MudMenuItem.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this menu item.", }},
            { "MudBlazor.MudMenuItem.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudMenuItem.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Prevents the user from interacting with this item.", }},
            { "MudBlazor.MudMenuItem.ForceLoad", new() { Name = "ForceLoad", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>false</c>. When <c>true</c>, client-side routing is bypassed and the browser is forced to load the new page from the server.", Summary = @"Performs a full page load during navigation.", }},
            { "MudBlazor.MudMenuItem.Href", new() { Name = "Href", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>null</c>. When clicked, the browser will navigate to this URL.  Use the <see cref=""P:MudBlazor.MudMenuItem.Target"" /> property to target a specific tab.", Summary = @"The URL to navigate to when this menu item is clicked.", }},
            { "MudBlazor.MudMenuItem.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The icon displayed at the start of this menu item.  The size depends on whether or not the menu is using the dense variant.", }},
            { "MudBlazor.MudMenuItem.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.", Summary = @"The color of the icon when <see cref=""P:MudBlazor.MudMenuItem.Icon"" /> is set.", }},
            { "MudBlazor.MudMenuItem.JsApiService", new() { Name = "JsApiService", TypeName = "MudBlazor.IJsApiService", TypeFriendlyName = "IJsApiService", IsProtected = true, }},
            { "MudBlazor.MudMenuItem.Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The text shown on this menu item if <see cref=""P:MudBlazor.MudMenuItem.ChildContent"" /> is not set.", }},
            { "MudBlazor.MudMenuItem.ParentMenu", new() { Name = "ParentMenu", TypeName = "MudBlazor.MudMenu", TypeFriendlyName = "MudMenu", Summary = @"The <see cref=""T:MudBlazor.MudMenu"" /> which contains this item.", }},
            { "MudBlazor.MudMenuItem.Target", new() { Name = "Target", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>null</c>. This property allows navigation to open a new tab/window or to reuse a specific tab.  Possible values are <c>_blank</c>, <c>_self</c>, <c>_parent</c>, <c>_top</c>, <c>noopener</c>, or the name of an <c>iframe</c> element.", Summary = @"The browser tab/window opened when a click occurs and <see cref=""P:MudBlazor.MudMenuItem.Href"" /> is set.", }},
            { "MudBlazor.MudMenuItem.UriHelper", new() { Name = "UriHelper", TypeName = "Microsoft.AspNetCore.Components.NavigationManager", TypeFriendlyName = "NavigationManager", IsProtected = true, }},
            { "MudBlazor.MudMessageBox.CancelButton", new() { Name = "CancelButton", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Must be a <see cref=""T:MudBlazor.MudButton"" />.  When set, <see cref=""P:MudBlazor.MudMessageBox.CancelText"" /> is ignored.", Summary = @"The custom content for the Cancel button.", }},
            { "MudBlazor.MudMessageBox.CancelText", new() { Name = "CancelText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  When <c>null</c>, the <c>Cancel</c> button will be hidden.", Summary = @"The text of the Cancel button.", }},
            { "MudBlazor.MudMessageBox.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudMessageBox.MarkupMessage", new() { Name = "MarkupMessage", TypeName = "Microsoft.AspNetCore.Components.MarkupString", TypeFriendlyName = "MarkupString", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <see cref=""P:MudBlazor.MudMessageBox.MessageContent"" /> is set, this property is ignored.", Summary = @"The markup content within this message box.", }},
            { "MudBlazor.MudMessageBox.Message", new() { Name = "Message", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When <see cref=""P:MudBlazor.MudMessageBox.MessageContent"" /> is set, this property is ignored.", Summary = @"The content within this message box.", }},
            { "MudBlazor.MudMessageBox.MessageContent", new() { Name = "MessageContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When set, <see cref=""P:MudBlazor.MudMessageBox.Message"" /> and <see cref=""P:MudBlazor.MudMessageBox.MarkupMessage"" /> are ignored.", Summary = @"The custom content within this message box.", }},
            { "MudBlazor.MudMessageBox.NoButton", new() { Name = "NoButton", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Must be a <see cref=""T:MudBlazor.MudButton"" />.  When set, <see cref=""P:MudBlazor.MudMessageBox.NoText"" /> is ignored.", Summary = @"The custom content for the No button.", }},
            { "MudBlazor.MudMessageBox.NoText", new() { Name = "NoText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  When <c>null</c>, the <c>No</c> button will be hidden.", Summary = @"The text of the No button.", }},
            { "MudBlazor.MudMessageBox.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  When <c>null</c>, the title will be hidden.", Summary = @"The title of this message box.", }},
            { "MudBlazor.MudMessageBox.TitleContent", new() { Name = "TitleContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When set, the <see cref=""P:MudBlazor.MudMessageBox.Title"" /> property is ignored.", Summary = @"The custom content within the title.", }},
            { "MudBlazor.MudMessageBox.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Can be bound via <c>@bind-Visible</c> to show and hide an inlined MessageBox.  Has no effect on previously opened message boxes.", Summary = @"Shows this message box.", }},
            { "MudBlazor.MudMessageBox.YesButton", new() { Name = "YesButton", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Must be a <see cref=""T:MudBlazor.MudButton"" />.  When set, <see cref=""P:MudBlazor.MudMessageBox.YesText"" /> is ignored.", Summary = @"The custom content for the Yes button.", }},
            { "MudBlazor.MudMessageBox.YesText", new() { Name = "YesText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>OK</c>.  When <c>null</c>, the <c>Yes</c> button will be hidden.", Summary = @"The text of the Yes/OK button.", }},
            { "MudBlazor.MudNavGroup.ButtonClassname", new() { Name = "ButtonClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudNavGroup.ButtonTabIndex", new() { Name = "ButtonTabIndex", TypeName = "System.Int32", TypeFriendlyName = "int", IsProtected = true, }},
            { "MudBlazor.MudNavGroup.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Typically contains <see cref=""T:MudBlazor.MudNavGroup"" /> and <see cref=""T:MudBlazor.MudNavLink"" /> components.", Summary = @"The content within this group.", }},
            { "MudBlazor.MudNavGroup.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudNavGroup.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this group.", }},
            { "MudBlazor.MudNavGroup.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When this value changes, <see cref=""P:MudBlazor.MudNavGroup.ExpandedChanged"" /> occurs.  Can be bound via <c>@bind-Expanded</c>.", Summary = @"Displays the items within this group.", }},
            { "MudBlazor.MudNavGroup.ExpandIcon", new() { Name = "ExpandIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ArrowDropDown"" />.  Only shows when <see cref=""P:MudBlazor.MudNavGroup.HideExpandIcon"" /> is <c>false</c>.", Summary = @"The icon for expanding and collapsing this group.", }},
            { "MudBlazor.MudNavGroup.ExpandIconClassname", new() { Name = "ExpandIconClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudNavGroup.HeaderClass", new() { Name = "HeaderClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  You can use spaces to separate multiple classes.", Summary = @"The CSS classes applied to this nav group title.", }},
            { "MudBlazor.MudNavGroup.HideExpandIcon", new() { Name = "HideExpandIcon", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the expand/collapse icon.", }},
            { "MudBlazor.MudNavGroup.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The icon displayed next to the <see cref=""P:MudBlazor.MudNavGroup.Title"" />.", }},
            { "MudBlazor.MudNavGroup.IconClassname", new() { Name = "IconClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudNavGroup.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the icon when <see cref=""P:MudBlazor.MudNavGroup.Icon"" /> is set.", }},
            { "MudBlazor.MudNavGroup.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  When set, it will override the CSS default.", Summary = @"The maximum height, in pixels, of this group.", }},
            { "MudBlazor.MudNavGroup.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a ripple effect when the user clicks this group.", }},
            { "MudBlazor.MudNavGroup.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The text shown for this group.", }},
            { "MudBlazor.MudNavGroup.TitleContent", new() { Name = "TitleContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  When set, overrides the <see cref=""P:MudBlazor.MudNavGroup.Title"" /> property.", Summary = @"The content within the title area.", }},
            { "MudBlazor.MudNavLink.ActiveClass", new() { Name = "ActiveClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Common", IsParameter = true, Remarks = @"Defaults to <c>active</c>.  Multiple classes must be separated by spaces.", Summary = @"The CSS applied when this link is active.", }},
            { "MudBlazor.MudNavLink.Attributes", new() { Name = "Attributes", TypeName = "System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Dictionary<string, object>", IsProtected = true, }},
            { "MudBlazor.MudNavLink.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this link.", }},
            { "MudBlazor.MudNavLink.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudNavLink.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Prevents the user from interacting with this link.", }},
            { "MudBlazor.MudNavLink.ForceLoad", new() { Name = "ForceLoad", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>false</c>. When <c>true</c>, client-side routing is bypassed and the browser is forced to load the new page from the server.", Summary = @"Performs a full page load during navigation.", }},
            { "MudBlazor.MudNavLink.Href", new() { Name = "Href", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Summary = @"The URL to navigate to when this link is clicked.", }},
            { "MudBlazor.MudNavLink.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The icon displayed for this link.", }},
            { "MudBlazor.MudNavLink.IconClassname", new() { Name = "IconClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudNavLink.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the icon when <see cref=""P:MudBlazor.MudNavLink.Icon"" /> is set.", }},
            { "MudBlazor.MudNavLink.LinkClassname", new() { Name = "LinkClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudNavLink.Match", new() { Name = "Match", TypeName = "Microsoft.AspNetCore.Components.Routing.NavLinkMatch", TypeFriendlyName = "NavLinkMatch", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:Microsoft.AspNetCore.Components.Routing.NavLinkMatch.Prefix"" />.  This link is compared against the current URL to determine whether it is highlighted.", Summary = @"Controls when this link is highlighted.", }},
            { "MudBlazor.MudNavLink.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a ripple effect when the user clicks this link.", }},
            { "MudBlazor.MudNavLink.TabIndex", new() { Name = "TabIndex", TypeName = "System.Int32", TypeFriendlyName = "int", IsProtected = true, }},
            { "MudBlazor.MudNavLink.Target", new() { Name = "Target", TypeName = "System.String", TypeFriendlyName = "string", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Possible values include <c>_blank</c>, <c>_self</c>, <c>_parent</c>, <c>_top</c>, or a <i>frame name</i>. <br />Defaults to <c>null</c>.", Summary = @"The browser frame to open this link when <see cref=""P:MudBlazor.MudNavLink.Href"" /> is specified.", }},
            { "MudBlazor.MudNavMenu.Bordered", new() { Name = "Bordered", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows a border on the active <see cref=""T:MudBlazor.MudNavLink"" />.", }},
            { "MudBlazor.MudNavMenu.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Typically contains <see cref=""T:MudBlazor.MudNavLink"" />, <see cref=""T:MudBlazor.MudNavGroup"" />, <see cref=""T:MudBlazor.MudText"" />, and <see cref=""T:MudBlazor.MudDivider"" /> components.", Summary = @"The content within this menu.", }},
            { "MudBlazor.MudNavMenu.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudNavMenu.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the active <see cref=""T:MudBlazor.MudNavLink"" />.", }},
            { "MudBlazor.MudNavMenu.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  Will be overridden if <see cref=""P:MudBlazor.MudNavMenu.Margin"" /> is not <see cref=""F:MudBlazor.Margin.None"" />.", Summary = @"Uses compact vertical padding to all <see cref=""T:MudBlazor.MudNavLink"" /> items.", }},
            { "MudBlazor.MudNavMenu.Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Margin.None"" />.", Summary = @"The vertical spacing between <see cref=""T:MudBlazor.MudNavLink"" /> items.", }},
            { "MudBlazor.MudNavMenu.Rounded", new() { Name = "Rounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c> in <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.  When <c>true</c>, the theme <c>border-radius</c> value will be used. Only takes affect if <see cref=""P:MudBlazor.MudNavMenu.Bordered"" /> is <c>true</c>.", Summary = @"Shows a rounded border for all <see cref=""T:MudBlazor.MudNavLink"" /> items.", }},
            { "MudBlazor.MudNumericField`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudNumericField`1.Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Shows a button to clear the value.", }},
            { "MudBlazor.MudNumericField`1.ClearIcon", new() { Name = "ClearIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Clear"" />.", Summary = @"The icon of the clear button when <see cref=""P:MudBlazor.MudNumericField`1.Clearable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudNumericField`1.HideSpinButtons", new() { Name = "HideSpinButtons", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  When <c>false</c>, the user can still change values with the keyboard arrows and by typing values.", Summary = @"Hides the up and down buttons.", }},
            { "MudBlazor.MudNumericField`1.InputMode", new() { Name = "InputMode", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.InputMode.numeric"" />.", Summary = @"The type of value collected by this field.", }},
            { "MudBlazor.MudNumericField`1.InvertMouseWheel", new() { Name = "InvertMouseWheel", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, moving the mouse wheel up will decrease the value, and down will increase the value.", Summary = @"Reverses the mouse wheel direction.", }},
            { "MudBlazor.MudNumericField`1.Max", new() { Name = "Max", TypeName = "", TypeFriendlyName = "T", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to the maximum value of the numeric type, such as <see cref=""F:System.Int32.MaxValue"" />.", Summary = @"The maximum allowed value.", }},
            { "MudBlazor.MudNumericField`1.Min", new() { Name = "Min", TypeName = "", TypeFriendlyName = "T", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to the minimum value of the numeric type, such as <see cref=""F:System.Int32.MinValue"" />.", Summary = @"The minimum allowed value.", }},
            { "MudBlazor.MudNumericField`1.Pattern", new() { Name = "Pattern", TypeName = "System.String", TypeFriendlyName = "string", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>null</c>, which will show a numerical keyboard on Safari.  Must be a valid JavaScript regular expression.  To allow only numbers (with no signs or commas), you can use <c>[0-9.]</c>.", Summary = @"The regular expression used to constrain values.", }},
            { "MudBlazor.MudNumericField`1.Step", new() { Name = "Step", TypeName = "", TypeFriendlyName = "T", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>1</c>.  This affects changing values via spin buttons or the keyboard.", Summary = @"The amount added or subtracted when changing values.", }},
            { "MudBlazor.MudOverlay.Absolute", new() { Name = "Absolute", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses absolute positioning for the overlay.", }},
            { "MudBlazor.MudOverlay.AutoClose", new() { Name = "AutoClose", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Click action", IsParameter = true, Order = 207, Remarks = @"Defaults to <c>false</c>.This is preferred over the previously used <c>OnClick</c> event.", Summary = @"Sets <see cref=""P:MudBlazor.MudOverlay.Visible"" /> to <c>false</c> when the overlay is clicked and calls <see cref=""P:MudBlazor.MudOverlay.OnClosed"" />.", }},
            { "MudBlazor.MudOverlay.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"Child content of the component.", }},
            { "MudBlazor.MudOverlay.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudOverlay.DarkBackground", new() { Name = "DarkBackground", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Applies the theme's dark overlay color.", }},
            { "MudBlazor.MudOverlay.LightBackground", new() { Name = "LightBackground", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Applies the theme's light overlay color.", }},
            { "MudBlazor.MudOverlay.LockScroll", new() { Name = "LockScroll", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Prevents the <c>Document.body</c> element from scrolling.", }},
            { "MudBlazor.MudOverlay.LockScrollClass", new() { Name = "LockScrollClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>""scroll-locked""</c>.", Summary = @"The css class that will be added to body if lockscroll is used.", }},
            { "MudBlazor.MudOverlay.ScrimClassname", new() { Name = "ScrimClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudOverlay.ScrollManager", new() { Name = "ScrollManager", TypeName = "MudBlazor.IScrollManager", TypeFriendlyName = "IScrollManager", Summary = @"The manager for scroll events.", }},
            { "MudBlazor.MudOverlay.Styles", new() { Name = "Styles", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudOverlay.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Makes the overlay visible.", }},
            { "MudBlazor.MudOverlay.ZIndex", new() { Name = "ZIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>5</c>.", Summary = @"Sets the z-index of the overlay.", }},
            { "MudBlazor.MudPageContentNavigation.ActivateFirstSectionAsDefault", new() { Name = "ActivateFirstSectionAsDefault", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Summary = @"If this option is true the first added section will become active when there is no other indication of an active session. Default value is false", }},
            { "MudBlazor.MudPageContentNavigation.ActiveSection", new() { Name = "ActiveSection", TypeName = "MudBlazor.MudPageContentSection", TypeFriendlyName = "MudPageContentSection", Summary = @"The currently active session. null if there is no section selected", }},
            { "MudBlazor.MudPageContentNavigation.ExpandBehaviour", new() { Name = "ExpandBehaviour", TypeName = "MudBlazor.ContentNavigationExpandBehaviour", TypeFriendlyName = "ContentNavigationExpandBehaviour", IsParameter = true, Summary = @"If there are multiple levels, this property controls they visibility of them.", }},
            { "MudBlazor.MudPageContentNavigation.Headline", new() { Name = "Headline", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The text displayed about the section links. Defaults to ""Contents""", }},
            { "MudBlazor.MudPageContentNavigation.HierarchyMapper", new() { Name = "HierarchyMapper", TypeName = "System.Collections.Generic.IDictionary`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "IDictionary<string, int>", IsParameter = true, Summary = @"If there are multiple levels, this can specified to make a mapping between a level class like ""second-level"" and the level in the hierarchy", }},
            { "MudBlazor.MudPageContentNavigation.ScrollContainerSelector", new() { Name = "ScrollContainerSelector", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The CSS selector used to identify the scroll container", }},
            { "MudBlazor.MudPageContentNavigation.SectionClassSelector", new() { Name = "SectionClassSelector", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The class name (without .) to identify the HTML elements that should be observed for viewport changes", }},
            { "MudBlazor.MudPageContentNavigation.Sections", new() { Name = "Sections", TypeName = "System.Collections.Generic.IEnumerable`1[[MudBlazor.MudPageContentSection, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IEnumerable<MudPageContentSection>", Summary = @"The displayed section within the MudPageContentNavigation", }},
            { "MudBlazor.MudPageContentSection.Active", new() { Name = "Active", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Indicating if the section is currently in the middle of the viewport", }},
            { "MudBlazor.MudPageContentSection.Id", new() { Name = "Id", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Id of the section. It will be appending to the current url, if the section becomes active", }},
            { "MudBlazor.MudPageContentSection.Level", new() { Name = "Level", TypeName = "System.Int32", TypeFriendlyName = "int", }},
            { "MudBlazor.MudPageContentSection.LevelSortingValue", new() { Name = "LevelSortingValue", TypeName = "System.Int32", TypeFriendlyName = "int", }},
            { "MudBlazor.MudPageContentSection.Parent", new() { Name = "Parent", TypeName = "MudBlazor.MudPageContentSection", TypeFriendlyName = "MudPageContentSection", }},
            { "MudBlazor.MudPageContentSection.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The Title of the section. This will be displayed in the navigation", }},
            { "MudBlazor.MudPagination.BeforeIcon", new() { Name = "BeforeIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.NavigateBefore"" />.  Only shows if <see cref=""P:MudBlazor.MudPagination.ShowPreviousButton"" /> is <c>true</c>.", Summary = @"The icon for the Before button.", }},
            { "MudBlazor.MudPagination.BoundaryCount", new() { Name = "BoundaryCount", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>1</c>. <br />A value of <c>1</c> would show one-page number at the edge: <c>&lt; 1 ... 4 5 6 ... 9 &gt;</c> <br />A value of <c>2</c> would show two-page numbers at the edge: <c>&lt; 1 2 ... 4 5 6 ... 8 9 &gt;</c>", Summary = @"The number of pages shown before and after the ellipsis.", }},
            { "MudBlazor.MudPagination.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" />.", Summary = @"The color of the selected page button.", }},
            { "MudBlazor.MudPagination.Count", new() { Name = "Count", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The total number of pages.", }},
            { "MudBlazor.MudPagination.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from clicking page buttons.", }},
            { "MudBlazor.MudPagination.DropShadow", new() { Name = "DropShadow", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a drop shadow under each page button.", }},
            { "MudBlazor.MudPagination.FirstIcon", new() { Name = "FirstIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.FirstPage"" />.  Only shows if <see cref=""P:MudBlazor.MudPagination.ShowFirstButton"" /> is <c>true</c>.", Summary = @"The icon for the First button.", }},
            { "MudBlazor.MudPagination.LastIcon", new() { Name = "LastIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.LastPage"" />.  Only shows if <see cref=""P:MudBlazor.MudPagination.ShowLastButton"" /> is <c>true</c>.", Summary = @"The icon for the Last button.", }},
            { "MudBlazor.MudPagination.MiddleCount", new() { Name = "MiddleCount", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>1</c>. <br />A value of <c>1</c> would show one-page number in the middle: <c>&lt; 1 ... 5 ... 9 &gt;</c> <br />A value of <c>3</c> would show three-page numbers in the middle: <c>&lt; 1 ... 4 5 6 ... 9 &gt;</c>", Summary = @"The number of pages shown between the ellipsis.", }},
            { "MudBlazor.MudPagination.NextIcon", new() { Name = "NextIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.NavigateNext"" />.  Only shows if <see cref=""P:MudBlazor.MudPagination.ShowNextButton"" /> is <c>true</c>.", Summary = @"The icon for the Next button.", }},
            { "MudBlazor.MudPagination.Rectangular", new() { Name = "Rectangular", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows rectangular-shaped page buttons.", }},
            { "MudBlazor.MudPagination.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>. Controlled via the <see cref=""T:MudBlazor.MudRTLProvider"" />.", Summary = @"Displays text right-to-left.", }},
            { "MudBlazor.MudPagination.Selected", new() { Name = "Selected", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The selected page number.", }},
            { "MudBlazor.MudPagination.ShowFirstButton", new() { Name = "ShowFirstButton", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows the button which selects the first page.", }},
            { "MudBlazor.MudPagination.ShowLastButton", new() { Name = "ShowLastButton", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows the button which selects the last page.", }},
            { "MudBlazor.MudPagination.ShowNextButton", new() { Name = "ShowNextButton", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the button which selects the next page.", }},
            { "MudBlazor.MudPagination.ShowPageButtons", new() { Name = "ShowPageButtons", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Shows numeric buttons for pages.", }},
            { "MudBlazor.MudPagination.ShowPreviousButton", new() { Name = "ShowPreviousButton", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the button which selects the previous page.", }},
            { "MudBlazor.MudPagination.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the page buttons.", }},
            { "MudBlazor.MudPagination.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.", Summary = @"The display variant to use.", }},
            { "MudBlazor.MudPaper.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudPaper.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPaper.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>1</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudPaper.Height", new() { Name = "Height", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Can be a pixel height (<c>150px</c>), percentage (<c>30%</c>), or other CSS height value.", Summary = @"The height of this component.", }},
            { "MudBlazor.MudPaper.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Can be a pixel height (<c>150px</c>), percentage (<c>30%</c>), or other CSS height value.", Summary = @"The maximum height of this component.", }},
            { "MudBlazor.MudPaper.MaxWidth", new() { Name = "MaxWidth", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Can be a pixel width (<c>150px</c>), percentage (<c>30%</c>), or other CSS width value.", Summary = @"The maximum width of this component.", }},
            { "MudBlazor.MudPaper.MinHeight", new() { Name = "MinHeight", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Can be a pixel height (<c>150px</c>), percentage (<c>30%</c>), or other CSS height value.", Summary = @"The minimum height of this component.", }},
            { "MudBlazor.MudPaper.MinWidth", new() { Name = "MinWidth", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Can be a pixel width (<c>150px</c>), percentage (<c>30%</c>), or other CSS width value.", Summary = @"The minimum width of this component.", }},
            { "MudBlazor.MudPaper.Outlined", new() { Name = "Outlined", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays an outline around this component.", }},
            { "MudBlazor.MudPaper.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.When <c>true</c>, the <c>border-radius</c> is set to <c>0</c>.", Summary = @"Displays a square shape.", }},
            { "MudBlazor.MudPaper.Stylename", new() { Name = "Stylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPaper.Width", new() { Name = "Width", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Can be a pixel width (<c>150px</c>), percentage (<c>30%</c>), or other CSS width value.", Summary = @"The width of this component.", }},
            { "MudBlazor.MudPicker`1.ActionsClass", new() { Name = "ActionsClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Multiple classes must be separated by a space.", Summary = @"The CSS classes applied to the action buttons container.", }},
            { "MudBlazor.MudPicker`1.ActionsClassname", new() { Name = "ActionsClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.Adornment", new() { Name = "Adornment", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Adornment.End"" />.", Summary = @"The location of the <see cref=""P:MudBlazor.MudPicker`1.AdornmentIcon"" /> for the input.", }},
            { "MudBlazor.MudPicker`1.AdornmentAriaLabel", new() { Name = "AdornmentAriaLabel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The <c>aria-label</c> for the adornment.", }},
            { "MudBlazor.MudPicker`1.AdornmentColor", new() { Name = "AdornmentColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the <see cref=""P:MudBlazor.MudPicker`1.AdornmentIcon"" />.", }},
            { "MudBlazor.MudPicker`1.AdornmentIcon", new() { Name = "AdornmentIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Event"" />.", Summary = @"The icon shown next to the text input.", }},
            { "MudBlazor.MudPicker`1.AnchorOrigin", new() { Name = "AnchorOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.BottomLeft"" />.", Summary = @"The location the popover opens, relative to its container.", }},
            { "MudBlazor.MudPicker`1.Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>true</c>, an icon is displayed which, when clicked, clears the Text and Value.  Use the <c>ClearIcon</c> property to control the Clear button icon.", Summary = @"Displays the Clear icon button.", }},
            { "MudBlazor.MudPicker`1.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" />.", Summary = @"The color of the toolbar, selected, and active values.", }},
            { "MudBlazor.MudPicker`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this button.", }},
            { "MudBlazor.MudPicker`1.Editable", new() { Name = "Editable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows the value to be edited.", }},
            { "MudBlazor.MudPicker`1.Elevation", new() { Name = "Elevation", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>8</c> for inline pickers; otherwise <c>0</c>.<br />A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudPicker`1.HelperText", new() { Name = "HelperText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to help the user understand what kind of input is allowed.  The <see cref=""P:MudBlazor.MudPicker`1.HelperTextOnFocus"" /> property controls when this text is visible.", Summary = @"The text displayed below the text field.", }},
            { "MudBlazor.MudPicker`1.HelperTextOnFocus", new() { Name = "HelperTextOnFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the <see cref=""P:MudBlazor.MudPicker`1.HelperText"" /> only when this input has focus.", }},
            { "MudBlazor.MudPicker`1.IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the icon in the input field.", }},
            { "MudBlazor.MudPicker`1.ImmediateText", new() { Name = "ImmediateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>false</c>, <see cref=""P:MudBlazor.MudPicker`1.Text"" /> is only updated when pressing <c>Enter</c> or upon loss of focus.", Summary = @"Updates <see cref=""P:MudBlazor.MudPicker`1.Text"" /> immediately upon typing when <see cref=""P:MudBlazor.MudPicker`1.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1.InputContent", new() { Name = "InputContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"If no value is specified, the label will be displayed in the input.  Otherwise, it will be scaled down to the top of the input.", Summary = @"The label for this input.", }},
            { "MudBlazor.MudPicker`1.Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Applies vertical spacing.", }},
            { "MudBlazor.MudPicker`1.Mask", new() { Name = "Mask", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The mask to apply to input values when <see cref=""P:MudBlazor.MudPicker`1.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1.Open", new() { Name = "Open", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.Orientation", new() { Name = "Orientation", TypeName = "MudBlazor.Orientation", TypeFriendlyName = "Orientation", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Orientation.Portrait"" />.", Summary = @"The orientation of the picker when <see cref=""P:MudBlazor.MudPicker`1.PickerVariant"" /> is <see cref=""F:MudBlazor.PickerVariant.Static"" />.", }},
            { "MudBlazor.MudPicker`1.OverflowBehavior", new() { Name = "OverflowBehavior", TypeName = "MudBlazor.OverflowBehavior", TypeFriendlyName = "OverflowBehavior", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.OverflowBehavior.FlipOnOpen"" />.", Summary = @"The behavior of the popover when it overflows its container.", }},
            { "MudBlazor.MudPicker`1.PickerActions", new() { Name = "PickerActions", TypeName = "", TypeFriendlyName = "RenderFragment<MudPicker<T>>", Category = "Picker behavior", IsParameter = true, Order = 404, Summary = @"The custom action buttons to display.", }},
            { "MudBlazor.MudPicker`1.PickerClassname", new() { Name = "PickerClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.PickerContainerClassname", new() { Name = "PickerContainerClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.PickerContent", new() { Name = "PickerContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, Summary = @"Gets the content to be rendered inside the picker.Override this property to provide custom content for the picker.", }},
            { "MudBlazor.MudPicker`1.PickerInlineClassname", new() { Name = "PickerInlineClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.PickerInputClassname", new() { Name = "PickerInputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.PickerPaperClassname", new() { Name = "PickerPaperClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.PickerPaperStylename", new() { Name = "PickerPaperStylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.PickerVariant", new() { Name = "PickerVariant", TypeName = "MudBlazor.PickerVariant", TypeFriendlyName = "PickerVariant", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.PickerVariant.Inline"" />.<br />Other values are <see cref=""F:MudBlazor.PickerVariant.Dialog"" /> and <see cref=""F:MudBlazor.PickerVariant.Static"" />.", Summary = @"The display variant for this picker.", }},
            { "MudBlazor.MudPicker`1.Placeholder", new() { Name = "Placeholder", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to give the user a hint as to what kind of input is expected.", Summary = @"The text displayed in the input if no value is specified.", }},
            { "MudBlazor.MudPicker`1.PopoverClassname", new() { Name = "PopoverClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>true</c>, the user can copy text in the control, but cannot change the value.", Summary = @"Prevents the input from being changed by the user.", }},
            { "MudBlazor.MudPicker`1.RelativeWidth", new() { Name = "RelativeWidth", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"<para>Defaults to <see cref=""F:MudBlazor.DropdownWidth.Ignore"" />. </para><para>When <see cref=""F:MudBlazor.DropdownWidth.Relative"" />, restricts the max-width of the component to the width of the parent container</para><para>When <see cref=""F:MudBlazor.DropdownWidth.Adaptive"" />, restricts the min-width of the component to the width of the parent container</para>", Summary = @"Determines the width of the Popover dropdown in relation the parent container.", }},
            { "MudBlazor.MudPicker`1.Render", new() { Name = "Render", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.Rounded", new() { Name = "Rounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.When <c>true</c>, the <c>border-radius</c> style is set to the theme's default value.", Summary = @"Shows rounded corners.", }},
            { "MudBlazor.MudPicker`1.ShowToolbar", new() { Name = "ShowToolbar", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the toolbar.", }},
            { "MudBlazor.MudPicker`1.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"Disables rounded corners.", }},
            { "MudBlazor.MudPicker`1.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Data", IsParameter = true, Order = 0, Summary = @"The currently selected value, as a string.", }},
            { "MudBlazor.MudPicker`1.ToolbarClass", new() { Name = "ToolbarClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes for the toolbar when <see cref=""P:MudBlazor.MudPicker`1.ShowToolbar"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1.TransformOrigin", new() { Name = "TransformOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopLeft"" />.", Summary = @"The direction the popover opens, relative to its container.", }},
            { "MudBlazor.MudPicker`1.Underline", new() { Name = "Underline", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows an underline under the input text.", }},
            { "MudBlazor.MudPicker`1.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.", Summary = @"The display variant of the text input.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ActionsClass", new() { Name = "ActionsClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Multiple classes must be separated by a space.", Summary = @"The CSS classes applied to the action buttons container.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ActionsClassname", new() { Name = "ActionsClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Adornment", new() { Name = "Adornment", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Adornment.End"" />.", Summary = @"The location of the <see cref=""P:MudBlazor.MudPicker`1.AdornmentIcon"" /> for the input.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AdornmentAriaLabel", new() { Name = "AdornmentAriaLabel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The <c>aria-label</c> for the adornment.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AdornmentColor", new() { Name = "AdornmentColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the <see cref=""P:MudBlazor.MudPicker`1.AdornmentIcon"" />.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AdornmentIcon", new() { Name = "AdornmentIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Event"" />.", Summary = @"The icon shown next to the text input.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AnchorOrigin", new() { Name = "AnchorOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.BottomLeft"" />.", Summary = @"The location the popover opens, relative to its container.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>true</c>, an icon is displayed which, when clicked, clears the Text and Value.  Use the <c>ClearIcon</c> property to control the Clear button icon.", Summary = @"Displays the Clear icon button.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" />.", Summary = @"The color of the toolbar, selected, and active values.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this button.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Editable", new() { Name = "Editable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows the value to be edited.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Elevation", new() { Name = "Elevation", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>8</c> for inline pickers; otherwise <c>0</c>.<br />A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].HelperText", new() { Name = "HelperText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to help the user understand what kind of input is allowed.  The <see cref=""P:MudBlazor.MudPicker`1.HelperTextOnFocus"" /> property controls when this text is visible.", Summary = @"The text displayed below the text field.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].HelperTextOnFocus", new() { Name = "HelperTextOnFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the <see cref=""P:MudBlazor.MudPicker`1.HelperText"" /> only when this input has focus.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the icon in the input field.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ImmediateText", new() { Name = "ImmediateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>false</c>, <see cref=""P:MudBlazor.MudPicker`1.Text"" /> is only updated when pressing <c>Enter</c> or upon loss of focus.", Summary = @"Updates <see cref=""P:MudBlazor.MudPicker`1.Text"" /> immediately upon typing when <see cref=""P:MudBlazor.MudPicker`1.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].InputContent", new() { Name = "InputContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"If no value is specified, the label will be displayed in the input.  Otherwise, it will be scaled down to the top of the input.", Summary = @"The label for this input.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Applies vertical spacing.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Mask", new() { Name = "Mask", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The mask to apply to input values when <see cref=""P:MudBlazor.MudPicker`1.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Open", new() { Name = "Open", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Orientation", new() { Name = "Orientation", TypeName = "MudBlazor.Orientation", TypeFriendlyName = "Orientation", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Orientation.Portrait"" />.", Summary = @"The orientation of the picker when <see cref=""P:MudBlazor.MudPicker`1.PickerVariant"" /> is <see cref=""F:MudBlazor.PickerVariant.Static"" />.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OverflowBehavior", new() { Name = "OverflowBehavior", TypeName = "MudBlazor.OverflowBehavior", TypeFriendlyName = "OverflowBehavior", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.OverflowBehavior.FlipOnOpen"" />.", Summary = @"The behavior of the popover when it overflows its container.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerActions", new() { Name = "PickerActions", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudPicker<MudColor>>", Category = "Picker behavior", IsParameter = true, Order = 404, Summary = @"The custom action buttons to display.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerClassname", new() { Name = "PickerClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerContainerClassname", new() { Name = "PickerContainerClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerInlineClassname", new() { Name = "PickerInlineClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerInputClassname", new() { Name = "PickerInputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerPaperClassname", new() { Name = "PickerPaperClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerPaperStylename", new() { Name = "PickerPaperStylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerVariant", new() { Name = "PickerVariant", TypeName = "MudBlazor.PickerVariant", TypeFriendlyName = "PickerVariant", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.PickerVariant.Inline"" />.<br />Other values are <see cref=""F:MudBlazor.PickerVariant.Dialog"" /> and <see cref=""F:MudBlazor.PickerVariant.Static"" />.", Summary = @"The display variant for this picker.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Placeholder", new() { Name = "Placeholder", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to give the user a hint as to what kind of input is expected.", Summary = @"The text displayed in the input if no value is specified.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PopoverClassname", new() { Name = "PopoverClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>true</c>, the user can copy text in the control, but cannot change the value.", Summary = @"Prevents the input from being changed by the user.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].RelativeWidth", new() { Name = "RelativeWidth", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"<para>Defaults to <see cref=""F:MudBlazor.DropdownWidth.Ignore"" />. </para><para>When <see cref=""F:MudBlazor.DropdownWidth.Relative"" />, restricts the max-width of the component to the width of the parent container</para><para>When <see cref=""F:MudBlazor.DropdownWidth.Adaptive"" />, restricts the min-width of the component to the width of the parent container</para>", Summary = @"Determines the width of the Popover dropdown in relation the parent container.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Render", new() { Name = "Render", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Rounded", new() { Name = "Rounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.When <c>true</c>, the <c>border-radius</c> style is set to the theme's default value.", Summary = @"Shows rounded corners.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ShowToolbar", new() { Name = "ShowToolbar", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the toolbar.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"Disables rounded corners.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Data", IsParameter = true, Order = 0, Summary = @"The currently selected value, as a string.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ToolbarClass", new() { Name = "ToolbarClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes for the toolbar when <see cref=""P:MudBlazor.MudPicker`1.ShowToolbar"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].TransformOrigin", new() { Name = "TransformOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopLeft"" />.", Summary = @"The direction the popover opens, relative to its container.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Underline", new() { Name = "Underline", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows an underline under the input text.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.", Summary = @"The display variant of the text input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClass", new() { Name = "ActionsClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Multiple classes must be separated by a space.", Summary = @"The CSS classes applied to the action buttons container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClassname", new() { Name = "ActionsClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment", new() { Name = "Adornment", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Adornment.End"" />.", Summary = @"The location of the <see cref=""P:MudBlazor.MudPicker`1.AdornmentIcon"" /> for the input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel", new() { Name = "AdornmentAriaLabel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The <c>aria-label</c> for the adornment.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor", new() { Name = "AdornmentColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the <see cref=""P:MudBlazor.MudPicker`1.AdornmentIcon"" />.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon", new() { Name = "AdornmentIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Event"" />.", Summary = @"The icon shown next to the text input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AnchorOrigin", new() { Name = "AnchorOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.BottomLeft"" />.", Summary = @"The location the popover opens, relative to its container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>true</c>, an icon is displayed which, when clicked, clears the Text and Value.  Use the <c>ClearIcon</c> property to control the Clear button icon.", Summary = @"Displays the Clear icon button.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" />.", Summary = @"The color of the toolbar, selected, and active values.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this button.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Editable", new() { Name = "Editable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows the value to be edited.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Elevation", new() { Name = "Elevation", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>8</c> for inline pickers; otherwise <c>0</c>.<br />A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText", new() { Name = "HelperText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to help the user understand what kind of input is allowed.  The <see cref=""P:MudBlazor.MudPicker`1.HelperTextOnFocus"" /> property controls when this text is visible.", Summary = @"The text displayed below the text field.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus", new() { Name = "HelperTextOnFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the <see cref=""P:MudBlazor.MudPicker`1.HelperText"" /> only when this input has focus.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the icon in the input field.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ImmediateText", new() { Name = "ImmediateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>false</c>, <see cref=""P:MudBlazor.MudPicker`1.Text"" /> is only updated when pressing <c>Enter</c> or upon loss of focus.", Summary = @"Updates <see cref=""P:MudBlazor.MudPicker`1.Text"" /> immediately upon typing when <see cref=""P:MudBlazor.MudPicker`1.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputContent", new() { Name = "InputContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"If no value is specified, the label will be displayed in the input.  Otherwise, it will be scaled down to the top of the input.", Summary = @"The label for this input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Applies vertical spacing.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Mask", new() { Name = "Mask", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The mask to apply to input values when <see cref=""P:MudBlazor.MudPicker`1.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Open", new() { Name = "Open", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Orientation", new() { Name = "Orientation", TypeName = "MudBlazor.Orientation", TypeFriendlyName = "Orientation", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Orientation.Portrait"" />.", Summary = @"The orientation of the picker when <see cref=""P:MudBlazor.MudPicker`1.PickerVariant"" /> is <see cref=""F:MudBlazor.PickerVariant.Static"" />.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OverflowBehavior", new() { Name = "OverflowBehavior", TypeName = "MudBlazor.OverflowBehavior", TypeFriendlyName = "OverflowBehavior", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.OverflowBehavior.FlipOnOpen"" />.", Summary = @"The behavior of the popover when it overflows its container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerActions", new() { Name = "PickerActions", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudPicker<DateTime?>>", Category = "Picker behavior", IsParameter = true, Order = 404, Summary = @"The custom action buttons to display.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClassname", new() { Name = "PickerClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerContainerClassname", new() { Name = "PickerContainerClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInlineClassname", new() { Name = "PickerInlineClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInputClassname", new() { Name = "PickerInputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperClassname", new() { Name = "PickerPaperClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperStylename", new() { Name = "PickerPaperStylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerVariant", new() { Name = "PickerVariant", TypeName = "MudBlazor.PickerVariant", TypeFriendlyName = "PickerVariant", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.PickerVariant.Inline"" />.<br />Other values are <see cref=""F:MudBlazor.PickerVariant.Dialog"" /> and <see cref=""F:MudBlazor.PickerVariant.Static"" />.", Summary = @"The display variant for this picker.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder", new() { Name = "Placeholder", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to give the user a hint as to what kind of input is expected.", Summary = @"The text displayed in the input if no value is specified.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PopoverClassname", new() { Name = "PopoverClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>true</c>, the user can copy text in the control, but cannot change the value.", Summary = @"Prevents the input from being changed by the user.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RelativeWidth", new() { Name = "RelativeWidth", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"<para>Defaults to <see cref=""F:MudBlazor.DropdownWidth.Ignore"" />. </para><para>When <see cref=""F:MudBlazor.DropdownWidth.Relative"" />, restricts the max-width of the component to the width of the parent container</para><para>When <see cref=""F:MudBlazor.DropdownWidth.Adaptive"" />, restricts the min-width of the component to the width of the parent container</para>", Summary = @"Determines the width of the Popover dropdown in relation the parent container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Render", new() { Name = "Render", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rounded", new() { Name = "Rounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.When <c>true</c>, the <c>border-radius</c> style is set to the theme's default value.", Summary = @"Shows rounded corners.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShowToolbar", new() { Name = "ShowToolbar", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the toolbar.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"Disables rounded corners.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Data", IsParameter = true, Order = 0, Summary = @"The currently selected value, as a string.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToolbarClass", new() { Name = "ToolbarClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes for the toolbar when <see cref=""P:MudBlazor.MudPicker`1.ShowToolbar"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TransformOrigin", new() { Name = "TransformOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopLeft"" />.", Summary = @"The direction the popover opens, relative to its container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline", new() { Name = "Underline", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows an underline under the input text.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.", Summary = @"The display variant of the text input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClass", new() { Name = "ActionsClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Multiple classes must be separated by a space.", Summary = @"The CSS classes applied to the action buttons container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClassname", new() { Name = "ActionsClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment", new() { Name = "Adornment", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Adornment.End"" />.", Summary = @"The location of the <see cref=""P:MudBlazor.MudPicker`1.AdornmentIcon"" /> for the input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel", new() { Name = "AdornmentAriaLabel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The <c>aria-label</c> for the adornment.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor", new() { Name = "AdornmentColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the <see cref=""P:MudBlazor.MudPicker`1.AdornmentIcon"" />.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon", new() { Name = "AdornmentIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Event"" />.", Summary = @"The icon shown next to the text input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AnchorOrigin", new() { Name = "AnchorOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.BottomLeft"" />.", Summary = @"The location the popover opens, relative to its container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>true</c>, an icon is displayed which, when clicked, clears the Text and Value.  Use the <c>ClearIcon</c> property to control the Clear button icon.", Summary = @"Displays the Clear icon button.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" />.", Summary = @"The color of the toolbar, selected, and active values.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this button.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Editable", new() { Name = "Editable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows the value to be edited.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Elevation", new() { Name = "Elevation", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>8</c> for inline pickers; otherwise <c>0</c>.<br />A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText", new() { Name = "HelperText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to help the user understand what kind of input is allowed.  The <see cref=""P:MudBlazor.MudPicker`1.HelperTextOnFocus"" /> property controls when this text is visible.", Summary = @"The text displayed below the text field.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus", new() { Name = "HelperTextOnFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the <see cref=""P:MudBlazor.MudPicker`1.HelperText"" /> only when this input has focus.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize", new() { Name = "IconSize", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the icon in the input field.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ImmediateText", new() { Name = "ImmediateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>false</c>, <see cref=""P:MudBlazor.MudPicker`1.Text"" /> is only updated when pressing <c>Enter</c> or upon loss of focus.", Summary = @"Updates <see cref=""P:MudBlazor.MudPicker`1.Text"" /> immediately upon typing when <see cref=""P:MudBlazor.MudPicker`1.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputContent", new() { Name = "InputContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label", new() { Name = "Label", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"If no value is specified, the label will be displayed in the input.  Otherwise, it will be scaled down to the top of the input.", Summary = @"The label for this input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin", new() { Name = "Margin", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Applies vertical spacing.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Mask", new() { Name = "Mask", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The mask to apply to input values when <see cref=""P:MudBlazor.MudPicker`1.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Open", new() { Name = "Open", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Orientation", new() { Name = "Orientation", TypeName = "MudBlazor.Orientation", TypeFriendlyName = "Orientation", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <see cref=""F:MudBlazor.Orientation.Portrait"" />.", Summary = @"The orientation of the picker when <see cref=""P:MudBlazor.MudPicker`1.PickerVariant"" /> is <see cref=""F:MudBlazor.PickerVariant.Static"" />.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OverflowBehavior", new() { Name = "OverflowBehavior", TypeName = "MudBlazor.OverflowBehavior", TypeFriendlyName = "OverflowBehavior", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.OverflowBehavior.FlipOnOpen"" />.", Summary = @"The behavior of the popover when it overflows its container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerActions", new() { Name = "PickerActions", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudPicker<TimeSpan?>>", Category = "Picker behavior", IsParameter = true, Order = 404, Summary = @"The custom action buttons to display.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClassname", new() { Name = "PickerClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerContainerClassname", new() { Name = "PickerContainerClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInlineClassname", new() { Name = "PickerInlineClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInputClassname", new() { Name = "PickerInputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperClassname", new() { Name = "PickerPaperClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperStylename", new() { Name = "PickerPaperStylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerVariant", new() { Name = "PickerVariant", TypeName = "MudBlazor.PickerVariant", TypeFriendlyName = "PickerVariant", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.PickerVariant.Inline"" />.<br />Other values are <see cref=""F:MudBlazor.PickerVariant.Dialog"" /> and <see cref=""F:MudBlazor.PickerVariant.Static"" />.", Summary = @"The display variant for this picker.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder", new() { Name = "Placeholder", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This property is typically used to give the user a hint as to what kind of input is expected.", Summary = @"The text displayed in the input if no value is specified.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PopoverClassname", new() { Name = "PopoverClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.<br />When <c>true</c>, the user can copy text in the control, but cannot change the value.", Summary = @"Prevents the input from being changed by the user.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RelativeWidth", new() { Name = "RelativeWidth", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"<para>Defaults to <see cref=""F:MudBlazor.DropdownWidth.Ignore"" />. </para><para>When <see cref=""F:MudBlazor.DropdownWidth.Relative"" />, restricts the max-width of the component to the width of the parent container</para><para>When <see cref=""F:MudBlazor.DropdownWidth.Adaptive"" />, restricts the min-width of the component to the width of the parent container</para>", Summary = @"Determines the width of the Popover dropdown in relation the parent container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Render", new() { Name = "Render", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rounded", new() { Name = "Rounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.When <c>true</c>, the <c>border-radius</c> style is set to the theme's default value.", Summary = @"Shows rounded corners.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShowToolbar", new() { Name = "ShowToolbar", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the toolbar.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"Disables rounded corners.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Data", IsParameter = true, Order = 0, Summary = @"The currently selected value, as a string.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToolbarClass", new() { Name = "ToolbarClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Picker appearance", IsParameter = true, Order = 405, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes for the toolbar when <see cref=""P:MudBlazor.MudPicker`1.ShowToolbar"" /> is <c>true</c>.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TransformOrigin", new() { Name = "TransformOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopLeft"" />.", Summary = @"The direction the popover opens, relative to its container.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline", new() { Name = "Underline", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows an underline under the input text.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.", Summary = @"The display variant of the text input.", }},
            { "MudBlazor.MudPickerContent.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content to display.", }},
            { "MudBlazor.MudPickerContent.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPickerToolbar.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this toolbar.", }},
            { "MudBlazor.MudPickerToolbar.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudPickerToolbar.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the toolbar, selected, and active values.", }},
            { "MudBlazor.MudPickerToolbar.Orientation", new() { Name = "Orientation", TypeName = "MudBlazor.Orientation", TypeFriendlyName = "Orientation", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The display orientation of this toolbar.", }},
            { "MudBlazor.MudPickerToolbar.PickerVariant", new() { Name = "PickerVariant", TypeName = "MudBlazor.PickerVariant", TypeFriendlyName = "PickerVariant", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The display variant for this toolbar.", }},
            { "MudBlazor.MudPickerToolbar.ShowToolbar", new() { Name = "ShowToolbar", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the toolbar.", }},
            { "MudBlazor.MudPopover.AnchorOrigin", new() { Name = "AnchorOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopLeft"" />.  Use <see cref=""P:MudBlazor.MudPopover.TransformOrigin"" /> to control the direction of the popover from this point.", Summary = @"The location this popover will appear relative to its parent container.", }},
            { "MudBlazor.MudPopover.Delay", new() { Name = "Delay", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to 0ms in <see cref=""P:MudBlazor.MudGlobal.TransitionDefaults.Delay"" />.", Summary = @"The amount of time, in milliseconds, from opening the popover to beginning the transition.", }},
            { "MudBlazor.MudPopover.DropShadow", new() { Name = "DropShadow", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a drop shadow to help this popover stand out.", }},
            { "MudBlazor.MudPopover.Duration", new() { Name = "Duration", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to 251ms in <see cref=""P:MudBlazor.MudGlobal.TransitionDefaults.Duration"" />.", Summary = @"The length of time that the opening transition takes to complete.", }},
            { "MudBlazor.MudPopover.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to 8 in <see cref=""P:MudBlazor.MudGlobal.PopoverDefaults.Elevation"" />.", Summary = @"The amount of drop shadow to apply.", }},
            { "MudBlazor.MudPopover.Fixed", new() { Name = "Fixed", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>False</c>.", Summary = @"Displays this popover in a fixed position, even through scrolling.", }},
            { "MudBlazor.MudPopover.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Sets the maximum height, in pixels, of this popover.", }},
            { "MudBlazor.MudPopover.OverflowBehavior", new() { Name = "OverflowBehavior", TypeName = "MudBlazor.OverflowBehavior", TypeFriendlyName = "OverflowBehavior", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.OverflowBehavior.FlipOnOpen"" />.", Summary = @"The behavior applied when there is not enough space for this popover to be visible.", }},
            { "MudBlazor.MudPopover.Paper", new() { Name = "Paper", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays content within a <see cref=""T:MudBlazor.MudPaper"" />.", }},
            { "MudBlazor.MudPopover.RelativeWidth", new() { Name = "RelativeWidth", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"<para>Defaults to <see cref=""F:MudBlazor.DropdownWidth.Ignore"" />. </para><para>When <see cref=""F:MudBlazor.DropdownWidth.Relative"" />, restricts the max-width of the component to the width of the parent container</para><para>When <see cref=""F:MudBlazor.DropdownWidth.Adaptive"" />, restricts the min-width of the component to the width of the parent container</para>", Summary = @"Determines the width of this popover in relation the parent container.", }},
            { "MudBlazor.MudPopover.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.  This property is set via the <see cref=""T:MudBlazor.MudRTLProvider"" />.", Summary = @"Displays text Right-to-Left.", }},
            { "MudBlazor.MudPopover.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.When <c>true</c>, the CSS <c>border-radius</c> is set to <c>0</c>.", Summary = @"Displays square borders around this popover.", }},
            { "MudBlazor.MudPopover.TransformOrigin", new() { Name = "TransformOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopLeft"" />.", Summary = @"The direction this popover will appear relative to the <see cref=""T:MudBlazor.Origin"" />.", }},
            { "MudBlazor.MudPopoverBase.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, }},
            { "MudBlazor.MudPopoverBase.Id", new() { Name = "Id", TypeName = "System.Guid", TypeFriendlyName = "Guid", }},
            { "MudBlazor.MudPopoverBase.Open", new() { Name = "Open", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, }},
            { "MudBlazor.MudPopoverBase.PopoverService", new() { Name = "PopoverService", TypeName = "MudBlazor.IPopoverService", TypeFriendlyName = "IPopoverService", IsProtected = true, }},
            { "MudBlazor.MudPopoverProvider.Enabled", new() { Name = "Enabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>true</c>.If more than one <see cref=""T:MudBlazor.MudPopoverProvider"" /> is detected, this property will be <c>false</c> to ensure only one instance is active.Can be overridden by setting a cascading parameter of <c>UsePopoverProvider</c> to <c>false</c>.", Summary = @"Controls whether this provider is enabled.", }},
            { "MudBlazor.MudProgressCircular.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudProgressCircular.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of this component.", }},
            { "MudBlazor.MudProgressCircular.Indeterminate", new() { Name = "Indeterminate", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the <see cref=""P:MudBlazor.MudProgressCircular.Value"" /> will be ignored.", Summary = @"Displays a constant animation without any value.", }},
            { "MudBlazor.MudProgressCircular.Max", new() { Name = "Max", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>100.0</c>.  Usually a percentage.  Should be higher than <see cref=""P:MudBlazor.MudProgressCircular.Min"" />.", Summary = @"The highest possible value.", }},
            { "MudBlazor.MudProgressCircular.Min", new() { Name = "Min", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>0.0</c>.  Usually a percentage.  Should be lower than <see cref=""P:MudBlazor.MudProgressCircular.Max"" />.", Summary = @"The lowest possible value.", }},
            { "MudBlazor.MudProgressCircular.Rounded", new() { Name = "Rounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the CSS <c>stroke-linecap</c> is set to <c>round</c>.", Summary = @"Displays a rounded border.", }},
            { "MudBlazor.MudProgressCircular.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of this component.", }},
            { "MudBlazor.MudProgressCircular.StrokeWidth", new() { Name = "StrokeWidth", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>3</c>.", Summary = @"The thickness of the circle.", }},
            { "MudBlazor.MudProgressCircular.SvgClassname", new() { Name = "SvgClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudProgressCircular.Value", new() { Name = "Value", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>0</c>.  Only applies when <see cref=""P:MudBlazor.MudProgressCircular.Indeterminate"" /> is <c>False</c>.  Should be between <see cref=""P:MudBlazor.MudProgressCircular.Min"" /> and <see cref=""P:MudBlazor.MudProgressCircular.Max"" />.", Summary = @"The current progress amount.", }},
            { "MudBlazor.MudProgressLinear.Buffer", new() { Name = "Buffer", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the value of <see cref=""P:MudBlazor.MudProgressLinear.BufferValue"" /> is displayed.", Summary = @"Displays an additional value ahead of <see cref=""P:MudBlazor.MudProgressLinear.Value"" />.", }},
            { "MudBlazor.MudProgressLinear.BufferPercent", new() { Name = "BufferPercent", TypeName = "System.Double", TypeFriendlyName = "double", IsProtected = true, }},
            { "MudBlazor.MudProgressLinear.BufferValue", new() { Name = "BufferValue", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>0</c>.  Only shows when <see cref=""P:MudBlazor.MudProgressLinear.Buffer"" /> is <c>true</c> and <see cref=""P:MudBlazor.MudProgressLinear.Indeterminate"" /> is <c>false</c>.  Typically a value greater than <see cref=""P:MudBlazor.MudProgressLinear.Value"" />.", Summary = @"The amount to display ahead of the value.", }},
            { "MudBlazor.MudProgressLinear.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this progress bar.", }},
            { "MudBlazor.MudProgressLinear.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudProgressLinear.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of this component.", }},
            { "MudBlazor.MudProgressLinear.Indeterminate", new() { Name = "Indeterminate", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the <see cref=""P:MudBlazor.MudProgressLinear.Value"" /> will be ignored.", Summary = @"Displays a constant animation without any value.", }},
            { "MudBlazor.MudProgressLinear.Max", new() { Name = "Max", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>100.0</c>.  Usually a percentage.  Should be higher than <see cref=""P:MudBlazor.MudProgressLinear.Min"" />.", Summary = @"The highest possible value.", }},
            { "MudBlazor.MudProgressLinear.Min", new() { Name = "Min", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>0.0</c>.  Usually a percentage.  Should be lower than <see cref=""P:MudBlazor.MudProgressLinear.Max"" />.", Summary = @"The lowest possible value.", }},
            { "MudBlazor.MudProgressLinear.Rounded", new() { Name = "Rounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c> in <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.When <c>true</c>, the CSS <c>border-radius</c> is set to the theme's default value.", Summary = @"Displays a rounded border.", }},
            { "MudBlazor.MudProgressLinear.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of this component.", }},
            { "MudBlazor.MudProgressLinear.Striped", new() { Name = "Striped", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Default to <c>false</c>.", Summary = @"Displays animated stripes for the value portion of this progress bar.", }},
            { "MudBlazor.MudProgressLinear.Value", new() { Name = "Value", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>0</c>.  Only applies when <see cref=""P:MudBlazor.MudProgressLinear.Indeterminate"" /> is <c>false</c>.  Should be between <see cref=""P:MudBlazor.MudProgressLinear.Min"" /> and <see cref=""P:MudBlazor.MudProgressLinear.Max"" />.", Summary = @"The current progress amount.", }},
            { "MudBlazor.MudProgressLinear.ValuePercent", new() { Name = "ValuePercent", TypeName = "System.Double", TypeFriendlyName = "double", IsProtected = true, }},
            { "MudBlazor.MudProgressLinear.Vertical", new() { Name = "Vertical", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays this progress bar vertically.", }},
            { "MudBlazor.MudRadio`1.CheckedIcon", new() { Name = "CheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.RadioButtonChecked"" />.", Summary = @"The icon displayed when in a checked state.", }},
            { "MudBlazor.MudRadio`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRadio`1.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact vertical padding.", }},
            { "MudBlazor.MudRadio`1.IconClassname", new() { Name = "IconClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRadio`1.IndeterminateIcon", new() { Name = "IndeterminateIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.IndeterminateCheckBox"" />.", Summary = @"The icon to display for an indeterminate state.", }},
            { "MudBlazor.MudRadio`1.LabelClassname", new() { Name = "LabelClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRadio`1.UncheckedColor", new() { Name = "UncheckedColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The color to use when in an unchecked state.", }},
            { "MudBlazor.MudRadio`1.UncheckedIcon", new() { Name = "UncheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.RadioButtonUnchecked"" />.", Summary = @"The icon displayed when in an unchecked state.", }},
            { "MudBlazor.MudRadioGroup`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Usually a set of <see cref=""T:MudBlazor.MudRadio`1"" /> components.", Summary = @"The content within this button group.", }},
            { "MudBlazor.MudRadioGroup`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRadioGroup`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this group.", }},
            { "MudBlazor.MudRadioGroup`1.InputClass", new() { Name = "InputClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes for this button group.", }},
            { "MudBlazor.MudRadioGroup`1.InputStyle", new() { Name = "InputStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The CSS styles for this button group.", }},
            { "MudBlazor.MudRadioGroup`1.Name", new() { Name = "Name", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The unique name for this button group.", }},
            { "MudBlazor.MudRadioGroup`1.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the selected value from being changed.", }},
            { "MudBlazor.MudRadioGroup`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Data", IsParameter = true, Order = 0, Remarks = @"When this value changes, the <see cref=""P:MudBlazor.MudRadioGroup`1.ValueChanged"" /> event occurs.", Summary = @"The current value.", }},
            { "MudBlazor.MudRangeInput`1.AdornmentClassname", new() { Name = "AdornmentClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRangeInput`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Remarks = @"Will only display if <see cref=""P:MudBlazor.MudRangeInput`1.InputType"" /> is <see cref=""F:MudBlazor.InputType.Hidden"" />.", Summary = @"The content within this input component.", }},
            { "MudBlazor.MudRangeInput`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRangeInput`1.Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows a button at the end of the input to clear the value.", }},
            { "MudBlazor.MudRangeInput`1.ClearButtonClassname", new() { Name = "ClearButtonClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRangeInput`1.InputClassname", new() { Name = "InputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRangeInput`1.InputType", new() { Name = "InputType", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.InputType.Text"" />.  Represents a valid HTML5 input type.", Summary = @"The type of input collected by this component.", }},
            { "MudBlazor.MudRangeInput`1.InputTypeString", new() { Name = "InputTypeString", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRangeInput`1.PlaceholderEnd", new() { Name = "PlaceholderEnd", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The hint displayed before the user enters an ending value.", }},
            { "MudBlazor.MudRangeInput`1.PlaceholderStart", new() { Name = "PlaceholderStart", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The hint displayed before the user enters a starting value.", }},
            { "MudBlazor.MudRangeInput`1.SeparatorIcon", new() { Name = "SeparatorIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ArrowRightAlt"" />.", Summary = @"The icon shown in between start and end values.", }},
            { "MudBlazor.MudRangeInput`1.TextEnd", new() { Name = "TextEnd", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text of the end of the range.", }},
            { "MudBlazor.MudRangeInput`1.TextStart", new() { Name = "TextStart", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text of the start of the range.", }},
            { "MudBlazor.MudRating.ClassName", new() { Name = "ClassName", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"The CSS classes applied to this component.", }},
            { "MudBlazor.MudRating.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of each item.", }},
            { "MudBlazor.MudRating.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this rating and shows a disabled color.", }},
            { "MudBlazor.MudRating.EmptyIcon", new() { Name = "EmptyIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.StarBorder"" />.", Summary = @"The icon displayed for unselected items.", }},
            { "MudBlazor.MudRating.EmptyIconColor", new() { Name = "EmptyIconColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The color of the <see cref=""P:MudBlazor.MudRating.EmptyIcon"" /> for unselected items.", }},
            { "MudBlazor.MudRating.FullIcon", new() { Name = "FullIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Star"" />.", Summary = @"The icon displayed for selected items.", }},
            { "MudBlazor.MudRating.FullIconColor", new() { Name = "FullIconColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The color of the <see cref=""P:MudBlazor.MudRating.FullIcon"" /> for selected items.", }},
            { "MudBlazor.MudRating.MaxValue", new() { Name = "MaxValue", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>5</c>.", Summary = @"The number of <see cref=""T:MudBlazor.MudRatingItem"" /> items to display.", }},
            { "MudBlazor.MudRating.Name", new() { Name = "Name", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to a new <see cref=""T:System.Guid"" />.", Summary = @"The name of this input.", }},
            { "MudBlazor.MudRating.RatingItemsClass", new() { Name = "RatingItemsClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>. Multiple classes must be separated by spaces.", Summary = @"The CSS classes to apply to each <see cref=""T:MudBlazor.MudRatingItem"" />.", }},
            { "MudBlazor.MudRating.RatingItemsStyle", new() { Name = "RatingItemsStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The CSS styles to apply to each <see cref=""T:MudBlazor.MudRatingItem"" />.", }},
            { "MudBlazor.MudRating.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents this rating from being changed.", }},
            { "MudBlazor.MudRating.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a ripple effect when an item is clicked.", }},
            { "MudBlazor.MudRating.SelectedValue", new() { Name = "SelectedValue", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Data", IsParameter = true, Order = 0, Remarks = @"Defaults to <c>0</c>.  Must be equal or less than <see cref=""P:MudBlazor.MudRating.MaxValue"" />.", Summary = @"The currently selected value.", }},
            { "MudBlazor.MudRating.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the <see cref=""P:MudBlazor.MudRating.FullIcon"" /> and <see cref=""P:MudBlazor.MudRating.EmptyIcon"" /> icons.", }},
            { "MudBlazor.MudRatingItem.ClassName", new() { Name = "ClassName", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"The CSS classes applied to this component.", }},
            { "MudBlazor.MudRatingItem.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.  Can be overridden by <see cref=""P:MudBlazor.MudRating.Color"" />.", Summary = @"The color of this item.", }},
            { "MudBlazor.MudRatingItem.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this item, and uses a disabled style.", }},
            { "MudBlazor.MudRatingItem.ItemValue", new() { Name = "ItemValue", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Remarks = @"Defaults to the index of this item in the parent <see cref=""T:MudBlazor.MudRating"" />.  (e.g. The 3rd item has a value of <c>3</c>.)", Summary = @"The value for this item.", }},
            { "MudBlazor.MudRatingItem.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents thid item from being changed.", }},
            { "MudBlazor.MudRatingItem.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.  Can be overridden by <see cref=""P:MudBlazor.MudRating.Ripple"" />.", Summary = @"Show a ripple effect when the user clicks the button.", }},
            { "MudBlazor.MudRatingItem.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.  Can be overridden by <see cref=""P:MudBlazor.MudRating.Size"" />.", Summary = @"The size of this item.", }},
            { "MudBlazor.MudRender.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content to render", }},
            { "MudBlazor.MudRTLProvider.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudRTLProvider.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudRTLProvider.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, text will display properly for RTL languages such as Arabic, Hebrew, and Persian.", Summary = @"Displays text Right-to-Left (RTL).", }},
            { "MudBlazor.MudScrollToTop.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this button.", }},
            { "MudBlazor.MudScrollToTop.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"The CSS classes applied to this component.", }},
            { "MudBlazor.MudScrollToTop.HiddenCssClass", new() { Name = "HiddenCssClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"This is typically set to transition and animation CSS classes.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied when <see cref=""P:MudBlazor.MudScrollToTop.Visible"" /> becomes <c>false</c>.", }},
            { "MudBlazor.MudScrollToTop.ScrollBehavior", new() { Name = "ScrollBehavior", TypeName = "MudBlazor.ScrollBehavior", TypeFriendlyName = "ScrollBehavior", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.ScrollBehavior.Smooth"" />.", Summary = @"The scroll behavior when the scroll-to-top button is clicked.", }},
            { "MudBlazor.MudScrollToTop.Selector", new() { Name = "Selector", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The CSS selector to which the scroll event will be attached.", }},
            { "MudBlazor.MudScrollToTop.TopOffset", new() { Name = "TopOffset", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>300</c> (300 pixels).", Summary = @"The number of pixels scrolled before the scroll-to-top button becomes visible.", }},
            { "MudBlazor.MudScrollToTop.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>false</c>, this will become <c>true</c> once the user scrolls down the number of pixels in <see cref=""P:MudBlazor.MudScrollToTop.TopOffset"" />.", Summary = @"Displays this button.", }},
            { "MudBlazor.MudScrollToTop.VisibleCssClass", new() { Name = "VisibleCssClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"This is typically set to transition and animation CSS classes.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied when <see cref=""P:MudBlazor.MudScrollToTop.Visible"" /> becomes <c>true</c>.", }},
            { "MudBlazor.MudSelect`1.AnchorOrigin", new() { Name = "AnchorOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.BottomLeft"" />.", Summary = @"The location where the popover will open from.", }},
            { "MudBlazor.MudSelect`1.CanRenderValue", new() { Name = "CanRenderValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, Remarks = @"When <c>false</c>, the <c>Value</c> will be displayed as a string.", Summary = @"Whether the <c>Value</c> can be found in the list of <see cref=""P:MudBlazor.MudSelect`1.Items"" />.", }},
            { "MudBlazor.MudSelect`1.CheckedIcon", new() { Name = "CheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.CheckBox"" />.  Only applies when <see cref=""P:MudBlazor.MudSelect`1.MultiSelection"" /> is <c>true</c>.", Summary = @"The icon used for selected items.", }},
            { "MudBlazor.MudSelect`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "List behavior", IsParameter = true, Order = 402, Summary = @"The content within this component, typically a list of <see cref=""T:MudBlazor.MudSelectItem`1"" /> components.", }},
            { "MudBlazor.MudSelect`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSelect`1.Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the <see cref=""P:MudBlazor.MudSelect`1.ClearIcon"" /> can be used to control the icon, and <see cref=""P:MudBlazor.MudSelect`1.OnClearButtonClick"" /> occurs when the clear button is clicked.", Summary = @"Shows a button for clearing any selected values.", }},
            { "MudBlazor.MudSelect`1.ClearIcon", new() { Name = "ClearIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Clear"" />.", Summary = @"The icon displayed for the clear button when <see cref=""P:MudBlazor.MudSelect`1.Clearable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudSelect`1.CloseIcon", new() { Name = "CloseIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ArrowDropUp"" />.", Summary = @"The icon for closing the popover of items.", }},
            { "MudBlazor.MudSelect`1.Comparer", new() { Name = "Comparer", TypeName = "", TypeFriendlyName = "IEqualityComparer<T>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The comparer for testing equality of selected values.", }},
            { "MudBlazor.MudSelect`1.Delimiter", new() { Name = "Delimiter", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>"", ""</c>.  Only applies when <see cref=""P:MudBlazor.MudSelect`1.MultiSelection"" /> is <c>true</c>.", Summary = @"The string used to separate multiple selected values.", }},
            { "MudBlazor.MudSelect`1.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact vertical padding for all items.", }},
            { "MudBlazor.MudSelect`1.DropdownSettings", new() { Name = "DropdownSettings", TypeName = "MudBlazor.DropdownSettings", TypeFriendlyName = "DropdownSettings", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""P:MudBlazor.DropdownSettings.Fixed"" /> falseDefaults to <see cref=""P:MudBlazor.DropdownSettings.OverflowBehavior"" /> <see cref=""F:MudBlazor.OverflowBehavior.FlipOnOpen"" />", Summary = @"The behavior of the dropdown popover menu", }},
            { "MudBlazor.MudSelect`1.IndeterminateIcon", new() { Name = "IndeterminateIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.IndeterminateCheckBox"" />.  Only applies when <see cref=""P:MudBlazor.MudSelect`1.MultiSelection"" /> is <c>true</c>.", Summary = @"The icon used when at least one, but not all, items are selected.", }},
            { "MudBlazor.MudSelect`1.InputClass", new() { Name = "InputClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the input.", }},
            { "MudBlazor.MudSelect`1.InputClassname", new() { Name = "InputClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSelect`1.IsValueInList", new() { Name = "IsValueInList", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudSelect`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IReadOnlyList<MudSelectItem<T>>", Remarks = @"Use <see cref=""T:MudBlazor.MudSelectItem`1"" /> components to provide more items.", Summary = @"The list of choices the user can select.", }},
            { "MudBlazor.MudSelect`1.ListClass", new() { Name = "ListClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>null</c>.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the internal list.", }},
            { "MudBlazor.MudSelect`1.LockScroll", new() { Name = "LockScroll", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents scrolling while the dropdown is open.", }},
            { "MudBlazor.MudSelect`1.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>300</c>.", Summary = @"The maximum height, in pixels, of the popover of items.", }},
            { "MudBlazor.MudSelect`1.MultiSelection", new() { Name = "MultiSelection", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>false</c>.  When <c>false</c>, only one value can be selected at a time.", Summary = @"Allows multiple values to be selected via checkboxes.", }},
            { "MudBlazor.MudSelect`1.MultiSelectionTextFunc", new() { Name = "MultiSelectionTextFunc", TypeName = "System.Func`2[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<List<string>, string>", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"The custom function for setting the <c>Text</c> from a list of selected items.", }},
            { "MudBlazor.MudSelect`1.OpenIcon", new() { Name = "OpenIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ArrowDropDown"" />.", Summary = @"The icon for opening the popover of items.", }},
            { "MudBlazor.MudSelect`1.OuterClass", new() { Name = "OuterClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the outer <c>div</c>.", }},
            { "MudBlazor.MudSelect`1.OuterClassname", new() { Name = "OuterClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSelect`1.PopoverClass", new() { Name = "PopoverClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>null</c>.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the popover.", }},
            { "MudBlazor.MudSelect`1.QuickSearchInterval", new() { Name = "QuickSearchInterval", TypeName = "System.TimeSpan", TypeFriendlyName = "TimeSpan", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:System.TimeSpan.Zero"" /> for single-character searches. <br />Set to a value greater than zero to enable multi-character searches within the specified interval.", Summary = @"The <see cref=""T:System.TimeSpan"" /> interval for accepting characters for search input.", }},
            { "MudBlazor.MudSelect`1.RelativeWidth", new() { Name = "RelativeWidth", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"<para>Defaults to <see cref=""F:MudBlazor.DropdownWidth.Relative"" />. </para><para>When <see cref=""F:MudBlazor.DropdownWidth.Relative"" />, restricts the max-width of the component to the width of the parent container</para><para>When <see cref=""F:MudBlazor.DropdownWidth.Adaptive"" />, restricts the min-width of the component to the width of the parent container</para>", Summary = @"Determines the width of this Popover dropdown in relation to the parent container.", }},
            { "MudBlazor.MudSelect`1.SelectAll", new() { Name = "SelectAll", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "List behavior", IsParameter = true, Order = 402, Remarks = @"Defaults to <c>false</c>.  Only applies when <see cref=""P:MudBlazor.MudSelect`1.MultiSelection"" /> is <c>true</c>.", Summary = @"Shows a ""Select all"" checkbox to select all items.", }},
            { "MudBlazor.MudSelect`1.SelectAllCheckBoxIcon", new() { Name = "SelectAllCheckBoxIcon", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Remarks = @"Only applies when <see cref=""P:MudBlazor.MudSelect`1.MultiSelection"" /> is <c>true</c>.  If all items are selected, <see cref=""P:MudBlazor.MudSelect`1.CheckedIcon"" /> is returned.If no items are selected, <see cref=""P:MudBlazor.MudSelect`1.UncheckedIcon"" /> is returned.  Otherwise, <see cref=""P:MudBlazor.MudSelect`1.IndeterminateIcon"" /> is returned.", Summary = @"The icon to display whether all, none, or some items are selected.", }},
            { "MudBlazor.MudSelect`1.SelectAllText", new() { Name = "SelectAllText", TypeName = "System.String", TypeFriendlyName = "string", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <c>""Select all""</c>.  Only applies when <see cref=""P:MudBlazor.MudSelect`1.SelectAll"" /> is <c>true</c>.", Summary = @"The text of the ""Select all"" checkbox.", }},
            { "MudBlazor.MudSelect`1.SelectedValues", new() { Name = "SelectedValues", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Category = "Data", IsParameter = true, Order = 0, Remarks = @"When <see cref=""P:MudBlazor.MudSelect`1.MultiSelection"" /> is <c>false</c>, only one value will be returned.  When this value changes, <see cref=""P:MudBlazor.MudSelect`1.SelectedValuesChanged"" /> occurs.", Summary = @"The currently selected values.", }},
            { "MudBlazor.MudSelect`1.Strict", new() { Name = "Strict", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, any values not defined will not be displayed.", Summary = @"Restricts the selected values to the ones defined in <see cref=""T:MudBlazor.MudSelectItem`1"" /> items.", }},
            { "MudBlazor.MudSelect`1.ToStringFunc", new() { Name = "ToStringFunc", TypeName = "", TypeFriendlyName = "Func<T, string>", Category = "List behavior", IsParameter = true, Order = 402, Summary = @"The function for the <c>Text</c> in drop-down items.", }},
            { "MudBlazor.MudSelect`1.TransformOrigin", new() { Name = "TransformOrigin", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <see cref=""F:MudBlazor.Origin.TopLeft"" />.", Summary = @"The transform origin point for the popover.", }},
            { "MudBlazor.MudSelect`1.UncheckedIcon", new() { Name = "UncheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "List appearance", IsParameter = true, Order = 403, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.CheckBoxOutlineBlank"" />.  Only applies when <see cref=""P:MudBlazor.MudSelect`1.MultiSelection"" /> is <c>true</c>.", Summary = @"The icon used for unselected items.", }},
            { "MudBlazor.MudSelectItem`1.CheckBoxIcon", new() { Name = "CheckBoxIcon", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Remarks = @"When <see cref=""P:MudBlazor.MudSelectItem`1.Selected"" /> is <c>true</c>, <see cref=""F:MudBlazor.Icons.Material.Filled.CheckBox"" /> is returned.  Otherwise, <see cref=""F:MudBlazor.Icons.Material.Filled.CheckBoxOutlineBlank"" />.", Summary = @"The icon to display whether this item is selected.", }},
            { "MudBlazor.MudSelectItem`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The custom content within this item.", }},
            { "MudBlazor.MudSelectItem`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this item.", }},
            { "MudBlazor.MudSelectItem`1.DisplayString", new() { Name = "DisplayString", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSelectItem`1.MultiSelection", new() { Name = "MultiSelection", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsProtected = true, Summary = @"Whether multi-selection is enabled in the parent <see cref=""T:MudBlazor.MudSelect`1"" />.", }},
            { "MudBlazor.MudSelectItem`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The custom value associated with this item.", }},
            { "MudBlazor.MudSimpleTable.Bordered", new() { Name = "Bordered", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows left and right borders for each table cell.", }},
            { "MudBlazor.MudSimpleTable.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Use table HTML tags such as <c>&lt;thead&gt;</c>, <c>&lt;tbody&gt;</c>, <c>&lt;tr&gt;</c>, <c>&lt;th&gt;</c> or <c>&lt;td&gt;</c>.", Summary = @"The content within this table.", }},
            { "MudBlazor.MudSimpleTable.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSimpleTable.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact padding for all rows.", }},
            { "MudBlazor.MudSimpleTable.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>1</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudSimpleTable.FixedHeader", new() { Name = "FixedHeader", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>. When <c>true</c>, the CSS <c>Height</c> must also be set.  Example: <c>Style=""height:300px;""</c>", Summary = @"Fixes the table header in place while the table is scrolled.", }},
            { "MudBlazor.MudSimpleTable.Hover", new() { Name = "Hover", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Highlights rows when hovering over them.", }},
            { "MudBlazor.MudSimpleTable.Outlined", new() { Name = "Outlined", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows borders around the table.", }},
            { "MudBlazor.MudSimpleTable.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"Uses square corners for the table.", }},
            { "MudBlazor.MudSimpleTable.Striped", new() { Name = "Striped", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses alternating colors for table rows.", }},
            { "MudBlazor.MudSkeleton.Animation", new() { Name = "Animation", TypeName = "MudBlazor.Animation", TypeFriendlyName = "Animation", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Animation.Pulse"" />.", Summary = @"The type of animation to display.", }},
            { "MudBlazor.MudSkeleton.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSkeleton.Height", new() { Name = "Height", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Values can be in pixels (e.g. <c>""300px""</c>) or percentages (e.g. <c>""30%""</c>).", Summary = @"The height of this skeleton.", }},
            { "MudBlazor.MudSkeleton.SkeletonType", new() { Name = "SkeletonType", TypeName = "MudBlazor.SkeletonType", TypeFriendlyName = "SkeletonType", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.SkeletonType.Text"" />.", Summary = @"The shape of this skeleton.", }},
            { "MudBlazor.MudSkeleton.Stylename", new() { Name = "Stylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSkeleton.Width", new() { Name = "Width", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Values can be in pixels (e.g. <c>""300px""</c>) or percentages (e.g. <c>""30%""</c>).", Summary = @"The width of this skeleton.", }},
            { "MudBlazor.MudSlider`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Typically used for displaying text.   When the slider is vertical, content is displayed to the left of the slider.", Summary = @"The option content rendered above the slider.", }},
            { "MudBlazor.MudSlider`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSlider`1.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" />.  <c>Primary</c>, <c>Secondary</c> and <c>Tertiary</c> colors are supported.", Summary = @"The color of this slider.", }},
            { "MudBlazor.MudSlider`1.Culture", new() { Name = "Culture", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""P:System.Globalization.CultureInfo.InvariantCulture"" />.  Only applied when <see cref=""P:MudBlazor.MudSlider`1.ValueLabel"" /> is <c>true</c>.", Summary = @"The culture used to format the value label.", }},
            { "MudBlazor.MudSlider`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents the user from interacting with this slider.", }},
            { "MudBlazor.MudSlider`1.Immediate", new() { Name = "Immediate", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.<br />When <c>true</c>, dragging the slider changes <see cref=""P:MudBlazor.MudSlider`1.Value"" /> (or <see cref=""P:MudBlazor.MudSlider`1.NullableValue"" />) immediately.<br />When <c>false</c>, <see cref=""P:MudBlazor.MudSlider`1.Value"" /> (or <see cref=""P:MudBlazor.MudSlider`1.NullableValue"" />) changes when releasing the handle.", Summary = @"Controls when the value is updated.", }},
            { "MudBlazor.MudSlider`1.Max", new() { Name = "Max", TypeName = "", TypeFriendlyName = "T", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>100</c>.  Must be greater than <see cref=""P:MudBlazor.MudSlider`1.Min"" />.", Summary = @"The maximum allowed value.", }},
            { "MudBlazor.MudSlider`1.Min", new() { Name = "Min", TypeName = "", TypeFriendlyName = "T", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defauls to <c>0</c>.  Must be less than <see cref=""P:MudBlazor.MudSlider`1.Max"" />.", Summary = @"The minimum allowed value.", }},
            { "MudBlazor.MudSlider`1.NullableValue", new() { Name = "NullableValue", TypeName = "", TypeFriendlyName = "T?", Category = "Data", IsParameter = true, Order = 0, Remarks = @"When this value changes, <see cref=""P:MudBlazor.MudSlider`1.NullableValueChanged"" /> occurs.", Summary = @"The nullable value of this slider.", }},
            { "MudBlazor.MudSlider`1.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Small"" />.", Summary = @"The size of this slider.", }},
            { "MudBlazor.MudSlider`1.Step", new() { Name = "Step", TypeName = "", TypeFriendlyName = "T", Category = "Validation", IsParameter = true, Order = 1, Remarks = @"Defaults to <c>1</c>.", Summary = @"How much the value changes on each move.", }},
            { "MudBlazor.MudSlider`1.TickMarkLabels", new() { Name = "TickMarkLabels", TypeName = "System.String[]", TypeFriendlyName = "string[]", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Only applies when <see cref=""P:MudBlazor.MudSlider`1.TickMarks"" /> is <c>true</c>.", Summary = @"The tick mark labels for each step.", }},
            { "MudBlazor.MudSlider`1.TickMarks", new() { Name = "TickMarks", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays tick marks along the track.", }},
            { "MudBlazor.MudSlider`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Data", IsParameter = true, Order = 0, Remarks = @"Defaults to <c>0</c>.  When this value changes, <see cref=""P:MudBlazor.MudSlider`1.ValueChanged"" /> occurs.", Summary = @"The value of this slider.", }},
            { "MudBlazor.MudSlider`1.ValueLabel", new() { Name = "ValueLabel", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the value over the slider thumb.", }},
            { "MudBlazor.MudSlider`1.ValueLabelContent", new() { Name = "ValueLabelContent", TypeName = "", TypeFriendlyName = "RenderFragment<SliderContext<T>>", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Use the supplied context to access the current value.<br />Only applies when <see cref=""P:MudBlazor.MudSlider`1.ValueLabel"" /> is <c>true</c> and <see cref=""P:MudBlazor.MudSlider`1.ValueLabelFormat"" /> is not set.", Summary = @"The custom content for value labels.", }},
            { "MudBlazor.MudSlider`1.ValueLabelFormat", new() { Name = "ValueLabelFormat", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Only applies when <see cref=""P:MudBlazor.MudSlider`1.ValueLabelContent"" /> is not set.<br />See: <see href=""https://learn.microsoft.com/dotnet/standard/base-types/standard-numeric-format-strings"">Standard Numeric Format Strings</see>.", Summary = @"The format of the value label.", }},
            { "MudBlazor.MudSlider`1.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" />.", Summary = @"The display variant to use.", }},
            { "MudBlazor.MudSlider`1.Vertical", new() { Name = "Vertical", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, the slider is displayed like a horizontal slider, but rotated 90° counterclockwise.", Summary = @"Displays this slider vertically.", }},
            { "MudBlazor.MudSnackbarElement.CloseIcon", new() { Name = "CloseIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"Custom close icon.", }},
            { "MudBlazor.MudSnackbarElement.Snackbar", new() { Name = "Snackbar", TypeName = "MudBlazor.Snackbar", TypeFriendlyName = "Snackbar", IsParameter = true, }},
            { "MudBlazor.MudSnackbarProvider.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSnackbarProvider.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudSnackbarProvider.Snackbar", new() { Name = "Snackbar", TypeName = "System.Collections.Generic.IEnumerable`1[[MudBlazor.Snackbar, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IEnumerable<Snackbar>", IsProtected = true, }},
            { "MudBlazor.MudStack.AlignItems", new() { Name = "AlignItems", TypeName = "System.Nullable`1[[MudBlazor.AlignItems, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "AlignItems?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"Defines the vertical alignment of child items.", }},
            { "MudBlazor.MudStack.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The content within this component.", }},
            { "MudBlazor.MudStack.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudStack.Justify", new() { Name = "Justify", TypeName = "System.Nullable`1[[MudBlazor.Justify, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Justify?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"Defines the distribution of child items.", }},
            { "MudBlazor.MudStack.Reverse", new() { Name = "Reverse", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, items will be reversed.", Summary = @"Reverses the order of items.", }},
            { "MudBlazor.MudStack.Row", new() { Name = "Row", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, items will be displayed horizontally.  When <c>false</c>, items are displayed vertically.", Summary = @"Displays items horizontally.", }},
            { "MudBlazor.MudStack.Spacing", new() { Name = "Spacing", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"<para>Defaults to 3 in <see cref=""P:MudBlazor.MudGlobal.StackDefaults.Spacing"" />.</para><para>Maximum is 20 (<c>80px</c>).</para>", Summary = @"The gap between items in increments of <c>4px</c>.", }},
            { "MudBlazor.MudStack.StretchItems", new() { Name = "StretchItems", TypeName = "System.Nullable`1[[MudBlazor.StretchItems, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "StretchItems?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"Defines the stretching behaviour of children along the main axis within a <see cref=""T:MudBlazor.MudStack"" /> component.", }},
            { "MudBlazor.MudStack.Wrap", new() { Name = "Wrap", TypeName = "System.Nullable`1[[MudBlazor.Wrap, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Wrap?", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.", Summary = @"Controls how items are wrapped.", }},
            { "MudBlazor.MudStep.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Only shown when this step is active.", Summary = @"The content for this step.", }},
            { "MudBlazor.MudStep.Completed", new() { Name = "Completed", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Whether this step is completed.", }},
            { "MudBlazor.MudStep.CompletedStepColor", new() { Name = "CompletedStepColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The color used when this step is completed.", }},
            { "MudBlazor.MudStep.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Prevents this step from being selected.", }},
            { "MudBlazor.MudStep.ErrorStepColor", new() { Name = "ErrorStepColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The color used when this step has an error.", }},
            { "MudBlazor.MudStep.HasError", new() { Name = "HasError", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Whether this step has an error.", }},
            { "MudBlazor.MudStep.IsActive", new() { Name = "IsActive", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether this step is the current one being displayed.", }},
            { "MudBlazor.MudStep.SecondaryText", new() { Name = "SecondaryText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The subtitle describing this step.", }},
            { "MudBlazor.MudStep.Skippable", new() { Name = "Skippable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Whether the user can skip this step.", }},
            { "MudBlazor.MudStep.Title", new() { Name = "Title", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The title of this step.", }},
            { "MudBlazor.MudStepper.ActionContent", new() { Name = "ActionContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudStepper, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudStepper>", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Use this to override the default action buttons of the stepper", }},
            { "MudBlazor.MudStepper.ActiveIndex", new() { Name = "ActiveIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The index of the currently active step.", }},
            { "MudBlazor.MudStepper.ActiveStep", new() { Name = "ActiveStep", TypeName = "MudBlazor.MudStep", TypeFriendlyName = "MudStep", Summary = @"The currently active step.", }},
            { "MudBlazor.MudStepper.CanGoToNextStep", new() { Name = "CanGoToNextStep", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Typically used to enable or disable a custon <c>Next</c> button.", Summary = @"Whether the user can go to the next step.", }},
            { "MudBlazor.MudStepper.CenterLabels", new() { Name = "CenterLabels", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  Only applies when <see cref=""P:MudBlazor.MudStepper.Vertical"" /> is <c>false</c>.", Summary = @"Centers the labels for each step below the circle.", }},
            { "MudBlazor.MudStepper.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Must be a set of <see cref=""T:MudBlazor.MudStep"" /> components.", Summary = @"The steps in this component.", }},
            { "MudBlazor.MudStepper.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudStepper.CompleteButtonIcon", new() { Name = "CompleteButtonIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Outlined.Done"" />.", Summary = @"The icon shown for the <c>Complete</c> button.", }},
            { "MudBlazor.MudStepper.CompletedContent", new() { Name = "CompletedContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"This content is displayed when all steps are completed", }},
            { "MudBlazor.MudStepper.CompletedStepColor", new() { Name = "CompletedStepColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" />.", Summary = @"The color of completed steps.", }},
            { "MudBlazor.MudStepper.ConnectorTemplate", new() { Name = "ConnectorTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudStep, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudStep>", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The custom template for displaying lines connecting each step.", }},
            { "MudBlazor.MudStepper.CurrentStepColor", new() { Name = "CurrentStepColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Primary"" />.", Summary = @"The color of the current step.", }},
            { "MudBlazor.MudStepper.ErrorStepColor", new() { Name = "ErrorStepColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Error"" />.", Summary = @"The color of steps with errors.", }},
            { "MudBlazor.MudStepper.IsCompleted", new() { Name = "IsCompleted", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether all steps have been completed.", }},
            { "MudBlazor.MudStepper.IsCurrentStepSkippable", new() { Name = "IsCurrentStepSkippable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Typically used to enable or disable a custon <c>Skip</c> button.", Summary = @"Whether the current step can be skipped.", }},
            { "MudBlazor.MudStepper.LabelTemplate", new() { Name = "LabelTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudStep, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudStep>", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The custom template for displaying each step's index and icon.", }},
            { "MudBlazor.MudStepper.NavClass", new() { Name = "NavClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the navigation bar.", }},
            { "MudBlazor.MudStepper.NavClassname", new() { Name = "NavClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudStepper.NextButtonIcon", new() { Name = "NextButtonIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.NavigateNext"" />.", Summary = @"The icon shown for the <c>Next</c> button.", }},
            { "MudBlazor.MudStepper.NonLinear", new() { Name = "NonLinear", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  When <c>false</c>, users must complete the active step before being allowed to move to the next step.", Summary = @"Allows users to move between steps arbitrarily.", }},
            { "MudBlazor.MudStepper.OnPreviewInteraction", new() { Name = "OnPreviewInteraction", TypeName = "System.Func`2[[MudBlazor.StepperInteractionEventArgs, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<StepperInteractionEventArgs, Task>", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Use this function to customize when the user can navigate to a step, such as when a form has been properly completed.  The attempted navigation can be prevented by setting <see cref=""P:MudBlazor.StepperInteractionEventArgs.Cancel"" /> to <c>true</c>.", Summary = @"Occurs when the user attempts to go to a step.", }},
            { "MudBlazor.MudStepper.PreviousButtonIcon", new() { Name = "PreviousButtonIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.NavigateBefore"" />.", Summary = @"The icon shown for the <c>Previous</c> button.", }},
            { "MudBlazor.MudStepper.PreviousStepEnabled", new() { Name = "PreviousStepEnabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the <c>Previous</c> button is enabled.", }},
            { "MudBlazor.MudStepper.ResetButtonIcon", new() { Name = "ResetButtonIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.FirstPage"" />.", Summary = @"The icon shown for the reset button.", }},
            { "MudBlazor.MudStepper.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  Only applies when <see cref=""P:MudBlazor.MudStepper.NonLinear"" /> is <c>true</c>.", Summary = @"Displays a ripple effect when a step is clicked.", }},
            { "MudBlazor.MudStepper.ScrollableNavigation", new() { Name = "ScrollableNavigation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a scroll bar for steps if needed.", }},
            { "MudBlazor.MudStepper.ShowCompleteInsteadOfNext", new() { Name = "ShowCompleteInsteadOfNext", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the <c>Complete</c> or <c>Next</c> button is displayed.", }},
            { "MudBlazor.MudStepper.ShowResetButton", new() { Name = "ShowResetButton", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.  Clicking the reset button sets this stepper back to its initial state, discarding all progress and errors.", Summary = @"Shows a button to start over at the first step.", }},
            { "MudBlazor.MudStepper.SkipButtonIcon", new() { Name = "SkipButtonIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to a custom icon.", Summary = @"The icon shown for the <c>Skip</c> button.", }},
            { "MudBlazor.MudStepper.StepClass", new() { Name = "StepClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to all steps.", }},
            { "MudBlazor.MudStepper.StepCompleteIcon", new() { Name = "StepCompleteIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Outlined.Done"" />.", Summary = @"The icon shown for completed steps.", }},
            { "MudBlazor.MudStepper.StepErrorIcon", new() { Name = "StepErrorIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Outlined.PriorityHigh"" />.", Summary = @"The icon shown for steps with errors.", }},
            { "MudBlazor.MudStepper.Steps", new() { Name = "Steps", TypeName = "System.Collections.Generic.IReadOnlyList`1[[MudBlazor.MudStep, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IReadOnlyList<MudStep>", Summary = @"The steps to step through.", }},
            { "MudBlazor.MudStepper.StepStyle", new() { Name = "StepStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The CSS styles applied to all steps.", }},
            { "MudBlazor.MudStepper.TitleTemplate", new() { Name = "TitleTemplate", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudStep, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudStep>", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  The current <see cref=""T:MudBlazor.MudStep"" /> is passed as context for this render fragment.", Summary = @"The custom template for displaying each step's title.", }},
            { "MudBlazor.MudStepper.Vertical", new() { Name = "Vertical", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Renders steps vertically.", }},
            { "MudBlazor.MudSwipeArea.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, }},
            { "MudBlazor.MudSwipeArea.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSwipeArea.PreventDefault", new() { Name = "PreventDefault", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Prevents default behavior of the browser when swiping.Usable especially when swiping up/down - this will prevent the whole page from scrolling up/down.", }},
            { "MudBlazor.MudSwipeArea.Sensitivity", new() { Name = "Sensitivity", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Swipe threshold in pixels. If SwipeDelta is below Sensitivity then OnSwipe is not called.", }},
            { "MudBlazor.MudSwitch`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSwitch`1.LabelClassname", new() { Name = "LabelClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSwitch`1.SpanClassname", new() { Name = "SpanClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSwitch`1.SwitchClassname", new() { Name = "SwitchClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSwitch`1.ThumbClassname", new() { Name = "ThumbClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSwitch`1.ThumbIcon", new() { Name = "ThumbIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Shows an icon on Switch's thumb.", }},
            { "MudBlazor.MudSwitch`1.ThumbIconColor", new() { Name = "ThumbIconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the thumb icon. Supports the theme colors.", }},
            { "MudBlazor.MudSwitch`1.TrackClassname", new() { Name = "TrackClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudSwitch`1.UncheckedColor", new() { Name = "UncheckedColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The base color of the component in its none active/unchecked state. It supports the theme colors.", }},
            { "MudBlazor.MudTable`1.ChildRowContent", new() { Name = "ChildRowContent", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "Rows", IsParameter = true, Order = 102, Remarks = @"Use <see cref=""T:MudBlazor.MudTr"" /> and <see cref=""T:MudBlazor.MudTd"" /> to define the child content, and <c>context</c> to access item properties.", Summary = @"The optional nested content underneath each row.", }},
            { "MudBlazor.MudTable`1.Columns", new() { Name = "Columns", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The columns for each row in this table.", }},
            { "MudBlazor.MudTable`1.Comparer", new() { Name = "Comparer", TypeName = "", TypeFriendlyName = "IEqualityComparer<T>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The comparer used to determine selected items.", }},
            { "MudBlazor.MudTable`1.Context", new() { Name = "Context", TypeName = "", TypeFriendlyName = "TableContext<T>", Summary = @"Gets the current state of the table.", }},
            { "MudBlazor.MudTable`1.CurrentPageItems", new() { Name = "CurrentPageItems", TypeName = "", TypeFriendlyName = "IEnumerable<T>", IsProtected = true, }},
            { "MudBlazor.MudTable`1.Def", new() { Name = "Def", TypeName = "", TypeFriendlyName = "T", IsProtected = true, }},
            { "MudBlazor.MudTable`1.Filter", new() { Name = "Filter", TypeName = "", TypeFriendlyName = "Func<T, bool>", Category = "Filtering", IsParameter = true, Order = 200, Remarks = @"Typically used to implement custom filtering.", Summary = @"The function which determines whether an item should be displayed.", }},
            { "MudBlazor.MudTable`1.FilteredItems", new() { Name = "FilteredItems", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Remarks = @"When <see cref=""P:MudBlazor.MudTable`1.ServerData"" /> is set, the latest items are returned.  When <see cref=""P:MudBlazor.MudTable`1.Filter"" /> is set, filtered items are returned.", Summary = @"The table items after filters are applied.", }},
            { "MudBlazor.MudTable`1.GroupBy", new() { Name = "GroupBy", TypeName = "", TypeFriendlyName = "TableGroupDefinition<T>", Category = "Grouping", IsParameter = true, Order = 201, Remarks = @"Groups can be defined in multiple levels.", Summary = @"Defines how rows are grouped together.", }},
            { "MudBlazor.MudTable`1.GroupFooterClass", new() { Name = "GroupFooterClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Grouping", IsParameter = true, Order = 201, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The custom CSS classes to apply to each group footer row.", }},
            { "MudBlazor.MudTable`1.GroupFooterStyle", new() { Name = "GroupFooterStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Grouping", IsParameter = true, Order = 201, Summary = @"The custom CSS styles to apply to each group footer row.", }},
            { "MudBlazor.MudTable`1.GroupFooterTemplate", new() { Name = "GroupFooterTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<TableGroupData<object, T>>", Category = "Grouping", IsParameter = true, Order = 201, Remarks = @"Use <see cref=""T:MudBlazor.MudTd"" /> to define the cells in the group footer.", Summary = @"The content for the footer of each group when <see cref=""P:MudBlazor.MudTable`1.GroupBy"" /> is set.", }},
            { "MudBlazor.MudTable`1.GroupHeaderClass", new() { Name = "GroupHeaderClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Grouping", IsParameter = true, Order = 201, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The custom CSS classes to apply to each group header row.", }},
            { "MudBlazor.MudTable`1.GroupHeaderStyle", new() { Name = "GroupHeaderStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Grouping", IsParameter = true, Order = 201, Summary = @"The custom CSS styles to apply to each group header row.", }},
            { "MudBlazor.MudTable`1.GroupHeaderTemplate", new() { Name = "GroupHeaderTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<TableGroupData<object, T>>", Category = "Grouping", IsParameter = true, Order = 201, Remarks = @"Use <see cref=""T:MudBlazor.MudTd"" /> to define the cells in the group header.", Summary = @"The content for the header of each group when <see cref=""P:MudBlazor.MudTable`1.GroupBy"" /> is set.", }},
            { "MudBlazor.MudTable`1.HorizontalScrollbar", new() { Name = "HorizontalScrollbar", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  Typically <c>true</c> for tables with more columns than can fit on the screen.", Summary = @"Shows a horizontal scroll bar if the content exceeds the maximum width.", }},
            { "MudBlazor.MudTable`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Category = "Data", IsParameter = true, Order = 0, Remarks = @"When set, <see cref=""P:MudBlazor.MudTable`1.ServerData"" /> should not be set.  Use that property to get data from a back end.", Summary = @"The data to display.", }},
            { "MudBlazor.MudTable`1.LoadingContent", new() { Name = "LoadingContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Data", IsParameter = true, Order = 0, Summary = @"The content shown while table data is loading and the table has no rows.", }},
            { "MudBlazor.MudTable`1.NoRecordsContent", new() { Name = "NoRecordsContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Data", IsParameter = true, Order = 0, Remarks = @"No <see cref=""T:MudBlazor.MudTr"" /> or <see cref=""T:MudBlazor.MudTd"" /> is necessary.", Summary = @"The content shown when there are no rows to display.", }},
            { "MudBlazor.MudTable`1.NumPages", new() { Name = "NumPages", TypeName = "System.Int32", TypeFriendlyName = "int", IsProtected = true, }},
            { "MudBlazor.MudTable`1.RowClassFunc", new() { Name = "RowClassFunc", TypeName = "", TypeFriendlyName = "Func<T, int, string>", Category = "Rows", IsParameter = true, Order = 102, Remarks = @"The current item and row index are provided to the function.  Multiple classes must be separated by spaces.", Summary = @"The function which returns CSS classes for a row.", }},
            { "MudBlazor.MudTable`1.RowEditableFunc", new() { Name = "RowEditableFunc", TypeName = "", TypeFriendlyName = "Func<T, bool>", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Make the function return <c>true</c> to allow editing, and <c>false</c> to prevent it.  When no value is set, all rows are considered editable.", Summary = @"The function which determines if a row can be edited.", }},
            { "MudBlazor.MudTable`1.RowEditingTemplate", new() { Name = "RowEditingTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Use <see cref=""T:MudBlazor.MudTd"" /> to define columns, and <c>context</c> to access item properties for each column.  Typically looks similar to rows in <see cref=""P:MudBlazor.MudTable`1.RowTemplate"" /> but with edit components.", Summary = @"The columns for each row when a row is being edited.", }},
            { "MudBlazor.MudTable`1.RowStyleFunc", new() { Name = "RowStyleFunc", TypeName = "", TypeFriendlyName = "Func<T, int, string>", Category = "Rows", IsParameter = true, Order = 102, Remarks = @"The current item and row index are provided to the function.", Summary = @"The function which returns CSS styles for a row.", }},
            { "MudBlazor.MudTable`1.RowTemplate", new() { Name = "RowTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<T>", Category = "Rows", IsParameter = true, Order = 102, Remarks = @"Use <see cref=""T:MudBlazor.MudTd"" /> to define columns, and <c>context</c> to access item properties for each column.", Summary = @"The columns for each row in this table.", }},
            { "MudBlazor.MudTable`1.SelectedItem", new() { Name = "SelectedItem", TypeName = "", TypeFriendlyName = "T", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"When the selected item changes, the <see cref=""P:MudBlazor.MudTable`1.SelectedItemChanged"" /> event occurs.  When <c>MultiSelection</c> is <c>true</c>, use the <see cref=""P:MudBlazor.MudTable`1.SelectedItems"" /> property.", Summary = @"The currently selected item when <c>MultiSelection</c> is <c>false</c>.", }},
            { "MudBlazor.MudTable`1.SelectedItems", new() { Name = "SelectedItems", TypeName = "", TypeFriendlyName = "HashSet<T>", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"When the selected items change, the <see cref=""P:MudBlazor.MudTable`1.SelectedItemsChanged"" /> event occurs.  When <c>MultiSelection</c> is <c>false</c>, use the <see cref=""P:MudBlazor.MudTable`1.SelectedItem"" /> property.", Summary = @"The currently selected item when <c>MultiSelection</c> is <c>true</c>.", }},
            { "MudBlazor.MudTable`1.ServerData", new() { Name = "ServerData", TypeName = "", TypeFriendlyName = "Func<TableState, CancellationToken, Task<TableData<T>>>", Category = "Data", IsParameter = true, Order = 0, Remarks = @"Use the provided <see cref=""T:MudBlazor.TableState"" /> to request items for a specific page index, page size, sort column, and sort order.<br />  Return a <see cref=""T:MudBlazor.TableData`1"" /> which contains the requested page of items and the total number of items (excluding pagination).<br />Forward the <see cref=""T:System.Threading.CancellationToken"" /> to methods which support it such as <c>HttpClient</c> and <c>DbContext</c> to cancel ongoing requests.<br />  When this parameter is set, <see cref=""P:MudBlazor.MudTable`1.Items"" /> and <see cref=""P:MudBlazor.MudTable`1.Filter"" /> should not be set.", Summary = @"Gets the sorted and paginated data for the table.", }},
            { "MudBlazor.MudTable`1.TableContext", new() { Name = "TableContext", TypeName = "MudBlazor.TableContext", TypeFriendlyName = "TableContext", Summary = @"Gets the current state of the table.", }},
            { "MudBlazor.MudTableBase.AllowUnsorted", new() { Name = "AllowUnsorted", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Sorting", IsParameter = true, Order = 203, Remarks = @"Defaults to <c>true</c>.  When <c>false</c>, the sort mode will only toggle between <see cref=""F:MudBlazor.SortDirection.Ascending"" /> and <see cref=""F:MudBlazor.SortDirection.Descending"" />.", Summary = @"Allows a sort direction of <see cref=""F:MudBlazor.SortDirection.None"" /> in addition to <see cref=""F:MudBlazor.SortDirection.Ascending"" /> and <see cref=""F:MudBlazor.SortDirection.Descending"" />.", }},
            { "MudBlazor.MudTableBase.ApplyButtonPosition", new() { Name = "ApplyButtonPosition", TypeName = "MudBlazor.TableApplyButtonPosition", TypeFriendlyName = "TableApplyButtonPosition", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Defaults to <see cref=""F:MudBlazor.TableApplyButtonPosition.End"" />.  Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", Summary = @"The position of the button which commits inline edits.", }},
            { "MudBlazor.MudTableBase.Bordered", new() { Name = "Bordered", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Shows left and right borders for each table cell.", }},
            { "MudBlazor.MudTableBase.Breakpoint", new() { Name = "Breakpoint", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.Breakpoint.Xs"" />.  Allowed values are <c>None</c>, <c>Xs</c>, <c>Sm</c>, <c>Md</c>, <c>Lg</c>, and <c>Xl</c>.", Summary = @"The screen width at which this table switches to small-device mode.", }},
            { "MudBlazor.MudTableBase.CanCancelEdit", new() { Name = "CanCancelEdit", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", Summary = @"Shows the cancel button during inline editing.", }},
            { "MudBlazor.MudTableBase.CancelEditIcon", new() { Name = "CancelEditIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Cancel"" />.  Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", Summary = @"The icon shown for the button which cancels inline edits.", }},
            { "MudBlazor.MudTableBase.CancelEditTooltip", new() { Name = "CancelEditTooltip", TypeName = "System.String", TypeFriendlyName = "string", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", Summary = @"The tooltip shown next to the button which cancels inline edits.", }},
            { "MudBlazor.MudTableBase.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTableBase.ColGroup", new() { Name = "ColGroup", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>null</c>.  Add a set of <c>col</c> elements to style each column.  For example:<para>&lt;ColGroup&gt;<br />&lt;col span=""2"" style=""max-midth:120px; background-color:red""&gt;<br />&lt;col style=""background-color:yellow""&gt;<br />&lt;/ColGroup&gt;</para>", Summary = @"Specifies formatting information for this table's columns such as size and style.", }},
            { "MudBlazor.MudTableBase.CommitEditIcon", new() { Name = "CommitEditIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Done"" />.  Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", Summary = @"The icon shown for the button which commits inline edits.", }},
            { "MudBlazor.MudTableBase.CommitEditTooltip", new() { Name = "CommitEditTooltip", TypeName = "System.String", TypeFriendlyName = "string", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", Summary = @"The tooltip shown next to the button which commits inline edits.", }},
            { "MudBlazor.MudTableBase.ContainerClass", new() { Name = "ContainerClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to this table.", }},
            { "MudBlazor.MudTableBase.ContainerStyle", new() { Name = "ContainerStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.", Summary = @"The CSS styles applied to this table.", }},
            { "MudBlazor.MudTableBase.CurrentPage", new() { Name = "CurrentPage", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Pagination", IsParameter = true, Order = 204, Remarks = @"Defaults to <c>0</c> (the first page).  Requires a <see cref=""T:MudBlazor.MudTablePager"" /> in the <see cref=""P:MudBlazor.MudTableBase.PagerContent"" />.", Summary = @"The index of the current page.", }},
            { "MudBlazor.MudTableBase.CustomFooter", new() { Name = "CustomFooter", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Footer", IsParameter = true, Order = 103, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, custom footers such as multiple-row footers can be used.", Summary = @"Enables customized footers beyond basic footer columns.", }},
            { "MudBlazor.MudTableBase.CustomHeader", new() { Name = "CustomHeader", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Header", IsParameter = true, Order = 101, Remarks = @"Defaults to <c>false</c>.  When <c>true</c>, custom headers such as multiple-row headers can be used.", Summary = @"Enables customized headers beyond basic header columns.", }},
            { "MudBlazor.MudTableBase.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses compact padding for all rows.", }},
            { "MudBlazor.MudTableBase.EditButtonContent", new() { Name = "EditButtonContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.EditButtonContext, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<EditButtonContext>", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", Summary = @"The content of the Edit button which starts inline editing.", }},
            { "MudBlazor.MudTableBase.EditButtonPosition", new() { Name = "EditButtonPosition", TypeName = "MudBlazor.TableEditButtonPosition", TypeFriendlyName = "TableEditButtonPosition", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Defaults to <see cref=""F:MudBlazor.TableEditButtonPosition.End"" />.  Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", Summary = @"The position of the button which begins inline editing.", }},
            { "MudBlazor.MudTableBase.EditTrigger", new() { Name = "EditTrigger", TypeName = "MudBlazor.TableEditTrigger", TypeFriendlyName = "TableEditTrigger", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Defaults to <see cref=""F:MudBlazor.TableEditTrigger.RowClick"" />.  Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", Summary = @"The behavior which begins inline editing.", }},
            { "MudBlazor.MudTableBase.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>1</c>.  A higher number creates a heavier drop shadow.  Use a value of <c>0</c> for no shadow.", Summary = @"The size of the drop shadow.", }},
            { "MudBlazor.MudTableBase.FixedFooter", new() { Name = "FixedFooter", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Footer", IsParameter = true, Order = 103, Remarks = @"Defaults to <c>false</c>. When set, <see cref=""P:MudBlazor.MudTableBase.Height"" /> must also be set.", Summary = @"Fixes the table footer in place while the table is scrolled.", }},
            { "MudBlazor.MudTableBase.FixedHeader", new() { Name = "FixedHeader", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Header", IsParameter = true, Order = 101, Remarks = @"Defaults to <c>false</c>. When set, <see cref=""P:MudBlazor.MudTableBase.Height"" /> must also be set.", Summary = @"Fixes the table header in place while the table is scrolled.", }},
            { "MudBlazor.MudTableBase.FootClassname", new() { Name = "FootClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTableBase.FooterClass", new() { Name = "FooterClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Footer", IsParameter = true, Order = 103, Summary = @"Add a class to the tfoot tag", }},
            { "MudBlazor.MudTableBase.FooterContent", new() { Name = "FooterContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Footer", IsParameter = true, Order = 103, Remarks = @"For basic footers, add <see cref=""T:MudBlazor.MudTd"" /> components here to describe each column.  For more customized footers (such as multi-row footers), set <see cref=""P:MudBlazor.MudTableBase.CustomFooter"" /> to <c>true</c> and use <see cref=""T:MudBlazor.MudTFootRow"" /> components here instead.", Summary = @"The content of this table's footer.", }},
            { "MudBlazor.MudTableBase.HeadClassname", new() { Name = "HeadClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTableBase.HeaderClass", new() { Name = "HeaderClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Header", IsParameter = true, Order = 101, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to the header.", }},
            { "MudBlazor.MudTableBase.HeaderContent", new() { Name = "HeaderContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Header", IsParameter = true, Order = 101, Remarks = @"For basic headers, add <see cref=""T:MudBlazor.MudTh"" /> components here to describe each column.  For more customized headers (such as multi-row headers), set <see cref=""P:MudBlazor.MudTableBase.CustomHeader"" /> to <c>true</c> and use <see cref=""T:MudBlazor.MudTHeadRow"" /> components here instead.", Summary = @"The content of this table's header.", }},
            { "MudBlazor.MudTableBase.Height", new() { Name = "Height", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>null</c>.  Accepts values such as <c>50%</c> or <c>500px</c>.  When <c>null</c>, the table will try to grow to fit its content.  When set, <see cref=""P:MudBlazor.MudTableBase.FixedHeader"" /> and <see cref=""P:MudBlazor.MudTableBase.FixedFooter"" /> can be enabled.", Summary = @"The fixed height of this table, as a CSS Value.", }},
            { "MudBlazor.MudTableBase.Hover", new() { Name = "Hover", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Highlights rows when hovering over them.", }},
            { "MudBlazor.MudTableBase.IsEditRowSwitchingBlocked", new() { Name = "IsEditRowSwitchingBlocked", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Defaults to <c>false</c>.  When <c>false</c>, a new row can be edited even if the previous one has not been saved or canceled.", Summary = @"Forces a row being edited to be saved or canceled before a new row can be selected.", }},
            { "MudBlazor.MudTableBase.ItemSize", new() { Name = "ItemSize", TypeName = "System.Single", TypeFriendlyName = "float", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>50</c>.", Summary = @"The height of each row, in pixels, when <see cref=""P:MudBlazor.MudTableBase.Virtualize"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTableBase.Loading", new() { Name = "Loading", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Data", IsParameter = true, Order = 0, Remarks = @"Defaults to <c>false</c>.  Becomes <c>true</c> before <c>ServerData</c> is called, then becomes <c>false</c>.  When <c>true</c>, either a <see cref=""T:MudBlazor.MudProgressLinear"" /> is displayed or custom content if <c>LoadingContent</c> is set.", Summary = @"Displays a loading animation while <c>ServerData</c> executes.", }},
            { "MudBlazor.MudTableBase.LoadingProgressColor", new() { Name = "LoadingProgressColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Data", IsParameter = true, Order = 0, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Info"" />.  Has no effect if <c>LoadingContent</c> is set.", Summary = @"The color of the <see cref=""T:MudBlazor.MudProgressLinear"" /> while <see cref=""P:MudBlazor.MudTableBase.Loading"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTableBase.MultiSelection", new() { Name = "MultiSelection", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows multiple rows to be selected with checkboxes.", }},
            { "MudBlazor.MudTableBase.NumPages", new() { Name = "NumPages", TypeName = "System.Int32", TypeFriendlyName = "int", IsProtected = true, }},
            { "MudBlazor.MudTableBase.Outlined", new() { Name = "Outlined", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows borders around the table.", }},
            { "MudBlazor.MudTableBase.OverscanCount", new() { Name = "OverscanCount", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>3</c>.  Can reduce the frequency of rendering during scrolling, but higher values can reduce performance.", Summary = @"The number of additional items to render outside of view when <see cref=""P:MudBlazor.MudTableBase.Virtualize"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTableBase.PagerContent", new() { Name = "PagerContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Pagination", IsParameter = true, Order = 204, Remarks = @"Add a <see cref=""T:MudBlazor.MudTablePager"" /> here to navigate multiple pages of data.", Summary = @"The custom pagination content for this table.", }},
            { "MudBlazor.MudTableBase.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Editing", IsParameter = true, Order = 206, Remarks = @"Defaults to <c>false</c>.", Summary = @"Prevents rows from being edited inline.", }},
            { "MudBlazor.MudTableBase.RowClass", new() { Name = "RowClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Rows", IsParameter = true, Order = 102, Remarks = @"Multiple classes must be separated by spaces.  Some CSS classes will be overridden by <see cref=""T:MudBlazor.MudTd"" />.", Summary = @"The CSS classes applied to each row.", }},
            { "MudBlazor.MudTableBase.RowEditCancel", new() { Name = "RowEditCancel", TypeName = "System.Action`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Action<object>", Category = "Editing", IsParameter = true, Order = 206, Summary = @"Occurs when changed are canceled for a row being edited.", }},
            { "MudBlazor.MudTableBase.RowEditCommit", new() { Name = "RowEditCommit", TypeName = "System.Action`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Action<object>", Category = "Editing", IsParameter = true, Order = 206, Summary = @"Occurs when changes are committed for an row being edited.", }},
            { "MudBlazor.MudTableBase.RowEditPreview", new() { Name = "RowEditPreview", TypeName = "System.Action`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Action<object>", Category = "Editing", IsParameter = true, Order = 206, Summary = @"Occurs before inline editing begins for a row.", }},
            { "MudBlazor.MudTableBase.RowsPerPage", new() { Name = "RowsPerPage", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Pagination", IsParameter = true, Order = 204, Remarks = @"Defaults to <c>null</c>.  When set, rows beyond this number will overflow into separate pages.  Requires a <see cref=""T:MudBlazor.MudTablePager"" /> in the <see cref=""P:MudBlazor.MudTableBase.PagerContent"" />.", Summary = @"The maximum rows to display per page.", }},
            { "MudBlazor.MudTableBase.RowStyle", new() { Name = "RowStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Rows", IsParameter = true, Order = 102, Remarks = @"Some CSS styles will be overridden by <see cref=""T:MudBlazor.MudTd"" />.", Summary = @"The CSS styles applied to each row.", }},
            { "MudBlazor.MudTableBase.SelectionChangeable", new() { Name = "SelectionChangeable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Selecting", IsParameter = true, Order = 205, Remarks = @"Defaults to <c>true</c>.  Requires <see cref=""P:MudBlazor.MudTableBase.MultiSelection"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>false</c>.", Summary = @"Disables the selection of rows but keep showing the selected rows.", }},
            { "MudBlazor.MudTableBase.SelectOnRowClick", new() { Name = "SelectOnRowClick", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Rows", IsParameter = true, Order = 102, Remarks = @"Defaults to <c>true</c>.  Requires <see cref=""P:MudBlazor.MudTableBase.MultiSelection"" /> to be <c>true</c>, <see cref=""P:MudBlazor.MudTableBase.SelectionChangeable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>false</c>.", Summary = @"Toggles the checkbox when a row is clicked.", }},
            { "MudBlazor.MudTableBase.SortLabel", new() { Name = "SortLabel", TypeName = "System.String", TypeFriendlyName = "string", Category = "Sorting", IsParameter = true, Order = 203, Remarks = @"Defaults to <c>null</c>.", Summary = @"The sort label shown when this table is in small-device mode and is sorting by a column.", }},
            { "MudBlazor.MudTableBase.Square", new() { Name = "Square", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Can be overridden by <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"Uses square corners for the table.", }},
            { "MudBlazor.MudTableBase.Striped", new() { Name = "Striped", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.", Summary = @"Uses alternating colors for table rows.", }},
            { "MudBlazor.MudTableBase.TableContainerClass", new() { Name = "TableContainerClass", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTableBase.TableContainerStyle", new() { Name = "TableContainerStyle", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTableBase.TableContext", new() { Name = "TableContext", TypeName = "MudBlazor.TableContext", TypeFriendlyName = "TableContext", Remarks = @"Typically used to interact with other components such as <see cref=""T:MudBlazor.MudTablePager"" />.", Summary = @"The current state of this table.", }},
            { "MudBlazor.MudTableBase.ToolBarContent", new() { Name = "ToolBarContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The custom content for the toolbar.", }},
            { "MudBlazor.MudTableBase.TotalItems", new() { Name = "TotalItems", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Data", IsParameter = true, Order = 0, Summary = @"The total number of rows (excluding pages) when using <c>ServerData</c> for data.", }},
            { "MudBlazor.MudTableBase.Validator", new() { Name = "Validator", TypeName = "MudBlazor.Interfaces.IForm", TypeFriendlyName = "IForm", Remarks = @"Defaults to a new <see cref=""T:MudBlazor.TableRowValidator"" />.", Summary = @"The validator for this table.", }},
            { "MudBlazor.MudTableBase.Virtualize", new() { Name = "Virtualize", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.  Typically used for more than <c>1000</c> items.", Summary = @"Uses virtualization to display large amounts of items efficiently.", }},
            { "MudBlazor.MudTableGroupRow`1.ActionsStylename", new() { Name = "ActionsStylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTableGroupRow`1.Checkable", new() { Name = "Checkable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays a checkbox which selects or unselects all items within this group.", }},
            { "MudBlazor.MudTableGroupRow`1.Checked", new() { Name = "Checked", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Remarks = @"Only has an effect when <see cref=""P:MudBlazor.MudTableGroupRow`1.Checkable"" /> is <c>true</c>.", Summary = @"Selects the checkbox for this group's header.", }},
            { "MudBlazor.MudTableGroupRow`1.CollapseIcon", new() { Name = "CollapseIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ChevronRight"" />.", Summary = @"The icon of the collapse button when <see cref=""P:MudBlazor.TableGroupDefinition`1.Expandable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTableGroupRow`1.Context", new() { Name = "Context", TypeName = "MudBlazor.TableContext", TypeFriendlyName = "TableContext", Summary = @"The current state of the <see cref=""T:MudBlazor.MudTable`1"" /> containing this group.", }},
            { "MudBlazor.MudTableGroupRow`1.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows the items in this group.", }},
            { "MudBlazor.MudTableGroupRow`1.ExpandIcon", new() { Name = "ExpandIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ExpandMore"" />.", Summary = @"The icon of the expand button when <see cref=""P:MudBlazor.TableGroupDefinition`1.Expandable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTableGroupRow`1.FooterClass", new() { Name = "FooterClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to this group's footer.", }},
            { "MudBlazor.MudTableGroupRow`1.FooterClassname", new() { Name = "FooterClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTableGroupRow`1.FooterStyle", new() { Name = "FooterStyle", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The CSS styles applied to this group's footer.", }},
            { "MudBlazor.MudTableGroupRow`1.FooterTemplate", new() { Name = "FooterTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<TableGroupData<object, T>>", IsParameter = true, Summary = @"The custom content for this group's footer.", }},
            { "MudBlazor.MudTableGroupRow`1.GroupDefinition", new() { Name = "GroupDefinition", TypeName = "", TypeFriendlyName = "TableGroupDefinition<T>", IsParameter = true, Remarks = @"Group definitions can be recursive.", Summary = @"The definition for this grouping level.", }},
            { "MudBlazor.MudTableGroupRow`1.HeaderClass", new() { Name = "HeaderClass", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Multiple classes must be separated by spaces.", Summary = @"The CSS classes applied to this group's header.", }},
            { "MudBlazor.MudTableGroupRow`1.HeaderClassname", new() { Name = "HeaderClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTableGroupRow`1.HeaderStyle", new() { Name = "HeaderStyle", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The CSS styles applied to this group's header.", }},
            { "MudBlazor.MudTableGroupRow`1.HeaderTemplate", new() { Name = "HeaderTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<TableGroupData<object, T>>", IsParameter = true, Summary = @"The custom content for this group's header.", }},
            { "MudBlazor.MudTableGroupRow`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IGrouping<object, T>", IsParameter = true, Summary = @"The groups and items within this grouping.", }},
            { "MudBlazor.MudTableGroupRow`1.SelectionChangeable", new() { Name = "SelectionChangeable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.  Requires <see cref=""P:MudBlazor.MudTableGroupRow`1.Checkable"" /> to be <c>true</c>.", Summary = @"Prevents the change of the current selection of all items withing this group.", }},
            { "MudBlazor.MudTablePager.AllItemsText", new() { Name = "AllItemsText", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The text displayed in the page-size dropdown when <see cref=""P:MudBlazor.MudTablePager.PageSizeOptions"" /> contains <see cref=""F:System.Int32.MaxValue"" />.", }},
            { "MudBlazor.MudTablePager.BeforeIcon", new() { Name = "BeforeIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.NavigateBefore"" />.", Summary = @"The icon for the ""Previous Page"" button.", }},
            { "MudBlazor.MudTablePager.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTablePager.Context", new() { Name = "Context", TypeName = "MudBlazor.TableContext", TypeFriendlyName = "TableContext", Summary = @"The current state of the <see cref=""T:MudBlazor.MudTable`1"" /> containing this pager.", }},
            { "MudBlazor.MudTablePager.FirstIcon", new() { Name = "FirstIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.FirstPage"" />.", Summary = @"The icon for the ""First Page"" button.", }},
            { "MudBlazor.MudTablePager.HidePageNumber", new() { Name = "HidePageNumber", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the current page number.", }},
            { "MudBlazor.MudTablePager.HidePagination", new() { Name = "HidePagination", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the list of page numbers.", }},
            { "MudBlazor.MudTablePager.HideRowsPerPage", new() { Name = "HideRowsPerPage", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the list of page sizes.", }},
            { "MudBlazor.MudTablePager.HorizontalAlignment", new() { Name = "HorizontalAlignment", TypeName = "MudBlazor.HorizontalAlignment", TypeFriendlyName = "HorizontalAlignment", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.HorizontalAlignment.Right"" />.", Summary = @"The location of this pager relative to the parent <see cref=""T:MudBlazor.MudTable`1"" />.", }},
            { "MudBlazor.MudTablePager.InfoFormat", new() { Name = "InfoFormat", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <c>""{first_item}-{last_item} of {all_items}""</c> (e.g. <c>0-25 of 77</c>).  You can use any of the following values:<list type=""bullet""> <item><description><c>{first_item}</c>: The index of the first row being displayed.</description></item> <item><description><c>{last_item}</c>: The index of the last row being displayed.</description></item> <item><description><c>{all_items}</c>: The total number of rows in all pages.</description></item> </list>", Summary = @"The format of the text label.", }},
            { "MudBlazor.MudTablePager.LastIcon", new() { Name = "LastIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.LastPage"" />.", Summary = @"The icon for the ""Last Page"" button.", }},
            { "MudBlazor.MudTablePager.NextIcon", new() { Name = "NextIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.NavigateNext"" />.", Summary = @"The icon for the ""Next Page"" button.", }},
            { "MudBlazor.MudTablePager.PageSizeOptions", new() { Name = "PageSizeOptions", TypeName = "System.Int32[]", TypeFriendlyName = "int[]", IsParameter = true, Remarks = @"Defaults to <c>10</c>, <c>25</c>, <c>50</c>, and <c>100</c>.  Requires <see cref=""P:MudBlazor.MudTablePager.HideRowsPerPage"" /> to be <c>false</c>.", Summary = @"The list of page sizes.", }},
            { "MudBlazor.MudTablePager.PaginationClassname", new() { Name = "PaginationClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTablePager.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudTablePager.RowsPerPageString", new() { Name = "RowsPerPageString", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The text label for the current rows per page.", }},
            { "MudBlazor.MudTablePager.Table", new() { Name = "Table", TypeName = "MudBlazor.MudTableBase", TypeFriendlyName = "MudTableBase", Summary = @"The <see cref=""T:MudBlazor.MudTable`1"" /> linked to this pager.", }},
            { "MudBlazor.MudTableSortLabel`1.AppendIcon", new() { Name = "AppendIcon", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Displays the icon before the label text.", }},
            { "MudBlazor.MudTableSortLabel`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this sort label.", }},
            { "MudBlazor.MudTableSortLabel`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTableSortLabel`1.Context", new() { Name = "Context", TypeName = "", TypeFriendlyName = "TableContext<T>", Summary = @"The current state of the <see cref=""T:MudBlazor.MudTable`1"" /> containing this sort label.", }},
            { "MudBlazor.MudTableSortLabel`1.Enabled", new() { Name = "Enabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.", Summary = @"Allows sorting by this column.", }},
            { "MudBlazor.MudTableSortLabel`1.InitialDirection", new() { Name = "InitialDirection", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.SortDirection.None"" />.  When using multiple sort labels, the table will sort by the first sort label with a value other than <see cref=""F:MudBlazor.SortDirection.None"" />.", Summary = @"The sort direction when the <see cref=""T:MudBlazor.MudTable`1"" /> is first displayed.", }},
            { "MudBlazor.MudTableSortLabel`1.SortBy", new() { Name = "SortBy", TypeName = "", TypeFriendlyName = "Func<T, object>", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When using <see cref=""P:MudBlazor.MudTable`1.ServerData"" />, this function is not necessary.", Summary = @"The custom function for sorting rows for this sort label.", }},
            { "MudBlazor.MudTableSortLabel`1.SortDirection", new() { Name = "SortDirection", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", IsParameter = true, Summary = @"The current sort direction of this column.", }},
            { "MudBlazor.MudTableSortLabel`1.SortIcon", new() { Name = "SortIcon", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.ArrowUpward"" />.", Summary = @"The icon for the sort button.", }},
            { "MudBlazor.MudTableSortLabel`1.SortLabel", new() { Name = "SortLabel", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The text for this sort label.", }},
            { "MudBlazor.MudTableSortLabel`1.Table", new() { Name = "Table", TypeName = "MudBlazor.MudTableBase", TypeFriendlyName = "MudTableBase", Summary = @"The <see cref=""T:MudBlazor.MudTable`1"" /> containing this sort label.", }},
            { "MudBlazor.MudTableSortLabel`1.TableContext", new() { Name = "TableContext", TypeName = "MudBlazor.TableContext", TypeFriendlyName = "TableContext", Summary = @"The current state of the <see cref=""T:MudBlazor.MudTable`1"" /> containing this sort label.", }},
            { "MudBlazor.MudTabPanel.BadgeColor", new() { Name = "BadgeColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the badge.", }},
            { "MudBlazor.MudTabPanel.BadgeData", new() { Name = "BadgeData", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Optional information to be showed into a badge", }},
            { "MudBlazor.MudTabPanel.BadgeDot", new() { Name = "BadgeDot", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Optional information to show the badge as a dot.", }},
            { "MudBlazor.MudTabPanel.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of component.", }},
            { "MudBlazor.MudTabPanel.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, the tabpanel will be disabled.", }},
            { "MudBlazor.MudTabPanel.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Icon placed before the text if set.", }},
            { "MudBlazor.MudTabPanel.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"When set, overrides the <see cref=""P:MudBlazor.MudTabs.IconColor"" /> property.", Summary = @"The color of the <see cref=""P:MudBlazor.MudTabPanel.Icon"" />.", }},
            { "MudBlazor.MudTabPanel.ID", new() { Name = "ID", TypeName = "System.Object", TypeFriendlyName = "object", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Unique TabPanel ID. Useful for activation when Panels are dynamically generated.", }},
            { "MudBlazor.MudTabPanel.ShowCloseIcon", new() { Name = "ShowCloseIcon", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"MudDynamicTabs: If true, shows the close icon in the TabPanel.", }},
            { "MudBlazor.MudTabPanel.TabContent", new() { Name = "TabContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Tab content of component.", }},
            { "MudBlazor.MudTabPanel.TabWrapperContent", new() { Name = "TabWrapperContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[Microsoft.AspNetCore.Components.RenderFragment, Microsoft.AspNetCore.Components, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "RenderFragment<RenderFragment>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Tab content wrapper of component. It is used to wrap the content of a tab heading in a user supplied div or component. Use @context in the TabWrapperContent to render the tab header within your custom wrapper. This is most useful with tooltips, which must wrap the entire content they refer to.", }},
            { "MudBlazor.MudTabPanel.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Text will be displayed in the TabPanel as TabTitle. Text is no longer renderedas a MarkupString, so use the TabContent RenderFragment instead for HTML content.", }},
            { "MudBlazor.MudTabPanel.ToolTip", new() { Name = "ToolTip", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"TabPanel Tooltip. It will be ignored if TabContent is provided.", }},
            { "MudBlazor.MudTabs.ActivePanel", new() { Name = "ActivePanel", TypeName = "MudBlazor.MudTabPanel", TypeFriendlyName = "MudTabPanel", }},
            { "MudBlazor.MudTabs.ActivePanelIndex", new() { Name = "ActivePanelIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The current active panel index. Also with Bidirectional Binding", }},
            { "MudBlazor.MudTabs.ActiveTabClass", new() { Name = "ActiveTabClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Custom class/classes for the active tab", }},
            { "MudBlazor.MudTabs.AlwaysShowScrollButtons", new() { Name = "AlwaysShowScrollButtons", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, always display the scroll buttons even if the tabs are smaller than the required with, buttons will be disabled if there is nothing to scroll.", }},
            { "MudBlazor.MudTabs.ApplyEffectsToContainer", new() { Name = "ApplyEffectsToContainer", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, will apply elevation, rounded, outlined effects to the whole tab component instead of just tabHeader.", }},
            { "MudBlazor.MudTabs.Border", new() { Name = "Border", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, sets a border between the content and the tabHeader depending on the position.", }},
            { "MudBlazor.MudTabs.Centered", new() { Name = "Centered", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, centers the tabitems.", }},
            { "MudBlazor.MudTabs.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of component.", }},
            { "MudBlazor.MudTabs.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the component. It supports the theme colors.", }},
            { "MudBlazor.MudTabs.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The higher the number, the heavier the drop-shadow, applies around the whole component.", }},
            { "MudBlazor.MudTabs.Header", new() { Name = "Header", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudTabs, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudTabs>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"A render fragment that is added before or after (based on the value of HeaderPosition) the tabs inside the header panel of the tab control", }},
            { "MudBlazor.MudTabs.HeaderPosition", new() { Name = "HeaderPosition", TypeName = "MudBlazor.TabHeaderPosition", TypeFriendlyName = "TabHeaderPosition", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Additional content specified by Header is placed either before the tabs, after or not at all", }},
            { "MudBlazor.MudTabs.HideSlider", new() { Name = "HideSlider", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Hides the active tab slider.", }},
            { "MudBlazor.MudTabs.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the icon. It supports the theme colors.", }},
            { "MudBlazor.MudTabs.InternalClassName", new() { Name = "InternalClassName", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, Summary = @"Can be used in derived class to add a class to the main container. If not overwritten return an empty string", }},
            { "MudBlazor.MudTabs.KeepPanelsAlive", new() { Name = "KeepPanelsAlive", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, render all tabs and hide (display:none) every non-active.", }},
            { "MudBlazor.MudTabs.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "int?", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Sets the maxheight the component can have.", }},
            { "MudBlazor.MudTabs.MaxHeightStyles", new() { Name = "MaxHeightStyles", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTabs.MinimumTabWidth", new() { Name = "MinimumTabWidth", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Sets the min-wdth of the tabs. 160px by default.", }},
            { "MudBlazor.MudTabs.NextIcon", new() { Name = "NextIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Icon to use for right pagination.", }},
            { "MudBlazor.MudTabs.OnPreviewInteraction", new() { Name = "OnPreviewInteraction", TypeName = "System.Func`2[[MudBlazor.TabInteractionEventArgs, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<TabInteractionEventArgs, Task>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Fired when a panel gets activated. Returned Task will be awaited.", }},
            { "MudBlazor.MudTabs.Outlined", new() { Name = "Outlined", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, tabHeader will be outlined.", }},
            { "MudBlazor.MudTabs.PanelClass", new() { Name = "PanelClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Custom class/classes for Selected Content Panel", }},
            { "MudBlazor.MudTabs.Panels", new() { Name = "Panels", TypeName = "System.Collections.Generic.IReadOnlyList`1[[MudBlazor.MudTabPanel, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IReadOnlyList<MudTabPanel>", Summary = @"A readonly list of the current panels. Panels should be added or removed through the RenderTree use this collection to get informations about the current panels", }},
            { "MudBlazor.MudTabs.PanelsClassnames", new() { Name = "PanelsClassnames", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTabs.Position", new() { Name = "Position", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the position of the tabs itself.", }},
            { "MudBlazor.MudTabs.PrePanelContent", new() { Name = "PrePanelContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudTabPanel, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudTabPanel>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"This fragment is placed between tabHeader and panels. It can be used to display additional content like an address line in a browser.The active tab will be the content of this RenderFragement", }},
            { "MudBlazor.MudTabs.PrevIcon", new() { Name = "PrevIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Icon to use for left pagination.", }},
            { "MudBlazor.MudTabs.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudTabs.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Gets or sets whether to show a ripple effect when the user clicks the button. Default is true.", }},
            { "MudBlazor.MudTabs.Rounded", new() { Name = "Rounded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to false in <see cref=""P:MudBlazor.MudGlobal.Rounded"" />.", Summary = @"If true, sets the border-radius to theme default.", }},
            { "MudBlazor.MudTabs.ScrollIconColor", new() { Name = "ScrollIconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the next/prev icons. It supports the theme colors.", }},
            { "MudBlazor.MudTabs.SliderAnimation", new() { Name = "SliderAnimation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, displays slider animation", }},
            { "MudBlazor.MudTabs.SliderClass", new() { Name = "SliderClass", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTabs.SliderColor", new() { Name = "SliderColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the tab slider. It supports the theme colors.", }},
            { "MudBlazor.MudTabs.SliderStyle", new() { Name = "SliderStyle", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTabs.TabBarClassnames", new() { Name = "TabBarClassnames", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTabs.TabHeaderClass", new() { Name = "TabHeaderClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Custom class/classes for TabHeader", }},
            { "MudBlazor.MudTabs.TabPanelClass", new() { Name = "TabPanelClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Custom class/classes for TabPanel", }},
            { "MudBlazor.MudTabs.TabPanelHeader", new() { Name = "TabPanelHeader", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[MudBlazor.MudTabPanel, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "RenderFragment<MudTabPanel>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"A render fragment that is added before or after (based on the value of HeaderPosition) inside each tab panel", }},
            { "MudBlazor.MudTabs.TabPanelHeaderPosition", new() { Name = "TabPanelHeaderPosition", TypeName = "MudBlazor.TabHeaderPosition", TypeFriendlyName = "TabHeaderPosition", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Additional content specified by Header is placed either before the tabs, after or not at all", }},
            { "MudBlazor.MudTabs.TabsClassnames", new() { Name = "TabsClassnames", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTabs.WrapperClassnames", new() { Name = "WrapperClassnames", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTabs.WrapperScrollStyle", new() { Name = "WrapperScrollStyle", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTd.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this cell.", }},
            { "MudBlazor.MudTd.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTd.DataLabel", new() { Name = "DataLabel", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"The label for this cell when the table is in small-device mode.", }},
            { "MudBlazor.MudTd.HideSmall", new() { Name = "HideSmall", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides this cell if the breakpoint is smaller than <see cref=""P:MudBlazor.MudTableBase.Breakpoint"" />.", }},
            { "MudBlazor.MudText.Align", new() { Name = "Align", TypeName = "MudBlazor.Align", TypeFriendlyName = "Align", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Has no effect on inline displays.Defaults to <see cref=""F:MudBlazor.Align.Inherit"" />.", Summary = @"The <c>text-align</c> that will be used.", }},
            { "MudBlazor.MudText.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The child content to display.", }},
            { "MudBlazor.MudText.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudText.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.", Summary = @"The theme color of the component.", }},
            { "MudBlazor.MudText.GutterBottom", new() { Name = "GutterBottom", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>false</c>.Has no effect on inline displays.", Summary = @"Adds a bottom margin.", }},
            { "MudBlazor.MudText.HtmlTag", new() { Name = "HtmlTag", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"<para>This can be used to<see href=""https://developer.mozilla.org/docs/Web/HTML/Element#text_content"">specify the type of content for accessibility and SEO more accurately</see>.</para>Defaults to <c>null</c>, meaning the tag be decided based on <see cref=""P:MudBlazor.MudText.Typo"" />.", Summary = @"The HTML element that will be rendered (Example: <c>span</c>, <c>p</c>, <c>h1</c>).", }},
            { "MudBlazor.MudText.Inline", new() { Name = "Inline", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>, meaning no display class will be added.", Summary = @"Adds the <c>d-inline</c> display class, allowing text to continue on the same line rather than starting a new line.", }},
            { "MudBlazor.MudText.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudText.Typo", new() { Name = "Typo", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"<para>The rendered HTML tag is determined by the theme unless <see cref=""P:MudBlazor.MudText.HtmlTag"" /> is set.The tag affects the display type and the applicability of properties like <see cref=""P:MudBlazor.MudText.Align"" /> and <see cref=""P:MudBlazor.MudText.GutterBottom"" />.</para>Defaults to <see cref=""F:MudBlazor.Typo.body1"" /> which uses the block-level <c>p</c> element.", Summary = @"Applies theme typography styles to the element.", }},
            { "MudBlazor.MudTextField`1.AutoGrow", new() { Name = "AutoGrow", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Stretches this input vertically to accommodate the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> value.", }},
            { "MudBlazor.MudTextField`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTextField`1.Clearable", new() { Name = "Clearable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows a button to clear this input's value.", }},
            { "MudBlazor.MudTextField`1.ClearIcon", new() { Name = "ClearIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Icons.Material.Filled.Clear"" />.", Summary = @"The icon to display when <see cref=""P:MudBlazor.MudTextField`1.Clearable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTextField`1.InputReference", new() { Name = "InputReference", TypeName = "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "MudInput<string>", Summary = @"The reference to the underlying <see cref=""T:MudBlazor.MudInput`1"" /> component.", }},
            { "MudBlazor.MudTextField`1.InputType", new() { Name = "InputType", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <see cref=""F:MudBlazor.InputType.Text"" />.  Represents a valid HTML5 input type.", Summary = @"The type of input collected by this component.", }},
            { "MudBlazor.MudTextField`1.Mask", new() { Name = "Mask", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Category = "Data", IsParameter = true, Order = 0, Remarks = @"Typically set to common masks such as <see cref=""T:MudBlazor.PatternMask"" />, <see cref=""T:MudBlazor.MultiMask"" />, <see cref=""T:MudBlazor.RegexMask"" />, and <see cref=""T:MudBlazor.BlockMask"" />.When set, some properties will be ignored such as <see cref=""P:MudBlazor.MudInput`1.MaxLines"" />, <see cref=""P:MudBlazor.MudInput`1.AutoGrow"" />, and <see cref=""P:MudBlazor.MudInput`1.HideSpinButtons"" />.", Summary = @"The mask to apply to text values.", }},
            { "MudBlazor.MudTextField`1.MaxLines", new() { Name = "MaxLines", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>0</c>.  When <c>0</c>. this property is ignored.", Summary = @"The maximum vertical lines to display when <see cref=""P:MudBlazor.MudTextField`1.AutoGrow"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTFootRow.Checkable", new() { Name = "Checkable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows a checkbox which selects or deselects every row in the group.", }},
            { "MudBlazor.MudTFootRow.Checked", new() { Name = "Checked", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Summary = @"The state of the checkbox when <see cref=""P:MudBlazor.MudTFootRow.Checkable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTFootRow.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this footer row.", }},
            { "MudBlazor.MudTFootRow.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTFootRow.Context", new() { Name = "Context", TypeName = "MudBlazor.TableContext", TypeFriendlyName = "TableContext", Summary = @"The current state of the <see cref=""T:MudBlazor.MudTable`1"" /> containing this footer.", }},
            { "MudBlazor.MudTFootRow.Expandable", new() { Name = "Expandable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Managed automatically by table groups.", Summary = @"Shows an additional left and right margin when the parent group is expandable.", }},
            { "MudBlazor.MudTFootRow.IgnoreCheckbox", new() { Name = "IgnoreCheckbox", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the extra column displayed when <see cref=""P:MudBlazor.MudTableBase.MultiSelection"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTFootRow.IgnoreEditable", new() { Name = "IgnoreEditable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the extra column displayed when <see cref=""P:MudBlazor.MudTableBase.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTFootRow.SelectionChangeable", new() { Name = "SelectionChangeable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.  Requires <see cref=""P:MudBlazor.MudTFootRow.Checkable"" /> to be <c>true</c>.", Summary = @"Prevents the change of the current selection of rows in the group.", }},
            { "MudBlazor.MudTh.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this header cell.", }},
            { "MudBlazor.MudTh.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTHeadRow.Checkable", new() { Name = "Checkable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Shows a checkbox which selects or deselects every row in the group.", }},
            { "MudBlazor.MudTHeadRow.Checked", new() { Name = "Checked", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Summary = @"The state of the checkbox when <see cref=""P:MudBlazor.MudTHeadRow.Checkable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTHeadRow.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this header row.", }},
            { "MudBlazor.MudTHeadRow.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTHeadRow.Context", new() { Name = "Context", TypeName = "MudBlazor.TableContext", TypeFriendlyName = "TableContext", Summary = @"The current state of the <see cref=""T:MudBlazor.MudTable`1"" /> containing this header.", }},
            { "MudBlazor.MudTHeadRow.Expandable", new() { Name = "Expandable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Managed automatically by table groups.", Summary = @"Shows an additional left and right margin when the parent group is expandable.", }},
            { "MudBlazor.MudTHeadRow.IgnoreCheckbox", new() { Name = "IgnoreCheckbox", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the extra column displayed when <see cref=""P:MudBlazor.MudTableBase.MultiSelection"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTHeadRow.IgnoreEditable", new() { Name = "IgnoreEditable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the extra column displayed when <see cref=""P:MudBlazor.MudTableBase.Editable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTHeadRow.SelectionChangeable", new() { Name = "SelectionChangeable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.  Requires <see cref=""P:MudBlazor.MudTHeadRow.Checkable"" /> to be <c>true</c>.", Summary = @"Prevents the change of the current selection of rows in the group.", }},
            { "MudBlazor.MudTheme.LayoutProperties", new() { Name = "LayoutProperties", TypeName = "MudBlazor.LayoutProperties", TypeFriendlyName = "LayoutProperties", Summary = @"Gets or sets the layout properties.", }},
            { "MudBlazor.MudTheme.PaletteDark", new() { Name = "PaletteDark", TypeName = "MudBlazor.PaletteDark", TypeFriendlyName = "PaletteDark", Summary = @"Gets or sets the palette for the dark theme.", }},
            { "MudBlazor.MudTheme.PaletteLight", new() { Name = "PaletteLight", TypeName = "MudBlazor.PaletteLight", TypeFriendlyName = "PaletteLight", Remarks = @"Renamed from <c>Palette</c> to <c>PaletteLight</c> in v7.", Summary = @"Gets or sets the palette for the light theme.", }},
            { "MudBlazor.MudTheme.PseudoCss", new() { Name = "PseudoCss", TypeName = "MudBlazor.PseudoCss", TypeFriendlyName = "PseudoCss", Summary = @"Gets or sets the pseudo CSS styles.", }},
            { "MudBlazor.MudTheme.Shadows", new() { Name = "Shadows", TypeName = "MudBlazor.Shadow", TypeFriendlyName = "Shadow", Summary = @"Gets or sets the shadow settings.", }},
            { "MudBlazor.MudTheme.Typography", new() { Name = "Typography", TypeName = "MudBlazor.Typography", TypeFriendlyName = "Typography", Summary = @"Gets or sets the typography settings.", }},
            { "MudBlazor.MudTheme.ZIndex", new() { Name = "ZIndex", TypeName = "MudBlazor.ZIndex", TypeFriendlyName = "ZIndex", Summary = @"Gets or sets the z-index values.", }},
            { "MudBlazor.MudThemeProvider.DefaultScrollbar", new() { Name = "DefaultScrollbar", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Summary = @"If true, will not apply MudBlazor styled scrollbar and use browser default.", }},
            { "MudBlazor.MudThemeProvider.IsDarkMode", new() { Name = "IsDarkMode", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Summary = @"The active palette of the theme.", }},
            { "MudBlazor.MudThemeProvider.ObserveSystemThemeChange", new() { Name = "ObserveSystemThemeChange", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Summary = @"Sets a value indicating whether to observe changes in the system theme preference.Default is <c>true</c>.", }},
            { "MudBlazor.MudThemeProvider.Theme", new() { Name = "Theme", TypeName = "MudBlazor.MudTheme", TypeFriendlyName = "MudTheme", IsParameter = true, Summary = @"The theme used by the application.", }},
            { "MudBlazor.MudTimeline.Classnames", new() { Name = "Classnames", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTimeline.Modifiers", new() { Name = "Modifiers", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, enables all TimelineItem modifiers, like adding a caret to a MudCard. Enabled by default.", }},
            { "MudBlazor.MudTimeline.Reverse", new() { Name = "Reverse", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Reverse the order of TimelineItems when TimelinePosition is set to Alternate.", }},
            { "MudBlazor.MudTimeline.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudTimeline.TimelineAlign", new() { Name = "TimelineAlign", TypeName = "MudBlazor.TimelineAlign", TypeFriendlyName = "TimelineAlign", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Aligns the dot and any item modifiers is changed, in default mode they are centered to the item.", }},
            { "MudBlazor.MudTimeline.TimelineOrientation", new() { Name = "TimelineOrientation", TypeName = "MudBlazor.TimelineOrientation", TypeFriendlyName = "TimelineOrientation", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the orientation of the timeline and its timeline items.", }},
            { "MudBlazor.MudTimeline.TimelinePosition", new() { Name = "TimelinePosition", TypeName = "MudBlazor.TimelinePosition", TypeFriendlyName = "TimelinePosition", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The position the timeline itself and how the timeline items should be displayed.", }},
            { "MudBlazor.MudTimelineItem.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Optional child content if no other RenderFragments is used.", }},
            { "MudBlazor.MudTimelineItem.Classnames", new() { Name = "Classnames", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTimelineItem.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Dot", IsParameter = true, Order = 406, Summary = @"Color of the dot.", }},
            { "MudBlazor.MudTimelineItem.DotClassnames", new() { Name = "DotClassnames", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTimelineItem.DotInnerClassnames", new() { Name = "DotInnerClassnames", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTimelineItem.DotStyle", new() { Name = "DotStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Dot", IsParameter = true, Order = 406, Summary = @"User styles, applied to the lineItem dot.", }},
            { "MudBlazor.MudTimelineItem.Elevation", new() { Name = "Elevation", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Dot", IsParameter = true, Order = 406, Summary = @"Elevation of the dot. The higher the number, the heavier the drop-shadow.", }},
            { "MudBlazor.MudTimelineItem.HideDot", new() { Name = "HideDot", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Dot", IsParameter = true, Order = 406, Summary = @"If true, dot will not be displayed.", }},
            { "MudBlazor.MudTimelineItem.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Dot", IsParameter = true, Order = 406, Summary = @"Dot Icon", }},
            { "MudBlazor.MudTimelineItem.ItemContent", new() { Name = "ItemContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If used renders child content of the ItemContent.", }},
            { "MudBlazor.MudTimelineItem.ItemDot", new() { Name = "ItemDot", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Dot", IsParameter = true, Order = 406, Summary = @"If used renders child content of the ItemDot.", }},
            { "MudBlazor.MudTimelineItem.ItemOpposite", new() { Name = "ItemOpposite", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If used renders child content of the ItemOpposite.", }},
            { "MudBlazor.MudTimelineItem.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Dot", IsParameter = true, Order = 406, Summary = @"Size of the dot.", }},
            { "MudBlazor.MudTimelineItem.TimelineAlign", new() { Name = "TimelineAlign", TypeName = "MudBlazor.TimelineAlign", TypeFriendlyName = "TimelineAlign", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Overrides Timeline Parents default sorting method in Default and Reverse mode.", }},
            { "MudBlazor.MudTimelineItem.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Dot", IsParameter = true, Order = 406, Summary = @"Variant of the dot.", }},
            { "MudBlazor.MudTimePicker.AmButtonClassname", new() { Name = "AmButtonClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTimePicker.AmPm", new() { Name = "AmPm", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, enables 12 hour selection clock.", }},
            { "MudBlazor.MudTimePicker.AutoClose", new() { Name = "AutoClose", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Picker behavior", IsParameter = true, Order = 404, Summary = @"If true and PickerActions are defined, the hour and the minutes can be defined without any action.", }},
            { "MudBlazor.MudTimePicker.ClockElementReference", new() { Name = "ClockElementReference", TypeName = "Microsoft.AspNetCore.Components.ElementReference", TypeFriendlyName = "ElementReference", IsProtected = true, }},
            { "MudBlazor.MudTimePicker.ClosingDelay", new() { Name = "ClosingDelay", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Picker behavior", IsParameter = true, Order = 404, Remarks = @"This helps the user see that the time was selected before the popover disappears.", Summary = @"Sets the amount of time in milliseconds to wait before closing the picker.", }},
            { "MudBlazor.MudTimePicker.HoursButtonClassname", new() { Name = "HoursButtonClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTimePicker.MinuteButtonClassname", new() { Name = "MinuteButtonClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTimePicker.MinuteSelectionStep", new() { Name = "MinuteSelectionStep", TypeName = "System.Int32", TypeFriendlyName = "int", Category = "Picker behavior", IsParameter = true, Order = 404, Summary = @"Sets the number interval for minutes.", }},
            { "MudBlazor.MudTimePicker.OpenTo", new() { Name = "OpenTo", TypeName = "MudBlazor.OpenTo", TypeFriendlyName = "OpenTo", Category = "Picker behavior", IsParameter = true, Order = 404, Summary = @"First view to show in the MudDatePicker.", }},
            { "MudBlazor.MudTimePicker.PickerContent", new() { Name = "PickerContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudTimePicker.PmButtonClassname", new() { Name = "PmButtonClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTimePicker.PointerMoving", new() { Name = "PointerMoving", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Disables clock animations.", Summary = @"<c>true</c> while the main pointer button is held down and moving.", }},
            { "MudBlazor.MudTimePicker.Time", new() { Name = "Time", TypeName = "System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "TimeSpan?", Category = "Data", IsParameter = true, Order = 0, Summary = @"The currently selected time (two-way bindable). If <c>null</c>, nothing was selected.", }},
            { "MudBlazor.MudTimePicker.TimeEditMode", new() { Name = "TimeEditMode", TypeName = "MudBlazor.TimeEditMode", TypeFriendlyName = "TimeEditMode", Category = "Picker behavior", IsParameter = true, Order = 404, Summary = @"Selects the edit mode. By default, you can edit hours and minutes.", }},
            { "MudBlazor.MudTimePicker.TimeFormat", new() { Name = "TimeFormat", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"String format for selected time view.", }},
            { "MudBlazor.MudTimePicker.ToolbarClassname", new() { Name = "ToolbarClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTimeSeriesChartBase.ChartSeries", new() { Name = "ChartSeries", TypeName = "System.Collections.Generic.List`1[[MudBlazor.TimeSeriesChartSeries, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "List<TimeSeriesChartSeries>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The series of values to display.", }},
            { "MudBlazor.MudTimeSeriesChartBase.TimeLabelFormat", new() { Name = "TimeLabelFormat", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"A way to specify datetime formats for timestamp labels, default of HH:mm.", }},
            { "MudBlazor.MudTimeSeriesChartBase.TimeLabelSpacing", new() { Name = "TimeLabelSpacing", TypeName = "System.TimeSpan", TypeFriendlyName = "TimeSpan", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"A way to have minimum spacing between timestamp labels, default of 5 minutes.", }},
            { "MudBlazor.MudTimeSeriesChartBase.XAxisTitle", new() { Name = "XAxisTitle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Specifies the title for the X axis.", }},
            { "MudBlazor.MudTimeSeriesChartBase.YAxisTitle", new() { Name = "YAxisTitle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Specifies the title for the Y axis.", }},
            { "MudBlazor.MudToggleGroup`1.CheckMark", new() { Name = "CheckMark", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, the items show a check mark next to the text or render fragment. Customize the check mark by settingSelectedIcon and UnselectedIcon.", }},
            { "MudBlazor.MudToggleGroup`1.CheckMarkClass", new() { Name = "CheckMarkClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Classes (separated by space) to be applied to SelectedIcon/UnselectedIcon of the items (if CheckMark is true).", }},
            { "MudBlazor.MudToggleGroup`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, }},
            { "MudBlazor.MudToggleGroup`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudToggleGroup`1.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the component. Affects borders and selection color. Default is Colors.Primary.", }},
            { "MudBlazor.MudToggleGroup`1.Delimiters", new() { Name = "Delimiters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, show a line delimiter between items. Default is true.", }},
            { "MudBlazor.MudToggleGroup`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, the group will be disabled.", }},
            { "MudBlazor.MudToggleGroup`1.FixedContent", new() { Name = "FixedContent", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, the check mark is counter balanced with padding on the right side which makes the content stay alwayscentered no matter if the check mark is shown or not.", }},
            { "MudBlazor.MudToggleGroup`1.Outlined", new() { Name = "Outlined", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, show an outline border. Default is true.", }},
            { "MudBlazor.MudToggleGroup`1.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudToggleGroup`1.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Gets or sets whether to show a ripple effect when the user clicks the button. Default is true.", }},
            { "MudBlazor.MudToggleGroup`1.SelectedClass", new() { Name = "SelectedClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Classes (separated by space) to be applied to the selected items only.", }},
            { "MudBlazor.MudToggleGroup`1.SelectionMode", new() { Name = "SelectionMode", TypeName = "MudBlazor.SelectionMode", TypeFriendlyName = "SelectionMode", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The selection behavior of the group. SingleSelection (the default) is a radio-button like exclusive collection.MultiSelection behaves like a group of check boxes. ToggleSelection is an exclusive single selection whereyou can also select nothing by toggling off the current choice.", }},
            { "MudBlazor.MudToggleGroup`1.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The size of the items in the toggle group.", }},
            { "MudBlazor.MudToggleGroup`1.Stylename", new() { Name = "Stylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudToggleGroup`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The selected value in single- and toggle-selection mode.", }},
            { "MudBlazor.MudToggleGroup`1.Values", new() { Name = "Values", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The selected values for multi-selection mode.", }},
            { "MudBlazor.MudToggleGroup`1.Vertical", new() { Name = "Vertical", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, use vertical layout.", }},
            { "MudBlazor.MudToggleIconButton.ClickPropagation", new() { Name = "ClickPropagation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Allows the click event to bubble up to the parent component.", }},
            { "MudBlazor.MudToggleIconButton.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" /> in <see cref=""P:MudBlazor.MudGlobal.ButtonDefaults.Color"" />.", Summary = @"The color of the button.", }},
            { "MudBlazor.MudToggleIconButton.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"Defaults to <c>false</c>.", Summary = @"Disables interaction with the button.", }},
            { "MudBlazor.MudToggleIconButton.DropShadow", new() { Name = "DropShadow", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Displays a shadow.", }},
            { "MudBlazor.MudToggleIconButton.Edge", new() { Name = "Edge", TypeName = "MudBlazor.Edge", TypeFriendlyName = "Edge", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Edge.False"" />.", Summary = @"Applies a negative margin.", }},
            { "MudBlazor.MudToggleIconButton.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The icon to use.", }},
            { "MudBlazor.MudToggleIconButton.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows a ripple effect when the user clicks the button.", }},
            { "MudBlazor.MudToggleIconButton.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the button.", }},
            { "MudBlazor.MudToggleIconButton.Toggled", new() { Name = "Toggled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Whether the icon is in the toggled state.", }},
            { "MudBlazor.MudToggleIconButton.ToggledColor", new() { Name = "ToggledColor", TypeName = "System.Nullable`1[[MudBlazor.Color, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Color?", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"An alternative color to use in the toggled state.", }},
            { "MudBlazor.MudToggleIconButton.ToggledIcon", new() { Name = "ToggledIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"An alternative icon to use in the toggled state.", }},
            { "MudBlazor.MudToggleIconButton.ToggledSize", new() { Name = "ToggledSize", TypeName = "System.Nullable`1[[MudBlazor.Size, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Size?", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"An alternative size to use in the toggled state.", }},
            { "MudBlazor.MudToggleIconButton.ToggledVariant", new() { Name = "ToggledVariant", TypeName = "System.Nullable`1[[MudBlazor.Variant, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Variant?", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"An alternative variant to use in the toggled state.", }},
            { "MudBlazor.MudToggleIconButton.Variant", new() { Name = "Variant", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to <see cref=""F:MudBlazor.Variant.Text"" /> in <see cref=""P:MudBlazor.MudGlobal.ButtonDefaults.Variant"" />.", Summary = @"The display variation to use.", }},
            { "MudBlazor.MudToggleItem`1.CheckMarkClassname", new() { Name = "CheckMarkClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudToggleItem`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "RenderFragment<bool>", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Custom child content which overrides the text. The boolean parameter conveys whether or not the item is selected.", }},
            { "MudBlazor.MudToggleItem`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudToggleItem`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, the item will be disabled.", }},
            { "MudBlazor.MudToggleItem`1.Parent", new() { Name = "Parent", TypeName = "", TypeFriendlyName = "MudToggleGroup<T>", }},
            { "MudBlazor.MudToggleItem`1.SelectedIcon", new() { Name = "SelectedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Icon to show if the item is selected (if CheckMark is true on the parent group)By default this is set to a check mark icon.", }},
            { "MudBlazor.MudToggleItem`1.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The text to show. You need to set this only if you want a text that differs from the Value. If null,show Value?.ToString().Note: the Text is only shown if you haven't defined your own child content.", }},
            { "MudBlazor.MudToggleItem`1.UnselectedIcon", new() { Name = "UnselectedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Icon to show if the item is not selected (if CheckMark is true on the parent group)Leave null to show no check mark (default).", }},
            { "MudBlazor.MudToggleItem`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Behavior", IsParameter = true, Order = 100, }},
            { "MudBlazor.MudToolBar.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of component.", }},
            { "MudBlazor.MudToolBar.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudToolBar.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Uses compact padding.", }},
            { "MudBlazor.MudToolBar.Gutters", new() { Name = "Gutters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Adds left and right padding.", }},
            { "MudBlazor.MudToolBar.WrapContent", new() { Name = "WrapContent", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Allows the toolbar's content to wrap.", }},
            { "MudBlazor.MudTooltip.Arrow", new() { Name = "Arrow", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, an arrow will be displayed pointing towards the content from the tooltip.", }},
            { "MudBlazor.MudTooltip.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Child content of component.", }},
            { "MudBlazor.MudTooltip.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTooltip.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the component. It supports the theme colors.", }},
            { "MudBlazor.MudTooltip.ContainerClass", new() { Name = "ContainerClass", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTooltip.Delay", new() { Name = "Delay", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to 0ms in <see cref=""P:MudBlazor.MudGlobal.TooltipDefaults.Delay"" />.", Summary = @"The amount of time in milliseconds to wait from opening the popover before beginning to perform the transition.", }},
            { "MudBlazor.MudTooltip.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, the tooltip will be disabled; the popover will not be visible.", }},
            { "MudBlazor.MudTooltip.Duration", new() { Name = "Duration", TypeName = "System.Double", TypeFriendlyName = "double", Category = "Appearance", IsParameter = true, Order = 300, Remarks = @"Defaults to 251ms in <see cref=""P:MudBlazor.MudGlobal.TransitionDefaults.Duration"" />.", Summary = @"The length of time that the opening transition takes to complete.", }},
            { "MudBlazor.MudTooltip.Inline", new() { Name = "Inline", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Determines if this component should be inline with it's surrounding (default) or if it should behave like a block element.", }},
            { "MudBlazor.MudTooltip.Placement", new() { Name = "Placement", TypeName = "MudBlazor.Placement", TypeFriendlyName = "Placement", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Tooltip placement.", }},
            { "MudBlazor.MudTooltip.RightToLeft", new() { Name = "RightToLeft", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.MudTooltip.RootClass", new() { Name = "RootClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Classes applied directly to root component of the tooltip", }},
            { "MudBlazor.MudTooltip.RootStyle", new() { Name = "RootStyle", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Styles applied directly to root component of the tooltip", }},
            { "MudBlazor.MudTooltip.ShowOnClick", new() { Name = "ShowOnClick", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, }},
            { "MudBlazor.MudTooltip.ShowOnFocus", new() { Name = "ShowOnFocus", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Determines on which events the tooltip will act", }},
            { "MudBlazor.MudTooltip.ShowOnHover", new() { Name = "ShowOnHover", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Determines on which events the tooltip will act", }},
            { "MudBlazor.MudTooltip.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Sets the text to be displayed inside the tooltip.", }},
            { "MudBlazor.MudTooltip.TooltipContent", new() { Name = "TooltipContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Tooltip content. May contain any valid html", }},
            { "MudBlazor.MudTooltip.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The visible state of the Tooltip.", }},
            { "MudBlazor.MudTr.ActionsStylename", new() { Name = "ActionsStylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTr.Checkable", new() { Name = "Checkable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Managed automatically by the parent <see cref=""T:MudBlazor.MudTable`1"" />.", Summary = @"Displays a checkbox at the start of this row.", }},
            { "MudBlazor.MudTr.Checked", new() { Name = "Checked", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Summary = @"The state of the checkbox when <see cref=""P:MudBlazor.MudTr.Checkable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudTr.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content within this data row.", }},
            { "MudBlazor.MudTr.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTr.Context", new() { Name = "Context", TypeName = "MudBlazor.TableContext", TypeFriendlyName = "TableContext", Summary = @"The current state of the <see cref=""T:MudBlazor.MudTable`1"" /> containing this data row.", }},
            { "MudBlazor.MudTr.Editable", new() { Name = "Editable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Managed automatically by the parent <see cref=""T:MudBlazor.MudTable`1"" />.", Summary = @"Allows this row to be edited.", }},
            { "MudBlazor.MudTr.Expandable", new() { Name = "Expandable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  Managed automatically by the parent <see cref=""T:MudBlazor.MudTable`1"" />.", Summary = @"Allows this row to expand to display nested content.", }},
            { "MudBlazor.MudTr.Item", new() { Name = "Item", TypeName = "System.Object", TypeFriendlyName = "object", IsParameter = true, Summary = @"The data being displayed for this row.", }},
            { "MudBlazor.MudTr.SelectionChangeable", new() { Name = "SelectionChangeable", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>true</c>.  Requires <see cref=""P:MudBlazor.MudTr.Checkable"" /> to be <c>true</c>.  Managed automatically by the parent <see cref=""T:MudBlazor.MudTable`1"" />.", Summary = @"Prevents the change of the current selection.", }},
            { "MudBlazor.MudTreeView`1.AutoExpand", new() { Name = "AutoExpand", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"Gets or sets whether the tree automatically expands to reveal the selected item.", }},
            { "MudBlazor.MudTreeView`1.AutoSelectParent", new() { Name = "AutoSelectParent", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"If true, selecting all children will result in the parent being automatically selected.Unselecting a children will still unselect the parent.Note: This only has an effect in SelectionMode.MultiSelection.", }},
            { "MudBlazor.MudTreeView`1.CheckBoxColor", new() { Name = "CheckBoxColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"Check box color if multiselection is used.", }},
            { "MudBlazor.MudTreeView`1.CheckedIcon", new() { Name = "CheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"Custom checked icon.", }},
            { "MudBlazor.MudTreeView`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Data", IsParameter = true, Order = 0, Summary = @"Child content of component.", }},
            { "MudBlazor.MudTreeView`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTreeView`1.Color", new() { Name = "Color", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"The color of the selected TreeViewItem.", }},
            { "MudBlazor.MudTreeView`1.Comparer", new() { Name = "Comparer", TypeName = "", TypeFriendlyName = "IEqualityComparer<T>", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"Comparer is used to check if two tree items are equal", }},
            { "MudBlazor.MudTreeView`1.Dense", new() { Name = "Dense", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"If true, compact vertical padding will be applied to all TreeView items.", }},
            { "MudBlazor.MudTreeView`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, TreeView will be disabled and all its children.", }},
            { "MudBlazor.MudTreeView`1.ExpandOnClick", new() { Name = "ExpandOnClick", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Click action", IsParameter = true, Order = 207, Summary = @"If true, clicking anywhere on the item will expand it, if it has children.", }},
            { "MudBlazor.MudTreeView`1.ExpandOnDoubleClick", new() { Name = "ExpandOnDoubleClick", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Click action", IsParameter = true, Order = 207, Summary = @"If true, double-clicking anywhere on the item will expand it, if it has children.", }},
            { "MudBlazor.MudTreeView`1.FilterFunc", new() { Name = "FilterFunc", TypeName = "", TypeFriendlyName = "Func<TreeItemData<T>, Task<bool>>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Determines whether the <see cref=""T:MudBlazor.TreeItemData`1"" /> is displayed during filtering or not. True is visible and false is invisible.", }},
            { "MudBlazor.MudTreeView`1.Height", new() { Name = "Height", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Setting a height will allow to scroll the TreeView. If not set, it will try to grow in height.You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px.", }},
            { "MudBlazor.MudTreeView`1.Hover", new() { Name = "Hover", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Hover effect for item's on mouse-over.", }},
            { "MudBlazor.MudTreeView`1.IndeterminateIcon", new() { Name = "IndeterminateIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"Custom tri-state indeterminate icon.", }},
            { "MudBlazor.MudTreeView`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IReadOnlyCollection<TreeItemData<T>>", Category = "Data", IsParameter = true, Order = 0, Summary = @"Tree items that will be rendered using the Item", }},
            { "MudBlazor.MudTreeView`1.ItemTemplate", new() { Name = "ItemTemplate", TypeName = "", TypeFriendlyName = "RenderFragment<TreeItemData<T>>", Category = "Data", IsParameter = true, Order = 0, Summary = @"ItemTemplate for rendering children.", }},
            { "MudBlazor.MudTreeView`1.MaxHeight", new() { Name = "MaxHeight", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Setting a maximum height will allow to scroll the TreeView. If not set, it will try to grow in height.You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px.", }},
            { "MudBlazor.MudTreeView`1.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"If true, the selection of the tree view can not be changed by clicking its items.The currently selected value(s) are still displayed however", }},
            { "MudBlazor.MudTreeView`1.Ripple", new() { Name = "Ripple", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Gets or sets whether to show a ripple effect when the user clicks the button. Default is true.", }},
            { "MudBlazor.MudTreeView`1.SelectedValue", new() { Name = "SelectedValue", TypeName = "", TypeFriendlyName = "T", Category = "Selecting", IsParameter = true, Order = 205, }},
            { "MudBlazor.MudTreeView`1.SelectedValues", new() { Name = "SelectedValues", TypeName = "", TypeFriendlyName = "IReadOnlyCollection<T>", Category = "Selecting", IsParameter = true, Order = 205, }},
            { "MudBlazor.MudTreeView`1.SelectionMode", new() { Name = "SelectionMode", TypeName = "MudBlazor.SelectionMode", TypeFriendlyName = "SelectionMode", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"The selection mode determines whether only a single item (SingleSelection) or multiple itemscan be selected (MultiSelection) and whether the selected item can be toggled off by clicking asecond time (ToggleSelection).", }},
            { "MudBlazor.MudTreeView`1.ServerData", new() { Name = "ServerData", TypeName = "", TypeFriendlyName = "Func<T, Task<IReadOnlyCollection<TreeItemData<T>>>>", Category = "Data", IsParameter = true, Order = 0, Summary = @"Supply a func that asynchronously loads tree view items on demand", }},
            { "MudBlazor.MudTreeView`1.Stylename", new() { Name = "Stylename", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTreeView`1.TriState", new() { Name = "TriState", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"If true, the checkboxes will use the undetermined state in MultiSelection if any children in the subtreehave a different selection value than the parent item.", }},
            { "MudBlazor.MudTreeView`1.UncheckedIcon", new() { Name = "UncheckedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"Custom unchecked icon.", }},
            { "MudBlazor.MudTreeView`1.Width", new() { Name = "Width", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Setting a width the TreeView. You can set this to any CSS value that the attribute 'height' accepts, i.e. 500px.", }},
            { "MudBlazor.MudTreeViewItem`1.BodyContent", new() { Name = "BodyContent", TypeName = "", TypeFriendlyName = "RenderFragment<MudTreeViewItem<T>>", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Content of the item body, if used replaced the text, end text and end icon rendering.", }},
            { "MudBlazor.MudTreeViewItem`1.CanExpand", new() { Name = "CanExpand", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Remarks = @"This is especially useful for lazy-loaded items via ServerData. If you know that an item has no childrenyou can pre-emptively prevent expansion which would only lead to a server request that wouldnot return children anyway.", Summary = @"If false, TreeViewItem will not be able to expand.", }},
            { "MudBlazor.MudTreeViewItem`1.ChildContent", new() { Name = "ChildContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Data", IsParameter = true, Order = 0, Summary = @"Child content of component used to create sub levels.", }},
            { "MudBlazor.MudTreeViewItem`1.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTreeViewItem`1.Content", new() { Name = "Content", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Content of the item, if used completely replaced the default rendering.", }},
            { "MudBlazor.MudTreeViewItem`1.ContentClassname", new() { Name = "ContentClassname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTreeViewItem`1.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, TreeViewItem will be disabled.", }},
            { "MudBlazor.MudTreeViewItem`1.EndIcon", new() { Name = "EndIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Icon placed after the text if set.", }},
            { "MudBlazor.MudTreeViewItem`1.EndIconColor", new() { Name = "EndIconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the icon. It supports the theme colors.", }},
            { "MudBlazor.MudTreeViewItem`1.EndText", new() { Name = "EndText", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The text at the end of the item.", }},
            { "MudBlazor.MudTreeViewItem`1.EndTextClass", new() { Name = "EndTextClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"User class names for the endtext, separated by space.", }},
            { "MudBlazor.MudTreeViewItem`1.EndTextTypo", new() { Name = "EndTextTypo", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Typography for the endtext.", }},
            { "MudBlazor.MudTreeViewItem`1.ExpandButtonIcon", new() { Name = "ExpandButtonIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Expanding", IsParameter = true, Order = 202, Summary = @"The expand/collapse icon.", }},
            { "MudBlazor.MudTreeViewItem`1.ExpandButtonIconColor", new() { Name = "ExpandButtonIconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Expanding", IsParameter = true, Order = 202, Summary = @"The color of the expand/collapse button. It supports the theme colors.", }},
            { "MudBlazor.MudTreeViewItem`1.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Expanding", IsParameter = true, Order = 202, Summary = @"Expand or collapse TreeView item when it has children. Two-way bindable. Note: if you directly set this totrue or false (instead of using two-way binding) it will force the item's expansion state.", }},
            { "MudBlazor.MudTreeViewItem`1.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Icon placed before the text if set.", }},
            { "MudBlazor.MudTreeViewItem`1.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the icon. It supports the theme colors.", }},
            { "MudBlazor.MudTreeViewItem`1.IconExpanded", new() { Name = "IconExpanded", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Alternative icon to show instead of Icon if expanded.", }},
            { "MudBlazor.MudTreeViewItem`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IReadOnlyCollection<TreeItemData<T>>", Category = "Data", IsParameter = true, Order = 0, }},
            { "MudBlazor.MudTreeViewItem`1.LoadingIcon", new() { Name = "LoadingIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The loading icon.", }},
            { "MudBlazor.MudTreeViewItem`1.LoadingIconColor", new() { Name = "LoadingIconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the loading. It supports the theme colors.", }},
            { "MudBlazor.MudTreeViewItem`1.ReadOnly", new() { Name = "ReadOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, the MudTreeViewItem's selection can not be changed.", }},
            { "MudBlazor.MudTreeViewItem`1.Selected", new() { Name = "Selected", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Selecting", IsParameter = true, Order = 205, Summary = @"Set this to true to mark the item initially selected in single selection mode or checked in multi selection mode.You can two-way bind this to get selection updates from this item", }},
            { "MudBlazor.MudTreeViewItem`1.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"The text to display", }},
            { "MudBlazor.MudTreeViewItem`1.TextClass", new() { Name = "TextClass", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"User class names for the text, separated by space.", }},
            { "MudBlazor.MudTreeViewItem`1.TextClassname", new() { Name = "TextClassname", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.MudTreeViewItem`1.TextTypo", new() { Name = "TextTypo", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Typography for the text.", }},
            { "MudBlazor.MudTreeViewItem`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Category = "Data", IsParameter = true, Order = 0, Summary = @"Value of the TreeViewItem. Acts as the displayed text if no text is set.", }},
            { "MudBlazor.MudTreeViewItem`1.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"Indicates whether the tree view item and its children are visible.", }},
            { "MudBlazor.MudTreeViewItemToggleButton.Classname", new() { Name = "Classname", TypeName = "System.String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudTreeViewItemToggleButton.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Propagate disabled state to icon.", }},
            { "MudBlazor.MudTreeViewItemToggleButton.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"Determines when to flip the expanded icon.", }},
            { "MudBlazor.MudTreeViewItemToggleButton.ExpandedIcon", new() { Name = "ExpandedIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The expand/collapse icon.", }},
            { "MudBlazor.MudTreeViewItemToggleButton.ExpandedIconColor", new() { Name = "ExpandedIconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the expand/collapse. It supports the theme colors.", }},
            { "MudBlazor.MudTreeViewItemToggleButton.Loading", new() { Name = "Loading", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, displays the loading icon.", }},
            { "MudBlazor.MudTreeViewItemToggleButton.LoadingIcon", new() { Name = "LoadingIcon", TypeName = "System.String", TypeFriendlyName = "string", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The loading icon.", }},
            { "MudBlazor.MudTreeViewItemToggleButton.LoadingIconColor", new() { Name = "LoadingIconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Category = "Appearance", IsParameter = true, Order = 300, Summary = @"The color of the loading. It supports the theme colors.", }},
            { "MudBlazor.MudTreeViewItemToggleButton.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Category = "Behavior", IsParameter = true, Order = 100, Summary = @"If true, displays the button.", }},
            { "MudBlazor.MudVirtualize`1.ChildContent", new() { Name = "ChildContent", TypeName = "", TypeFriendlyName = "RenderFragment<T>", IsParameter = true, Summary = @"Gets or sets the item template for the list.", }},
            { "MudBlazor.MudVirtualize`1.Enabled", new() { Name = "Enabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Summary = @"Set false to turn off virtualization", }},
            { "MudBlazor.MudVirtualize`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "ICollection<T>", IsParameter = true, Summary = @"Gets or sets the fixed item source.", }},
            { "MudBlazor.MudVirtualize`1.ItemSize", new() { Name = "ItemSize", TypeName = "System.Single", TypeFriendlyName = "float", IsParameter = true, Summary = @"Gets the size of each item in pixels. Defaults to 50px.", }},
            { "MudBlazor.MudVirtualize`1.ItemsProvider", new() { Name = "ItemsProvider", TypeName = "", TypeFriendlyName = "ItemsProviderDelegate<T>", IsParameter = true, Summary = @"Gets or sets the function providing items to the list.", }},
            { "MudBlazor.MudVirtualize`1.NoRecordsContent", new() { Name = "NoRecordsContent", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"The content shown when there are no rows to display.", }},
            { "MudBlazor.MudVirtualize`1.OverscanCount", new() { Name = "OverscanCount", TypeName = "System.Int32", TypeFriendlyName = "int", IsParameter = true, Summary = @"Gets or sets a value that determines how many additional items will be renderedbefore and after the visible region. This help to reduce the frequency of renderingduring scrolling. However, higher values mean that more elements will be presentin the page.", }},
            { "MudBlazor.MudVirtualize`1.Placeholder", new() { Name = "Placeholder", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", IsParameter = true, Summary = @"Gets or sets the template for the items that have not yet been loaded in memory.", }},
            { "MudBlazor.MudVirtualize`1.SpacerElement", new() { Name = "SpacerElement", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Summary = @"Gets or sets tag name of the HTML element that will be used as virtualization spacer. Default is div.", }},
            { "MudBlazor.MultiMask.DetectedOption", new() { Name = "DetectedOption", TypeName = "System.Nullable`1[[MudBlazor.MaskOption, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "MaskOption?", Remarks = @"Defaults to <c>null</c>.  Changes automatically as the input changes.", Summary = @"The currently used mask.", }},
            { "MudBlazor.MultiMask.OptionDetected", new() { Name = "OptionDetected", TypeName = "System.Action`2[[System.Nullable`1[[MudBlazor.MaskOption, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Action<MaskOption?, string>", Summary = @"Occurs when <see cref=""P:MudBlazor.MultiMask.DetectedOption"" /> has changed.", }},
            { "MudBlazor.NavigationContext.Disabled", new() { Name = "Disabled", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"The parent is preventing user interaction.", }},
            { "MudBlazor.NavigationContext.EqualityContract", new() { Name = "EqualityContract", TypeName = "System.Type", TypeFriendlyName = "Type", IsProtected = true, }},
            { "MudBlazor.NavigationContext.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"The parent is expanded.", }},
            { "MudBlazor.NavigationContext.MenuId", new() { Name = "MenuId", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique identifier for this context.", }},
            { "MudBlazor.NullableDateConverter.DateFormat", new() { Name = "DateFormat", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.Palette.ActionDefault", new() { Name = "ActionDefault", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The default action color.", }},
            { "MudBlazor.Palette.ActionDisabled", new() { Name = "ActionDisabled", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The disabled action color.", }},
            { "MudBlazor.Palette.ActionDisabledBackground", new() { Name = "ActionDisabledBackground", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The background color for disabled actions.", }},
            { "MudBlazor.Palette.AppbarBackground", new() { Name = "AppbarBackground", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The appbar background color.", }},
            { "MudBlazor.Palette.AppbarText", new() { Name = "AppbarText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The appbar text color.", }},
            { "MudBlazor.Palette.Background", new() { Name = "Background", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The background color.", }},
            { "MudBlazor.Palette.BackgroundGray", new() { Name = "BackgroundGray", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The gray background color.", }},
            { "MudBlazor.Palette.Black", new() { Name = "Black", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The black color.", }},
            { "MudBlazor.Palette.Dark", new() { Name = "Dark", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The dark color.", }},
            { "MudBlazor.Palette.DarkContrastText", new() { Name = "DarkContrastText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The contrast text color for the dark color.", }},
            { "MudBlazor.Palette.DarkDarken", new() { Name = "DarkDarken", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The darkened value of the dark color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbDarken"" /> if not set.", }},
            { "MudBlazor.Palette.DarkLighten", new() { Name = "DarkLighten", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The lightened value of the dark color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbLighten"" /> if not set.", }},
            { "MudBlazor.Palette.Divider", new() { Name = "Divider", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The color for dividers.", }},
            { "MudBlazor.Palette.DividerLight", new() { Name = "DividerLight", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The light color for dividers.", }},
            { "MudBlazor.Palette.DrawerBackground", new() { Name = "DrawerBackground", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The drawer background color.", }},
            { "MudBlazor.Palette.DrawerIcon", new() { Name = "DrawerIcon", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The drawer icon color.", }},
            { "MudBlazor.Palette.DrawerText", new() { Name = "DrawerText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The drawer text color.", }},
            { "MudBlazor.Palette.Error", new() { Name = "Error", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The error color.", }},
            { "MudBlazor.Palette.ErrorContrastText", new() { Name = "ErrorContrastText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The contrast text color for the error color.", }},
            { "MudBlazor.Palette.ErrorDarken", new() { Name = "ErrorDarken", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The darkened value of the error color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbDarken"" /> if not set.", }},
            { "MudBlazor.Palette.ErrorLighten", new() { Name = "ErrorLighten", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The lightened value of the error color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbLighten"" /> if not set.", }},
            { "MudBlazor.Palette.GrayDark", new() { Name = "GrayDark", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The darkened gray color.", }},
            { "MudBlazor.Palette.GrayDarker", new() { Name = "GrayDarker", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The further darkened gray color.", }},
            { "MudBlazor.Palette.GrayDefault", new() { Name = "GrayDefault", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The default gray color.", }},
            { "MudBlazor.Palette.GrayLight", new() { Name = "GrayLight", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The lightened gray color.", }},
            { "MudBlazor.Palette.GrayLighter", new() { Name = "GrayLighter", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The further lightened gray color.", }},
            { "MudBlazor.Palette.HoverOpacity", new() { Name = "HoverOpacity", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The opacity value for hover effect.", }},
            { "MudBlazor.Palette.Info", new() { Name = "Info", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The info color.", }},
            { "MudBlazor.Palette.InfoContrastText", new() { Name = "InfoContrastText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The contrast text color for the info color.", }},
            { "MudBlazor.Palette.InfoDarken", new() { Name = "InfoDarken", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The darkened value of the info color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbDarken"" /> if not set.", }},
            { "MudBlazor.Palette.InfoLighten", new() { Name = "InfoLighten", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The lightened value of the info color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbLighten"" /> if not set.", }},
            { "MudBlazor.Palette.LinesDefault", new() { Name = "LinesDefault", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The default color for lines.", }},
            { "MudBlazor.Palette.LinesInputs", new() { Name = "LinesInputs", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The color for input lines.", }},
            { "MudBlazor.Palette.OverlayDark", new() { Name = "OverlayDark", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The dark overlay color.", }},
            { "MudBlazor.Palette.OverlayLight", new() { Name = "OverlayLight", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The light overlay color.", }},
            { "MudBlazor.Palette.Primary", new() { Name = "Primary", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The primary color.", }},
            { "MudBlazor.Palette.PrimaryContrastText", new() { Name = "PrimaryContrastText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The contrast text color for the primary color.", }},
            { "MudBlazor.Palette.PrimaryDarken", new() { Name = "PrimaryDarken", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The darkened value of the primary color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbDarken"" /> if not set.", }},
            { "MudBlazor.Palette.PrimaryLighten", new() { Name = "PrimaryLighten", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The lightened value of the primary color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbLighten"" /> if not set.", }},
            { "MudBlazor.Palette.RippleOpacity", new() { Name = "RippleOpacity", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The opacity for the ripple effect.", }},
            { "MudBlazor.Palette.RippleOpacitySecondary", new() { Name = "RippleOpacitySecondary", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The opacity for the ripple effect on specific elements like filled buttons.", }},
            { "MudBlazor.Palette.Secondary", new() { Name = "Secondary", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The secondary color.", }},
            { "MudBlazor.Palette.SecondaryContrastText", new() { Name = "SecondaryContrastText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The contrast text color for the secondary color.", }},
            { "MudBlazor.Palette.SecondaryDarken", new() { Name = "SecondaryDarken", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The darkened value of the secondary color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbDarken"" /> if not set.", }},
            { "MudBlazor.Palette.SecondaryLighten", new() { Name = "SecondaryLighten", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The lightened value of the secondary color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbLighten"" /> if not set.", }},
            { "MudBlazor.Palette.Skeleton", new() { Name = "Skeleton", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The color for skeletons.", }},
            { "MudBlazor.Palette.Success", new() { Name = "Success", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The success color.", }},
            { "MudBlazor.Palette.SuccessContrastText", new() { Name = "SuccessContrastText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The contrast text color for the success color.", }},
            { "MudBlazor.Palette.SuccessDarken", new() { Name = "SuccessDarken", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The darkened value of the success color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbDarken"" /> if not set.", }},
            { "MudBlazor.Palette.SuccessLighten", new() { Name = "SuccessLighten", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The lightened value of the success color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbLighten"" /> if not set.", }},
            { "MudBlazor.Palette.Surface", new() { Name = "Surface", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The surface color.", }},
            { "MudBlazor.Palette.TableHover", new() { Name = "TableHover", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The color for table rows on hover.", }},
            { "MudBlazor.Palette.TableLines", new() { Name = "TableLines", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The color for table lines.", }},
            { "MudBlazor.Palette.TableStriped", new() { Name = "TableStriped", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The color for striped rows in a table.", }},
            { "MudBlazor.Palette.Tertiary", new() { Name = "Tertiary", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The tertiary color.", }},
            { "MudBlazor.Palette.TertiaryContrastText", new() { Name = "TertiaryContrastText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The contrast text color for the tertiary color.", }},
            { "MudBlazor.Palette.TertiaryDarken", new() { Name = "TertiaryDarken", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The darkened value of the tertiary color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbDarken"" /> if not set.", }},
            { "MudBlazor.Palette.TertiaryLighten", new() { Name = "TertiaryLighten", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The lightened value of the tertiary color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbLighten"" /> if not set.", }},
            { "MudBlazor.Palette.TextDisabled", new() { Name = "TextDisabled", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The disabled text color.", }},
            { "MudBlazor.Palette.TextPrimary", new() { Name = "TextPrimary", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The primary text color.", }},
            { "MudBlazor.Palette.TextSecondary", new() { Name = "TextSecondary", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The secondary text color.", }},
            { "MudBlazor.Palette.Warning", new() { Name = "Warning", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The warning color.", }},
            { "MudBlazor.Palette.WarningContrastText", new() { Name = "WarningContrastText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The contrast text color for the warning color.", }},
            { "MudBlazor.Palette.WarningDarken", new() { Name = "WarningDarken", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The darkened value of the warning color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbDarken"" /> if not set.", }},
            { "MudBlazor.Palette.WarningLighten", new() { Name = "WarningLighten", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The lightened value of the warning color.<br />This is calculated using <see cref=""M:MudBlazor.Utilities.MudColor.ColorRgbLighten"" /> if not set.", }},
            { "MudBlazor.Palette.White", new() { Name = "White", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The white color.", }},
            { "MudBlazor.PaletteDark.ActionDefault", new() { Name = "ActionDefault", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.ActionDisabled", new() { Name = "ActionDisabled", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.ActionDisabledBackground", new() { Name = "ActionDisabledBackground", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.AppbarBackground", new() { Name = "AppbarBackground", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.AppbarText", new() { Name = "AppbarText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Background", new() { Name = "Background", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.BackgroundGray", new() { Name = "BackgroundGray", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Black", new() { Name = "Black", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Dark", new() { Name = "Dark", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Divider", new() { Name = "Divider", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.DividerLight", new() { Name = "DividerLight", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.DrawerBackground", new() { Name = "DrawerBackground", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.DrawerIcon", new() { Name = "DrawerIcon", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.DrawerText", new() { Name = "DrawerText", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Error", new() { Name = "Error", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Info", new() { Name = "Info", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.LinesDefault", new() { Name = "LinesDefault", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.LinesInputs", new() { Name = "LinesInputs", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Primary", new() { Name = "Primary", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Skeleton", new() { Name = "Skeleton", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Success", new() { Name = "Success", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Surface", new() { Name = "Surface", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.TableLines", new() { Name = "TableLines", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.TableStriped", new() { Name = "TableStriped", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.TextDisabled", new() { Name = "TextDisabled", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.TextPrimary", new() { Name = "TextPrimary", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.TextSecondary", new() { Name = "TextSecondary", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PaletteDark.Warning", new() { Name = "Warning", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }},
            { "MudBlazor.PatternMask.CleanDelimiters", new() { Name = "CleanDelimiters", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.", Summary = @"Removes delimiter characters from the text.", }},
            { "MudBlazor.PatternMask.Placeholder", new() { Name = "Placeholder", TypeName = "System.Nullable`1[[System.Char, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Char?", Remarks = @"Defaults to <c>null</c>.  For example: a placeholder of <c>_</c>, mask of <c>000-000</c>, and input of <c>1</c>, will display <c>1__-___</c> as text.", Summary = @"The character used for characters which haven't yet been typed.", }},
            { "MudBlazor.PatternMask.Transformation", new() { Name = "Transformation", TypeName = "System.Func`2[[System.Char, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Char, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<Char, Char>", Remarks = @"Defaults to <c>null</c>.  For example: a transformation of <c>Char.ToUpper(c)</c> would convert all characters to upper-case.", Summary = @"The function applied to all input characters, such as converting to upper-case, etc.", }},
            { "MudBlazor.PopoverHolderContainer.Holders", new() { Name = "Holders", TypeName = "System.Collections.Generic.IReadOnlyCollection`1[[MudBlazor.IMudPopoverHolder, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IReadOnlyCollection<IMudPopoverHolder>", Remarks = @"Currently, the collection always contains one item.However, in the future, the behavior might change, and a list of updated states could be sent if the decision is made to update by batches.", Summary = @"Gets the collection of popover holders in the container.", }},
            { "MudBlazor.PopoverHolderContainer.Operation", new() { Name = "Operation", TypeName = "MudBlazor.PopoverHolderOperation", TypeFriendlyName = "PopoverHolderOperation", Summary = @"Gets the operation associated with the container.", }},
            { "MudBlazor.PopoverOptions.CheckForPopoverProvider", new() { Name = "CheckForPopoverProvider", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Gets or sets a value indicating whether to check for the presence of a popover provider <see cref=""T:MudBlazor.MudPopoverProvider"" />.The default value is <c>true</c>.", }},
            { "MudBlazor.PopoverOptions.ContainerClass", new() { Name = "ContainerClass", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets or sets the CSS class of the popover container.The default value is <c>mudblazor-main-content</c>.", }},
            { "MudBlazor.PopoverOptions.FlipMargin", new() { Name = "FlipMargin", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Gets or sets the FlipMargin for the popover.The default value is <c>0</c>.", }},
            { "MudBlazor.PopoverOptions.Mode", new() { Name = "Mode", TypeName = "MudBlazor.PopoverMode", TypeFriendlyName = "PopoverMode", Summary = @"Gets or sets the mode for displaying popovers.The default value is <c>PopoverMode.Default</c>.", }},
            { "MudBlazor.PopoverOptions.QueueDelay", new() { Name = "QueueDelay", TypeName = "System.TimeSpan", TypeFriendlyName = "TimeSpan", Summary = @"Gets the delay for batch popovers detachment.The default value is <c>0.5 seconds</c>.", }},
            { "MudBlazor.PopoverOptions.ThrowOnDuplicateProvider", new() { Name = "ThrowOnDuplicateProvider", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Gets or sets a value indicating whether to throw an exception when a duplicate <see cref=""T:MudBlazor.MudPopoverProvider"" /> is encountered.The default value is <c>true</c>.", }},
            { "MudBlazor.PropertyColumn`2.Format", new() { Name = "Format", TypeName = "System.String", TypeFriendlyName = "string", IsParameter = true, Remarks = @"Defaults to <c>null</c>.", Summary = @"The format applied to property values.", }},
            { "MudBlazor.PropertyColumn`2.Property", new() { Name = "Property", TypeName = "", TypeFriendlyName = "Expression<Func<T, TProperty>>", IsParameter = true, Summary = @"The property whose values are displayed in the column.", }},
            { "MudBlazor.PropertyColumn`2.PropertyName", new() { Name = "PropertyName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the property.", }},
            { "MudBlazor.PseudoCss.Scope", new() { Name = "Scope", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Ensure you use a valid CSS scope <see href=""https://developer.mozilla.org/docs/Web/CSS/:root"">Pseudo-classes Mozilla</see> for a list of valid onesDefaults to :root", Summary = @"Set different scopes for the generated Theme", }},
            { "MudBlazor.Range`1.End", new() { Name = "End", TypeName = "", TypeFriendlyName = "T", Summary = @"The maximum value.", }},
            { "MudBlazor.Range`1.Start", new() { Name = "Start", TypeName = "", TypeFriendlyName = "T", Summary = @"The minimum value.", }},
            { "MudBlazor.Range`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].End", new() { Name = "End", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", Summary = @"The maximum value.", }},
            { "MudBlazor.Range`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start", new() { Name = "Start", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", Summary = @"The minimum value.", }},
            { "MudBlazor.RegexMask.Delimiters", new() { Name = "Delimiters", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <c>null</c>.  For example: for a delimiter of <c>.</c>, a mask of <c>^[0-9].[0-9].[0-9]$</c>, and characters typed of <c>012</c>, the resulting text would be <c>0.1.2</c>", Summary = @"The characters which are jumped over when adding an input character.", }},
            { "MudBlazor.ScrollEventArgs.FirstChildBoundingClientRect", new() { Name = "FirstChildBoundingClientRect", TypeName = "MudBlazor.Interop.BoundingClientRect", TypeFriendlyName = "BoundingClientRect", Summary = @"The BoundingClientRect for the first child of the scrolled element", }},
            { "MudBlazor.ScrollEventArgs.NodeName", new() { Name = "NodeName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Node name of the scrolled element", }},
            { "MudBlazor.ScrollEventArgs.ScrollHeight", new() { Name = "ScrollHeight", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The ScrollHeight  property is a measurement of the height of an element's content, including content not visible on the screen due to overflow", }},
            { "MudBlazor.ScrollEventArgs.ScrollLeft", new() { Name = "ScrollLeft", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The ScrollLeft property gets or sets the number of pixels that an element's content is scrolled from its left edge.", }},
            { "MudBlazor.ScrollEventArgs.ScrollTop", new() { Name = "ScrollTop", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The ScrollTop property gets or sets the number of pixels that an element's content is scrolled vertically", }},
            { "MudBlazor.ScrollEventArgs.ScrollWidth", new() { Name = "ScrollWidth", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The ScrollWidth property is a measurement of the width of an element's content, including content not visible on the screen due to overflow", }},
            { "MudBlazor.ScrollSectionCenteredEventArgs.Id", new() { Name = "Id", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets the ID of the centered scroll section.", }},
            { "MudBlazor.SelectColumn`1.DragAndDropEnabled", new() { Name = "DragAndDropEnabled", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>. When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.DragDropColumnReordering"" /> property.", Summary = @"Allows this column to be reordered via drag-and-drop operations.", }},
            { "MudBlazor.SelectColumn`1.Hidden", new() { Name = "Hidden", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides this column.", }},
            { "MudBlazor.SelectColumn`1.Hideable", new() { Name = "Hideable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>null</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.Hideable"" /> property.", Summary = @"Allows this column to be hidden.", }},
            { "MudBlazor.SelectColumn`1.ShowInFooter", new() { Name = "ShowInFooter", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"When <c>true</c>, all rows can be checked by selecting this checkbox.", Summary = @"Shows a checkbox in the footer.", }},
            { "MudBlazor.SelectColumn`1.ShowInHeader", new() { Name = "ShowInHeader", TypeName = "System.Boolean", TypeFriendlyName = "bool", IsParameter = true, Remarks = @"When <c>true</c>, all rows can be checked by selecting this checkbox.", Summary = @"Shows a checkbox in the header.", }},
            { "MudBlazor.SelectColumn`1.Size", new() { Name = "Size", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", IsParameter = true, Remarks = @"Defaults to <see cref=""F:MudBlazor.Size.Medium"" />.", Summary = @"The size of the checkbox icon.", }},
            { "MudBlazor.Services.BrowserWindowSize.Height", new() { Name = "Height", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Gets or sets the height of the browser window.", }},
            { "MudBlazor.Services.BrowserWindowSize.Width", new() { Name = "Width", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Gets or sets the width of the browser window.", }},
            { "MudBlazor.Services.JsEventOptions.EnableLogging", new() { Name = "EnableLogging", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Report resize events in the browser's console.", }},
            { "MudBlazor.Services.JsEventOptions.TagName", new() { Name = "TagName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The tag name of the element to register events with. Must be all uppercase, like ""INPUT""", }},
            { "MudBlazor.Services.JsEventOptions.TargetClass", new() { Name = "TargetClass", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"<para>Class of the target node which should be observed for keyboard events</para><para>Note: this must be a single class</para>", }},
            { "MudBlazor.Services.KeyInterceptorOptions.EnableLogging", new() { Name = "EnableLogging", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Specifies whether resize events should be logged in the browser's console.", }},
            { "MudBlazor.Services.KeyInterceptorOptions.Keys", new() { Name = "Keys", TypeName = "System.Collections.Generic.IReadOnlyList`1[[MudBlazor.Services.KeyOptions, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IReadOnlyList<KeyOptions>", Summary = @"A list of key options that define the keys to intercept and their respective configurations.", }},
            { "MudBlazor.Services.KeyInterceptorOptions.TargetClass", new() { Name = "TargetClass", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Note: This must be a single class name.", Summary = @"The CSS class of the target HTML element that should be observed for keyboard events.", }},
            { "MudBlazor.Services.KeyOptions.Key", new() { Name = "Key", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"<para>JavaScript keyboard event.key</para><para>Examples: "" "" for space, ""Tab"" for tab, ""a"" for lowercase A-key.Also allowed: JS regex such as ""/[a-z]/"" or ""/a|b/"" but NOT ""/[a-z]/g"" or ""/[a-z]/i""     regex must be enclosed in two forward slashes!</para>", }},
            { "MudBlazor.Services.KeyOptions.PreventDown", new() { Name = "PreventDown", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Configuration for preventDefault() on key down events.", }},
            { "MudBlazor.Services.KeyOptions.PreventUp", new() { Name = "PreventUp", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Configuration for preventDefault() on key up events.", }},
            { "MudBlazor.Services.KeyOptions.StopDown", new() { Name = "StopDown", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Configuration for stopPropagation() on key down events.", }},
            { "MudBlazor.Services.KeyOptions.StopUp", new() { Name = "StopUp", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Configuration for stopPropagation() on key up events.", }},
            { "MudBlazor.Services.KeyOptions.SubscribeDown", new() { Name = "SubscribeDown", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Subscribe down key and invoke event KeyDown on C# side", }},
            { "MudBlazor.Services.KeyOptions.SubscribeUp", new() { Name = "SubscribeUp", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Subscribe up key and invoke event KeyUp on C# side", }},
            { "MudBlazor.Services.MudServicesConfiguration.PopoverOptions", new() { Name = "PopoverOptions", TypeName = "MudBlazor.PopoverOptions", TypeFriendlyName = "PopoverOptions", }},
            { "MudBlazor.Services.MudServicesConfiguration.ResizeObserverOptions", new() { Name = "ResizeObserverOptions", TypeName = "MudBlazor.Services.ResizeObserverOptions", TypeFriendlyName = "ResizeObserverOptions", }},
            { "MudBlazor.Services.MudServicesConfiguration.ResizeOptions", new() { Name = "ResizeOptions", TypeName = "MudBlazor.Services.ResizeOptions", TypeFriendlyName = "ResizeOptions", }},
            { "MudBlazor.Services.MudServicesConfiguration.SnackbarConfiguration", new() { Name = "SnackbarConfiguration", TypeName = "MudBlazor.SnackbarConfiguration", TypeFriendlyName = "SnackbarConfiguration", }},
            { "MudBlazor.Services.ResizeObserverOptions.EnableLogging", new() { Name = "EnableLogging", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Report resize events in the browser's console.", }},
            { "MudBlazor.Services.ResizeObserverOptions.ReportRate", new() { Name = "ReportRate", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"Defaults to <c>200</c>.  Setting this value too low can cause poor application performance.", Summary = @"Timespan in milliseconds after the browser detects the last change and notifies the interop service.", }},
            { "MudBlazor.Services.ResizeOptions.BreakpointDefinitions", new() { Name = "BreakpointDefinitions", TypeName = "System.Collections.Generic.Dictionary`2[[MudBlazor.Breakpoint, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Dictionary<Breakpoint, int>", Remarks = @"When the dictionary is null or empty, the default breakpoint definitions will be used.The default breakpoint definitions are as follows:[Breakpoint.Xxl] = 2560,[Breakpoint.Xl] = 1920,[Breakpoint.Lg] = 1280,[Breakpoint.Md] = 960,[Breakpoint.Sm] = 600,[Breakpoint.Xs] = 0.", Summary = @"Gets or sets the breakpoint definitions, representing specific breakpoints and their associated width.", }},
            { "MudBlazor.Services.ResizeOptions.EnableLogging", new() { Name = "EnableLogging", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Report resize events and media queries in the browser's console.Default value is <c>false</c>.", }},
            { "MudBlazor.Services.ResizeOptions.NotifyOnBreakpointOnly", new() { Name = "NotifyOnBreakpointOnly", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"If true, RaiseOnResized is called only when breakpoint has changed.Default value is <c>true</c>.", }},
            { "MudBlazor.Services.ResizeOptions.ReportRate", new() { Name = "ReportRate", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"If set to <c>0</c>, the resize event will report instantaneously.", Summary = @"Rate in milliseconds that the browsers `resize()` event should report a change.Setting this value too low can cause poor application performance.Default value is <c>100</c>.", }},
            { "MudBlazor.Services.ResizeOptions.SuppressInitEvent", new() { Name = "SuppressInitEvent", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Suppress the first OnResized that is invoked when a new event handler is added.Default value is <c>true</c>.", }},
            { "MudBlazor.Shadow.Elevation", new() { Name = "Elevation", TypeName = "System.String[]", TypeFriendlyName = "string[]", Summary = @"Gets or sets the elevation levels for the shadow.", }},
            { "MudBlazor.SliderContext`1.NullableValue", new() { Name = "NullableValue", TypeName = "", TypeFriendlyName = "T?", Summary = @"The nullable value of the slider.", }},
            { "MudBlazor.SliderContext`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Summary = @"The value of the slider.", }},
            { "MudBlazor.Snackbar.Message", new() { Name = "Message", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The message to display.", }},
            { "MudBlazor.Snackbar.Severity", new() { Name = "Severity", TypeName = "MudBlazor.Severity", TypeFriendlyName = "Severity", Summary = @"The severity of the snackbar message.", }},
            { "MudBlazor.SnackbarConfiguration.ClearAfterNavigation", new() { Name = "ClearAfterNavigation", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.SnackbarConfiguration.MaxDisplayedSnackbars", new() { Name = "MaxDisplayedSnackbars", TypeName = "System.Int32", TypeFriendlyName = "int", }},
            { "MudBlazor.SnackbarConfiguration.NewestOnTop", new() { Name = "NewestOnTop", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.SnackbarConfiguration.PositionClass", new() { Name = "PositionClass", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.SnackbarConfiguration.PreventDuplicates", new() { Name = "PreventDuplicates", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.SnackbarOptions.Action", new() { Name = "Action", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <c>null</c>.", Summary = @"The text for a custom button in the snackbar message.", }},
            { "MudBlazor.SnackbarOptions.ActionColor", new() { Name = "ActionColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Default"" />.", Summary = @"The color of the action button.", }},
            { "MudBlazor.SnackbarOptions.ActionVariant", new() { Name = "ActionVariant", TypeName = "System.Nullable`1[[MudBlazor.Variant, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Variant?", Remarks = @"Defaults to <c>null</c>.", Summary = @"The display variant of the action button.", }},
            { "MudBlazor.SnackbarOptions.CloseAfterNavigation", new() { Name = "CloseAfterNavigation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Closes the snackbar after navigating away from the current page.", }},
            { "MudBlazor.SnackbarOptions.CloseButtonClickFunc", new() { Name = "CloseButtonClickFunc", TypeName = "System.Func`2[[MudBlazor.Snackbar, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<Snackbar, Task>", Remarks = @"Defaults to <c>null</c>.", Summary = @"Occurs when the <c>Close</c> button is clicked.", }},
            { "MudBlazor.SnackbarOptions.DuplicatesBehavior", new() { Name = "DuplicatesBehavior", TypeName = "MudBlazor.SnackbarDuplicatesBehavior", TypeFriendlyName = "SnackbarDuplicatesBehavior", Remarks = @"Defaults to <see cref=""F:MudBlazor.SnackbarDuplicatesBehavior.GlobalDefault"" /> which is set via <see cref=""P:MudBlazor.SnackbarConfiguration.PreventDuplicates"" />.", Summary = @"The action applied when duplicate snackbars are detected.", }},
            { "MudBlazor.SnackbarOptions.HideIcon", new() { Name = "HideIcon", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>false</c>.", Summary = @"Hides the icon for the snackbar.", }},
            { "MudBlazor.SnackbarOptions.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <c>null</c>.  Will be set to match the <see cref=""P:MudBlazor.SnackbarOptions.Severity"" />.", Summary = @"The custom icon to display for the snackbar.", }},
            { "MudBlazor.SnackbarOptions.IconColor", new() { Name = "IconColor", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Remarks = @"Defaults to <see cref=""F:MudBlazor.Color.Inherit"" />.", Summary = @"The color of the icon to display.", }},
            { "MudBlazor.SnackbarOptions.OnClick", new() { Name = "OnClick", TypeName = "System.Func`2[[MudBlazor.Snackbar, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<Snackbar, Task>", Remarks = @"Defaults to <c>null</c>.", Summary = @"Occurs when the snackbar is clicked.", }},
            { "MudBlazor.SnackbarOptions.Severity", new() { Name = "Severity", TypeName = "MudBlazor.Severity", TypeFriendlyName = "Severity", Summary = @"The severity of the snackbar.", }},
            { "MudBlazor.SnackbarOptions.SnackbarTypeClass", new() { Name = "SnackbarTypeClass", TypeName = "System.String", TypeFriendlyName = "string", Remarks = @"Defaults to <c>null</c>.  Multiple classes must be separated by spaces.", Summary = @"The custom CSS classes for the snackbar.", }},
            { "MudBlazor.SnackbarService.Configuration", new() { Name = "Configuration", TypeName = "MudBlazor.SnackbarConfiguration", TypeFriendlyName = "SnackbarConfiguration", }},
            { "MudBlazor.SnackbarService.ShownSnackbars", new() { Name = "ShownSnackbars", TypeName = "System.Collections.Generic.IEnumerable`1[[MudBlazor.Snackbar, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IEnumerable<Snackbar>", }},
            { "MudBlazor.SortDefinition`1.Comparer", new() { Name = "Comparer", TypeName = "System.Collections.Generic.IComparer`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "IComparer<object>", Summary = @"The comparer used to compare values.", }},
            { "MudBlazor.SortDefinition`1.Descending", new() { Name = "Descending", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, sorts in descending order.", }},
            { "MudBlazor.SortDefinition`1.Index", new() { Name = "Index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The order of this sort relative to other sort definitions.", }},
            { "MudBlazor.SortDefinition`1.SortBy", new() { Name = "SortBy", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the column to sort by.", }},
            { "MudBlazor.SortDefinition`1.SortFunc", new() { Name = "SortFunc", TypeName = "", TypeFriendlyName = "Func<T, object>", Summary = @"The custom function used to sort values.", }},
            { "MudBlazor.State.ParameterChangedEventArgs`1.IsChildOriginatedChange", new() { Name = "IsChildOriginatedChange", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Gets a value indicating whether the change was originated by the child,meaning the change was propagated from the child to the parent. This property is used to track whether the parent received the update as a result of the child triggering the change or updating its own state.", }},
            { "MudBlazor.State.ParameterChangedEventArgs`1.LastValue", new() { Name = "LastValue", TypeName = "", TypeFriendlyName = "T", Summary = @"Gets the last value of the parameter.", }},
            { "MudBlazor.State.ParameterChangedEventArgs`1.ParameterName", new() { Name = "ParameterName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets the associated parameter name of the component's <see cref=""T:Microsoft.AspNetCore.Components.ParameterAttribute"" />.", }},
            { "MudBlazor.State.ParameterChangedEventArgs`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Summary = @"Gets the current value of the parameter.", }},
            { "MudBlazor.State.ParameterState`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", Summary = @"Gets the current value.", }},
            { "MudBlazor.StepperInteractionEventArgs.Action", new() { Name = "Action", TypeName = "MudBlazor.StepAction", TypeFriendlyName = "StepAction", Summary = @"The requested step action.", }},
            { "MudBlazor.StepperInteractionEventArgs.Cancel", new() { Name = "Cancel", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Set this to <c>true</c> to indicate that the requested step change should not occur.", Summary = @"Whether to disallow this request.", }},
            { "MudBlazor.StepperInteractionEventArgs.StepIndex", new() { Name = "StepIndex", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The desired step index.", }},
            { "MudBlazor.SvgLegend.Data", new() { Name = "Data", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The data values to display.", }},
            { "MudBlazor.SvgLegend.Index", new() { Name = "Index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The position of this path within a list.", }},
            { "MudBlazor.SvgLegend.Labels", new() { Name = "Labels", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The series labels to display.", }},
            { "MudBlazor.SvgLegend.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the legend is displayed.", }},
            { "MudBlazor.SwipeEventArgs.Sender", new() { Name = "Sender", TypeName = "MudBlazor.MudSwipeArea", TypeFriendlyName = "MudSwipeArea", Summary = @"Gets the sender of the swipe event.", }},
            { "MudBlazor.SwipeEventArgs.SwipeDelta", new() { Name = "SwipeDelta", TypeName = "System.Nullable`1[[System.Double, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "double?", Summary = @"Gets the swipe delta value indicating the distance of the swipe movement.", }},
            { "MudBlazor.SwipeEventArgs.SwipeDirection", new() { Name = "SwipeDirection", TypeName = "MudBlazor.SwipeDirection", TypeFriendlyName = "SwipeDirection", Summary = @"Gets the direction of the swipe.", }},
            { "MudBlazor.SwipeEventArgs.TouchEventArgs", new() { Name = "TouchEventArgs", TypeName = "Microsoft.AspNetCore.Components.Web.PointerEventArgs", TypeFriendlyName = "PointerEventArgs", Summary = @"Gets information about a touch event that is being raised.", }},
            { "MudBlazor.TabInteractionEventArgs.Cancel", new() { Name = "Cancel", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.TabInteractionEventArgs.InteractionType", new() { Name = "InteractionType", TypeName = "MudBlazor.TabInteractionType", TypeFriendlyName = "TabInteractionType", }},
            { "MudBlazor.TabInteractionEventArgs.PanelIndex", new() { Name = "PanelIndex", TypeName = "System.Int32", TypeFriendlyName = "int", }},
            { "MudBlazor.TableContext.FooterRows", new() { Name = "FooterRows", TypeName = "System.Collections.Generic.List`1[[MudBlazor.MudTFootRow, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "List<MudTFootRow>", Summary = @"The footer rows within the table and its groups.", }},
            { "MudBlazor.TableContext.HasPager", new() { Name = "HasPager", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the table containts a <see cref=""T:MudBlazor.MudTablePager"" />.", }},
            { "MudBlazor.TableContext.HeaderRows", new() { Name = "HeaderRows", TypeName = "System.Collections.Generic.List`1[[MudBlazor.MudTHeadRow, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "List<MudTHeadRow>", Summary = @"The header rows within the table and its groups.", }},
            { "MudBlazor.TableContext.PagerStateHasChanged", new() { Name = "PagerStateHasChanged", TypeName = "System.Action", TypeFriendlyName = "Action", Summary = @"The action taken when the table pager should be refreshed.", }},
            { "MudBlazor.TableContext.SortDirection", new() { Name = "SortDirection", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", Summary = @"The current sort direction of the table.", }},
            { "MudBlazor.TableContext.Table", new() { Name = "Table", TypeName = "MudBlazor.MudTableBase", TypeFriendlyName = "MudTableBase", Summary = @"The table linked to this context.", }},
            { "MudBlazor.TableContext.TableStateHasChanged", new() { Name = "TableStateHasChanged", TypeName = "System.Action", TypeFriendlyName = "Action", Summary = @"The action taken when the table and related components should be refreshed.", }},
            { "MudBlazor.TableContext`1.Comparer", new() { Name = "Comparer", TypeName = "", TypeFriendlyName = "IEqualityComparer<T>", Summary = @"The comparer used to determine selected rows.", }},
            { "MudBlazor.TableContext`1.CurrentSortLabel", new() { Name = "CurrentSortLabel", TypeName = "", TypeFriendlyName = "MudTableSortLabel<T>", Summary = @"The current sort label.", }},
            { "MudBlazor.TableContext`1.GroupRows", new() { Name = "GroupRows", TypeName = "", TypeFriendlyName = "List<MudTableGroupRow<T>>", Summary = @"The current grouping rows.", }},
            { "MudBlazor.TableContext`1.Rows", new() { Name = "Rows", TypeName = "", TypeFriendlyName = "Dictionary<T, MudTr>", Summary = @"The currently visible rows.", }},
            { "MudBlazor.TableContext`1.Selection", new() { Name = "Selection", TypeName = "", TypeFriendlyName = "HashSet<T>", Summary = @"The currently selected items.", }},
            { "MudBlazor.TableContext`1.SortBy", new() { Name = "SortBy", TypeName = "", TypeFriendlyName = "Func<T, object>", Summary = @"The function which sorts data rows.", }},
            { "MudBlazor.TableContext`1.SortDirection", new() { Name = "SortDirection", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", }},
            { "MudBlazor.TableContext`1.SortLabels", new() { Name = "SortLabels", TypeName = "", TypeFriendlyName = "List<MudTableSortLabel<T>>", Summary = @"The current list of sort labels.", }},
            { "MudBlazor.TableData`1.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Remarks = @"The number of items should match the number in <see cref=""P:MudBlazor.TableState.PageSize"" />.", Summary = @"The items to display in the table.", }},
            { "MudBlazor.TableData`1.TotalItems", new() { Name = "TotalItems", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"This number is used to calculate the total number of pages in the table.", Summary = @"The total number of items, excluding pagination.", }},
            { "MudBlazor.TableGroupData`2.GroupName", new() { Name = "GroupName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The label of this group.", }},
            { "MudBlazor.TableGroupData`2.Items", new() { Name = "Items", TypeName = "", TypeFriendlyName = "IEnumerable<TElement>", Summary = @"The data rows for this group.", }},
            { "MudBlazor.TableGroupData`2.Key", new() { Name = "Key", TypeName = "", TypeFriendlyName = "TKey", Summary = @"The unique key of this group.", }},
            { "MudBlazor.TableGroupDefinition`1.Expandable", new() { Name = "Expandable", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Allows this group to show or hide data rows.", }},
            { "MudBlazor.TableGroupDefinition`1.GroupName", new() { Name = "GroupName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The label for this group.", }},
            { "MudBlazor.TableGroupDefinition`1.Indentation", new() { Name = "Indentation", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"When set, all child group definitions are also updated.  Must be set for the first grouping level.", Summary = @"Indents the first column cell for this group and child groups.", }},
            { "MudBlazor.TableGroupDefinition`1.InnerGroup", new() { Name = "InnerGroup", TypeName = "MudBlazor.TableGroupDefinition`1", TypeFriendlyName = "TableGroupDefinition<T>", Summary = @"The group definition within this definition.", }},
            { "MudBlazor.TableGroupDefinition`1.IsInitiallyExpanded", new() { Name = "IsInitiallyExpanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", Remarks = @"Defaults to <c>true</c>.", Summary = @"Shows data rows for this group when the table is first displayed.", }},
            { "MudBlazor.TableGroupDefinition`1.Selector", new() { Name = "Selector", TypeName = "", TypeFriendlyName = "Func<T, object>", Remarks = @"Typically used during a LINQ <c>GroupBy()</c> call to group items.", Summary = @"The function which selects items for this group.", }},
            { "MudBlazor.TableRowClickEventArgs`1.Item", new() { Name = "Item", TypeName = "", TypeFriendlyName = "T", Summary = @"The data related to the row which was clicked.", }},
            { "MudBlazor.TableRowClickEventArgs`1.MouseEventArgs", new() { Name = "MouseEventArgs", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", Summary = @"The coordinates of the click.", }},
            { "MudBlazor.TableRowClickEventArgs`1.Row", new() { Name = "Row", TypeName = "MudBlazor.MudTr", TypeFriendlyName = "MudTr", Summary = @"The row which was clicked.", }},
            { "MudBlazor.TableRowHoverEventArgs`1.Item", new() { Name = "Item", TypeName = "", TypeFriendlyName = "T", Summary = @"The data related to the row being hovered over.", }},
            { "MudBlazor.TableRowHoverEventArgs`1.PointerEventArgs", new() { Name = "PointerEventArgs", TypeName = "Microsoft.AspNetCore.Components.Web.PointerEventArgs", TypeFriendlyName = "PointerEventArgs", Summary = @"The coordinates of the hover.", }},
            { "MudBlazor.TableRowHoverEventArgs`1.Row", new() { Name = "Row", TypeName = "MudBlazor.MudTr", TypeFriendlyName = "MudTr", Summary = @"The row being hovered over.", }},
            { "MudBlazor.TableRowValidator.Errors", new() { Name = "Errors", TypeName = "System.String[]", TypeFriendlyName = "string[]", Summary = @"The validation errors for this row.", }},
            { "MudBlazor.TableRowValidator.IsValid", new() { Name = "IsValid", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Whether the table row is valid.", }},
            { "MudBlazor.TableRowValidator.Model", new() { Name = "Model", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The model being edited by the form.", }},
            { "MudBlazor.TableState.Page", new() { Name = "Page", TypeName = "System.Int32", TypeFriendlyName = "int", Remarks = @"The index of the first page is <c>0</c>.", Summary = @"The requested index of the page to display.", }},
            { "MudBlazor.TableState.PageSize", new() { Name = "PageSize", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The number of items requested.", }},
            { "MudBlazor.TableState.SortDirection", new() { Name = "SortDirection", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", Remarks = @"Defaults to <see cref=""F:MudBlazor.SortDirection.None"" />.", Summary = @"The direction to sort results.", }},
            { "MudBlazor.TableState.SortLabel", new() { Name = "SortLabel", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The optional column to sort by.", }},
            { "MudBlazor.TemplateColumn`1.DragAndDropEnabled", new() { Name = "DragAndDropEnabled", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.DragDropColumnReordering"" /> property.", Summary = @"Allows this column to be reordered via drag-and-drop operations.", }},
            { "MudBlazor.TemplateColumn`1.Filterable", new() { Name = "Filterable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.Filterable"" /> property.", Summary = @"Allows filters to be used on this column.", }},
            { "MudBlazor.TemplateColumn`1.PropertyName", new() { Name = "PropertyName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of this column.", }},
            { "MudBlazor.TemplateColumn`1.Resizable", new() { Name = "Resizable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Summary = @"Allows this column's width to be changed.", }},
            { "MudBlazor.TemplateColumn`1.ShowColumnOptions", new() { Name = "ShowColumnOptions", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.ShowColumnOptions"" /> property.", Summary = @"Shows options for this column.", }},
            { "MudBlazor.TemplateColumn`1.Sortable", new() { Name = "Sortable", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", IsParameter = true, Remarks = @"Defaults to <c>false</c>.  When set, this overrides the <see cref=""P:MudBlazor.MudDataGrid`1.SortMode"" /> property.", Summary = @"Sorts values in this column.", }},
            { "MudBlazor.TimeSeriesChartSeries.Data", new() { Name = "Data", TypeName = "System.Collections.Generic.List`1[[MudBlazor.TimeSeriesChartSeries+TimeValue, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "List<TimeValue>", }},
            { "MudBlazor.TimeSeriesChartSeries.FillOpacity", new() { Name = "FillOpacity", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.TimeSeriesChartSeries.Index", new() { Name = "Index", TypeName = "System.Int32", TypeFriendlyName = "int", }},
            { "MudBlazor.TimeSeriesChartSeries.IsVisible", new() { Name = "IsVisible", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.TimeSeriesChartSeries.Name", new() { Name = "Name", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.TimeSeriesChartSeries.StrokeOpacity", new() { Name = "StrokeOpacity", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.TimeSeriesChartSeries.Type", new() { Name = "Type", TypeName = "MudBlazor.TimeSeriesDisplayType", TypeFriendlyName = "TimeSeriesDisplayType", }},
            { "MudBlazor.TimeSeriesChartSeries+TimeValue.DateTime", new() { Name = "DateTime", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }},
            { "MudBlazor.TimeSeriesChartSeries+TimeValue.EqualityContract", new() { Name = "EqualityContract", TypeName = "System.Type", TypeFriendlyName = "Type", IsProtected = true, }},
            { "MudBlazor.TimeSeriesChartSeries+TimeValue.Value", new() { Name = "Value", TypeName = "System.Double", TypeFriendlyName = "double", }},
            { "MudBlazor.TreeItemData`1.Children", new() { Name = "Children", TypeName = "", TypeFriendlyName = "List<TreeItemData<T>>", }},
            { "MudBlazor.TreeItemData`1.Expandable", new() { Name = "Expandable", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.TreeItemData`1.Expanded", new() { Name = "Expanded", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.TreeItemData`1.HasChildren", new() { Name = "HasChildren", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.TreeItemData`1.Icon", new() { Name = "Icon", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.TreeItemData`1.Selected", new() { Name = "Selected", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.TreeItemData`1.Text", new() { Name = "Text", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "MudBlazor.TreeItemData`1.Value", new() { Name = "Value", TypeName = "", TypeFriendlyName = "T", }},
            { "MudBlazor.TreeItemData`1.Visible", new() { Name = "Visible", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Typography.Body1", new() { Name = "Body1", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.Body1Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.body1"" />.", }},
            { "MudBlazor.Typography.Body2", new() { Name = "Body2", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.Body2Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.body2"" />.", }},
            { "MudBlazor.Typography.Button", new() { Name = "Button", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.ButtonTypography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.button"" />.", }},
            { "MudBlazor.Typography.Caption", new() { Name = "Caption", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.CaptionTypography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.caption"" />.", }},
            { "MudBlazor.Typography.Default", new() { Name = "Default", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.DefaultTypography"" /> constructor.", Summary = @"Gets or sets the typography settings for the default typo.", }},
            { "MudBlazor.Typography.H1", new() { Name = "H1", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.H1Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.h1"" />.", }},
            { "MudBlazor.Typography.H2", new() { Name = "H2", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.H2Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.h2"" />.", }},
            { "MudBlazor.Typography.H3", new() { Name = "H3", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.H3Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.h3"" />.", }},
            { "MudBlazor.Typography.H4", new() { Name = "H4", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.H4Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.h4"" />.", }},
            { "MudBlazor.Typography.H5", new() { Name = "H5", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.H5Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.h5"" />.", }},
            { "MudBlazor.Typography.H6", new() { Name = "H6", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.H6Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.h6"" />.", }},
            { "MudBlazor.Typography.Overline", new() { Name = "Overline", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.OverlineTypography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.overline"" />.", }},
            { "MudBlazor.Typography.Subtitle1", new() { Name = "Subtitle1", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.Subtitle1Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.subtitle1"" />.", }},
            { "MudBlazor.Typography.Subtitle2", new() { Name = "Subtitle2", TypeName = "MudBlazor.BaseTypography", TypeFriendlyName = "BaseTypography", Remarks = @"Defaults to the values from the <see cref=""T:MudBlazor.Subtitle2Typography"" /> constructor.", Summary = @"Gets or sets the typography settings for <see cref=""F:MudBlazor.Typo.subtitle2"" />.", }},
            { "MudBlazor.Utilities.FormFieldChangedEventArgs.Field", new() { Name = "Field", TypeName = "MudBlazor.Interfaces.IFormComponent", TypeFriendlyName = "IFormComponent", }},
            { "MudBlazor.Utilities.FormFieldChangedEventArgs.NewValue", new() { Name = "NewValue", TypeName = "System.Object", TypeFriendlyName = "object", }},
            { "MudBlazor.Utilities.MudColor.A", new() { Name = "A", TypeName = "System.Byte", TypeFriendlyName = "Byte", Summary = @"Gets the alpha component value of the color.", }},
            { "MudBlazor.Utilities.MudColor.APercentage", new() { Name = "APercentage", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"Gets the alpha component value as a percentage (0.0 to 1.0) of the color.", }},
            { "MudBlazor.Utilities.MudColor.B", new() { Name = "B", TypeName = "System.Byte", TypeFriendlyName = "Byte", Summary = @"Gets the blue component value of the color.", }},
            { "MudBlazor.Utilities.MudColor.G", new() { Name = "G", TypeName = "System.Byte", TypeFriendlyName = "Byte", Summary = @"Gets the green component value of the color.", }},
            { "MudBlazor.Utilities.MudColor.H", new() { Name = "H", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"Gets the hue component value of the color.", }},
            { "MudBlazor.Utilities.MudColor.L", new() { Name = "L", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"Gets the lightness component value of the color.", }},
            { "MudBlazor.Utilities.MudColor.R", new() { Name = "R", TypeName = "System.Byte", TypeFriendlyName = "Byte", Summary = @"Gets the red component value of the color.", }},
            { "MudBlazor.Utilities.MudColor.S", new() { Name = "S", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"Gets the saturation component value of the color.", }},
            { "MudBlazor.Utilities.MudColor.UInt32", new() { Name = "UInt32", TypeName = "System.UInt32", TypeFriendlyName = "UInt32", Summary = @"Gets the 32-bit unsigned integer representation of the color.", }},
            { "MudBlazor.Utilities.MudColor.Value", new() { Name = "Value", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Gets the hexadecimal representation of the color.", }},
            { "MudBlazor.Utilities.NullableObject`1.IsNull", new() { Name = "IsNull", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Gets a value indicating whether the wrapped item is null.", }},
            { "MudBlazor.Utilities.NullableObject`1.Item", new() { Name = "Item", TypeName = "", TypeFriendlyName = "T", Summary = @"Gets the wrapped item.", }},
            { "MudBlazor.Utilities.NullableObject`1.Null", new() { Name = "Null", TypeName = "MudBlazor.Utilities.NullableObject`1", TypeFriendlyName = "NullableObject<T>", Remarks = @"If <typeparamref name=""T"" /> is a struct that is not wrapped in <see cref=""T:System.Nullable`1"" />, this property will return a <see cref=""T:MudBlazor.Utilities.NullableObject`1"" /> with a non-null default value because structs cannot be null unless wrapped in <see cref=""T:System.Nullable`1"" />.", Summary = @"Gets a <see cref=""T:MudBlazor.Utilities.NullableObject`1"" /> that represents a null value.", }},
            { "MudBlazor.Utilities.RuntimeLocation.IsClientSide", new() { Name = "IsClientSide", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Utilities.RuntimeLocation.IsServerSide", new() { Name = "IsServerSide", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.Utilities.ValueBuilder.HasValue", new() { Name = "HasValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }},
            { "MudBlazor.ZIndex.AppBar", new() { Name = "AppBar", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Gets or sets the Z-index value for the AppBar component.Default value is ""1300"".", }},
            { "MudBlazor.ZIndex.Dialog", new() { Name = "Dialog", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Gets or sets the Z-index value for the Dialog component.Default value is ""1400"".", }},
            { "MudBlazor.ZIndex.Drawer", new() { Name = "Drawer", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Gets or sets the Z-index value for the Drawer component.Default value is ""1100"""".", }},
            { "MudBlazor.ZIndex.Popover", new() { Name = "Popover", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Gets or sets the Z-index value for the Popover component.Default value is ""1200"".", }},
            { "MudBlazor.ZIndex.Snackbar", new() { Name = "Snackbar", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Gets or sets the Z-index value for the SnackBar component.Default value is ""1500"".", }},
            { "MudBlazor.ZIndex.Tooltip", new() { Name = "Tooltip", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Gets or sets the Z-index value for the Tooltip component.Default value is ""1600"".", }},
            { "System.Delegate.Method", new() { Name = "Method", TypeName = "System.Reflection.MethodInfo", TypeFriendlyName = "MethodInfo", }},
            { "System.Delegate.Target", new() { Name = "Target", TypeName = "System.Object", TypeFriendlyName = "object", }},
            { "System.Exception.Data", new() { Name = "Data", TypeName = "System.Collections.IDictionary", TypeFriendlyName = "IDictionary", }},
            { "System.Exception.HelpLink", new() { Name = "HelpLink", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "System.Exception.HResult", new() { Name = "HResult", TypeName = "System.Int32", TypeFriendlyName = "int", }},
            { "System.Exception.InnerException", new() { Name = "InnerException", TypeName = "System.Exception", TypeFriendlyName = "Exception", }},
            { "System.Exception.Message", new() { Name = "Message", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "System.Exception.Source", new() { Name = "Source", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "System.Exception.StackTrace", new() { Name = "StackTrace", TypeName = "System.String", TypeFriendlyName = "string", }},
            { "System.Exception.TargetSite", new() { Name = "TargetSite", TypeName = "System.Reflection.MethodBase", TypeFriendlyName = "MethodBase", }},
        };

        // Build all of the documented methods
        Methods = new()
        {
            { "MudBlazor.AggregateDefinition`1.SimpleAvg", new() { Name = "SimpleAvg", TypeName = "AggregateDefinition`1", TypeFriendlyName = "AggregateDefinition<T>", Summary = @"Represents a basic average aggregate calculation.", Returns = @"An aggregate definition with a <see cref=""P:MudBlazor.AggregateDefinition`1.Type"" /> of <see cref=""F:MudBlazor.AggregateType.Avg"" /> and a <see cref=""P:MudBlazor.AggregateDefinition`1.DisplayFormat"" /> of <c>Average {value}</c>.", }},
            { "MudBlazor.AggregateDefinition`1.SimpleCount", new() { Name = "SimpleCount", TypeName = "AggregateDefinition`1", TypeFriendlyName = "AggregateDefinition<T>", Summary = @"Represents a basic count aggregate calculation.", Returns = @"An aggregate definition with a <see cref=""P:MudBlazor.AggregateDefinition`1.Type"" /> of <see cref=""F:MudBlazor.AggregateType.Count"" /> and a <see cref=""P:MudBlazor.AggregateDefinition`1.DisplayFormat"" /> of <c>Total {value}</c>.", }},
            { "MudBlazor.AggregateDefinition`1.SimpleMax", new() { Name = "SimpleMax", TypeName = "AggregateDefinition`1", TypeFriendlyName = "AggregateDefinition<T>", Summary = @"Represents a basic maximum aggregate calculation.", Returns = @"An aggregate definition with a <see cref=""P:MudBlazor.AggregateDefinition`1.Type"" /> of <see cref=""F:MudBlazor.AggregateType.Max"" /> and a <see cref=""P:MudBlazor.AggregateDefinition`1.DisplayFormat"" /> of <c>Max {value}</c>.", }},
            { "MudBlazor.AggregateDefinition`1.SimpleMin", new() { Name = "SimpleMin", TypeName = "AggregateDefinition`1", TypeFriendlyName = "AggregateDefinition<T>", Summary = @"Represents a basic minimum aggregate calculation.", Returns = @"An aggregate definition with a <see cref=""P:MudBlazor.AggregateDefinition`1.Type"" /> of <see cref=""F:MudBlazor.AggregateType.Min"" /> and a <see cref=""P:MudBlazor.AggregateDefinition`1.DisplayFormat"" /> of <c>Min {value}</c>.", }},
            { "MudBlazor.AggregateDefinition`1.SimpleSum", new() { Name = "SimpleSum", TypeName = "AggregateDefinition`1", TypeFriendlyName = "AggregateDefinition<T>", Summary = @"Represents a basic sum aggregate calculation.", Returns = @"An aggregate definition with a <see cref=""P:MudBlazor.AggregateDefinition`1.Type"" /> of <see cref=""F:MudBlazor.AggregateType.Sum"" /> and a <see cref=""P:MudBlazor.AggregateDefinition`1.DisplayFormat"" /> of <c>Sum {value}</c>.", }},
            { "MudBlazor.BaseMask.Backspace", new() { Name = "Backspace", TypeName = "Void", TypeFriendlyName = "", Summary = @"Triggers a backspace at the current cursor position.", Remarks = @"Has the same effect as pressing the <c>Backspace</c> key.", }},
            { "MudBlazor.BaseMask.Clear", new() { Name = "Clear", TypeName = "Void", TypeFriendlyName = "", Summary = @"Clears the text and selection.", }},
            { "MudBlazor.BaseMask.ConsolidateSelection", new() { Name = "ConsolidateSelection", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Adjusts the selection to be within the text.", Remarks = @"If the selection has zero length, the selection is deleted.  If the selection start is less than <c>0</c>, the start becomes <c>0</c>.  If the end is longer than the length of <see cref=""P:MudBlazor.BaseMask.Text"" />, the end becomes the text length.", }},
            { "MudBlazor.BaseMask.Delete", new() { Name = "Delete", TypeName = "Void", TypeFriendlyName = "", Summary = @"Triggers a delete at the current cursor position.", Remarks = @"Has the same effect as pressing the <c>Delete</c> key.", }},
            { "MudBlazor.BaseMask.DeleteSelection", new() { Name = "DeleteSelection", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Deletes the selected characters.", Parameters = 
                [
                    new() { Name = "align", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the text to the right of the selection will be shifted to the left.", }, 
                ],
            }},
            { "MudBlazor.BaseMask.GetCleanText", new() { Name = "GetCleanText", TypeName = "String", TypeFriendlyName = "string", Summary = @"The current text in the input, excluding delimiter or placeholder characters.", }},
            { "MudBlazor.BaseMask.Init", new() { Name = "Init", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Initialize all internal data structures. Can be called multiple times,will initialize only once. To re-initialize set _initialized to false.", }},
            { "MudBlazor.BaseMask.InitInternals", new() { Name = "InitInternals", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Initializes this mask's characters and delimiters.", }},
            { "MudBlazor.BaseMask.Insert", new() { Name = "Insert", TypeName = "Void", TypeFriendlyName = "", Summary = @"Inserts text at the current cursor position.", Parameters = 
                [
                    new() { Name = "input", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The characters to insert.", }, 
                ],
            }},
            { "MudBlazor.BaseMask.IsDelimiter", new() { Name = "IsDelimiter", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Summary = @"Gets whether the specified character is a mask character.", Returns = @"When <c>true</c>, the character is a delimiter.", Parameters = 
                [
                    new() { Name = "maskChar", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"The character to examine.", }, 
                ],
            }},
            { "MudBlazor.BaseMask.Refresh", new() { Name = "Refresh", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Reapplies parameters after they change, while preserving <see cref=""P:MudBlazor.BaseMask.Text"" />, <see cref=""P:MudBlazor.BaseMask.CaretPos"" />, and <see cref=""P:MudBlazor.BaseMask.Selection"" />.", }},
            { "MudBlazor.BaseMask.SetText", new() { Name = "SetText", TypeName = "Void", TypeFriendlyName = "", Summary = @"Overwrites the text without losing the cursor position.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text to set.", }, 
                ],
            }},
            { "MudBlazor.BaseMask.UpdateFrom", new() { Name = "UpdateFrom", TypeName = "Void", TypeFriendlyName = "", Summary = @"Copies the mask and mask characters from the specified mask.", Parameters = 
                [
                    new() { Name = "o", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", }, 
                ],
            }},
            { "MudBlazor.BaseMask.UpdateText", new() { Name = "UpdateText", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Overwrites the text and updates the cursor position.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text to set.", }, 
                ],
            }},
            { "MudBlazor.Block.Deconstruct", new() { Name = "Deconstruct", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "MaskChar", TypeName = "System.Char&", TypeFriendlyName = "Char&", }, 
                    new() { Name = "Min", TypeName = "System.Int32&", TypeFriendlyName = "ref int", }, 
                    new() { Name = "Max", TypeName = "System.Int32&", TypeFriendlyName = "ref int", }, 
                ],
            }},
            { "MudBlazor.BlockMask.BuildRegex", new() { Name = "BuildRegex", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Summary = @"Creates a regular expression from the specified blocks.", Returns = @"A progressive regular expression which represents all of the blocks.", Parameters = 
                [
                    new() { Name = "blocks", TypeName = "MudBlazor.Block[]", TypeFriendlyName = "Block[]", Summary = @"The list of blocks to combine into an expression.", }, 
                ],
            }},
            { "MudBlazor.BlockMask.InitInternals", new() { Name = "InitInternals", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Initializes this mask's characters and delimiters.", }},
            { "MudBlazor.BlockMask.InitRegex", new() { Name = "InitRegex", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Initializes the regular expression.", }},
            { "MudBlazor.BlockMask.UpdateFrom", new() { Name = "UpdateFrom", TypeName = "Void", TypeFriendlyName = "", Summary = @"Copies the mask and mask characters from the specified mask.", Parameters = 
                [
                    new() { Name = "other", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Summary = @"The mask to copy from.", }, 
                ],
            }},
            { "MudBlazor.BreadcrumbItem.<Clone>$", new() { Name = "<Clone>$", TypeName = "BreadcrumbItem", TypeFriendlyName = "BreadcrumbItem", }},
            { "MudBlazor.BreadcrumbItem.PrintMembers", new() { Name = "PrintMembers", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "builder", TypeName = "System.Text.StringBuilder", TypeFriendlyName = "StringBuilder", }, 
                ],
            }},
            { "MudBlazor.CollectionComparer`1.CombineHashCodes", new() { Name = "CombineHashCodes", TypeName = "Int32", TypeFriendlyName = "int", Parameters = 
                [
                    new() { Name = "hashCodes", TypeName = "System.Collections.Generic.IEnumerable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "IEnumerable<int>", }, 
                ],
            }},
            { "MudBlazor.Column`1.HideAsync", new() { Name = "HideAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Hides this column.", }},
            { "MudBlazor.Column`1.ShowAsync", new() { Name = "ShowAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Shows this column.", }},
            { "MudBlazor.Column`1.ToggleAsync", new() { Name = "ToggleAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Hides or shows this column.", }},
            { "MudBlazor.Components.Highlighter.Splitter.GetFragments", new() { Name = "GetFragments", TypeName = "Memory`1", TypeFriendlyName = "Memory<string>", Summary = @"Splits text into fragments based on text to be highlighted.", Returns = @"A block of memory with the matched text to highlight.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text to examine.", }, 
                    new() { Name = "highlightedText", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text to be highlighted.", }, 
                    new() { Name = "highlightedTexts", TypeName = "System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "IEnumerable<string>", Summary = @"The multiple texts to be highlighted.", }, 
                    new() { Name = "regex", TypeName = "System.String&", TypeFriendlyName = "ref string", Summary = @"The regular expression used to split text into fragments.", }, 
                    new() { Name = "caseSensitive", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Uses a case-sensitive check for highlighted text.", }, 
                    new() { Name = "untilNextBoundary", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Highlights text until the next regular expression boundary.", }, 
                ],
            }},
            { "MudBlazor.Converter`2.Get", new() { Name = "Get", TypeName = "T", TypeFriendlyName = "T", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", }, 
                ],
            }},
            { "MudBlazor.Converter`2.Set", new() { Name = "Set", TypeName = "Nullable`1", TypeFriendlyName = "bool?", Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.Converter`2.UpdateGetError", new() { Name = "UpdateGetError", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "msg", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.Converter`2.UpdateSetError", new() { Name = "UpdateSetError", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "msg", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Get", new() { Name = "Get", TypeName = "DateTime", TypeFriendlyName = "DateTime", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Set", new() { Name = "Set", TypeName = "String", TypeFriendlyName = "string", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateGetError", new() { Name = "UpdateGetError", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "msg", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateSetError", new() { Name = "UpdateSetError", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "msg", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Get", new() { Name = "Get", TypeName = "Nullable`1", TypeFriendlyName = "DateTime?", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Set", new() { Name = "Set", TypeName = "String", TypeFriendlyName = "string", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", }, 
                ],
            }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateGetError", new() { Name = "UpdateGetError", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "msg", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateSetError", new() { Name = "UpdateSetError", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "msg", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.Converters.DateFormat", new() { Name = "DateFormat", TypeName = "DateConverter", TypeFriendlyName = "DateConverter", Parameters = 
                [
                    new() { Name = "format", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.DataGridRowValidator.Validate", new() { Name = "Validate", TypeName = "Void", TypeFriendlyName = "", Summary = @"Checks this row for any validation errors.", }},
            { "MudBlazor.DateMask.ModifyFinalText", new() { Name = "ModifyFinalText", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Summary = @"Adjusts the input to be valid for special situations, such as when the last character input results in an invalid date.", Remarks = @"Only takes effect for complete dates.<br />For example: for mask <c>MM/dd/yyyy</c>, text of <c>02/29/202_</c>, and a character input of <c>3</c>, the resulting date <c>02/29/2023</c> would be invalid because 2023 is not a leap year.<br />Another example: for mask <c>MM/dd/yyyy</c>, text of <c>0_/31/2023</c>, and a character input of <c>4</c>, the resulting date <c>04/31/2023</c> would be invalid because April 31st, 2023 does not exist.<br />", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.DateMask.ModifyPartiallyAlignedMask", new() { Name = "ModifyPartiallyAlignedMask", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "mask", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "maskOffset", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                    new() { Name = "textIndex", TypeName = "System.Int32&", TypeFriendlyName = "ref int", }, 
                    new() { Name = "maskIndex", TypeName = "System.Int32&", TypeFriendlyName = "ref int", }, 
                    new() { Name = "alignedText", TypeName = "System.String&", TypeFriendlyName = "ref string", }, 
                ],
            }},
            { "MudBlazor.DateMask.UpdateFrom", new() { Name = "UpdateFrom", TypeName = "Void", TypeFriendlyName = "", Summary = @"Copies the mask and mask characters from the specified mask.", Parameters = 
                [
                    new() { Name = "other", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Summary = @"The mask to copy from.", }, 
                ],
            }},
            { "MudBlazor.DateRange.ToIsoDateString", new() { Name = "ToIsoDateString", TypeName = "String", TypeFriendlyName = "string", Summary = @"Formats this range as an ISO 8601 string.", Returns = @"The formatted string.", }},
            { "MudBlazor.DateRange.TryParse", new() { Name = "TryParse", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Parses the specified string value into a date range.", Returns = @"<c>true</c> if the string was successfully interpreted as a date.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"A string with both the start and end dates.", }, 
                    new() { Name = "converter", TypeName = "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<DateTime?, string>", Summary = @"The converter for parsing string values.", }, 
                    new() { Name = "date", TypeName = "MudBlazor.DateRange&", TypeFriendlyName = "DateRange&", Summary = @"The result of the parse.", }, 
                ],
            }},
            { "MudBlazor.DefaultConverter`1.ConvertFromString", new() { Name = "ConvertFromString", TypeName = "T", TypeFriendlyName = "T", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.DefaultConverter`1.ConvertToString", new() { Name = "ConvertToString", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Parameters = 
                [
                    new() { Name = "arg", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.DefaultConverter`1.IsNullableEnum", new() { Name = "IsNullableEnum", TypeName = "Boolean", TypeFriendlyName = "bool", Parameters = 
                [
                    new() { Name = "t", TypeName = "System.Type", TypeFriendlyName = "Type", }, 
                ],
            }},
            { "MudBlazor.DefaultLocalizationInterceptor.Handle", new() { Name = "Handle", TypeName = "LocalizedString", TypeFriendlyName = "LocalizedString", Summary = @"Retrieves the translation corresponding to the provided translation key.", Remarks = @"The value of  <see cref=""P:Microsoft.Extensions.Localization.LocalizedString.ResourceNotFound"" /> should be <c>true</c> if no translation is available for the specified key.", Returns = @"The string resource as a <see cref=""T:Microsoft.Extensions.Localization.LocalizedString"" />.", Parameters = 
                [
                    new() { Name = "key", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the string resource.", }, 
                    new() { Name = "arguments", TypeName = "System.Object[]", TypeFriendlyName = "Object[]", Summary = @"The list of arguments to be passed to the string resource.", }, 
                ],
            }},
            { "MudBlazor.DefaultLocalizationInterceptor.TranslationWithFallback", new() { Name = "TranslationWithFallback", TypeName = "LocalizedString", TypeFriendlyName = "LocalizedString", IsProtected = true, Summary = @"Gets the string resource with the given name.", Remarks = @"This method is called when the default English translation is ignored or unavailable, and a custom MudLocalizer service implementation is registered.It attempts to use user-provided languages, falling back to the internal English translation if MudLocalizer is missing or no resource is found.", Returns = @"The string resource as a <see cref=""T:Microsoft.Extensions.Localization.LocalizedString"" />.", Parameters = 
                [
                    new() { Name = "key", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the string resource", }, 
                    new() { Name = "arguments", TypeName = "System.Object[]", TypeFriendlyName = "Object[]", Summary = @"The list of arguments to be passed to the string resource", }, 
                ],
            }},
            { "MudBlazor.DialogOptions.<Clone>$", new() { Name = "<Clone>$", TypeName = "DialogOptions", TypeFriendlyName = "DialogOptions", }},
            { "MudBlazor.DialogOptions.PrintMembers", new() { Name = "PrintMembers", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "builder", TypeName = "System.Text.StringBuilder", TypeFriendlyName = "StringBuilder", }, 
                ],
            }},
            { "MudBlazor.DialogParameters.Add", new() { Name = "Add", TypeName = "Void", TypeFriendlyName = "", Summary = @"Adds or updates a parameter.", Parameters = 
                [
                    new() { Name = "parameterName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the parameter.", }, 
                    new() { Name = "value", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The value to add or update.", }, 
                ],
            }},
            { "MudBlazor.DialogParameters.Get", new() { Name = "Get", TypeName = "T", TypeFriendlyName = "T", Summary = @"Gets an existing parameter.", Returns = @"The parameter value, if it exists.", Parameters = 
                [
                    new() { Name = "parameterName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the parameter to find.", }, 
                ],
            }},
            { "MudBlazor.DialogParameters.GetEnumerator", new() { Name = "GetEnumerator", TypeName = "IEnumerator`1", TypeFriendlyName = "IEnumerator<KeyValuePair<string, object>>", Summary = @"Gets an enumerator for all parameters.", Returns = @"An enumerator of <see cref=""T:System.Collections.Generic.KeyValuePair`2"" /> values.", }},
            { "MudBlazor.DialogParameters.TryGet", new() { Name = "TryGet", TypeName = "T", TypeFriendlyName = "T", Summary = @"Gets an existing parameter or a default value if nothing was found.", Returns = @"The parameter value, if it exists.", Parameters = 
                [
                    new() { Name = "parameterName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the parameter to find.", }, 
                ],
            }},
            { "MudBlazor.DialogParameters`1.Add", new() { Name = "Add", TypeName = "Void", TypeFriendlyName = "", Summary = @"Adds a parameter using a member expression.", Parameters = 
                [
                    new() { Name = "propertyExpression", TypeName = "", TypeFriendlyName = "Expression<Func<T, TParam>>", Summary = @"The property to add as a parameter.", }, 
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "TParam", Summary = @"The parameter value.", }, 
                ],
            }},
            { "MudBlazor.DialogParameters`1.Get", new() { Name = "Get", TypeName = "TParam", TypeFriendlyName = "TParam", Summary = @"Gets a parameter using a property expression.", Returns = @"The parameter value.", Parameters = 
                [
                    new() { Name = "propertyExpression", TypeName = "", TypeFriendlyName = "Expression<Func<T, TParam>>", Summary = @"The property to get as a parameter.", }, 
                ],
            }},
            { "MudBlazor.DialogParameters`1.TryGet", new() { Name = "TryGet", TypeName = "TParam", TypeFriendlyName = "TParam", Summary = @"Gets a parameter using a property expression or a default value if no parameter was found.", Returns = @"The parameter value.", Parameters = 
                [
                    new() { Name = "propertyExpression", TypeName = "", TypeFriendlyName = "Expression<Func<T, TParam>>", Summary = @"The property to get as a parameter.", }, 
                ],
            }},
            { "MudBlazor.DialogReference.Close", new() { Name = "Close", TypeName = "Void", TypeFriendlyName = "", Summary = @"Hides the dialog.", }},
            { "MudBlazor.DialogReference.Dismiss", new() { Name = "Dismiss", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Notifies that this dialog has been dismissed.", Returns = @"Returns <c>true</c> if the result was set successfully.", Parameters = 
                [
                    new() { Name = "result", TypeName = "MudBlazor.DialogResult", TypeFriendlyName = "DialogResult", Summary = @"The result of closing the dialog.", }, 
                ],
            }},
            { "MudBlazor.DialogReference.GetReturnValueAsync", new() { Name = "GetReturnValueAsync", TypeName = "Task`1", TypeFriendlyName = "Task<T>", Summary = @"Gets the result of closing the dialog.", Returns = @"The results of closing the dialog.", }},
            { "MudBlazor.DialogReference.InjectDialog", new() { Name = "InjectDialog", TypeName = "Void", TypeFriendlyName = "", Summary = @"Replaces the dialog with the specified reference.", Parameters = 
                [
                    new() { Name = "inst", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The new dialog to use.", }, 
                ],
            }},
            { "MudBlazor.DialogReference.InjectRenderFragment", new() { Name = "InjectRenderFragment", TypeName = "Void", TypeFriendlyName = "", Summary = @"Replaces the dialog content.", Parameters = 
                [
                    new() { Name = "rf", TypeName = "Microsoft.AspNetCore.Components.RenderFragment", TypeFriendlyName = "RenderFragment", Summary = @"The new content to use.", }, 
                ],
            }},
            { "MudBlazor.DialogResult.Cancel", new() { Name = "Cancel", TypeName = "DialogResult", TypeFriendlyName = "DialogResult", Summary = @"The result when the user clicks the cancel button.", Returns = @"The dialog result.", }},
            { "MudBlazor.DialogResult.Ok", new() { Name = "Ok", TypeName = "DialogResult", TypeFriendlyName = "DialogResult", Summary = @"The result when the user clicks the Ok button.", Returns = @"The dialog result.", Parameters = 
                [
                    new() { Name = "result", TypeName = "", TypeFriendlyName = "T", Summary = @"The value included.", }, 
                ],
            }},
            { "MudBlazor.DialogService.Close", new() { Name = "Close", TypeName = "Void", TypeFriendlyName = "", Summary = @"Hides an existing dialog.", Parameters = 
                [
                    new() { Name = "dialog", TypeName = "MudBlazor.IDialogReference", TypeFriendlyName = "IDialogReference", Summary = @"The reference of the dialog to hide.", }, 
                ],
            }},
            { "MudBlazor.DialogService.CreateReference", new() { Name = "CreateReference", TypeName = "IDialogReference", TypeFriendlyName = "IDialogReference", Summary = @"Creates a reference to a dialog.", Returns = @"The dialog reference.", }},
            { "MudBlazor.DialogService.Show", new() { Name = "Show", TypeName = "IDialogReference", TypeFriendlyName = "IDialogReference", Summary = @"Displays a dialog.", Returns = @"A reference to the dialog.", }},
            { "MudBlazor.DialogService.ShowAsync", new() { Name = "ShowAsync", TypeName = "Task`1", TypeFriendlyName = "Task<IDialogReference>", Summary = @"Displays a dialog.", Returns = @"A reference to the dialog.", }},
            { "MudBlazor.DialogService.ShowMessageBox", new() { Name = "ShowMessageBox", TypeName = "Task`1", TypeFriendlyName = "Task<bool?>", Summary = @"Shows a simple dialog with a title, message, and up to three custom buttons.", Returns = @"Returns <c>null</c> if the <c>Cancel</c> button was clicked, <c>true</c> if the <c>Yes</c> button was clicked, or <c>false</c> if the <c>No</c> button was clicked.", Parameters = 
                [
                    new() { Name = "title", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text at the top of the dialog.", }, 
                    new() { Name = "message", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The message displayed under the title.", }, 
                    new() { Name = "yesText", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text of the ""Yes"" button.  Defaults to <c>OK</c>.", }, 
                    new() { Name = "noText", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text of the ""No"" button.  Defaults to <c>null</c>.", }, 
                    new() { Name = "cancelText", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text of the ""Cancel"" button.  Defaults to <c>null</c>.", }, 
                    new() { Name = "options", TypeName = "MudBlazor.DialogOptions", TypeFriendlyName = "DialogOptions", Summary = @"The custom display options for the dialog.  Defaults to <c>null</c>.", }, 
                ],
            }},
            { "MudBlazor.EventUtil.AsNonRenderingEventHandler", new() { Name = "AsNonRenderingEventHandler", TypeName = "Action", TypeFriendlyName = "Action", Summary = @"Converts the provided <see cref=""T:System.Action"" /> callback into a non-rendering event handler.", Returns = @"A non-rendering event handler.", Parameters = 
                [
                    new() { Name = "component", TypeName = "Microsoft.AspNetCore.Components.ComponentBase", TypeFriendlyName = "ComponentBase", Summary = @"The component that handles exceptions.", }, 
                    new() { Name = "callback", TypeName = "System.Action", TypeFriendlyName = "Action", Summary = @"The action callback to be converted.", }, 
                ],
            }},
            { "MudBlazor.FieldType.Identify", new() { Name = "Identify", TypeName = "FieldType", TypeFriendlyName = "FieldType", Summary = @"Examines the <see cref=""P:MudBlazor.FieldType.InnerType"" /> to determine supported types.", Parameters = 
                [
                    new() { Name = "type", TypeName = "System.Type", TypeFriendlyName = "Type", }, 
                ],
            }},
            { "MudBlazor.FilterDefinition`1.Clone", new() { Name = "Clone", TypeName = "IFilterDefinition`1", TypeFriendlyName = "IFilterDefinition<T>", }},
            { "MudBlazor.FilterDefinition`1.GenerateFilterFunction", new() { Name = "GenerateFilterFunction", TypeName = "Func`2", TypeFriendlyName = "Func<T, bool>", Summary = @"Generates a function which performs the filter.", Returns = @"A function which performs the filter.", Parameters = 
                [
                    new() { Name = "filterOptions", TypeName = "MudBlazor.FilterOptions", TypeFriendlyName = "FilterOptions", Summary = @"Any options for generation, such as case sensitivity.", }, 
                ],
            }},
            { "MudBlazor.FilterExpressionGenerator.GenerateExpression", new() { Name = "GenerateExpression", TypeName = "Expression`1", TypeFriendlyName = "Expression<Func<T, bool>>", Summary = @"Creates a C# expression for the specified filter and options.", Returns = @"An expression which can be executed to perform a filter.", Parameters = 
                [
                    new() { Name = "filter", TypeName = "", TypeFriendlyName = "IFilterDefinition<T>", Summary = @"The filter definition used to generate the expression.", }, 
                    new() { Name = "filterOptions", TypeName = "MudBlazor.FilterOptions", TypeFriendlyName = "FilterOptions", Summary = @"Any options to apply such as case sensitivity.", }, 
                ],
            }},
            { "MudBlazor.Interop.BoundingClientRect.Clone", new() { Name = "Clone", TypeName = "BoundingClientRect", TypeFriendlyName = "BoundingClientRect", }},
            { "MudBlazor.KeyObserver.KeyDown", new() { Name = "KeyDown", TypeName = "IKeyDownObserver", TypeFriendlyName = "IKeyDownObserver", Summary = @"Creates an <see cref=""T:MudBlazor.IKeyDownObserver"" /> that invokes the specified asynchronous lambda function on key down events.", Returns = @"An instance of <see cref=""T:MudBlazor.IKeyDownObserver"" />.", Parameters = 
                [
                    new() { Name = "lambda", TypeName = "System.Func`2[[Microsoft.AspNetCore.Components.Web.KeyboardEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<KeyboardEventArgs, Task>", Summary = @"The lambda function to invoke on key down events.", }, 
                ],
            }},
            { "MudBlazor.KeyObserver.KeyDownIgnore", new() { Name = "KeyDownIgnore", TypeName = "IKeyDownObserver", TypeFriendlyName = "IKeyDownObserver", Summary = @"Gets an <see cref=""T:MudBlazor.IKeyDownObserver"" /> that ignores key down events.", Returns = @"An instance of <see cref=""T:MudBlazor.IKeyDownObserver"" /> that ignores key down events.", }},
            { "MudBlazor.KeyObserver.KeyUp", new() { Name = "KeyUp", TypeName = "IKeyUpObserver", TypeFriendlyName = "IKeyUpObserver", Summary = @"Creates an <see cref=""T:MudBlazor.IKeyUpObserver"" /> that invokes the specified asynchronous lambda function on key up events.", Returns = @"An instance of <see cref=""T:MudBlazor.IKeyUpObserver"" />.", Parameters = 
                [
                    new() { Name = "lambda", TypeName = "System.Func`2[[Microsoft.AspNetCore.Components.Web.KeyboardEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<KeyboardEventArgs, Task>", Summary = @"The lambda function to invoke on key up events.", }, 
                ],
            }},
            { "MudBlazor.KeyObserver.KeyUpIgnore", new() { Name = "KeyUpIgnore", TypeName = "IKeyUpObserver", TypeFriendlyName = "IKeyUpObserver", Summary = @"Gets an <see cref=""T:MudBlazor.IKeyUpObserver"" /> that ignores key up events.", Returns = @"An instance of <see cref=""T:MudBlazor.IKeyUpObserver"" /> that ignores key up events.", }},
            { "MudBlazor.MaskChar.Digit", new() { Name = "Digit", TypeName = "MaskChar", TypeFriendlyName = "MaskChar", Summary = @"Gets a mask character which allows any digit.", Returns = @"A character with a regular expression of <c>\d</c> for any digit.", Parameters = 
                [
                    new() { Name = "c", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"The mask character to create.", }, 
                ],
            }},
            { "MudBlazor.MaskChar.Letter", new() { Name = "Letter", TypeName = "MaskChar", TypeFriendlyName = "MaskChar", Summary = @"Gets a mask character which allows any letter (uppercase or lowercase).", Returns = @"A character with a regular expression of <c>\p{L}</c> for any letter.", Parameters = 
                [
                    new() { Name = "c", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"The mask character to create.", }, 
                ],
            }},
            { "MudBlazor.MaskChar.LetterOrDigit", new() { Name = "LetterOrDigit", TypeName = "MaskChar", TypeFriendlyName = "MaskChar", Summary = @"Gets a mask character which allows any letter (uppercase or lowercase) or any digit.", Returns = @"A character with a regular expression of <c>\p{L}|\d</c> for any letter or digit.", Parameters = 
                [
                    new() { Name = "c", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"The mask character to create.", }, 
                ],
            }},
            { "MudBlazor.MaskOption.Deconstruct", new() { Name = "Deconstruct", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "Id", TypeName = "System.String&", TypeFriendlyName = "ref string", }, 
                    new() { Name = "Mask", TypeName = "System.String&", TypeFriendlyName = "ref string", }, 
                    new() { Name = "Regex", TypeName = "System.String&", TypeFriendlyName = "ref string", }, 
                ],
            }},
            { "MudBlazor.MudAutocomplete`1.BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Releases focus from this Autocomplete.", }},
            { "MudBlazor.MudAutocomplete`1.ClearAsync", new() { Name = "ClearAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Resets the Text and Value, and closes the drop-down if it is open.", }},
            { "MudBlazor.MudAutocomplete`1.CloseMenuAsync", new() { Name = "CloseMenuAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Closes the drop-down of items.", }},
            { "MudBlazor.MudAutocomplete`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudAutocomplete`1.FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Sets focus to this Autocomplete.", }},
            { "MudBlazor.MudAutocomplete`1.GetAutocomplete", new() { Name = "GetAutocomplete", TypeName = "Object", TypeFriendlyName = "object", IsProtected = true, Summary = @"Returns a value for the <c>autocomplete</c> attribute, either supplied by default or the one specified in the attribute overrides.", }},
            { "MudBlazor.MudAutocomplete`1.GetListItemClassname", new() { Name = "GetListItemClassname", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Parameters = 
                [
                    new() { Name = "isSelected", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudAutocomplete`1.OpenMenuAsync", new() { Name = "OpenMenuAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens the drop-down of items.", Remarks = @"Will have no effect if the autocomplete is disabled or read-only.", }},
            { "MudBlazor.MudAutocomplete`1.ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudAutocomplete`1.SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects all the current text within the Autocomplete text box.", }},
            { "MudBlazor.MudAutocomplete`1.SelectOptionAsync", new() { Name = "SelectOptionAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Changes the currently selected item to the specified value.", Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", Summary = @"The value to set.", }, 
                ],
            }},
            { "MudBlazor.MudAutocomplete`1.SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects a portion of the text within the Autocomplete text box.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudAutocomplete`1.ToggleMenuAsync", new() { Name = "ToggleMenuAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens or closes the drop-down of items depending on whether it was closed or open.", Remarks = @"Will have no effect if the autocomplete is disabled or read-only.", }},
            { "MudBlazor.MudAutocomplete`1.UpdateTextPropertyAsync", new() { Name = "UpdateTextPropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudAutocomplete`1.UpdateValuePropertyAsync", new() { Name = "UpdateValuePropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudBaseButton.FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Obtains focus for this button.", }},
            { "MudBlazor.MudBaseButton.GetClickPropagation", new() { Name = "GetClickPropagation", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudBaseButton.GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudBaseButton.GetRel", new() { Name = "GetRel", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBaseButton.OnClickHandler", new() { Name = "OnClickHandler", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "ev", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.DateFormatChangedAsync", new() { Name = "DateFormatChangedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseDatePicker.DateFormat"" /> has changed.", Parameters = 
                [
                    new() { Name = "newFormat", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.FormatTitleDate", new() { Name = "FormatTitleDate", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Parameters = 
                [
                    new() { Name = "date", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.GetAbbreviatedDayNames", new() { Name = "GetAbbreviatedDayNames", TypeName = "IEnumerable`1", TypeFriendlyName = "IEnumerable<string>", IsProtected = true, Summary = @"return Mo, Tu, We, Th, Fr, Sa, Su in the right culture", }},
            { "MudBlazor.MudBaseDatePicker.GetCalendarStartOfMonth", new() { Name = "GetCalendarStartOfMonth", TypeName = "DateTime", TypeFriendlyName = "DateTime", IsProtected = true, }},
            { "MudBlazor.MudBaseDatePicker.GetCalendarYear", new() { Name = "GetCalendarYear", TypeName = "Int32", TypeFriendlyName = "int", IsProtected = true, Summary = @"Converts gregorian date into whatever year it is in the provided culture", Returns = @"Year according to culture", Parameters = 
                [
                    new() { Name = "yearDate", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", Summary = @"Gregorian Date", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.GetDayClasses", new() { Name = "GetDayClasses", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Parameters = 
                [
                    new() { Name = "month", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                    new() { Name = "day", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.GetFirstDayOfWeek", new() { Name = "GetFirstDayOfWeek", TypeName = "DayOfWeek", TypeFriendlyName = "DayOfWeek", IsProtected = true, }},
            { "MudBlazor.MudBaseDatePicker.GetFormattedYearString", new() { Name = "GetFormattedYearString", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBaseDatePicker.GetMonthEnd", new() { Name = "GetMonthEnd", TypeName = "DateTime", TypeFriendlyName = "DateTime", IsProtected = true, Summary = @"Get the last of the month to display", Parameters = 
                [
                    new() { Name = "month", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.GetMonthName", new() { Name = "GetMonthName", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Parameters = 
                [
                    new() { Name = "month", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.GetMonthStart", new() { Name = "GetMonthStart", TypeName = "DateTime", TypeFriendlyName = "DateTime", IsProtected = true, Summary = @"Get the first of the month to display", Parameters = 
                [
                    new() { Name = "month", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.GetNextView", new() { Name = "GetNextView", TypeName = "Nullable`1", TypeFriendlyName = "OpenTo?", IsProtected = true, }},
            { "MudBlazor.MudBaseDatePicker.GetTitleDateString", new() { Name = "GetTitleDateString", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBaseDatePicker.GetWeek", new() { Name = "GetWeek", TypeName = "IEnumerable`1", TypeFriendlyName = "IEnumerable<DateTime>", IsProtected = true, Summary = @"Gets the n-th week of the currently displayed month.", Parameters = 
                [
                    new() { Name = "month", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"offset from _picker_month", }, 
                    new() { Name = "index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"between 0 and 4", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.OnDayClickedAsync", new() { Name = "OnDayClickedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"User clicked on a day", Parameters = 
                [
                    new() { Name = "dateTime", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.OnMonthClicked", new() { Name = "OnMonthClicked", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"user clicked on a month", Parameters = 
                [
                    new() { Name = "month", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.OnMonthSelectedAsync", new() { Name = "OnMonthSelectedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"user clicked on a month", Parameters = 
                [
                    new() { Name = "month", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.OnPickerOpenedAsync", new() { Name = "OnPickerOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudBaseDatePicker.OnYearClickedAsync", new() { Name = "OnYearClickedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"user clicked on a year", Parameters = 
                [
                    new() { Name = "year", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.ScrollToYear", new() { Name = "ScrollToYear", TypeName = "Void", TypeFriendlyName = "", Summary = @"Scrolls to the current year.", }},
            { "MudBlazor.MudBaseDatePicker.SetCulture", new() { Name = "SetCulture", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", }, 
                ],
            }},
            { "MudBlazor.MudBaseDatePicker.SubmitAndCloseAsync", new() { Name = "SubmitAndCloseAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1.BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, releases focus from this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudBaseInput`1.FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, obtains focus for this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudBaseInput`1.ForceRender", new() { Name = "ForceRender", TypeName = "Void", TypeFriendlyName = "", Summary = @"Causes this input to be rerendered.", Parameters = 
                [
                    new() { Name = "forceTextUpdate", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> property will be updated before rendering.", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.ForceUpdate", new() { Name = "ForceUpdate", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Sets the value, values, and text, and calls validation.", Remarks = @"This method is typically called when the user has changed the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> or <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> programmatically.", Returns = @"A <see cref=""T:System.Threading.Tasks.Task"" /> object.", }},
            { "MudBlazor.MudBaseInput`1.GetAriaDescribedByString", new() { Name = "GetAriaDescribedByString", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1.GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1.GetHelperId", new() { Name = "GetHelperId", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1.GetReadOnlyState", new() { Name = "GetReadOnlyState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1.InvokeKeyDownAsync", new() { Name = "InvokeKeyDownAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "obj", TypeName = "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", TypeFriendlyName = "KeyboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.InvokeKeyUpAsync", new() { Name = "InvokeKeyUpAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "obj", TypeName = "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", TypeFriendlyName = "KeyboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1.SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudBaseInput`1.SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects a portion of the input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.SetConverter", new() { Name = "SetConverter", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "Converter<T, string>", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.SetCulture", new() { Name = "SetCulture", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.SetFormat", new() { Name = "SetFormat", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.SetTextAsync", new() { Name = "SetTextAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.SetValueAsync", new() { Name = "SetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                    new() { Name = "force", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.UpdateTextPropertyAsync", new() { Name = "UpdateTextPropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Occurs when the value has changed internally.", Remarks = @"This method is called when the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> property needs to be refreshed from current <see cref=""P:MudBlazor.MudBaseInput`1.Value"" />.", Parameters = 
                [
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.UpdateValuePropertyAsync", new() { Name = "UpdateValuePropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Occurs when the value has changed internally.", Remarks = @"This method is called when the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property needs to be refreshed from current <see cref=""P:MudBlazor.MudBaseInput`1.Text"" />.", Parameters = 
                [
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1.ValidateValue", new() { Name = "ValidateValue", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, releases focus from this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ForceRender", new() { Name = "ForceRender", TypeName = "Void", TypeFriendlyName = "", Summary = @"Causes this input to be rerendered.", Parameters = 
                [
                    new() { Name = "forceTextUpdate", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> property will be updated before rendering.", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ForceUpdate", new() { Name = "ForceUpdate", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Sets the value, values, and text, and calls validation.", Remarks = @"This method is typically called when the user has changed the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> or <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> programmatically.", Returns = @"A <see cref=""T:System.Threading.Tasks.Task"" /> object.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetAriaDescribedByString", new() { Name = "GetAriaDescribedByString", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetHelperId", new() { Name = "GetHelperId", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState", new() { Name = "GetReadOnlyState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeKeyDownAsync", new() { Name = "InvokeKeyDownAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "obj", TypeName = "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", TypeFriendlyName = "KeyboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeKeyUpAsync", new() { Name = "InvokeKeyUpAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "obj", TypeName = "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", TypeFriendlyName = "KeyboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter", new() { Name = "SetConverter", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "MudBlazor.Converter`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<string, string>", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture", new() { Name = "SetCulture", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFormat", new() { Name = "SetFormat", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync", new() { Name = "SetTextAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetValueAsync", new() { Name = "SetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                    new() { Name = "force", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateTextPropertyAsync", new() { Name = "UpdateTextPropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Occurs when the value has changed internally.", Remarks = @"This method is called when the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> property needs to be refreshed from current <see cref=""P:MudBlazor.MudBaseInput`1.Value"" />.", Parameters = 
                [
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateValuePropertyAsync", new() { Name = "UpdateValuePropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Occurs when the value has changed internally.", Remarks = @"This method is called when the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property needs to be refreshed from current <see cref=""P:MudBlazor.MudBaseInput`1.Text"" />.", Parameters = 
                [
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue", new() { Name = "ValidateValue", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudBaseItemsControl`1.AddItem", new() { Name = "AddItem", TypeName = "Void", TypeFriendlyName = "", Summary = @"When overridden, adds an item to the list.", Parameters = 
                [
                    new() { Name = "item", TypeName = "", TypeFriendlyName = "TChildComponent", Summary = @"The item to add.", }, 
                ],
            }},
            { "MudBlazor.MudBaseItemsControl`1.MoveTo", new() { Name = "MoveTo", TypeName = "Void", TypeFriendlyName = "", Summary = @"Changes the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> to the specified value.", Parameters = 
                [
                    new() { Name = "index", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudBaseItemsControl`1.Next", new() { Name = "Next", TypeName = "Void", TypeFriendlyName = "", Summary = @"Selects the next item.", Remarks = @"If the current <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> is the last item, the selection is changed to <c>0</c>.", }},
            { "MudBlazor.MudBaseItemsControl`1.Previous", new() { Name = "Previous", TypeName = "Void", TypeFriendlyName = "", Summary = @"Selects the previous item.", Remarks = @"If the current <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> is <c>0</c>, the selection is changed to the index of the last item.", }},
            { "MudBlazor.MudBaseItemsControl`1.SelectionChanged", new() { Name = "SelectionChanged", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> has changed.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].MoveTo", new() { Name = "MoveTo", TypeName = "Void", TypeFriendlyName = "", Summary = @"Changes the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> to the specified value.", Parameters = 
                [
                    new() { Name = "index", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Next", new() { Name = "Next", TypeName = "Void", TypeFriendlyName = "", Summary = @"Selects the next item.", Remarks = @"If the current <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> is the last item, the selection is changed to <c>0</c>.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Previous", new() { Name = "Previous", TypeName = "Void", TypeFriendlyName = "", Summary = @"Selects the previous item.", Remarks = @"If the current <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> is <c>0</c>, the selection is changed to the index of the last item.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AddItem", new() { Name = "AddItem", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "item", TypeName = "MudBlazor.MudTimelineItem", TypeFriendlyName = "MudTimelineItem", }, 
                ],
            }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].MoveTo", new() { Name = "MoveTo", TypeName = "Void", TypeFriendlyName = "", Summary = @"Changes the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> to the specified value.", Parameters = 
                [
                    new() { Name = "index", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Next", new() { Name = "Next", TypeName = "Void", TypeFriendlyName = "", Summary = @"Selects the next item.", Remarks = @"If the current <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> is the last item, the selection is changed to <c>0</c>.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Previous", new() { Name = "Previous", TypeName = "Void", TypeFriendlyName = "", Summary = @"Selects the previous item.", Remarks = @"If the current <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> is <c>0</c>, the selection is changed to the index of the last item.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectionChanged", new() { Name = "SelectionChanged", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> has changed.", }},
            { "MudBlazor.MudBooleanInput`1.ConvertPlacement", new() { Name = "ConvertPlacement", TypeName = "Placement", TypeFriendlyName = "Placement", IsProtected = true, Parameters = 
                [
                    new() { Name = "placement", TypeName = "MudBlazor.Placement", TypeFriendlyName = "Placement", }, 
                ],
            }},
            { "MudBlazor.MudBooleanInput`1.GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudBooleanInput`1.GetReadOnlyState", new() { Name = "GetReadOnlyState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudBooleanInput`1.HasValue", new() { Name = "HasValue", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Summary = @"A value is required, so if not checked we return ERROR.", Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.MudBooleanInput`1.OnChange", new() { Name = "OnChange", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.ChangeEventArgs", TypeFriendlyName = "ChangeEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudBooleanInput`1.SetBoolValueAsync", new() { Name = "SetBoolValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", }, 
                    new() { Name = "markAsTouched", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", }, 
                ],
            }},
            { "MudBlazor.MudBooleanInput`1.SetCheckedAsync", new() { Name = "SetCheckedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.MudBooleanInput`1.SetConverter", new() { Name = "SetConverter", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "Converter<T, bool?>", }, 
                ],
            }},
            { "MudBlazor.MudCarousel`1.AddItem", new() { Name = "AddItem", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "item", TypeName = "MudBlazor.MudCarouselItem", TypeFriendlyName = "MudCarouselItem", }, 
                ],
            }},
            { "MudBlazor.MudCarousel`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, }},
            { "MudBlazor.MudCarousel`1.SelectionChanged", new() { Name = "SelectionChanged", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Occurs when the <c>SelectedIndex</c> has changed.", }},
            { "MudBlazor.MudCategoryChartBase.GetNormalizedData", new() { Name = "GetNormalizedData", TypeName = "Double[]", TypeFriendlyName = "double[]", IsProtected = true, Summary = @"Scales the input data to the range between 0 and 1", }},
            { "MudBlazor.MudChartBase.ToS", new() { Name = "ToS", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Parameters = 
                [
                    new() { Name = "d", TypeName = "System.Double", TypeFriendlyName = "double", }, 
                    new() { Name = "format", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudCheckBox`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudCheckBox`1.HandleKeyDownAsync", new() { Name = "HandleKeyDownAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "obj", TypeName = "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", TypeFriendlyName = "KeyboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudCheckBox`1.OnChange", new() { Name = "OnChange", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.ChangeEventArgs", TypeFriendlyName = "ChangeEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudChip`1.GetAttributes", new() { Name = "GetAttributes", TypeName = "Dictionary`2", TypeFriendlyName = "Dictionary<string, object>", IsProtected = true, }},
            { "MudBlazor.MudChip`1.GetHtmlTag", new() { Name = "GetHtmlTag", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudChip`1.OnCloseAsync", new() { Name = "OnCloseAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "ev", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.ChangeMode", new() { Name = "ChangeMode", TypeName = "Void", TypeFriendlyName = "", Summary = @"Refreshes the current color change mode.", }},
            { "MudBlazor.MudColorPicker.ChangeView", new() { Name = "ChangeView", TypeName = "Void", TypeFriendlyName = "", Summary = @"Changes to the specified color selection view.", Parameters = 
                [
                    new() { Name = "value", TypeName = "MudBlazor.ColorPickerView", TypeFriendlyName = "ColorPickerView", Summary = @"The new view to display.", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.SetAlpha", new() { Name = "SetAlpha", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the transparency channel of the selected color.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"A value between <c>0.0</c> (fully transparent) and <c>1.0</c> (solid).", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.SetB", new() { Name = "SetB", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the blue channel of the selected color.", Remarks = @"Often used with <see cref=""M:MudBlazor.MudColorPicker.SetR(System.Int32)"" /> and <see cref=""M:MudBlazor.MudColorPicker.SetG(System.Int32)"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"A value between <c>0</c> (no blue) and <c>255</c> (max blue).", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.SetG", new() { Name = "SetG", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the green channel of the selected color.", Remarks = @"Often used with <see cref=""M:MudBlazor.MudColorPicker.SetR(System.Int32)"" /> and <see cref=""M:MudBlazor.MudColorPicker.SetB(System.Int32)"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"A value between <c>0</c> (no green) and <c>255</c> (max green).", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.SetH", new() { Name = "SetH", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the hue channel of the selected color.", Remarks = @"Often used with <see cref=""M:MudBlazor.MudColorPicker.SetS(System.Double)"" /> and <see cref=""M:MudBlazor.MudColorPicker.SetL(System.Double)"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"A value between <c>0.0</c> and <c>360.0</c>, in degrees.", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.SetInputString", new() { Name = "SetInputString", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the selected color to the specified value.", Parameters = 
                [
                    new() { Name = "input", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"A string value formatted as hexadecimal (<c>#FF0000</c>), RGB (<c>rgb(255,0,0)</c>), or RGBA (<c>rgba(255,0,0,255)</c>.", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.SetL", new() { Name = "SetL", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the lightness channel of the selected color.", Remarks = @"Often used with <see cref=""M:MudBlazor.MudColorPicker.SetH(System.Double)"" /> and <see cref=""M:MudBlazor.MudColorPicker.SetS(System.Double)"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"A value between <c>0.0</c> (darkest/black) and <c>1.0</c> (brightest/white).", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.SetR", new() { Name = "SetR", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the red channel of the selected color.", Remarks = @"Often used with <see cref=""M:MudBlazor.MudColorPicker.SetG(System.Int32)"" /> and <see cref=""M:MudBlazor.MudColorPicker.SetB(System.Int32)"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"A value between <c>0</c> (no red) and <c>255</c> (max red).", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.SetS", new() { Name = "SetS", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the saturation channel of the selected color.", Remarks = @"Often used with <see cref=""M:MudBlazor.MudColorPicker.SetH(System.Double)"" /> and <see cref=""M:MudBlazor.MudColorPicker.SetL(System.Double)"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"A value between <c>0.0</c> (no saturation) and <c>1.0</c> (max saturation).", }, 
                ],
            }},
            { "MudBlazor.MudColorPicker.StringValueChangedAsync", new() { Name = "StringValueChangedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.AddFilter", new() { Name = "AddFilter", TypeName = "Void", TypeFriendlyName = "", Summary = @"Occurs when the ""Add Filter"" button is pressed.", }},
            { "MudBlazor.MudDataGrid`1.AddFilterAsync", new() { Name = "AddFilterAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Adds the specified filter to the list of filters.", Parameters = 
                [
                    new() { Name = "definition", TypeName = "", TypeFriendlyName = "IFilterDefinition<T>", Summary = @"The filter to add.", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.CancelEditingItemAsync", new() { Name = "CancelEditingItemAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Cancels the current editing of an item.", }},
            { "MudBlazor.MudDataGrid`1.ClearFiltersAsync", new() { Name = "ClearFiltersAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Removes all filters from all columns.", }},
            { "MudBlazor.MudDataGrid`1.CollapseAllGroups", new() { Name = "CollapseAllGroups", TypeName = "Void", TypeFriendlyName = "", Summary = @"Collapses all groups.", Remarks = @"Applies when <see cref=""P:MudBlazor.MudDataGrid`1.Groupable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudDataGrid`1.ExpandAllGroups", new() { Name = "ExpandAllGroups", TypeName = "Void", TypeFriendlyName = "", Summary = @"Expands all groups.", Remarks = @"Applies when <see cref=""P:MudBlazor.MudDataGrid`1.Groupable"" /> is <c>true</c>.", }},
            { "MudBlazor.MudDataGrid`1.ExtendSortAsync", new() { Name = "ExtendSortAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Adds or replaces a sort behavior depending on the <see cref=""P:MudBlazor.MudDataGrid`1.SortMode"" />.", Remarks = @"When the <see cref=""P:MudBlazor.MudDataGrid`1.SortMode"" /> is <see cref=""F:MudBlazor.SortMode.Single"" />, this method replaces the sort column.  Otherwise, this sort is appended to any existing sort column.", Parameters = 
                [
                    new() { Name = "field", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The field to sort.", }, 
                    new() { Name = "direction", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", Summary = @"The direction to sort results.", }, 
                    new() { Name = "sortFunc", TypeName = "", TypeFriendlyName = "Func<T, object>", Summary = @"The function which sorts results.", }, 
                    new() { Name = "comparer", TypeName = "System.Collections.Generic.IComparer`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "IComparer<object>", Summary = @"The comparer used for custom comparisons.", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.GetFilteredItemsCount", new() { Name = "GetFilteredItemsCount", TypeName = "Int32", TypeFriendlyName = "int", Summary = @"Gets the total count of filtered items in the data grid.", Returns = @"The number of items remaining after applying filters.  When <see cref=""P:MudBlazor.MudDataGrid`1.ServerData"" /> is in use, the <see cref=""P:MudBlazor.GridData`1.TotalItems"" /> value is returned.", }},
            { "MudBlazor.MudDataGrid`1.GetItemsOfPage", new() { Name = "GetItemsOfPage", TypeName = "IEnumerable`1", TypeFriendlyName = "IEnumerable<T>", IsProtected = true, Parameters = 
                [
                    new() { Name = "page", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                    new() { Name = "pageSize", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.GroupItems", new() { Name = "GroupItems", TypeName = "Void", TypeFriendlyName = "", Summary = @"Performs grouping of the current items.", Remarks = @"Applies when <see cref=""P:MudBlazor.MudDataGrid`1.Groupable"" /> is <c>true</c>.", Parameters = 
                [
                    new() { Name = "noStateChange", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Defaults to <c>false</c>.  When <c>true</c>, calls to <c>StateHasChanged</c> will not occur.", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.HideColumnsPanel", new() { Name = "HideColumnsPanel", TypeName = "Void", TypeFriendlyName = "", Summary = @"Hides the columns panel.", }},
            { "MudBlazor.MudDataGrid`1.NavigateTo", new() { Name = "NavigateTo", TypeName = "Void", TypeFriendlyName = "", Summary = @"Navigates to a page when this grid has a <see cref=""T:MudBlazor.MudDataGridPager`1"" />.", Parameters = 
                [
                    new() { Name = "page", TypeName = "MudBlazor.Page", TypeFriendlyName = "Page", Summary = @"The page to navigate to.", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.OpenFilters", new() { Name = "OpenFilters", TypeName = "Void", TypeFriendlyName = "", Summary = @"Opens the filter panel.", }},
            { "MudBlazor.MudDataGrid`1.ReloadServerData", new() { Name = "ReloadServerData", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Reloads grid data by calling the <see cref=""P:MudBlazor.MudDataGrid`1.ServerData"" /> function.", }},
            { "MudBlazor.MudDataGrid`1.RemoveSortAsync", new() { Name = "RemoveSortAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Removes a sort behavior from the list of sort behaviors.", Parameters = 
                [
                    new() { Name = "field", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the field to remove.", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.SetDefaultFilterDefinition", new() { Name = "SetDefaultFilterDefinition", TypeName = "Void", TypeFriendlyName = "", Summary = @"Specifies the default <see cref=""T:MudBlazor.IFilterDefinition`1"" /> to be used by <see cref=""M:MudBlazor.MudDataGrid`1.AddFilter"" /> and <see cref=""P:MudBlazor.Column`1.FilterContext"" />.", }},
            { "MudBlazor.MudDataGrid`1.SetEditingItemAsync", new() { Name = "SetEditingItemAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Starts editing for the specified item.", Parameters = 
                [
                    new() { Name = "item", TypeName = "", TypeFriendlyName = "T", Summary = @"The item to edit.", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.SetRowsPerPageAsync", new() { Name = "SetRowsPerPageAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Sets the <see cref=""P:MudBlazor.MudDataGrid`1.RowsPerPage"" /> when this grid contains a <see cref=""T:MudBlazor.MudDataGridPager`1"" />.", Parameters = 
                [
                    new() { Name = "size", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The new page size.", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.SetSelectedItemAsync", new() { Name = "SetSelectedItemAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Set the currently selected item in the data grid.", Remarks = @"When <see cref=""P:MudBlazor.MudDataGrid`1.MultiSelection"" /> is <c>true</c> and <see cref=""P:MudBlazor.MudDataGrid`1.SelectOnRowClick"" /> is <c>true</c>, the <see cref=""P:MudBlazor.MudDataGrid`1.SelectedItems"" /> are updated.  The <see cref=""P:MudBlazor.MudDataGrid`1.SelectedItem"" /> is also updated.", Parameters = 
                [
                    new() { Name = "item", TypeName = "", TypeFriendlyName = "T", Summary = @"The item to select.", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.SetSortAsync", new() { Name = "SetSortAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Replaces the sorting behavior for a field.", Parameters = 
                [
                    new() { Name = "field", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The field to sort.", }, 
                    new() { Name = "direction", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", Summary = @"The direction to sort results.", }, 
                    new() { Name = "sortFunc", TypeName = "", TypeFriendlyName = "Func<T, object>", Summary = @"The function which sorts results.", }, 
                    new() { Name = "comparer", TypeName = "System.Collections.Generic.IComparer`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "IComparer<object>", Summary = @"The comparer used for custom comparisons.", }, 
                ],
            }},
            { "MudBlazor.MudDataGrid`1.ShowColumnsPanel", new() { Name = "ShowColumnsPanel", TypeName = "Void", TypeFriendlyName = "", Summary = @"Shows a panel that lets you show, hide, filter, group, sort and re-arrange columns.", }},
            { "MudBlazor.MudDataGrid`1.ToggleFiltersMenu", new() { Name = "ToggleFiltersMenu", TypeName = "Void", TypeFriendlyName = "", Summary = @"Opens or closes the filter panel.", }},
            { "MudBlazor.MudDatePicker.ClearAsync", new() { Name = "ClearAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Hides this picker.", Parameters = 
                [
                    new() { Name = "close", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the picker will be closed if <see cref=""P:MudBlazor.MudPicker`1.PickerVariant"" /> is not <see cref=""F:MudBlazor.PickerVariant.Static"" />.", }, 
                ],
            }},
            { "MudBlazor.MudDatePicker.DateFormatChangedAsync", new() { Name = "DateFormatChangedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "newFormat", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudDatePicker.GetCalendarStartOfMonth", new() { Name = "GetCalendarStartOfMonth", TypeName = "DateTime", TypeFriendlyName = "DateTime", IsProtected = true, }},
            { "MudBlazor.MudDatePicker.GetCalendarYear", new() { Name = "GetCalendarYear", TypeName = "Int32", TypeFriendlyName = "int", IsProtected = true, Parameters = 
                [
                    new() { Name = "yearDate", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudDatePicker.GetDayClasses", new() { Name = "GetDayClasses", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Parameters = 
                [
                    new() { Name = "month", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                    new() { Name = "day", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudDatePicker.GetTitleDateString", new() { Name = "GetTitleDateString", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDatePicker.GoToDate", new() { Name = "GoToDate", TypeName = "Void", TypeFriendlyName = "", Summary = @"Scrolls to the date.", }},
            { "MudBlazor.MudDatePicker.OnDayClickedAsync", new() { Name = "OnDayClickedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "dateTime", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudDatePicker.OnMonthSelectedAsync", new() { Name = "OnMonthSelectedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"user clicked on a month", Parameters = 
                [
                    new() { Name = "month", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudDatePicker.OnOpenedAsync", new() { Name = "OnOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudDatePicker.OnYearClickedAsync", new() { Name = "OnYearClickedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"user clicked on a year", Parameters = 
                [
                    new() { Name = "year", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudDatePicker.SetDateAsync", new() { Name = "SetDateAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "date", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", }, 
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudDatePicker.StringValueChangedAsync", new() { Name = "StringValueChangedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.ClearAsync", new() { Name = "ClearAsync", TypeName = "Task", TypeFriendlyName = "Task", Parameters = 
                [
                    new() { Name = "close", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.DateFormatChangedAsync", new() { Name = "DateFormatChangedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "newFormat", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.FocusEndAsync", new() { Name = "FocusEndAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Focuses the end input.", }},
            { "MudBlazor.MudDateRangePicker.FocusStartAsync", new() { Name = "FocusStartAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Focuses the start input.", }},
            { "MudBlazor.MudDateRangePicker.GetCalendarStartOfMonth", new() { Name = "GetCalendarStartOfMonth", TypeName = "DateTime", TypeFriendlyName = "DateTime", IsProtected = true, }},
            { "MudBlazor.MudDateRangePicker.GetCalendarYear", new() { Name = "GetCalendarYear", TypeName = "Int32", TypeFriendlyName = "int", IsProtected = true, Parameters = 
                [
                    new() { Name = "yearDate", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.GetDayClasses", new() { Name = "GetDayClasses", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Parameters = 
                [
                    new() { Name = "month", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                    new() { Name = "day", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.GetTitleDateString", new() { Name = "GetTitleDateString", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudDateRangePicker.HasValue", new() { Name = "HasValue", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.OnDayClickedAsync", new() { Name = "OnDayClickedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "dateTime", TypeName = "System.DateTime", TypeFriendlyName = "DateTime", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.OnOpenedAsync", new() { Name = "OnOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudDateRangePicker.OnPickerClosedAsync", new() { Name = "OnPickerClosedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudDateRangePicker.SelectEndAsync", new() { Name = "SelectEndAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the end input text.", }},
            { "MudBlazor.MudDateRangePicker.SelectRangeEndAsync", new() { Name = "SelectRangeEndAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects a portion of the end input text.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.SelectRangeStartAsync", new() { Name = "SelectRangeStartAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects a portion of the start input text.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.SelectStartAsync", new() { Name = "SelectStartAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the start input text.", }},
            { "MudBlazor.MudDateRangePicker.SetDateRangeAsync", new() { Name = "SetDateRangeAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "range", TypeName = "MudBlazor.DateRange", TypeFriendlyName = "DateRange", }, 
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudDateRangePicker.StringValueChangedAsync", new() { Name = "StringValueChangedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudDebouncedInput`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudDebouncedInput`1.OnChange", new() { Name = "OnChange", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudDebouncedInput`1.UpdateTextPropertyAsync", new() { Name = "UpdateTextPropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudDebouncedInput`1.UpdateValuePropertyAsync", new() { Name = "UpdateValuePropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudDialog.CloseAsync", new() { Name = "CloseAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"For inlined dialogs, hides this dialog.", Parameters = 
                [
                    new() { Name = "result", TypeName = "MudBlazor.DialogResult", TypeFriendlyName = "DialogResult", Summary = @"The optional data to include.", }, 
                ],
            }},
            { "MudBlazor.MudDialog.ShowAsync", new() { Name = "ShowAsync", TypeName = "Task`1", TypeFriendlyName = "Task<IDialogReference>", Summary = @"For inlined dialogs, shows this dialog.", Returns = @"The reference to the displayed instance of this dialog.", Parameters = 
                [
                    new() { Name = "title", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The title of this dialog.", }, 
                    new() { Name = "options", TypeName = "MudBlazor.DialogOptions", TypeFriendlyName = "DialogOptions", Summary = @"The options for this dialog.", }, 
                ],
            }},
            { "MudBlazor.MudDialogContainer.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, }},
            { "MudBlazor.MudDialogProvider.DismissAll", new() { Name = "DismissAll", TypeName = "Void", TypeFriendlyName = "", Summary = @"Hides all currently visible dialogs.", }},
            { "MudBlazor.MudDragAndDropItemTransaction`1.Cancel", new() { Name = "Cancel", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Cancels this transaction.", }},
            { "MudBlazor.MudDragAndDropItemTransaction`1.Commit", new() { Name = "Commit", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Commits this transaction.", }},
            { "MudBlazor.MudDropContainer`1.CancelTransaction", new() { Name = "CancelTransaction", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Cancels a drag-and-drop transaction.", }},
            { "MudBlazor.MudDropContainer`1.CommitTransaction", new() { Name = "CommitTransaction", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Completes a drag-and-drop transaction.", Parameters = 
                [
                    new() { Name = "dropZoneIdentifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique ID of the zone the item was dropped onto.", }, 
                    new() { Name = "reorderIsAllowed", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, items can be reordered.", }, 
                ],
            }},
            { "MudBlazor.MudDropContainer`1.GetTransactionCurrentZoneIdentifier", new() { Name = "GetTransactionCurrentZoneIdentifier", TypeName = "String", TypeFriendlyName = "string", Summary = @"Gets the unique ID of the zone where the item is currently hovering.", Returns = @"The unique ID of the zone.", }},
            { "MudBlazor.MudDropContainer`1.GetTransactionIndex", new() { Name = "GetTransactionIndex", TypeName = "Int32", TypeFriendlyName = "int", Summary = @"Gets the index of the zone the item is currently hovering over.", Returns = @"The index of the zone.", }},
            { "MudBlazor.MudDropContainer`1.GetTransactionItem", new() { Name = "GetTransactionItem", TypeName = "T", TypeFriendlyName = "T", Summary = @"Gets the item currently being dragged.", Returns = @"The item being dragged, or <c>null</c> of no drag is in progress.", }},
            { "MudBlazor.MudDropContainer`1.GetTransactionOriginZoneIdentifier", new() { Name = "GetTransactionOriginZoneIdentifier", TypeName = "String", TypeFriendlyName = "string", Summary = @"Gets the unique ID of the zone where the drag-and-drop started.", Returns = @"The unique ID of the zone.", }},
            { "MudBlazor.MudDropContainer`1.HasTransactionIndexChanged", new() { Name = "HasTransactionIndexChanged", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Gets whether the item is located over a different zone than the original zone.", Returns = @"When <c>true</c>, the item has moved from the original zone.", }},
            { "MudBlazor.MudDropContainer`1.IsItemMovedDownwards", new() { Name = "IsItemMovedDownwards", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Gets whether the current index of the zone is greater than the zone where the transaction started.", Returns = @"When <c>true</c>, the item's current zone index is higher than the original zone.", }},
            { "MudBlazor.MudDropContainer`1.IsOrigin", new() { Name = "IsOrigin", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Gets whether the specified zone is where the drag-and-drop transaction started.", Returns = @"When <c>true</c>, the zone is where the drag-and-drop transaction started.", Parameters = 
                [
                    new() { Name = "index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the zone to find.", }, 
                    new() { Name = "identifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique ID of the zone to fine.", }, 
                ],
            }},
            { "MudBlazor.MudDropContainer`1.IsTransactionOriginatedFromInside", new() { Name = "IsTransactionOriginatedFromInside", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Gets whether the item being dragged originated from the specified zone.", Returns = @"when <c>true</c>, the item was dragged from the specified zone.", Parameters = 
                [
                    new() { Name = "identifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique ID of the zone to find.", }, 
                ],
            }},
            { "MudBlazor.MudDropContainer`1.Refresh", new() { Name = "Refresh", TypeName = "Void", TypeFriendlyName = "", Summary = @"Refreshes the drop zone and all items within.", Remarks = @"When called, the <see cref=""E:MudBlazor.MudDropContainer`1.RefreshRequested"" /> event is raised.  This is typically used when adding items to the collection or changing values of items.", }},
            { "MudBlazor.MudDropContainer`1.StartTransaction", new() { Name = "StartTransaction", TypeName = "Void", TypeFriendlyName = "", Summary = @"Starts a new drag-and-drop operation.", Parameters = 
                [
                    new() { Name = "item", TypeName = "", TypeFriendlyName = "T", Summary = @"The item to drag.", }, 
                    new() { Name = "identifier", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The unique identifier for the item.", }, 
                    new() { Name = "index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the zone where the drag started.", }, 
                    new() { Name = "commitCallback", TypeName = "System.Func`1[[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<Task>", Summary = @"Occurs when the drag-and-drop has finished successfully.", }, 
                    new() { Name = "cancelCallback", TypeName = "System.Func`1[[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<Task>", Summary = @"Occurs when the drag-and-drop operation has been canceled.", }, 
                ],
            }},
            { "MudBlazor.MudDropContainer`1.TransactionInProgress", new() { Name = "TransactionInProgress", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Gets whether a drag-and-drop is in progress.", }},
            { "MudBlazor.MudDropContainer`1.UpdateTransactionIndex", new() { Name = "UpdateTransactionIndex", TypeName = "Void", TypeFriendlyName = "", Summary = @"Updates the index of the zone the item is being dragged over.", Parameters = 
                [
                    new() { Name = "index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the current zone.", }, 
                ],
            }},
            { "MudBlazor.MudExpansionPanel.CollapseAsync", new() { Name = "CollapseAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Hides the content in this panel.", }},
            { "MudBlazor.MudExpansionPanel.ExpandAsync", new() { Name = "ExpandAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Shows the content in this panel.", }},
            { "MudBlazor.MudExpansionPanel.ToggleExpansionAsync", new() { Name = "ToggleExpansionAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Shows or hides the content in this panel.", Remarks = @"If <see cref=""P:MudBlazor.MudExpansionPanel.Disabled"" /> is <c>true</c>, this method has no affect.", }},
            { "MudBlazor.MudExpansionPanels.CollapseAllAsync", new() { Name = "CollapseAllAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Hides the content of all panels.", }},
            { "MudBlazor.MudExpansionPanels.CollapseAllExceptAsync", new() { Name = "CollapseAllExceptAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Collapses all panels except the given one.", Parameters = 
                [
                    new() { Name = "panel", TypeName = "MudBlazor.MudExpansionPanel", TypeFriendlyName = "MudExpansionPanel", Summary = @"The panel to keep expanded.", }, 
                ],
            }},
            { "MudBlazor.MudExpansionPanels.ExpandAllAsync", new() { Name = "ExpandAllAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Shows the content of all panels.", }},
            { "MudBlazor.MudExpansionPanels.UpdateAllAsync", new() { Name = "UpdateAllAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Refreshes the expansion state of all panels.", }},
            { "MudBlazor.MudFileUpload`1.Activate", new() { Name = "Activate", TypeName = "Void", TypeFriendlyName = "", Summary = @"Opens the file picker.", Parameters = 
                [
                    new() { Name = "activator", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The object which raised the event.", }, 
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", Summary = @"The coordinates of the mouse when clicked.", }, 
                ],
            }},
            { "MudBlazor.MudFileUpload`1.ClearAsync", new() { Name = "ClearAsync", TypeName = "Task", TypeFriendlyName = "Task", }},
            { "MudBlazor.MudFileUpload`1.GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudFileUpload`1.OpenFilePickerAsync", new() { Name = "OpenFilePickerAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens the file picker.", }},
            { "MudBlazor.MudFileUpload`1.ReadValue", new() { Name = "ReadValue", TypeName = "T", TypeFriendlyName = "T", IsProtected = true, }},
            { "MudBlazor.MudFileUpload`1.WriteValueAsync", new() { Name = "WriteValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.MudForm.GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudForm.GetReadOnlyState", new() { Name = "GetReadOnlyState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudForm.OnEvaluateForm", new() { Name = "OnEvaluateForm", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudForm.ResetAsync", new() { Name = "ResetAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Resets all form controls and resets their validation state.", Remarks = @"Any existing value in any form input component will be cleared.", }},
            { "MudBlazor.MudForm.ResetTouched", new() { Name = "ResetTouched", TypeName = "Void", TypeFriendlyName = "", Summary = @"Marks all form input components as unchanged.", Remarks = @"When called, <see cref=""P:MudBlazor.MudForm.IsTouched"" /> becomes <c>false</c>.", }},
            { "MudBlazor.MudForm.ResetValidation", new() { Name = "ResetValidation", TypeName = "Void", TypeFriendlyName = "", Summary = @"Resets the validation state of all form controls.", Remarks = @"The values in each form input component will not be changed.", }},
            { "MudBlazor.MudForm.Validate", new() { Name = "Validate", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Forces a validation of all form controls (including in child forms).", Remarks = @"Validation will occur even if form controls haven't changed yet.", }},
            { "MudBlazor.MudFormComponent`2.BeginValidateAsync", new() { Name = "BeginValidateAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2.BeginValidationAfterAsync", new() { Name = "BeginValidationAfterAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "task", TypeName = "System.Threading.Tasks.Task", TypeFriendlyName = "Task", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudFormComponent`2.FieldChanged", new() { Name = "FieldChanged", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Notify the Form that a field has changed if SubscribeToParentForm is true", Parameters = 
                [
                    new() { Name = "newValue", TypeName = "System.Object", TypeFriendlyName = "object", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2.GetErrorText", new() { Name = "GetErrorText", TypeName = "String", TypeFriendlyName = "string", Summary = @"The current error or conversion error.", Returns = @"This property returns the value in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionErrorMessage"" />.", }},
            { "MudBlazor.MudFormComponent`2.HasValue", new() { Name = "HasValue", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2.OnConversionErrorOccurred", new() { Name = "OnConversionErrorOccurred", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "error", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2.ReadValue", new() { Name = "ReadValue", TypeName = "T", TypeFriendlyName = "T", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2.RegisterAsFormComponent", new() { Name = "RegisterAsFormComponent", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2.ResetAsync", new() { Name = "ResetAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Clears the input and any validation errors.", Remarks = @"When called, the <c>Value</c>, <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2.ResetValidation", new() { Name = "ResetValidation", TypeName = "Void", TypeFriendlyName = "", Summary = @"Clears any validation errors.", Remarks = @"When called, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2.ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2.SetConverter", new() { Name = "SetConverter", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "Converter<T, string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2.SetCulture", new() { Name = "SetCulture", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2.Validate", new() { Name = "Validate", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Causes validation to be performed for this input.", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, the input is validated via the function set in the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property.", }},
            { "MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember", new() { Name = "ValidateModelWithFullPathOfMember", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "System.Func`3[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<object, string, IEnumerable<string>>", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2.ValidateValue", new() { Name = "ValidateValue", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2.ValidateWithAttribute", new() { Name = "ValidateWithAttribute", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "attr", TypeName = "System.ComponentModel.DataAnnotations.ValidationAttribute", TypeFriendlyName = "ValidationAttribute", }, 
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2.ValidateWithFunc", new() { Name = "ValidateWithFunc", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "", TypeFriendlyName = "Func<T, bool>", }, 
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2.WriteValueAsync", new() { Name = "WriteValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync", new() { Name = "BeginValidateAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync", new() { Name = "BeginValidationAfterAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "task", TypeName = "System.Threading.Tasks.Task", TypeFriendlyName = "Task", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged", new() { Name = "FieldChanged", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Notify the Form that a field has changed if SubscribeToParentForm is true", Parameters = 
                [
                    new() { Name = "newValue", TypeName = "System.Object", TypeFriendlyName = "object", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText", new() { Name = "GetErrorText", TypeName = "String", TypeFriendlyName = "string", Summary = @"The current error or conversion error.", Returns = @"This property returns the value in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionErrorMessage"" />.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue", new() { Name = "HasValue", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred", new() { Name = "OnConversionErrorOccurred", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "error", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue", new() { Name = "ReadValue", TypeName = "MudColor", TypeFriendlyName = "MudColor", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent", new() { Name = "RegisterAsFormComponent", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync", new() { Name = "ResetAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Clears the input and any validation errors.", Remarks = @"When called, the <c>Value</c>, <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation", new() { Name = "ResetValidation", TypeName = "Void", TypeFriendlyName = "", Summary = @"Clears any validation errors.", Remarks = @"When called, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter", new() { Name = "SetConverter", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "MudBlazor.Converter`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<MudColor, string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture", new() { Name = "SetCulture", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate", new() { Name = "Validate", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Causes validation to be performed for this input.", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, the input is validated via the function set in the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property.", }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember", new() { Name = "ValidateModelWithFullPathOfMember", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "System.Func`3[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<object, string, IEnumerable<string>>", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue", new() { Name = "ValidateValue", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute", new() { Name = "ValidateWithAttribute", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "attr", TypeName = "System.ComponentModel.DataAnnotations.ValidationAttribute", TypeFriendlyName = "ValidationAttribute", }, 
                    new() { Name = "value", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc", new() { Name = "ValidateWithFunc", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "System.Func`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<MudColor, bool>", }, 
                    new() { Name = "value", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync", new() { Name = "WriteValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync", new() { Name = "BeginValidateAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync", new() { Name = "BeginValidationAfterAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "task", TypeName = "System.Threading.Tasks.Task", TypeFriendlyName = "Task", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged", new() { Name = "FieldChanged", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Notify the Form that a field has changed if SubscribeToParentForm is true", Parameters = 
                [
                    new() { Name = "newValue", TypeName = "System.Object", TypeFriendlyName = "object", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText", new() { Name = "GetErrorText", TypeName = "String", TypeFriendlyName = "string", Summary = @"The current error or conversion error.", Returns = @"This property returns the value in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionErrorMessage"" />.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue", new() { Name = "HasValue", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred", new() { Name = "OnConversionErrorOccurred", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "error", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue", new() { Name = "ReadValue", TypeName = "Nullable`1", TypeFriendlyName = "DateTime?", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent", new() { Name = "RegisterAsFormComponent", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync", new() { Name = "ResetAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Clears the input and any validation errors.", Remarks = @"When called, the <c>Value</c>, <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation", new() { Name = "ResetValidation", TypeName = "Void", TypeFriendlyName = "", Summary = @"Clears any validation errors.", Remarks = @"When called, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter", new() { Name = "SetConverter", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<DateTime?, string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate", new() { Name = "Validate", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Causes validation to be performed for this input.", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, the input is validated via the function set in the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember", new() { Name = "ValidateModelWithFullPathOfMember", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "System.Func`3[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<object, string, IEnumerable<string>>", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue", new() { Name = "ValidateValue", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute", new() { Name = "ValidateWithAttribute", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "attr", TypeName = "System.ComponentModel.DataAnnotations.ValidationAttribute", TypeFriendlyName = "ValidationAttribute", }, 
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc", new() { Name = "ValidateWithFunc", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "System.Func`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<DateTime?, bool>", }, 
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync", new() { Name = "WriteValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "DateTime?", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync", new() { Name = "BeginValidateAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync", new() { Name = "BeginValidationAfterAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "task", TypeName = "System.Threading.Tasks.Task", TypeFriendlyName = "Task", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged", new() { Name = "FieldChanged", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Notify the Form that a field has changed if SubscribeToParentForm is true", Parameters = 
                [
                    new() { Name = "newValue", TypeName = "System.Object", TypeFriendlyName = "object", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText", new() { Name = "GetErrorText", TypeName = "String", TypeFriendlyName = "string", Summary = @"The current error or conversion error.", Returns = @"This property returns the value in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionErrorMessage"" />.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue", new() { Name = "HasValue", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "TimeSpan?", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred", new() { Name = "OnConversionErrorOccurred", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "error", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue", new() { Name = "ReadValue", TypeName = "Nullable`1", TypeFriendlyName = "TimeSpan?", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent", new() { Name = "RegisterAsFormComponent", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync", new() { Name = "ResetAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Clears the input and any validation errors.", Remarks = @"When called, the <c>Value</c>, <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation", new() { Name = "ResetValidation", TypeName = "Void", TypeFriendlyName = "", Summary = @"Clears any validation errors.", Remarks = @"When called, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter", new() { Name = "SetConverter", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "MudBlazor.Converter`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Converter<TimeSpan?, string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture", new() { Name = "SetCulture", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Globalization.CultureInfo", TypeFriendlyName = "CultureInfo", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate", new() { Name = "Validate", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Causes validation to be performed for this input.", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, the input is validated via the function set in the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property.", }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember", new() { Name = "ValidateModelWithFullPathOfMember", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "System.Func`3[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<object, string, IEnumerable<string>>", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue", new() { Name = "ValidateValue", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute", new() { Name = "ValidateWithAttribute", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "attr", TypeName = "System.ComponentModel.DataAnnotations.ValidationAttribute", TypeFriendlyName = "ValidationAttribute", }, 
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "TimeSpan?", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc", new() { Name = "ValidateWithFunc", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "System.Func`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<TimeSpan?, bool>", }, 
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "TimeSpan?", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync", new() { Name = "WriteValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "TimeSpan?", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync", new() { Name = "BeginValidateAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync", new() { Name = "BeginValidationAfterAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "task", TypeName = "System.Threading.Tasks.Task", TypeFriendlyName = "Task", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged", new() { Name = "FieldChanged", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Notify the Form that a field has changed if SubscribeToParentForm is true", Parameters = 
                [
                    new() { Name = "newValue", TypeName = "System.Object", TypeFriendlyName = "object", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText", new() { Name = "GetErrorText", TypeName = "String", TypeFriendlyName = "string", Summary = @"The current error or conversion error.", Returns = @"This property returns the value in <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" /> or <see cref=""P:MudBlazor.MudFormComponent`2.ConversionErrorMessage"" />.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue", new() { Name = "HasValue", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred", new() { Name = "OnConversionErrorOccurred", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "error", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue", new() { Name = "ReadValue", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent", new() { Name = "RegisterAsFormComponent", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync", new() { Name = "ResetAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Clears the input and any validation errors.", Remarks = @"When called, the <c>Value</c>, <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation", new() { Name = "ResetValidation", TypeName = "Void", TypeFriendlyName = "", Summary = @"Clears any validation errors.", Remarks = @"When called, the <see cref=""P:MudBlazor.MudFormComponent`2.Error"" />, <see cref=""P:MudBlazor.MudFormComponent`2.ErrorText"" />, and <see cref=""P:MudBlazor.MudFormComponent`2.ValidationErrors"" /> properties are all reset.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate", new() { Name = "Validate", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Causes validation to be performed for this input.", Remarks = @"When using a <see cref=""T:MudBlazor.MudForm"" />, the input is validated via the function set in the <see cref=""P:MudBlazor.MudFormComponent`2.Validation"" /> property.", }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember", new() { Name = "ValidateModelWithFullPathOfMember", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "System.Func`3[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<object, string, IEnumerable<string>>", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute", new() { Name = "ValidateWithAttribute", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "attr", TypeName = "System.ComponentModel.DataAnnotations.ValidationAttribute", TypeFriendlyName = "ValidationAttribute", }, 
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc", new() { Name = "ValidateWithFunc", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "func", TypeName = "System.Func`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<string, bool>", }, 
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "errors", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                ],
            }},
            { "MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync", new() { Name = "WriteValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudHidden.UpdateAsync", new() { Name = "UpdateAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "currentBreakpoint", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", }, 
                ],
            }},
            { "MudBlazor.MudInput`1.BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, releases focus from this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudInput`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudInput`1.FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, obtains focus for this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudInput`1.HandleClearButtonAsync", new() { Name = "HandleClearButtonAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "e", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudInput`1.OnChange", new() { Name = "OnChange", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.ChangeEventArgs", TypeFriendlyName = "ChangeEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudInput`1.OnInput", new() { Name = "OnInput", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.ChangeEventArgs", TypeFriendlyName = "ChangeEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudInput`1.OnPaste", new() { Name = "OnPaste", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Paste hook for descendants.", Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs", TypeFriendlyName = "ClipboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudInput`1.SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudInput`1.SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects a portion of the input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudInput`1.SetText", new() { Name = "SetText", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Set the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> to the specified value.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The new value.", }, 
                ],
            }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, releases focus from this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, obtains focus for this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HandleClearButtonAsync", new() { Name = "HandleClearButtonAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "e", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnChange", new() { Name = "OnChange", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.ChangeEventArgs", TypeFriendlyName = "ChangeEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnInput", new() { Name = "OnInput", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.ChangeEventArgs", TypeFriendlyName = "ChangeEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPaste", new() { Name = "OnPaste", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Paste hook for descendants.", Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.Web.ClipboardEventArgs", TypeFriendlyName = "ClipboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects a portion of the input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetText", new() { Name = "SetText", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Set the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> to the specified value.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The new value.", }, 
                ],
            }},
            { "MudBlazor.MudItemDropInfo`1.<Clone>$", new() { Name = "<Clone>$", TypeName = "MudItemDropInfo`1", TypeFriendlyName = "MudItemDropInfo<T>", }},
            { "MudBlazor.MudItemDropInfo`1.Deconstruct", new() { Name = "Deconstruct", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "Item", TypeName = "", TypeFriendlyName = "T&", }, 
                    new() { Name = "DropzoneIdentifier", TypeName = "System.String&", TypeFriendlyName = "ref string", }, 
                    new() { Name = "IndexInZone", TypeName = "System.Int32&", TypeFriendlyName = "ref int", }, 
                ],
            }},
            { "MudBlazor.MudItemDropInfo`1.PrintMembers", new() { Name = "PrintMembers", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "builder", TypeName = "System.Text.StringBuilder", TypeFriendlyName = "StringBuilder", }, 
                ],
            }},
            { "MudBlazor.MudLink.OnClickHandler", new() { Name = "OnClickHandler", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "ev", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudListItem`1.OnClickHandlerAsync", new() { Name = "OnClickHandlerAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "eventArgs", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudMask.Clear", new() { Name = "Clear", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Clears the text and value for this input.", }},
            { "MudBlazor.MudMask.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudMask.FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Sets the cursor to this input.", }},
            { "MudBlazor.MudMask.OnSelect", new() { Name = "OnSelect", TypeName = "Void", TypeFriendlyName = "", Summary = @"Occurs when the selected characters have changed.", Parameters = 
                [
                    new() { Name = "start", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first selected character.", }, 
                    new() { Name = "end", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last selected character.", }, 
                ],
            }},
            { "MudBlazor.MudMask.SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the text in this input.", }},
            { "MudBlazor.MudMask.SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects a range of characters in this input.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudMask.UpdateTextPropertyAsync", new() { Name = "UpdateTextPropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudMask.UpdateValuePropertyAsync", new() { Name = "UpdateValuePropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudMenu.CloseAllMenusAsync", new() { Name = "CloseAllMenusAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Closes all menus in the hierarchy, starting from the top-most parent.", }},
            { "MudBlazor.MudMenu.CloseMenuAsync", new() { Name = "CloseMenuAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Closes this menu and any descendants if it's a nested menu.", }},
            { "MudBlazor.MudMenu.GetActivatorHidden", new() { Name = "GetActivatorHidden", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudMenu.GetAnchorOrigin", new() { Name = "GetAnchorOrigin", TypeName = "Origin", TypeFriendlyName = "Origin", IsProtected = true, }},
            { "MudBlazor.MudMenu.HasPointerOver", new() { Name = "HasPointerOver", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "menu", TypeName = "MudBlazor.MudMenu", TypeFriendlyName = "MudMenu", }, 
                ],
            }},
            { "MudBlazor.MudMenu.OnOpenChanged", new() { Name = "OnOpenChanged", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "args", TypeName = "MudBlazor.State.ParameterChangedEventArgs`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "ParameterChangedEventArgs<bool>", }, 
                ],
            }},
            { "MudBlazor.MudMenu.OpenMenuAsync", new() { Name = "OpenMenuAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens the menu or updates its state if it's already open.", Remarks = @"Parents are not automatically opened when a child is opened.", Parameters = 
                [
                    new() { Name = "args", TypeName = "System.EventArgs", TypeFriendlyName = "EventArgs", Summary = @"<para>The event arguments for the activation event; <see cref=""T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"" /> or <see cref=""T:Microsoft.AspNetCore.Components.Web.TouchEventArgs"" />.</para>
<para>When <see cref=""P:MudBlazor.MudMenu.PositionAtCursor"" /> is <c>true</c>, the menu will be positioned at these coordinates.</para>", }, 
                    new() { Name = "transient", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"If <c>true</c>, the menu will close automatically when the pointer leaves its bounds.", }, 
                ],
            }},
            { "MudBlazor.MudMenu.OpenSubMenuAsync", new() { Name = "OpenSubMenuAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Closes siblings before opening as a ""mouse over"" menu.This is called in place of <see cref=""M:MudBlazor.MudMenu.OpenMenuAsync(System.EventArgs,System.Boolean)"" /> if the menu activator is implicitly rendered for the submenu.", Parameters = 
                [
                    new() { Name = "args", TypeName = "System.EventArgs", TypeFriendlyName = "EventArgs", }, 
                ],
            }},
            { "MudBlazor.MudMenu.RegisterChild", new() { Name = "RegisterChild", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "child", TypeName = "MudBlazor.MudMenu", TypeFriendlyName = "MudMenu", }, 
                ],
            }},
            { "MudBlazor.MudMenu.ToggleMenuAsync", new() { Name = "ToggleMenuAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Toggles the menu's open or closed state.", Parameters = 
                [
                    new() { Name = "args", TypeName = "System.EventArgs", TypeFriendlyName = "EventArgs", Summary = @"<para>The event arguments for the activation event; <see cref=""T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"" /> or <see cref=""T:Microsoft.AspNetCore.Components.Web.TouchEventArgs"" />.</para>
<para>When <see cref=""P:MudBlazor.MudMenu.PositionAtCursor"" /> is <c>true</c>, the menu will be positioned at these coordinates.</para>", }, 
                ],
            }},
            { "MudBlazor.MudMenu.UnregisterChild", new() { Name = "UnregisterChild", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "child", TypeName = "MudBlazor.MudMenu", TypeFriendlyName = "MudMenu", }, 
                ],
            }},
            { "MudBlazor.MudMenuItem.GetDense", new() { Name = "GetDense", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudMenuItem.GetDisabled", new() { Name = "GetDisabled", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudMenuItem.GetHtmlTag", new() { Name = "GetHtmlTag", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudMenuItem.GetTypo", new() { Name = "GetTypo", TypeName = "Typo", TypeFriendlyName = "Typo", IsProtected = true, }},
            { "MudBlazor.MudMenuItem.OnClickHandlerAsync", new() { Name = "OnClickHandlerAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "ev", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudMessageBox.Close", new() { Name = "Close", TypeName = "Void", TypeFriendlyName = "", Summary = @"Hides this message box.", }},
            { "MudBlazor.MudMessageBox.ShowAsync", new() { Name = "ShowAsync", TypeName = "Task`1", TypeFriendlyName = "Task<bool?>", Summary = @"Shows this message box.", Returns = @"When <c>true</c>, the Yes/OK button was clicked.  When <c>false</c>, the No button was clicked.  When <c>null</c>, the Cancel button was clicked or this message box was closed.", Parameters = 
                [
                    new() { Name = "options", TypeName = "MudBlazor.DialogOptions", TypeFriendlyName = "DialogOptions", Summary = @"The optional dialog options to use.", }, 
                ],
            }},
            { "MudBlazor.MudNavLink.HandleNavigation", new() { Name = "HandleNavigation", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudNavLink.OnClickHandler", new() { Name = "OnClickHandler", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "ev", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudNumericField`1.BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, releases focus from this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudNumericField`1.ConstrainBoundaries", new() { Name = "ConstrainBoundaries", TypeName = "ValueTuple`2", TypeFriendlyName = "ValueTuple<T, bool>", IsProtected = true, Summary = @"Checks if the value respects the boundaries set for this instance.", Returns = @"Returns a valid value and if it has been changed.", Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", Summary = @"Value to check.", }, 
                ],
            }},
            { "MudBlazor.MudNumericField`1.Decrement", new() { Name = "Decrement", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Decreases the current value by <see cref=""P:MudBlazor.MudNumericField`1.Step"" />.", }},
            { "MudBlazor.MudNumericField`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudNumericField`1.FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, obtains focus for this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudNumericField`1.HandleKeyDownAsync", new() { Name = "HandleKeyDownAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "obj", TypeName = "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", TypeFriendlyName = "KeyboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudNumericField`1.HandleKeyUpAsync", new() { Name = "HandleKeyUpAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "obj", TypeName = "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", TypeFriendlyName = "KeyboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudNumericField`1.Increment", new() { Name = "Increment", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Increases the current value by <see cref=""P:MudBlazor.MudNumericField`1.Step"" />.", }},
            { "MudBlazor.MudNumericField`1.OnMouseWheelAsync", new() { Name = "OnMouseWheelAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "obj", TypeName = "Microsoft.AspNetCore.Components.Web.WheelEventArgs", TypeFriendlyName = "WheelEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudNumericField`1.SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudNumericField`1.SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects a portion of the input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudNumericField`1.SetValueAsync", new() { Name = "SetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                    new() { Name = "force", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudNumericField`1.ValidateInput", new() { Name = "ValidateInput", TypeName = "Task`1", TypeFriendlyName = "Task<bool>", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.MudPageContentNavigation.AddSection", new() { Name = "AddSection", TypeName = "Void", TypeFriendlyName = "", Summary = @"Add a section to the content navigation", Parameters = 
                [
                    new() { Name = "sectionName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"name of the section will be displayed in the navigation", }, 
                    new() { Name = "sectionId", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"id of the section. It will be appending to the current url, if the section becomes active", }, 
                    new() { Name = "forceUpdate", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"If true, StateHasChanged is called, forcing a re-render of the component", }, 
                ],
            }},
            { "MudBlazor.MudPageContentNavigation.ScrollToSection", new() { Name = "ScrollToSection", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Scrolls to a section based on the fragment of the uri. If there is no fragment, no scroll will occurred", Returns = @"A task that completes when the viewport has scrolled", Parameters = 
                [
                    new() { Name = "uri", TypeName = "System.Uri", TypeFriendlyName = "Uri", Summary = @"The uri containing the fragment to scroll", }, 
                ],
            }},
            { "MudBlazor.MudPagination.NavigateToAsync", new() { Name = "NavigateToAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Changes the currently selected page.", Parameters = 
                [
                    new() { Name = "page", TypeName = "MudBlazor.Page", TypeFriendlyName = "Page", Summary = @"The page to navigate to.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1.BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Releases focus for the input.", }},
            { "MudBlazor.MudPicker`1.ClearAsync", new() { Name = "ClearAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Hides this picker.", Parameters = 
                [
                    new() { Name = "close", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the picker will be closed if <see cref=""P:MudBlazor.MudPicker`1.PickerVariant"" /> is not <see cref=""F:MudBlazor.PickerVariant.Static"" />.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1.CloseAsync", new() { Name = "CloseAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Closes this picker.", Parameters = 
                [
                    new() { Name = "submit", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the value is committed.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudPicker`1.FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Focuses the input.", }},
            { "MudBlazor.MudPicker`1.GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.GetReadOnlyState", new() { Name = "GetReadOnlyState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.OnClosedAsync", new() { Name = "OnClosedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.OnOpenedAsync", new() { Name = "OnOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.OnPickerClosedAsync", new() { Name = "OnPickerClosedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.OnPickerOpenedAsync", new() { Name = "OnPickerOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.OpenAsync", new() { Name = "OpenAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Displays this picker.", }},
            { "MudBlazor.MudPicker`1.ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1.SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the input content.", }},
            { "MudBlazor.MudPicker`1.SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects a portion of the input content.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1.SetTextAsync", new() { Name = "SetTextAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "callback", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1.StringValueChangedAsync", new() { Name = "StringValueChangedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Occurs when the string value has changed.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1.ToggleOpenAsync", new() { Name = "ToggleOpenAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens or closes this picker.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Releases focus for the input.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ClearAsync", new() { Name = "ClearAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Hides this picker.", Parameters = 
                [
                    new() { Name = "close", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the picker will be closed if <see cref=""P:MudBlazor.MudPicker`1.PickerVariant"" /> is not <see cref=""F:MudBlazor.PickerVariant.Static"" />.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].CloseAsync", new() { Name = "CloseAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Closes this picker.", Parameters = 
                [
                    new() { Name = "submit", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the value is committed.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Focuses the input.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].GetReadOnlyState", new() { Name = "GetReadOnlyState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnClosedAsync", new() { Name = "OnClosedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnOpenedAsync", new() { Name = "OnOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnPickerClosedAsync", new() { Name = "OnPickerClosedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnPickerOpenedAsync", new() { Name = "OnPickerOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OpenAsync", new() { Name = "OpenAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Displays this picker.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the input content.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects a portion of the input content.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SetTextAsync", new() { Name = "SetTextAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "callback", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ToggleOpenAsync", new() { Name = "ToggleOpenAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens or closes this picker.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Releases focus for the input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ClearAsync", new() { Name = "ClearAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Hides this picker.", Parameters = 
                [
                    new() { Name = "close", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the picker will be closed if <see cref=""P:MudBlazor.MudPicker`1.PickerVariant"" /> is not <see cref=""F:MudBlazor.PickerVariant.Static"" />.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CloseAsync", new() { Name = "CloseAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Closes this picker.", Parameters = 
                [
                    new() { Name = "submit", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the value is committed.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Focuses the input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState", new() { Name = "GetReadOnlyState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClosedAsync", new() { Name = "OnClosedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnOpenedAsync", new() { Name = "OnOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPickerClosedAsync", new() { Name = "OnPickerClosedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OpenAsync", new() { Name = "OpenAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Displays this picker.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the input content.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects a portion of the input content.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync", new() { Name = "SetTextAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "callback", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].StringValueChangedAsync", new() { Name = "StringValueChangedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Summary = @"Occurs when the string value has changed.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToggleOpenAsync", new() { Name = "ToggleOpenAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens or closes this picker.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Releases focus for the input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CloseAsync", new() { Name = "CloseAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Closes this picker.", Parameters = 
                [
                    new() { Name = "submit", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the value is committed.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Focuses the input.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState", new() { Name = "GetDisabledState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState", new() { Name = "GetReadOnlyState", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClosedAsync", new() { Name = "OnClosedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnOpenedAsync", new() { Name = "OnOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPickerClosedAsync", new() { Name = "OnPickerClosedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OpenAsync", new() { Name = "OpenAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Displays this picker.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the input content.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects a portion of the input content.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync", new() { Name = "SetTextAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "callback", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToggleOpenAsync", new() { Name = "ToggleOpenAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens or closes this picker.", }},
            { "MudBlazor.MudProgressLinear.GetBufferPercent", new() { Name = "GetBufferPercent", TypeName = "Double", TypeFriendlyName = "double", Summary = @"The calculated buffer value percentage based on <see cref=""P:MudBlazor.MudProgressLinear.Min"" />, <see cref=""P:MudBlazor.MudProgressLinear.Max"" />, and <see cref=""P:MudBlazor.MudProgressLinear.BufferValue"" />.", Returns = @"A value between <c>0.0</c> and <c>100.0</c>.", }},
            { "MudBlazor.MudProgressLinear.GetStyledBar1Transform", new() { Name = "GetStyledBar1Transform", TypeName = "String", TypeFriendlyName = "string", Summary = @"Gets the CSS transform to apply based on the current value percentage.", Returns = @"A CSS transform.", }},
            { "MudBlazor.MudProgressLinear.GetStyledBar2Transform", new() { Name = "GetStyledBar2Transform", TypeName = "String", TypeFriendlyName = "string", Summary = @"Gets the CSS transform to apply based on the current buffer value percentage.", Returns = @"A CSS transform.", }},
            { "MudBlazor.MudProgressLinear.GetValuePercent", new() { Name = "GetValuePercent", TypeName = "Double", TypeFriendlyName = "double", Summary = @"The calculated value percentage based on <see cref=""P:MudBlazor.MudProgressLinear.Min"" />, <see cref=""P:MudBlazor.MudProgressLinear.Max"" />, and <see cref=""P:MudBlazor.MudProgressLinear.Value"" />.", Returns = @"A value between <c>0.0</c> and <c>100.0</c>.", }},
            { "MudBlazor.MudProgressLinear.UpdatePercentages", new() { Name = "UpdatePercentages", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, }},
            { "MudBlazor.MudRadio`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudRadio`1.SelectAsync", new() { Name = "SelectAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Checks this radio button.", Remarks = @"When part of a <see cref=""T:MudBlazor.MudRadioGroup`1"" />, other values will be unchecked.", }},
            { "MudBlazor.MudRadioGroup`1.CheckGenericTypeMatch", new() { Name = "CheckGenericTypeMatch", TypeName = "Void", TypeFriendlyName = "", Summary = @"Tests whether the specified value is valid for this button.", Parameters = 
                [
                    new() { Name = "selectItem", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The value to examine.", }, 
                ],
            }},
            { "MudBlazor.MudRadioGroup`1.ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudRadioGroup`1.SetSelectedOptionAsync", new() { Name = "SetSelectedOptionAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "option", TypeName = "", TypeFriendlyName = "T", }, 
                    new() { Name = "updateRadio", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudRadioGroup`1.SetSelectedRadioAsync", new() { Name = "SetSelectedRadioAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "radio", TypeName = "", TypeFriendlyName = "MudRadio<T>", }, 
                    new() { Name = "updateOption", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudRangeInput`1.ClearButtonClickHandlerAsync", new() { Name = "ClearButtonClickHandlerAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "e", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudRangeInput`1.FocusEndAsync", new() { Name = "FocusEndAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Moves the cursor to the ending input component.", }},
            { "MudBlazor.MudRangeInput`1.FocusStartAsync", new() { Name = "FocusStartAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Moves the cursor to the starting input component.", }},
            { "MudBlazor.MudRangeInput`1.IsClearable", new() { Name = "IsClearable", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, }},
            { "MudBlazor.MudRangeInput`1.SelectEndAsync", new() { Name = "SelectEndAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the text in the ending input.", }},
            { "MudBlazor.MudRangeInput`1.SelectRangeEndAsync", new() { Name = "SelectRangeEndAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the text in the end value.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudRangeInput`1.SelectRangeStartAsync", new() { Name = "SelectRangeStartAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the text in the start value.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudRangeInput`1.SelectStartAsync", new() { Name = "SelectStartAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the text in the starting input.", }},
            { "MudBlazor.MudRangeInput`1.UpdateTextPropertyAsync", new() { Name = "UpdateTextPropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudRangeInput`1.UpdateValuePropertyAsync", new() { Name = "UpdateValuePropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Releases the focus from this component.", }},
            { "MudBlazor.MudSelect`1.CheckGenericTypeMatch", new() { Name = "CheckGenericTypeMatch", TypeName = "Void", TypeFriendlyName = "", Summary = @"Throws an exception if the specified item is not compatible with this component.", Parameters = 
                [
                    new() { Name = "selectItem", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The item to compare.  Should be of type <c>T</c> for this component.", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.Clear", new() { Name = "Clear", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Clears all selections.", }},
            { "MudBlazor.MudSelect`1.CloseMenu", new() { Name = "CloseMenu", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Closes the drop-down menu.", Remarks = @"Has no effect if <c>Disabled</c> or <c>ReadOnly</c> is <c>true</c>.", Parameters = 
                [
                    new() { Name = "focusAgain", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudSelect`1.FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Sets the focus to this component.", }},
            { "MudBlazor.MudSelect`1.ForceUpdate", new() { Name = "ForceUpdate", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Forces the <see cref=""P:MudBlazor.MudSelect`1.SelectedValuesChanged"" /> event to occur.", }},
            { "MudBlazor.MudSelect`1.GetSelectedValuePresenter", new() { Name = "GetSelectedValuePresenter", TypeName = "RenderFragment", TypeFriendlyName = "RenderFragment", IsProtected = true, }},
            { "MudBlazor.MudSelect`1.HasValue", new() { Name = "HasValue", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Summary = @"Gets whether the value is currently selected.", Returns = @"When <c>true</c>, the specified value exists in <see cref=""P:MudBlazor.MudSelect`1.SelectedValues"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", Summary = @"The value to test.", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.OpenMenu", new() { Name = "OpenMenu", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens the drop-down menu.", Remarks = @"Has no effect if <c>Disabled</c> or <c>ReadOnly</c> is <c>true</c>.", }},
            { "MudBlazor.MudSelect`1.RegisterShadowItem", new() { Name = "RegisterShadowItem", TypeName = "Void", TypeFriendlyName = "", Summary = @"Links a selection item to this component.", Parameters = 
                [
                    new() { Name = "item", TypeName = "", TypeFriendlyName = "MudSelectItem<T>", Summary = @"The item to add.", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects the text within this component.", }},
            { "MudBlazor.MudSelect`1.SelectClearButtonClickHandlerAsync", new() { Name = "SelectClearButtonClickHandlerAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Occurs when the <c>Clear</c> button has been clicked.", Remarks = @"This is the first event raised when the clear button is clicked.  The <see cref=""P:MudBlazor.MudSelect`1.SelectedValues"" /> are cleared and the <see cref=""P:MudBlazor.MudSelect`1.OnClearButtonClick"" /> event is raised.", Parameters = 
                [
                    new() { Name = "e", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.SelectOption", new() { Name = "SelectOption", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Selects the item at the specified index.", Parameters = 
                [
                    new() { Name = "index", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The ordinal of the item to select (starting at <c>0</c>).  When <see cref=""P:MudBlazor.MudSelect`1.MultiSelection"" /> is <c>true</c>, the item will be added to the selected items.", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"Selects a portion of text within this component.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.  (Starting at <c>0</c>.)", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.SetCustomizedTextAsync", new() { Name = "SetCustomizedTextAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                    new() { Name = "selectedConvertedValues", TypeName = "System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "List<string>", }, 
                    new() { Name = "multiSelectionTextFunc", TypeName = "System.Func`2[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<List<string>, string>", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.ToggleMenu", new() { Name = "ToggleMenu", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Opens or closes the drop-down menu.", Remarks = @"Has no effect if <c>Disabled</c> or <c>ReadOnly</c> is <c>true</c>.", }},
            { "MudBlazor.MudSelect`1.UnregisterShadowItem", new() { Name = "UnregisterShadowItem", TypeName = "Void", TypeFriendlyName = "", Summary = @"Unregisters a selection item to this component.", Parameters = 
                [
                    new() { Name = "item", TypeName = "", TypeFriendlyName = "MudSelectItem<T>", Summary = @"The item to remove.", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.UpdateTextPropertyAsync", new() { Name = "UpdateTextPropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudSelect`1.UpdateValuePropertyAsync", new() { Name = "UpdateValuePropertyAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudSnackbarElement.InteractionEndHandler", new() { Name = "InteractionEndHandler", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, }},
            { "MudBlazor.MudSnackbarElement.InteractionStartHandler", new() { Name = "InteractionStartHandler", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, }},
            { "MudBlazor.MudStep.SetCompletedAsync", new() { Name = "SetCompletedAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Sets the <see cref=""P:MudBlazor.MudStep.Completed"" /> parameter, and optionally refreshes the parent <see cref=""T:MudBlazor.MudStepper"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                    new() { Name = "refreshParent", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudStep.SetDisabledAsync", new() { Name = "SetDisabledAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Sets the <see cref=""P:MudBlazor.MudStep.Disabled"" /> parameter, and optionally refreshes the parent <see cref=""T:MudBlazor.MudStepper"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                    new() { Name = "refreshParent", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudStep.SetHasErrorAsync", new() { Name = "SetHasErrorAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Sets the <see cref=""P:MudBlazor.MudStep.HasError"" /> parameter, and optionally refreshes the parent <see cref=""T:MudBlazor.MudStepper"" />.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                    new() { Name = "refreshParent", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudStepper.NextStepAsync", new() { Name = "NextStepAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Completes the current step and goes to the next step.", }},
            { "MudBlazor.MudStepper.PreviousStepAsync", new() { Name = "PreviousStepAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Goes to the previous step.", }},
            { "MudBlazor.MudStepper.ResetAsync", new() { Name = "ResetAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Resets the completed status of all steps and goes to the first step, resetting all progress and errors.", Parameters = 
                [
                    new() { Name = "resetErrors", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudStepper.SkipCurrentStepAsync", new() { Name = "SkipCurrentStepAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Goes to the next step without completing the current step.", }},
            { "MudBlazor.MudSwitch`1.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudTable`1.CollapseAllGroups", new() { Name = "CollapseAllGroups", TypeName = "Void", TypeFriendlyName = "", Summary = @"Collapses all groups within this table.", }},
            { "MudBlazor.MudTable`1.ContainsItem", new() { Name = "ContainsItem", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Gets whether <see cref=""P:MudBlazor.MudTable`1.Items"" /> contains the specified item.", Returns = @"When <c>true</c>, the item was found, otherwise <c>false</c>.", Parameters = 
                [
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The item to find.", }, 
                ],
            }},
            { "MudBlazor.MudTable`1.ExpandAllGroups", new() { Name = "ExpandAllGroups", TypeName = "Void", TypeFriendlyName = "", Summary = @"Expands all groups within this table.", }},
            { "MudBlazor.MudTable`1.GetFilteredItemsCount", new() { Name = "GetFilteredItemsCount", TypeName = "Int32", TypeFriendlyName = "int", Summary = @"Gets the number of filtered items.", Returns = @"When <see cref=""P:MudBlazor.MudTable`1.ServerData"" /> is set, the total number of items, otherwise the number of <see cref=""P:MudBlazor.MudTable`1.FilteredItems"" />.", }},
            { "MudBlazor.MudTable`1.GetItemsOfPage", new() { Name = "GetItemsOfPage", TypeName = "IEnumerable`1", TypeFriendlyName = "IEnumerable<T>", IsProtected = true, Parameters = 
                [
                    new() { Name = "n", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                    new() { Name = "pageSize", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudTable`1.IsCheckedRow", new() { Name = "IsCheckedRow", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Summary = @"Checks if the row is selected.If there is set a Comparer, uses the comparer, otherwise uses a direct contains", Parameters = 
                [
                    new() { Name = "item", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.MudTable`1.ReloadServerData", new() { Name = "ReloadServerData", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Reloads this table's data via the <see cref=""P:MudBlazor.MudTable`1.ServerData"" /> function.", Remarks = @"Use this method to reload this table's results when <see cref=""P:MudBlazor.MudTable`1.ServerData"" /> is set.", }},
            { "MudBlazor.MudTable`1.SetEditingItem", new() { Name = "SetEditingItem", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the item to edit.", Parameters = 
                [
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The item to edit.", }, 
                ],
            }},
            { "MudBlazor.MudTable`1.SetSelectedItem", new() { Name = "SetSelectedItem", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the <see cref=""P:MudBlazor.MudTable`1.SelectedItem"" />.", Parameters = 
                [
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The new value to set.", }, 
                ],
            }},
            { "MudBlazor.MudTable`1.UpdateSelection", new() { Name = "UpdateSelection", TypeName = "Void", TypeFriendlyName = "", Summary = @"Raises the <see cref=""P:MudBlazor.MudTable`1.SelectedItemsChanged"" /> event.", }},
            { "MudBlazor.MudTableBase.ContainsItem", new() { Name = "ContainsItem", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Gets whether the specified item exists.", Parameters = 
                [
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The item to find.", }, 
                ],
            }},
            { "MudBlazor.MudTableBase.GetFilteredItemsCount", new() { Name = "GetFilteredItemsCount", TypeName = "Int32", TypeFriendlyName = "int", Summary = @"Gets the number of items after applying filters.", Returns = @"The number of filtered items.", }},
            { "MudBlazor.MudTableBase.NavigateTo", new() { Name = "NavigateTo", TypeName = "Void", TypeFriendlyName = "", Summary = @"Changes the current page.", Parameters = 
                [
                    new() { Name = "page", TypeName = "MudBlazor.Page", TypeFriendlyName = "Page", Summary = @"The <c>Next</c>, <c>Previous</c>, <c>First</c>, or <c>Last</c> page to navigate to.", }, 
                ],
            }},
            { "MudBlazor.MudTableBase.SetEditingItem", new() { Name = "SetEditingItem", TypeName = "Void", TypeFriendlyName = "", Summary = @"Changes the item being edited.", Parameters = 
                [
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The new item to edit.", }, 
                ],
            }},
            { "MudBlazor.MudTableBase.SetRowsPerPage", new() { Name = "SetRowsPerPage", TypeName = "Void", TypeFriendlyName = "", Summary = @"Changes the rows per page to the specified value.", Parameters = 
                [
                    new() { Name = "size", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The number of rows per page.", }, 
                ],
            }},
            { "MudBlazor.MudTableBase.SetSelectedItem", new() { Name = "SetSelectedItem", TypeName = "Void", TypeFriendlyName = "", Summary = @"Changes the currently selected item.", Parameters = 
                [
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The new item to select.", }, 
                ],
            }},
            { "MudBlazor.MudTableBase.UpdateSelection", new() { Name = "UpdateSelection", TypeName = "Void", TypeFriendlyName = "", Summary = @"Refreshes the table's current selection.", }},
            { "MudBlazor.MudTableGroupRow`1.SetChecked", new() { Name = "SetChecked", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the <see cref=""P:MudBlazor.MudTableGroupRow`1.Checked"" /> value and optionally refreshes this group.", Parameters = 
                [
                    new() { Name = "checkedState", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Summary = @"The new checked state.", }, 
                    new() { Name = "notify", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, and <see cref=""P:MudBlazor.MudTableGroupRow`1.Checkable"" /> is <c>true</c>, the <see cref=""M:MudBlazor.MudTable`1.OnGroupHeaderCheckboxClicked(System.Boolean,System.Collections.Generic.IEnumerable{`0})"" /> event will occur.", }, 
                ],
            }},
            { "MudBlazor.MudTableSortLabel`1.ToggleSortDirection", new() { Name = "ToggleSortDirection", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Toggles the sort direction.", Remarks = @"When <see cref=""P:MudBlazor.MudTableBase.AllowUnsorted"" /> is <c>true</c>, the sort direction will cycle from <see cref=""F:MudBlazor.SortDirection.None"" /> to <see cref=""F:MudBlazor.SortDirection.Ascending"" /> to <see cref=""F:MudBlazor.SortDirection.Descending"" />.  Otherwise, the sort direction will toggle between <see cref=""F:MudBlazor.SortDirection.Ascending"" /> and <see cref=""F:MudBlazor.SortDirection.Descending"" />.", }},
            { "MudBlazor.MudTabs.ActivatePanel", new() { Name = "ActivatePanel", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "panel", TypeName = "MudBlazor.MudTabPanel", TypeFriendlyName = "MudTabPanel", }, 
                    new() { Name = "ignoreDisabledState", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudTextField`1.BlurAsync", new() { Name = "BlurAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, releases focus from this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudTextField`1.Clear", new() { Name = "Clear", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Clears the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> and sets <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> to <c>default(T)</c>.", }},
            { "MudBlazor.MudTextField`1.FocusAsync", new() { Name = "FocusAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, obtains focus for this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudTextField`1.ResetValueAsync", new() { Name = "ResetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudTextField`1.SelectAsync", new() { Name = "SelectAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects this input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", }},
            { "MudBlazor.MudTextField`1.SelectRangeAsync", new() { Name = "SelectRangeAsync", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", Summary = @"When overridden, selects a portion of the input.", Returns = @"A <see cref=""T:System.Threading.Tasks.ValueTask"" /> object.", Parameters = 
                [
                    new() { Name = "pos1", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the first character to select.", }, 
                    new() { Name = "pos2", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The index of the last character to select.", }, 
                ],
            }},
            { "MudBlazor.MudTextField`1.SetText", new() { Name = "SetText", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Sets the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> to the specified value.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The new text value to use.", }, 
                ],
            }},
            { "MudBlazor.MudTextField`1.SetTextAsync", new() { Name = "SetTextAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudTextField`1.SetValueAsync", new() { Name = "SetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", }, 
                    new() { Name = "updateText", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                    new() { Name = "force", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudTFootRow.SetChecked", new() { Name = "SetChecked", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets <see cref=""P:MudBlazor.MudTFootRow.Checked"" /> to the specified value.", Parameters = 
                [
                    new() { Name = "checkedState", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Summary = @"The new checked state.", }, 
                    new() { Name = "notify", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the table's <see cref=""M:MudBlazor.MudTable`1.OnHeaderCheckboxClicked(System.Boolean)"" /> event occurs.", }, 
                ],
            }},
            { "MudBlazor.MudTHeadRow.SetChecked", new() { Name = "SetChecked", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets <see cref=""P:MudBlazor.MudTHeadRow.Checked"" /> to the specified value.", Parameters = 
                [
                    new() { Name = "checkedState", TypeName = "System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "bool?", Summary = @"The new checked state.", }, 
                    new() { Name = "notify", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the table's <see cref=""M:MudBlazor.MudTable`1.OnHeaderCheckboxClicked(System.Boolean)"" /> event occurs.", }, 
                ],
            }},
            { "MudBlazor.MudThemeProvider.BuildTheme", new() { Name = "BuildTheme", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, }},
            { "MudBlazor.MudThemeProvider.GenerateTheme", new() { Name = "GenerateTheme", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "theme", TypeName = "System.Text.StringBuilder", TypeFriendlyName = "StringBuilder", }, 
                ],
            }},
            { "MudBlazor.MudThemeProvider.GetSystemPreference", new() { Name = "GetSystemPreference", TypeName = "Task`1", TypeFriendlyName = "Task<bool>", Summary = @"Returns the dark mode preference of the user. True if dark mode is preferred.", }},
            { "MudBlazor.MudThemeProvider.WatchSystemPreference", new() { Name = "WatchSystemPreference", TypeName = "Task", TypeFriendlyName = "Task", Parameters = 
                [
                    new() { Name = "functionOnChange", TypeName = "System.Func`2[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<bool, Task>", }, 
                ],
            }},
            { "MudBlazor.MudTimePicker.ChangeHourAsync", new() { Name = "ChangeHourAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "hour", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudTimePicker.ChangeMinuteAsync", new() { Name = "ChangeMinuteAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "minute", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.MudTimePicker.ClearAsync", new() { Name = "ClearAsync", TypeName = "Task", TypeFriendlyName = "Task", Parameters = 
                [
                    new() { Name = "close", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudTimePicker.DisposeAsyncCore", new() { Name = "DisposeAsyncCore", TypeName = "ValueTask", TypeFriendlyName = "ValueTask", IsProtected = true, Summary = @"Called to dispose this instance.", }},
            { "MudBlazor.MudTimePicker.OnPickerOpenedAsync", new() { Name = "OnPickerOpenedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudTimePicker.OnStickClick", new() { Name = "OnStickClick", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Performs the click action for the sticks.This method is called by the JavaScript events.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The minute or hour.", }, 
                ],
            }},
            { "MudBlazor.MudTimePicker.ReturnTimeBackUpAsync", new() { Name = "ReturnTimeBackUpAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudTimePicker.SelectTimeFromStick", new() { Name = "SelectTimeFromStick", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Updates the position of the hands on the clock.This method is called by the JavaScript events.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The minute or hour.", }, 
                    new() { Name = "pointerMoving", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Is the pointer being moved?", }, 
                ],
            }},
            { "MudBlazor.MudTimePicker.SetTimeAsync", new() { Name = "SetTimeAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "time", TypeName = "System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "TimeSpan?", }, 
                    new() { Name = "updateValue", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudTimePicker.StringValueChangedAsync", new() { Name = "StringValueChangedAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.MudTimePicker.SubmitAndCloseAsync", new() { Name = "SubmitAndCloseAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudToggleGroup`1.DeselectAllItems", new() { Name = "DeselectAllItems", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, }},
            { "MudBlazor.MudToggleIconButton.Toggle", new() { Name = "Toggle", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Toggles the state of the button.", }},
            { "MudBlazor.MudToggleItem`1.HandleOnClickAsync", new() { Name = "HandleOnClickAsync", TypeName = "Task", TypeFriendlyName = "Task", IsProtected = true, }},
            { "MudBlazor.MudToggleItem`1.SetSelected", new() { Name = "SetSelected", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "selected", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.MudTr.ManagePreviousEdition", new() { Name = "ManagePreviousEdition", TypeName = "Void", TypeFriendlyName = "", Summary = @"Resets this row's editing state.", Remarks = @"Typically occurs when another row has been selected.  Managed automatically by the parent table.", }},
            { "MudBlazor.MudTr.OnRowClickedAsync", new() { Name = "OnRowClickedAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Occurs when this row is clicked.", Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.Web.MouseEventArgs", TypeFriendlyName = "MouseEventArgs", Summary = @"The mouse coordinates of the click.", }, 
                ],
            }},
            { "MudBlazor.MudTr.OnRowMouseEnterAsync", new() { Name = "OnRowMouseEnterAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Occurs when the pointer enters this row.", Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.Web.PointerEventArgs", TypeFriendlyName = "PointerEventArgs", Summary = @"The coordinates of the pointer.", }, 
                ],
            }},
            { "MudBlazor.MudTr.OnRowMouseLeaveAsync", new() { Name = "OnRowMouseLeaveAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Occurs when the pointer leaves this row.", Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.Web.PointerEventArgs", TypeFriendlyName = "PointerEventArgs", Summary = @"The coordinates of the pointer.", }, 
                ],
            }},
            { "MudBlazor.MudTr.SetChecked", new() { Name = "SetChecked", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets <see cref=""P:MudBlazor.MudTr.Checked"" /> to the specified value.", Parameters = 
                [
                    new() { Name = "checkedState", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"The new checked state.", }, 
                    new() { Name = "notify", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the table's <see cref=""M:MudBlazor.MudTable`1.OnHeaderCheckboxClicked(System.Boolean)"" /> event occurs.", }, 
                ],
            }},
            { "MudBlazor.MudTreeView`1.CollapseAllAsync", new() { Name = "CollapseAllAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Collapses all items and their children recursively.", }},
            { "MudBlazor.MudTreeView`1.ExpandAllAsync", new() { Name = "ExpandAllAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Expands all items and their children recursively.", }},
            { "MudBlazor.MudTreeView`1.FilterAsync", new() { Name = "FilterAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Invokes the <see cref=""P:MudBlazor.MudTreeView`1.FilterFunc"" /> to be applied to every item.", Returns = @"A task to represent the asynchronous operation.", }},
            { "MudBlazor.MudTreeViewItem`1.CollapseAllAsync", new() { Name = "CollapseAllAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Collapse this item and all its children recursively", }},
            { "MudBlazor.MudTreeViewItem`1.ExpandAllAsync", new() { Name = "ExpandAllAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Expand this item and all its children recursively", }},
            { "MudBlazor.MudTreeViewItem`1.ReloadAsync", new() { Name = "ReloadAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Clear the tree items, and try to reload from server.", }},
            { "MudBlazor.MudVirtualize`1.RefreshDataAsync", new() { Name = "RefreshDataAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Refreshes the data in the Virtualize component asynchronously.", }},
            { "MudBlazor.MultiMask.Backspace", new() { Name = "Backspace", TypeName = "Void", TypeFriendlyName = "", Summary = @"Triggers a backspace at the current cursor position.", Remarks = @"Has the same effect as pressing the <c>Backspace</c> key.", }},
            { "MudBlazor.MultiMask.CheckOption", new() { Name = "CheckOption", TypeName = "Nullable`1", TypeFriendlyName = "MaskOption?", IsProtected = true, Summary = @"Chooses the best <see cref=""T:MudBlazor.MaskOption"" /> based on the input so far.", }},
            { "MudBlazor.MultiMask.Delete", new() { Name = "Delete", TypeName = "Void", TypeFriendlyName = "", Summary = @"Triggers a delete at the current cursor position.", Remarks = @"Has the same effect as pressing the <c>Delete</c> key.", }},
            { "MudBlazor.MultiMask.DoCheckAndRedo", new() { Name = "DoCheckAndRedo", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Selects the current <see cref=""T:MudBlazor.MaskOption"" /> and applies an input character.", Parameters = 
                [
                    new() { Name = "action", TypeName = "System.Action", TypeFriendlyName = "Action", Summary = @"The action to apply to the input.", }, 
                ],
            }},
            { "MudBlazor.MultiMask.Insert", new() { Name = "Insert", TypeName = "Void", TypeFriendlyName = "", Summary = @"Inserts text at the current cursor position.", Parameters = 
                [
                    new() { Name = "input", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The characters to insert.", }, 
                ],
            }},
            { "MudBlazor.MultiMask.UpdateFrom", new() { Name = "UpdateFrom", TypeName = "Void", TypeFriendlyName = "", Summary = @"Copies the mask and mask characters from the specified mask.", Parameters = 
                [
                    new() { Name = "other", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Summary = @"The mask to copy from.", }, 
                ],
            }},
            { "MudBlazor.NavigationContext.<Clone>$", new() { Name = "<Clone>$", TypeName = "NavigationContext", TypeFriendlyName = "NavigationContext", }},
            { "MudBlazor.NavigationContext.Deconstruct", new() { Name = "Deconstruct", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "Disabled", TypeName = "System.Boolean&", TypeFriendlyName = "Boolean&", }, 
                    new() { Name = "Expanded", TypeName = "System.Boolean&", TypeFriendlyName = "Boolean&", }, 
                ],
            }},
            { "MudBlazor.NavigationContext.PrintMembers", new() { Name = "PrintMembers", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "builder", TypeName = "System.Text.StringBuilder", TypeFriendlyName = "StringBuilder", }, 
                ],
            }},
            { "MudBlazor.PatternMask.AlignAgainstMask", new() { Name = "AlignAgainstMask", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Summary = @"Applies an input to the mask starting at the given offset.", Returns = @"The text input with any delimiters and placeholders applied.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text to apply to the mask.", }, 
                    new() { Name = "maskOffset", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"Defaults to <c>0</c>.  The index of the mask to begin applying characters.", }, 
                ],
            }},
            { "MudBlazor.PatternMask.Backspace", new() { Name = "Backspace", TypeName = "Void", TypeFriendlyName = "", Summary = @"Triggers a backspace at the current cursor position.", Remarks = @"Has the same effect as pressing the <c>Backspace</c> key.", }},
            { "MudBlazor.PatternMask.Delete", new() { Name = "Delete", TypeName = "Void", TypeFriendlyName = "", Summary = @"Triggers a delete at the current cursor position.", Remarks = @"Has the same effect as pressing the <c>Delete</c> key.", }},
            { "MudBlazor.PatternMask.DeleteSelection", new() { Name = "DeleteSelection", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Deletes the selected characters.", Parameters = 
                [
                    new() { Name = "align", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the text to the right of the selection will be shifted to the left.", }, 
                ],
            }},
            { "MudBlazor.PatternMask.FillWithPlaceholder", new() { Name = "FillWithPlaceholder", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Summary = @"Fills the rest of the text with <see cref=""P:MudBlazor.PatternMask.Placeholder"" /> if it is set.", Returns = @"The text with appended placeholder characters.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text to modify.", }, 
                ],
            }},
            { "MudBlazor.PatternMask.GetCleanText", new() { Name = "GetCleanText", TypeName = "String", TypeFriendlyName = "string", Summary = @"The current text in the input, excluding delimiter or placeholder characters.", Remarks = @"When <see cref=""P:MudBlazor.PatternMask.CleanDelimiters"" /> is <c>true</c>, any undefined characters will be removed.  For example: for a mask of <c>0000 0000 0000 0000</c>, the spaces would be removed if they were an undefined character.", }},
            { "MudBlazor.PatternMask.InitInternals", new() { Name = "InitInternals", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Initializes this mask's characters and delimiters.", }},
            { "MudBlazor.PatternMask.Insert", new() { Name = "Insert", TypeName = "Void", TypeFriendlyName = "", Summary = @"Inserts text at the current cursor position.", Parameters = 
                [
                    new() { Name = "input", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The characters to insert.", }, 
                ],
            }},
            { "MudBlazor.PatternMask.IsMatch", new() { Name = "IsMatch", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Summary = @"Gets whether the specified character is a match for a mask character.", Returns = @"When <c>true</c>, the character is a match for the mask character.", Parameters = 
                [
                    new() { Name = "maskChar", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"The mask character to compare.", }, 
                    new() { Name = "textChar", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"The character to compare against the mask character regular expression.", }, 
                ],
            }},
            { "MudBlazor.PatternMask.ModifyFinalText", new() { Name = "ModifyFinalText", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Summary = @"When overridden, applies final adjustments to the text.", Returns = @"The adjusted final text.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The final text to adjust.", }, 
                ],
            }},
            { "MudBlazor.PatternMask.ModifyPartiallyAlignedMask", new() { Name = "ModifyPartiallyAlignedMask", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Parameters = 
                [
                    new() { Name = "mask", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "maskOffset", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                    new() { Name = "textIndex", TypeName = "System.Int32&", TypeFriendlyName = "ref int", }, 
                    new() { Name = "maskIndex", TypeName = "System.Int32&", TypeFriendlyName = "ref int", }, 
                    new() { Name = "alignedText", TypeName = "System.String&", TypeFriendlyName = "ref string", }, 
                ],
            }},
            { "MudBlazor.PatternMask.UpdateFrom", new() { Name = "UpdateFrom", TypeName = "Void", TypeFriendlyName = "", Summary = @"Copies the mask and mask characters from the specified mask.", Parameters = 
                [
                    new() { Name = "other", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Summary = @"The mask to copy from.", }, 
                ],
            }},
            { "MudBlazor.PatternMask.UpdateText", new() { Name = "UpdateText", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Overwrites the text and updates the cursor position.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text to set.", }, 
                ],
            }},
            { "MudBlazor.RangeConverter`1.Join", new() { Name = "Join", TypeName = "String", TypeFriendlyName = "string", Parameters = 
                [
                    new() { Name = "valueStart", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "valueEnd", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.RangeConverter`1.Split", new() { Name = "Split", TypeName = "Boolean", TypeFriendlyName = "bool", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "valueStart", TypeName = "System.String&", TypeFriendlyName = "ref string", }, 
                    new() { Name = "valueEnd", TypeName = "System.String&", TypeFriendlyName = "ref string", }, 
                ],
            }},
            { "MudBlazor.RegexMask.AlignAgainstMask", new() { Name = "AlignAgainstMask", TypeName = "String", TypeFriendlyName = "string", IsProtected = true, Summary = @"Applies an input to the mask.", Returns = @"The text input with any delimiters and placeholders applied.", Parameters = 
                [
                    new() { Name = "text", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The text to apply to the mask.", }, 
                ],
            }},
            { "MudBlazor.RegexMask.Backspace", new() { Name = "Backspace", TypeName = "Void", TypeFriendlyName = "", Summary = @"Triggers a backspace at the current cursor position.", Remarks = @"Has the same effect as pressing the <c>Backspace</c> key.", }},
            { "MudBlazor.RegexMask.Delete", new() { Name = "Delete", TypeName = "Void", TypeFriendlyName = "", Summary = @"Triggers a delete at the current cursor position.", Remarks = @"Has the same effect as pressing the <c>Delete</c> key.", }},
            { "MudBlazor.RegexMask.DeleteSelection", new() { Name = "DeleteSelection", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Deletes the selected characters.", Parameters = 
                [
                    new() { Name = "align", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, the text to the right of the selection will be shifted to the left.", }, 
                ],
            }},
            { "MudBlazor.RegexMask.Email", new() { Name = "Email", TypeName = "RegexMask", TypeFriendlyName = "RegexMask", Summary = @"Gets a mask for email addresses.", Parameters = 
                [
                    new() { Name = "mask", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Defaults to <c>Ex. user@domain.com</c>.  The mask to display.", }, 
                ],
            }},
            { "MudBlazor.RegexMask.InitInternals", new() { Name = "InitInternals", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Initializes this mask's characters and delimiters.", }},
            { "MudBlazor.RegexMask.InitRegex", new() { Name = "InitRegex", TypeName = "Void", TypeFriendlyName = "", IsProtected = true, Summary = @"Initializes the regular expression.", }},
            { "MudBlazor.RegexMask.Insert", new() { Name = "Insert", TypeName = "Void", TypeFriendlyName = "", Summary = @"Inserts text at the current cursor position.", Parameters = 
                [
                    new() { Name = "input", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The characters to insert.", }, 
                ],
            }},
            { "MudBlazor.RegexMask.IPv4", new() { Name = "IPv4", TypeName = "RegexMask", TypeFriendlyName = "RegexMask", Summary = @"Gets a mask for IPv4 addresses with optional port masking.", Parameters = 
                [
                    new() { Name = "includePort", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Defaults to <c>false</c>.  When <c>true</c>, a port number (from <c>0</c> to <c>65535</c>) is allowed.", }, 
                    new() { Name = "maskChar", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"Defaults to <c>0</c>.  The mask character for address digits.", }, 
                ],
            }},
            { "MudBlazor.RegexMask.IPv6", new() { Name = "IPv6", TypeName = "RegexMask", TypeFriendlyName = "RegexMask", Summary = @"Gets a mask for IPv6 addresses with optional port masking.", Parameters = 
                [
                    new() { Name = "includePort", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"Defaults to <c>false</c>.  When <c>true</c>, a port number (from <c>0</c> to <c>65535</c>) is allowed.", }, 
                    new() { Name = "maskChar", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"Defaults to <c>X</c>.  The mask character for address digits.", }, 
                    new() { Name = "portMaskChar", TypeName = "System.Char", TypeFriendlyName = "Char", Summary = @"Defaults to <c>0</c>.  The mask character for port digits.", }, 
                ],
            }},
            { "MudBlazor.RegexMask.UpdateFrom", new() { Name = "UpdateFrom", TypeName = "Void", TypeFriendlyName = "", Summary = @"Copies the mask and mask characters from the specified mask.", Parameters = 
                [
                    new() { Name = "other", TypeName = "MudBlazor.IMask", TypeFriendlyName = "IMask", Summary = @"The mask to copy from.", }, 
                ],
            }},
            { "MudBlazor.Services.KeyboardEvent.BeginInvoke", new() { Name = "BeginInvoke", TypeName = "IAsyncResult", TypeFriendlyName = "IAsyncResult", Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", TypeFriendlyName = "KeyboardEventArgs", }, 
                    new() { Name = "callback", TypeName = "System.AsyncCallback", TypeFriendlyName = "AsyncCallback", }, 
                    new() { Name = "object", TypeName = "System.Object", TypeFriendlyName = "object", }, 
                ],
            }},
            { "MudBlazor.Services.KeyboardEvent.EndInvoke", new() { Name = "EndInvoke", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "result", TypeName = "System.IAsyncResult", TypeFriendlyName = "IAsyncResult", }, 
                ],
            }},
            { "MudBlazor.Services.KeyboardEvent.Invoke", new() { Name = "Invoke", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "args", TypeName = "Microsoft.AspNetCore.Components.Web.KeyboardEventArgs", TypeFriendlyName = "KeyboardEventArgs", }, 
                ],
            }},
            { "MudBlazor.Services.SizeChanged.BeginInvoke", new() { Name = "BeginInvoke", TypeName = "IAsyncResult", TypeFriendlyName = "IAsyncResult", Parameters = 
                [
                    new() { Name = "changes", TypeName = "System.Collections.Generic.IDictionary`2[[Microsoft.AspNetCore.Components.ElementReference, Microsoft.AspNetCore.Components, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[MudBlazor.Interop.BoundingClientRect, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IDictionary<ElementReference, BoundingClientRect>", }, 
                    new() { Name = "callback", TypeName = "System.AsyncCallback", TypeFriendlyName = "AsyncCallback", }, 
                    new() { Name = "object", TypeName = "System.Object", TypeFriendlyName = "object", }, 
                ],
            }},
            { "MudBlazor.Services.SizeChanged.EndInvoke", new() { Name = "EndInvoke", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "result", TypeName = "System.IAsyncResult", TypeFriendlyName = "IAsyncResult", }, 
                ],
            }},
            { "MudBlazor.Services.SizeChanged.Invoke", new() { Name = "Invoke", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "changes", TypeName = "System.Collections.Generic.IDictionary`2[[Microsoft.AspNetCore.Components.ElementReference, Microsoft.AspNetCore.Components, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[MudBlazor.Interop.BoundingClientRect, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IDictionary<ElementReference, BoundingClientRect>", }, 
                ],
            }},
            { "MudBlazor.Snackbar.ForceClose", new() { Name = "ForceClose", TypeName = "Void", TypeFriendlyName = "", Summary = @"Forcibly closes the snackbar without performing any animations.", }},
            { "MudBlazor.Snackbar.PauseTransitions", new() { Name = "PauseTransitions", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "pause", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "MudBlazor.SnackbarService.Add", new() { Name = "Add", TypeName = "Snackbar", TypeFriendlyName = "Snackbar", Summary = @"Adds a new snackbar with the specified component.", Remarks = @"If a <paramref name=""key"" /> is provided, this snackbar will not be shown while any snackbar with the same key is being shown.", Returns = @"The created snackbar instance, or null if not created.", Parameters = 
                [
                    new() { Name = "componentParameters", TypeName = "System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Dictionary<string, object>", Summary = @"Optional parameters to pass to the component.", }, 
                    new() { Name = "severity", TypeName = "MudBlazor.Severity", TypeFriendlyName = "Severity", Summary = @"The severity of the snackbar message. Default is <see cref=""F:MudBlazor.Severity.Normal"" />.", }, 
                    new() { Name = "configure", TypeName = "System.Action`1[[MudBlazor.SnackbarOptions, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Action<SnackbarOptions>", Summary = @"Optional action to configure the <see cref=""T:MudBlazor.SnackbarOptions"" />.", }, 
                    new() { Name = "key", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"An optional key to uniquely identify the snackbar.", }, 
                ],
            }},
            { "MudBlazor.SnackbarService.Clear", new() { Name = "Clear", TypeName = "Void", TypeFriendlyName = "", Summary = @"Clears all displayed snackbars.", }},
            { "MudBlazor.SnackbarService.Remove", new() { Name = "Remove", TypeName = "Void", TypeFriendlyName = "", Summary = @"Removes the specified snackbar.", Parameters = 
                [
                    new() { Name = "snackbar", TypeName = "MudBlazor.Snackbar", TypeFriendlyName = "Snackbar", Summary = @"The snackbar to remove.", }, 
                ],
            }},
            { "MudBlazor.SnackbarService.RemoveByKey", new() { Name = "RemoveByKey", TypeName = "Void", TypeFriendlyName = "", Summary = @"Removes a snackbar by its key.", Parameters = 
                [
                    new() { Name = "key", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The key of the snackbar to remove.", }, 
                ],
            }},
            { "MudBlazor.SortDefinition`1.<Clone>$", new() { Name = "<Clone>$", TypeName = "SortDefinition`1", TypeFriendlyName = "SortDefinition<T>", }},
            { "MudBlazor.SortDefinition`1.Deconstruct", new() { Name = "Deconstruct", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "SortBy", TypeName = "System.String&", TypeFriendlyName = "ref string", }, 
                    new() { Name = "Descending", TypeName = "System.Boolean&", TypeFriendlyName = "Boolean&", }, 
                    new() { Name = "Index", TypeName = "System.Int32&", TypeFriendlyName = "ref int", }, 
                    new() { Name = "SortFunc", TypeName = "", TypeFriendlyName = "Func`2&", }, 
                    new() { Name = "Comparer", TypeName = "System.Collections.Generic.IComparer`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]&", TypeFriendlyName = "IComparer`1&", }, 
                ],
            }},
            { "MudBlazor.State.Builder.RegisterParameterBuilder`1.WithChangeHandler", new() { Name = "WithChangeHandler", TypeName = "RegisterParameterBuilder`1", TypeFriendlyName = "RegisterParameterBuilder<T>", Summary = @"Sets the parameter changed handler for the parameter.", Returns = @"The current instance of the builder.", Parameters = 
                [
                    new() { Name = "parameterChangedHandler", TypeName = "", TypeFriendlyName = "IParameterChangedHandler<T>", Summary = @"The parameter changed handler.", }, 
                    new() { Name = "handlerName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The handler's name. Do not set this value as it's set at compile-time through <see cref=""T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"" />.", }, 
                ],
            }},
            { "MudBlazor.State.Builder.RegisterParameterBuilder`1.WithComparer", new() { Name = "WithComparer", TypeName = "RegisterParameterBuilder`1", TypeFriendlyName = "RegisterParameterBuilder<T>", Summary = @"Sets the comparer for the parameter.", Remarks = @"This method is used when you need to register a static <see cref=""T:System.Collections.Generic.IEqualityComparer`1"" /> that doesn't change during <see cref=""T:MudBlazor.State.ParameterState`1"" /> lifespan.", Returns = @"The current instance of the builder.", Parameters = 
                [
                    new() { Name = "comparer", TypeName = "", TypeFriendlyName = "IEqualityComparer<T>", Summary = @"The comparer for the parameter.", }, 
                ],
            }},
            { "MudBlazor.State.Builder.RegisterParameterBuilder`1.WithEventCallback", new() { Name = "WithEventCallback", TypeName = "RegisterParameterBuilder`1", TypeFriendlyName = "RegisterParameterBuilder<T>", Summary = @"Sets the function to create the event callback for the parameter.", Returns = @"The current instance of the builder.", Parameters = 
                [
                    new() { Name = "eventCallbackFunc", TypeName = "", TypeFriendlyName = "Func<EventCallback<T>>", Summary = @"The function to create the event callback.", }, 
                ],
            }},
            { "MudBlazor.State.Builder.RegisterParameterBuilder`1.WithName", new() { Name = "WithName", TypeName = "RegisterParameterBuilder`1", TypeFriendlyName = "RegisterParameterBuilder<T>", Summary = @"Sets the metadata for the parameter.", Returns = @"The current instance of the builder.", Parameters = 
                [
                    new() { Name = "parameterName", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The name of the parameter, passed using nameof(...).", }, 
                ],
            }},
            { "MudBlazor.State.Builder.RegisterParameterBuilder`1.WithParameter", new() { Name = "WithParameter", TypeName = "RegisterParameterBuilder`1", TypeFriendlyName = "RegisterParameterBuilder<T>", Summary = @"Sets the function to get the parameter value.", Returns = @"The current instance of the builder.", Parameters = 
                [
                    new() { Name = "getParameterValueFunc", TypeName = "", TypeFriendlyName = "Func<T>", Summary = @"The function to get the parameter value.", }, 
                ],
            }},
            { "MudBlazor.State.ParameterState`1.SetValueAsync", new() { Name = "SetValueAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Set the parameter's value.", Remarks = @"Note: you should never set the parameter's property directly from within the component.Instead, use SetValueAsync on the ParameterState object.", Returns = @"A <see cref=""T:System.Threading.Tasks.Task"" /> representing the asynchronous operation.", Parameters = 
                [
                    new() { Name = "value", TypeName = "", TypeFriendlyName = "T", Summary = @"New parameter's value.", }, 
                ],
            }},
            { "MudBlazor.SvgLegend.HandleCheckboxChangeAsync", new() { Name = "HandleCheckboxChangeAsync", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Toggles the visibility of this legend.", }},
            { "MudBlazor.TableContext.Add", new() { Name = "Add", TypeName = "Void", TypeFriendlyName = "", Summary = @"Adds a row and its related data.", Parameters = 
                [
                    new() { Name = "row", TypeName = "MudBlazor.MudTr", TypeFriendlyName = "MudTr", Summary = @"The row to add.", }, 
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The data associated with the row.", }, 
                ],
            }},
            { "MudBlazor.TableContext.InitializeSorting", new() { Name = "InitializeSorting", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the initial sort direction when the table is initialized.", }},
            { "MudBlazor.TableContext.ManagePreviousEditedRow", new() { Name = "ManagePreviousEditedRow", TypeName = "Void", TypeFriendlyName = "", Summary = @"Notifies any editing row that a new row has been selected.", Parameters = 
                [
                    new() { Name = "row", TypeName = "MudBlazor.MudTr", TypeFriendlyName = "MudTr", Summary = @"The new row to edit.", }, 
                ],
            }},
            { "MudBlazor.TableContext.Remove", new() { Name = "Remove", TypeName = "Void", TypeFriendlyName = "", Summary = @"Removes a row and its related data.", Parameters = 
                [
                    new() { Name = "row", TypeName = "MudBlazor.MudTr", TypeFriendlyName = "MudTr", Summary = @"The row to remove.", }, 
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The data associated with the row.", }, 
                ],
            }},
            { "MudBlazor.TableContext.UpdateRowCheckBoxes", new() { Name = "UpdateRowCheckBoxes", TypeName = "Void", TypeFriendlyName = "", Summary = @"Refreshes the state of checkboxes in the table.", Parameters = 
                [
                    new() { Name = "updateGroups", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, checkboxes in all groups will be refreshed.", }, 
                    new() { Name = "updateHeaderFooter", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, checkboxes in all headers and footers will be refreshed.", }, 
                ],
            }},
            { "MudBlazor.TableContext`1.Add", new() { Name = "Add", TypeName = "Void", TypeFriendlyName = "", Summary = @"Adds a row and its related data.", Parameters = 
                [
                    new() { Name = "row", TypeName = "MudBlazor.MudTr", TypeFriendlyName = "MudTr", Summary = @"The row to add.", }, 
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The data associated with the row.", }, 
                ],
            }},
            { "MudBlazor.TableContext`1.InitializeSorting", new() { Name = "InitializeSorting", TypeName = "Void", TypeFriendlyName = "", Summary = @"Sets the initial sort direction when the table is initialized.", }},
            { "MudBlazor.TableContext`1.ManagePreviousEditedRow", new() { Name = "ManagePreviousEditedRow", TypeName = "Void", TypeFriendlyName = "", Summary = @"Notifies any editing row that a new row has been selected.", Parameters = 
                [
                    new() { Name = "row", TypeName = "MudBlazor.MudTr", TypeFriendlyName = "MudTr", Summary = @"The new row to edit.", }, 
                ],
            }},
            { "MudBlazor.TableContext`1.Remove", new() { Name = "Remove", TypeName = "Void", TypeFriendlyName = "", Summary = @"Removes a row and its related data.", Parameters = 
                [
                    new() { Name = "row", TypeName = "MudBlazor.MudTr", TypeFriendlyName = "MudTr", Summary = @"The row to remove.", }, 
                    new() { Name = "item", TypeName = "System.Object", TypeFriendlyName = "object", Summary = @"The data associated with the row.", }, 
                ],
            }},
            { "MudBlazor.TableContext`1.SetSortFunc", new() { Name = "SetSortFunc", TypeName = "Task", TypeFriendlyName = "Task", Summary = @"Updates the <see cref=""P:MudBlazor.TableContext`1.SortDirection"" /> and <see cref=""P:MudBlazor.TableContext`1.SortBy"" /> when the current sort has changed.", Parameters = 
                [
                    new() { Name = "label", TypeName = "", TypeFriendlyName = "MudTableSortLabel<T>", Summary = @"The new sort label to sort by.", }, 
                    new() { Name = "overrideDirectionNone", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c> and the label's sort direction is <see cref=""F:MudBlazor.SortDirection.None"" />, it will be changed to <see cref=""F:MudBlazor.SortDirection.Ascending"" />.", }, 
                ],
            }},
            { "MudBlazor.TableContext`1.Sort", new() { Name = "Sort", TypeName = "IEnumerable`1", TypeFriendlyName = "IEnumerable<T>", Summary = @"Gets the items sorted using the <see cref=""P:MudBlazor.TableContext`1.SortBy"" /> function.", Returns = @"The sorted items.", Parameters = 
                [
                    new() { Name = "items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", Summary = @"The items to sort.", }, 
                ],
            }},
            { "MudBlazor.TableContext`1.UpdateRowCheckBoxes", new() { Name = "UpdateRowCheckBoxes", TypeName = "Void", TypeFriendlyName = "", Summary = @"Refreshes the state of checkboxes in the table.", Parameters = 
                [
                    new() { Name = "updateGroups", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, checkboxes in all groups will be refreshed.", }, 
                    new() { Name = "updateHeaderFooter", TypeName = "System.Boolean", TypeFriendlyName = "bool", Summary = @"When <c>true</c>, checkboxes in all headers and footers will be refreshed.", }, 
                ],
            }},
            { "MudBlazor.TableRowValidator.Validate", new() { Name = "Validate", TypeName = "Void", TypeFriendlyName = "", Summary = @"Checks for data errors within this row.", }},
            { "MudBlazor.TimeSeriesChartSeries+TimeValue.<Clone>$", new() { Name = "<Clone>$", TypeName = "TimeValue", TypeFriendlyName = "TimeValue", }},
            { "MudBlazor.TimeSeriesChartSeries+TimeValue.Deconstruct", new() { Name = "Deconstruct", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "DateTime", TypeName = "System.DateTime&", TypeFriendlyName = "DateTime&", }, 
                    new() { Name = "Value", TypeName = "System.Double&", TypeFriendlyName = "ref double", }, 
                ],
            }},
            { "MudBlazor.TimeSeriesChartSeries+TimeValue.PrintMembers", new() { Name = "PrintMembers", TypeName = "Boolean", TypeFriendlyName = "bool", IsProtected = true, Parameters = 
                [
                    new() { Name = "builder", TypeName = "System.Text.StringBuilder", TypeFriendlyName = "StringBuilder", }, 
                ],
            }},
            { "MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1.CloneObject", new() { Name = "CloneObject", TypeName = "T", TypeFriendlyName = "T", Parameters = 
                [
                    new() { Name = "item", TypeName = "", TypeFriendlyName = "T", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.ChangeLightness", new() { Name = "ChangeLightness", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance by adjusting the lightness component value by the specified amount.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the adjusted lightness.", Parameters = 
                [
                    new() { Name = "amount", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The amount to adjust the lightness by (-1.0 to 1.0).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.ColorDarken", new() { Name = "ColorDarken", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance by darkening the color.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance that is darker than the original color.", Parameters = 
                [
                    new() { Name = "amount", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The amount to darken the color by.", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.ColorLighten", new() { Name = "ColorLighten", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance by lightening the color.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance that is lighter than the original color.", Parameters = 
                [
                    new() { Name = "amount", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The amount to lighten the color by.", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.ColorRgbDarken", new() { Name = "ColorRgbDarken", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance by darkening the color using the RGB algorithm.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance that is darker than the original color.", }},
            { "MudBlazor.Utilities.MudColor.ColorRgbLighten", new() { Name = "ColorRgbLighten", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance by lightening the color using the RGB algorithm.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance that is lighter than the original color.", }},
            { "MudBlazor.Utilities.MudColor.Deconstruct", new() { Name = "Deconstruct", TypeName = "Void", TypeFriendlyName = "", Summary = @"Deconstructs the <see cref=""T:MudBlazor.Utilities.MudColor"" /> into its red, green, and blue components.", Parameters = 
                [
                    new() { Name = "r", TypeName = "System.Byte&", TypeFriendlyName = "Byte&", Summary = @"The red component value (0 to 255).", }, 
                    new() { Name = "g", TypeName = "System.Byte&", TypeFriendlyName = "Byte&", Summary = @"The green component value (0 to 255).", }, 
                    new() { Name = "b", TypeName = "System.Byte&", TypeFriendlyName = "Byte&", Summary = @"The blue component value (0 to 255).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.GenerateAnalogousPalette", new() { Name = "GenerateAnalogousPalette", TypeName = "IEnumerable`1", TypeFriendlyName = "IEnumerable<MudColor>", Summary = @"Generates an analogous palette of colors based on a specified base color.", Returns = @"An enumerable collection of <see cref=""T:MudBlazor.Utilities.MudColor"" /> representing the analogous palette.", Parameters = 
                [
                    new() { Name = "baseColor", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The base color to generate the analogous palette from.", }, 
                    new() { Name = "numberOfColors", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The total number of colors in the analogous palette.", }, 
                    new() { Name = "angle", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The angle between each color in the analogous palette.", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.GenerateGradientPalette", new() { Name = "GenerateGradientPalette", TypeName = "IEnumerable`1", TypeFriendlyName = "IEnumerable<MudColor>", Summary = @"Generates a gradient palette of colors between two specified colors.", Returns = @"An enumerable collection of <see cref=""T:MudBlazor.Utilities.MudColor"" /> representing the gradient palette.", Parameters = 
                [
                    new() { Name = "startColor", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The starting color of the gradient.", }, 
                    new() { Name = "endColor", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The ending color of the gradient.", }, 
                    new() { Name = "numberOfColors", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The total number of colors in the gradient palette.", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.GenerateMultiGradientPalette", new() { Name = "GenerateMultiGradientPalette", TypeName = "IEnumerable`1", TypeFriendlyName = "IEnumerable<MudColor>", Summary = @"Generates a multi-gradient palette of colors between multiple specified colors.", Returns = @"An enumerable collection of <see cref=""T:MudBlazor.Utilities.MudColor"" /> representing the multi-gradient palette.", Parameters = 
                [
                    new() { Name = "colors", TypeName = "System.Collections.Generic.IReadOnlyList`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "IReadOnlyList<MudColor>", Summary = @"The list of colors to generate the multi-gradient palette from. Must contain at least two colors.", }, 
                    new() { Name = "numberOfColors", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The total number of colors in the multi-gradient palette.", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.GenerateTintShadePalette", new() { Name = "GenerateTintShadePalette", TypeName = "IEnumerable`1", TypeFriendlyName = "IEnumerable<MudColor>", Summary = @"Generates a palette of colors by lightening and darkening the base color.", Returns = @"A read-only list of <see cref=""T:MudBlazor.Utilities.MudColor"" /> representing the generated palette.", Parameters = 
                [
                    new() { Name = "baseColor", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The base color to generate the palette from.", }, 
                    new() { Name = "numberOfColors", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The total number of colors in the palette.", }, 
                    new() { Name = "tintStep", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The step value for lightening the color. If <paramref name=""tintStep"" /> is <c>0</c>, no lighter colors will be added to the palette.", }, 
                    new() { Name = "shadeStep", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The step value for darkening the color. If <paramref name=""shadeStep"" /> is <c>0</c>, no darker colors will be added to the palette.", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.HslEquals", new() { Name = "HslEquals", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Checks whether the HSL (Hue, Saturation, Lightness) values of this <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance are equal compared to another <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance.", Returns = @"True if the HSL are equal; otherwise, false.", Parameters = 
                [
                    new() { Name = "other", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance to compare HSL values with.", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.Lerp", new() { Name = "Lerp", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Linearly interpolates between two <see cref=""T:MudBlazor.Utilities.MudColor"" /> instances.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance that is the result of the interpolation.", Parameters = 
                [
                    new() { Name = "colorStart", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The starting <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance.", }, 
                    new() { Name = "colorEnd", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The ending <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance.", }, 
                    new() { Name = "t", TypeName = "System.Single", TypeFriendlyName = "float", Summary = @"The interpolation factor (0.0 to 1.0).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.Parse", new() { Name = "Parse", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Parses a string representation of a color to a <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance.", Remarks = @"The color can be represented in various formats, including hexadecimal (with or without alpha), RGB, and RGBA.Examples of valid color strings:- Hexadecimal format: ""#ab2a3d"", ""#ab2a3dff""- RGB format: ""rgb(12,15,40)""- RGBA format: ""rgba(12,15,40,0.42)""", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance representing the color.", Parameters = 
                [
                    new() { Name = "s", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The string representation of the color.", }, 
                    new() { Name = "provider", TypeName = "System.IFormatProvider", TypeFriendlyName = "IFormatProvider", Summary = @"An optional format provider.", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.RgbaEquals", new() { Name = "RgbaEquals", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Checks whether the RGBA (Red, Green, Blue, Alpha) values of this <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance are equal compared to another <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance.", Returns = @"True if the RGBA are equal; otherwise, false.", Parameters = 
                [
                    new() { Name = "other", TypeName = "MudBlazor.Utilities.MudColor", TypeFriendlyName = "MudColor", Summary = @"The <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance to compare HSL values with.", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.SetAlpha", new() { Name = "SetAlpha", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified alpha value while keeping the red, green, blue values unchanged.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified alpha component value.", Parameters = 
                [
                    new() { Name = "a", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The alpha component value (0 to 255).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.SetB", new() { Name = "SetB", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified blue component value while keeping the red, green, and alpha values unchanged.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified blue component value.", Parameters = 
                [
                    new() { Name = "b", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The blue component value (0 to 255).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.SetG", new() { Name = "SetG", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified green component value while keeping the red, blue, and alpha values unchanged.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified green component value.", Parameters = 
                [
                    new() { Name = "g", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The green component value (0 to 255).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.SetH", new() { Name = "SetH", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified hue value while keeping the saturation, lightness, and alpha values unchanged.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified hue value.", Parameters = 
                [
                    new() { Name = "h", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The hue component value (0 to 360).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.SetL", new() { Name = "SetL", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified lightness value while keeping the hue, saturation, and alpha values unchanged.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified lightness value.", Parameters = 
                [
                    new() { Name = "l", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The lightness component value (0.0 to 1.0).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.SetR", new() { Name = "SetR", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified red component value while keeping the green, blue, and alpha values unchanged.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified red component value.", Parameters = 
                [
                    new() { Name = "r", TypeName = "System.Int32", TypeFriendlyName = "int", Summary = @"The red component value (0 to 255).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.SetS", new() { Name = "SetS", TypeName = "MudColor", TypeFriendlyName = "MudColor", Summary = @"Creates a new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified saturation value while keeping the hue, lightness, and alpha values unchanged.", Returns = @"A new <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance with the specified saturation value.", Parameters = 
                [
                    new() { Name = "s", TypeName = "System.Double", TypeFriendlyName = "double", Summary = @"The saturation component value (0.0 to 1.0).", }, 
                ],
            }},
            { "MudBlazor.Utilities.MudColor.TryParse", new() { Name = "TryParse", TypeName = "Boolean", TypeFriendlyName = "bool", Summary = @"Tries to parse a string representation of a color to a <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance.", Remarks = @"The color can be represented in various formats, including hexadecimal (with or without alpha), RGB, and RGBA.Examples of valid color strings:- Hexadecimal format: ""#ab2a3d"", ""#ab2a3dff""- RGB format: ""rgb(12,15,40)""- RGBA format: ""rgba(12,15,40,0.42)""", Returns = @"<c>true</c> if the string was successfully parsed; otherwise, <c>false</c>.", Parameters = 
                [
                    new() { Name = "s", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The string representation of the color.", }, 
                    new() { Name = "provider", TypeName = "System.IFormatProvider", TypeFriendlyName = "IFormatProvider", Summary = @"An optional format provider.", }, 
                    new() { Name = "result", TypeName = "MudBlazor.Utilities.MudColor&", TypeFriendlyName = "MudColor&", Summary = @"When this method returns, contains the <see cref=""T:MudBlazor.Utilities.MudColor"" /> instance equivalent to the color contained in <paramref name=""s"" />, if the conversion succeeded, or <c>null</c> if the conversion failed.", }, 
                ],
            }},
            { "MudBlazor.Utilities.NaturalComparer.Compare", new() { Name = "Compare", TypeName = "Int32", TypeFriendlyName = "int", Parameters = 
                [
                    new() { Name = "x", TypeName = "System.Object", TypeFriendlyName = "object", }, 
                    new() { Name = "y", TypeName = "System.Object", TypeFriendlyName = "object", }, 
                ],
            }},
            { "MudBlazor.Utilities.NaturalComparer.CompareNatural", new() { Name = "CompareNatural", TypeName = "Int32", TypeFriendlyName = "int", Summary = @"Credit goes to user J.D. and user Ian Kemp from StackOverFlow for this algorithm https://stackoverflow.com/a/7048016", Parameters = 
                [
                    new() { Name = "strA", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "strB", TypeName = "System.String", TypeFriendlyName = "string", }, 
                ],
            }},
            { "MudBlazor.Utilities.SortingAssistant.UpdateOrder", new() { Name = "UpdateOrder", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "items", TypeName = "", TypeFriendlyName = "IEnumerable<T>", }, 
                    new() { Name = "dropInfo", TypeName = "", TypeFriendlyName = "MudItemDropInfo<T>", }, 
                    new() { Name = "valueUpdater", TypeName = "", TypeFriendlyName = "Expression<Func<T, int>>", }, 
                    new() { Name = "zoneOffset", TypeName = "System.Int32", TypeFriendlyName = "int", }, 
                ],
            }},
            { "MudBlazor.Utilities.StyleBuilder.AddStyle", new() { Name = "AddStyle", TypeName = "StyleBuilder", TypeFriendlyName = "StyleBuilder", Summary = @"Adds a conditional in-line style to the builder with a space separator and closing semicolon.", Returns = @"The <see cref=""T:MudBlazor.Utilities.StyleBuilder"" /> instance.", Parameters = 
                [
                    new() { Name = "style", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The style to add.", }, 
                ],
            }},
            { "MudBlazor.Utilities.StyleBuilder.AddStyleFromAttributes", new() { Name = "AddStyleFromAttributes", TypeName = "StyleBuilder", TypeFriendlyName = "StyleBuilder", Summary = @"Adds a conditional in-line style when it exists in a dictionary to the builder with a separator.This is a null-safe operation.", Returns = @"The <see cref=""T:MudBlazor.Utilities.StyleBuilder"" /> instance.", Parameters = 
                [
                    new() { Name = "additionalAttributes", TypeName = "System.Collections.Generic.IReadOnlyDictionary`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "IReadOnlyDictionary<string, object>", Summary = @"Additional attribute splat parameters.", }, 
                ],
            }},
            { "MudBlazor.Utilities.StyleBuilder.Build", new() { Name = "Build", TypeName = "String", TypeFriendlyName = "string", Summary = @"Finalizes the completed style as a string.", Returns = @"The string representation of the style.", }},
            { "MudBlazor.Utilities.StyleBuilder.Default", new() { Name = "Default", TypeName = "StyleBuilder", TypeFriendlyName = "StyleBuilder", Summary = @"Creates a new instance of StyleBuilder with the specified property and value.", Remarks = @"Call <see cref=""M:MudBlazor.Utilities.StyleBuilder.Build"" />&gt; to return the completed style as a string.", Returns = @"The <see cref=""T:MudBlazor.Utilities.StyleBuilder"" /> instance.", Parameters = 
                [
                    new() { Name = "prop", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The CSS property.", }, 
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"The value of the property.", }, 
                ],
            }},
            { "MudBlazor.Utilities.StyleBuilder.Empty", new() { Name = "Empty", TypeName = "StyleBuilder", TypeFriendlyName = "StyleBuilder", Summary = @"Creates an empty instance of StyleBuilder.", Remarks = @"Call <see cref=""M:MudBlazor.Utilities.StyleBuilder.Build"" />&gt; to return the completed style as a string.", Returns = @"The <see cref=""T:MudBlazor.Utilities.StyleBuilder"" /> instance.", }},
            { "MudBlazor.Utilities.ValueBuilder.AddValue", new() { Name = "AddValue", TypeName = "ValueBuilder", TypeFriendlyName = "ValueBuilder", Summary = @"Adds a space separated conditional value to a property.", Parameters = 
                [
                    new() { Name = "value", TypeName = "System.String", TypeFriendlyName = "string", }, 
                    new() { Name = "when", TypeName = "System.Boolean", TypeFriendlyName = "bool", }, 
                ],
            }},
            { "System.Delegate.Clone", new() { Name = "Clone", TypeName = "Object", TypeFriendlyName = "object", }},
            { "System.Delegate.DynamicInvoke", new() { Name = "DynamicInvoke", TypeName = "Object", TypeFriendlyName = "object", Parameters = 
                [
                    new() { Name = "args", TypeName = "System.Object[]", TypeFriendlyName = "Object[]", }, 
                ],
            }},
            { "System.Delegate.DynamicInvokeImpl", new() { Name = "DynamicInvokeImpl", TypeName = "Object", TypeFriendlyName = "object", IsProtected = true, Parameters = 
                [
                    new() { Name = "args", TypeName = "System.Object[]", TypeFriendlyName = "Object[]", }, 
                ],
            }},
            { "System.Exception.GetBaseException", new() { Name = "GetBaseException", TypeName = "Exception", TypeFriendlyName = "Exception", }},
            { "System.Exception.GetObjectData", new() { Name = "GetObjectData", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "info", TypeName = "System.Runtime.Serialization.SerializationInfo", TypeFriendlyName = "SerializationInfo", }, 
                    new() { Name = "context", TypeName = "System.Runtime.Serialization.StreamingContext", TypeFriendlyName = "StreamingContext", }, 
                ],
            }},
            { "System.MulticastDelegate.CombineImpl", new() { Name = "CombineImpl", TypeName = "Delegate", TypeFriendlyName = "Delegate", IsProtected = true, Parameters = 
                [
                    new() { Name = "follow", TypeName = "System.Delegate", TypeFriendlyName = "Delegate", }, 
                ],
            }},
            { "System.MulticastDelegate.GetInvocationList", new() { Name = "GetInvocationList", TypeName = "Delegate[]", TypeFriendlyName = "Delegate[]", }},
            { "System.MulticastDelegate.GetMethodImpl", new() { Name = "GetMethodImpl", TypeName = "MethodInfo", TypeFriendlyName = "MethodInfo", IsProtected = true, }},
            { "System.MulticastDelegate.GetObjectData", new() { Name = "GetObjectData", TypeName = "Void", TypeFriendlyName = "", Parameters = 
                [
                    new() { Name = "info", TypeName = "System.Runtime.Serialization.SerializationInfo", TypeFriendlyName = "SerializationInfo", }, 
                    new() { Name = "context", TypeName = "System.Runtime.Serialization.StreamingContext", TypeFriendlyName = "StreamingContext", }, 
                ],
            }},
            { "System.MulticastDelegate.RemoveImpl", new() { Name = "RemoveImpl", TypeName = "Delegate", TypeFriendlyName = "Delegate", IsProtected = true, Parameters = 
                [
                    new() { Name = "value", TypeName = "System.Delegate", TypeFriendlyName = "Delegate", }, 
                ],
            }},
        };

        // Build all of the documented fields
        Fields = new()
        {
            { "MudBlazor.Adornment.End", new() { Name = "End", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Summary = @"The adornment is placed at the end of the field.", }},
            { "MudBlazor.Adornment.None", new() { Name = "None", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Summary = @"No adornment is displayed.", }},
            { "MudBlazor.Adornment.Start", new() { Name = "Start", TypeName = "MudBlazor.Adornment", TypeFriendlyName = "Adornment", Summary = @"The adornment is placed at the start of the field.", }},
            { "MudBlazor.AggregateType.Avg", new() { Name = "Avg", TypeName = "MudBlazor.AggregateType", TypeFriendlyName = "AggregateType", Summary = @"Calculates the average of values.", }},
            { "MudBlazor.AggregateType.Count", new() { Name = "Count", TypeName = "MudBlazor.AggregateType", TypeFriendlyName = "AggregateType", Summary = @"Calculates the number of values.", }},
            { "MudBlazor.AggregateType.Custom", new() { Name = "Custom", TypeName = "MudBlazor.AggregateType", TypeFriendlyName = "AggregateType", Summary = @"Calculates the aggregate using a custom function.", }},
            { "MudBlazor.AggregateType.Max", new() { Name = "Max", TypeName = "MudBlazor.AggregateType", TypeFriendlyName = "AggregateType", Summary = @"Calculates the maximum value.", }},
            { "MudBlazor.AggregateType.Min", new() { Name = "Min", TypeName = "MudBlazor.AggregateType", TypeFriendlyName = "AggregateType", Summary = @"Calculates the minimum value.", }},
            { "MudBlazor.AggregateType.Sum", new() { Name = "Sum", TypeName = "MudBlazor.AggregateType", TypeFriendlyName = "AggregateType", Summary = @"Calculates the sum of values.", }},
            { "MudBlazor.Align.Center", new() { Name = "Center", TypeName = "MudBlazor.Align", TypeFriendlyName = "Align", }},
            { "MudBlazor.Align.End", new() { Name = "End", TypeName = "MudBlazor.Align", TypeFriendlyName = "Align", }},
            { "MudBlazor.Align.Inherit", new() { Name = "Inherit", TypeName = "MudBlazor.Align", TypeFriendlyName = "Align", }},
            { "MudBlazor.Align.Justify", new() { Name = "Justify", TypeName = "MudBlazor.Align", TypeFriendlyName = "Align", }},
            { "MudBlazor.Align.Left", new() { Name = "Left", TypeName = "MudBlazor.Align", TypeFriendlyName = "Align", }},
            { "MudBlazor.Align.Right", new() { Name = "Right", TypeName = "MudBlazor.Align", TypeFriendlyName = "Align", }},
            { "MudBlazor.Align.Start", new() { Name = "Start", TypeName = "MudBlazor.Align", TypeFriendlyName = "Align", }},
            { "MudBlazor.AlignItems.Baseline", new() { Name = "Baseline", TypeName = "MudBlazor.AlignItems", TypeFriendlyName = "AlignItems", Summary = @"Items are aligned to keep text consistently aligned.", }},
            { "MudBlazor.AlignItems.Center", new() { Name = "Center", TypeName = "MudBlazor.AlignItems", TypeFriendlyName = "AlignItems", Summary = @"The center of items is aligned to the center of the container.", }},
            { "MudBlazor.AlignItems.End", new() { Name = "End", TypeName = "MudBlazor.AlignItems", TypeFriendlyName = "AlignItems", Summary = @"The bottom edge of items are aligned to the bottom of the container.", }},
            { "MudBlazor.AlignItems.Start", new() { Name = "Start", TypeName = "MudBlazor.AlignItems", TypeFriendlyName = "AlignItems", Summary = @"The top edge of items are aligned to the top of the container.", }},
            { "MudBlazor.AlignItems.Stretch", new() { Name = "Stretch", TypeName = "MudBlazor.AlignItems", TypeFriendlyName = "AlignItems", Summary = @"Items will have the same height as the container.", }},
            { "MudBlazor.Anchor.Bottom", new() { Name = "Bottom", TypeName = "MudBlazor.Anchor", TypeFriendlyName = "Anchor", Summary = @"The component will display on the bottom of the container.", }},
            { "MudBlazor.Anchor.End", new() { Name = "End", TypeName = "MudBlazor.Anchor", TypeFriendlyName = "Anchor", Summary = @"The component will display based on Right-to-Left (RTL) language settings.", Remarks = @"When RTL is enabled, the component is displayed on the left edge, otherwise the right edge.", }},
            { "MudBlazor.Anchor.Left", new() { Name = "Left", TypeName = "MudBlazor.Anchor", TypeFriendlyName = "Anchor", Summary = @"The component will display on the left edge.", }},
            { "MudBlazor.Anchor.Right", new() { Name = "Right", TypeName = "MudBlazor.Anchor", TypeFriendlyName = "Anchor", Summary = @"The component will display on the right edge.", }},
            { "MudBlazor.Anchor.Start", new() { Name = "Start", TypeName = "MudBlazor.Anchor", TypeFriendlyName = "Anchor", Summary = @"The component will display based on Right-to-Left (RTL) language settings.", Remarks = @"When RTL is enabled, the component is displayed on the right edge, otherwise the left edge.", }},
            { "MudBlazor.Anchor.Top", new() { Name = "Top", TypeName = "MudBlazor.Anchor", TypeFriendlyName = "Anchor", Summary = @"The component will display on the top of the container.", }},
            { "MudBlazor.Animation.False", new() { Name = "False", TypeName = "MudBlazor.Animation", TypeFriendlyName = "Animation", Summary = @"No animation occurs.", }},
            { "MudBlazor.Animation.Pulse", new() { Name = "Pulse", TypeName = "MudBlazor.Animation", TypeFriendlyName = "Animation", Summary = @"The animation fades in and out in a pulsing loop.", }},
            { "MudBlazor.Animation.Wave", new() { Name = "Wave", TypeName = "MudBlazor.Animation", TypeFriendlyName = "Animation", Summary = @"A left-to-right wave effect occurs.", }},
            { "MudBlazor.Breakpoint.Always", new() { Name = "Always", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"Content will always be visible.", }},
            { "MudBlazor.Breakpoint.Lg", new() { Name = "Lg", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A desktop computer.", Remarks = @"Between <c>1280</c> and <c>1920</c> pixels wide.", }},
            { "MudBlazor.Breakpoint.LgAndDown", new() { Name = "LgAndDown", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A desktop computer or smaller device.", Remarks = @"<c>1920</c> pixels wide, or less.", }},
            { "MudBlazor.Breakpoint.LgAndUp", new() { Name = "LgAndUp", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A desktop computer, or larger device.", Remarks = @"<c>1280</c> pixels wide, or more.", }},
            { "MudBlazor.Breakpoint.Md", new() { Name = "Md", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A large tablet or laptop.", Remarks = @"Between <c>960</c> and <c>1280</c> pixels wide.", }},
            { "MudBlazor.Breakpoint.MdAndDown", new() { Name = "MdAndDown", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A large tablet, laptop, tablet, or smaller device.", Remarks = @"<c>1280</c> pixels wide, or less.", }},
            { "MudBlazor.Breakpoint.MdAndUp", new() { Name = "MdAndUp", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A large tablet, laptop, or larger device.", Remarks = @"<c>960</c> pixels wide, or more.", }},
            { "MudBlazor.Breakpoint.None", new() { Name = "None", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"No breakpoint applies.", }},
            { "MudBlazor.Breakpoint.Sm", new() { Name = "Sm", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A small to medium tablet.", Remarks = @"Between <c>600</c> and <c>960</c> pixels wide.", }},
            { "MudBlazor.Breakpoint.SmAndDown", new() { Name = "SmAndDown", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A small to medium tablet, or smaller device.", Remarks = @"<c>960</c> pixels wide, or less.", }},
            { "MudBlazor.Breakpoint.SmAndUp", new() { Name = "SmAndUp", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A small to medium-sized tablet, or larger device.", Remarks = @"<c>600</c> pixels wide, or more.", }},
            { "MudBlazor.Breakpoint.Xl", new() { Name = "Xl", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A high-definition or 4K desktop computer monitor.", Remarks = @"Between <c>1920</c> and <c>2560</c> pixels wide.", }},
            { "MudBlazor.Breakpoint.XlAndDown", new() { Name = "XlAndDown", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A high-definition or 4K desktop computer monitor, or smaller device.", Remarks = @"<c>2560</c> pixels wide, or less.", }},
            { "MudBlazor.Breakpoint.XlAndUp", new() { Name = "XlAndUp", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A high-definition or 4K desktop computer monitor, or larger device.", Remarks = @"<c>1920</c> pixels wide, or more.", }},
            { "MudBlazor.Breakpoint.Xs", new() { Name = "Xs", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"A small to large phone.", Remarks = @"<c>600</c> pixels wide or less.", }},
            { "MudBlazor.Breakpoint.Xxl", new() { Name = "Xxl", TypeName = "MudBlazor.Breakpoint", TypeFriendlyName = "Breakpoint", Summary = @"An ultra-wide of 4K+ desktop computer monitor.", Remarks = @"<c>2560</c> or more pixels wide.", }},
            { "MudBlazor.ButtonType.Button", new() { Name = "Button", TypeName = "MudBlazor.ButtonType", TypeFriendlyName = "ButtonType", Summary = @"A regular click occurs.", }},
            { "MudBlazor.ButtonType.Reset", new() { Name = "Reset", TypeName = "MudBlazor.ButtonType", TypeFriendlyName = "ButtonType", Summary = @"The button resets a form.", }},
            { "MudBlazor.ButtonType.Submit", new() { Name = "Submit", TypeName = "MudBlazor.ButtonType", TypeFriendlyName = "ButtonType", Summary = @"The button will submit a form.", }},
            { "MudBlazor.ChartType.Bar", new() { Name = "Bar", TypeName = "MudBlazor.ChartType", TypeFriendlyName = "ChartType", Summary = @"Data is displayed as rectangles.", }},
            { "MudBlazor.ChartType.Donut", new() { Name = "Donut", TypeName = "MudBlazor.ChartType", TypeFriendlyName = "ChartType", Summary = @"Data is displayed as a hollow circle.", }},
            { "MudBlazor.ChartType.HeatMap", new() { Name = "HeatMap", TypeName = "MudBlazor.ChartType", TypeFriendlyName = "ChartType", Summary = @"Data is displayed as a heatmap. Similar to how github works.", }},
            { "MudBlazor.ChartType.Line", new() { Name = "Line", TypeName = "MudBlazor.ChartType", TypeFriendlyName = "ChartType", Summary = @"Data is displayed as connecting lines.", }},
            { "MudBlazor.ChartType.Pie", new() { Name = "Pie", TypeName = "MudBlazor.ChartType", TypeFriendlyName = "ChartType", Summary = @"Data is displayed as a portion of a circle.", }},
            { "MudBlazor.ChartType.StackedBar", new() { Name = "StackedBar", TypeName = "MudBlazor.ChartType", TypeFriendlyName = "ChartType", Summary = @"Data is displayed as connected rectangles.", }},
            { "MudBlazor.ChartType.Timeseries", new() { Name = "Timeseries", TypeName = "MudBlazor.ChartType", TypeFriendlyName = "ChartType", Summary = @"Data is displayed as connecting lines or as areas.", }},
            { "MudBlazor.ChatArrowPosition.Bottom", new() { Name = "Bottom", TypeName = "MudBlazor.ChatArrowPosition", TypeFriendlyName = "ChatArrowPosition", Summary = @"The arrow is attached to the bottom.", }},
            { "MudBlazor.ChatArrowPosition.Middle", new() { Name = "Middle", TypeName = "MudBlazor.ChatArrowPosition", TypeFriendlyName = "ChatArrowPosition", Summary = @"The arrow is attached to the middle.", }},
            { "MudBlazor.ChatArrowPosition.None", new() { Name = "None", TypeName = "MudBlazor.ChatArrowPosition", TypeFriendlyName = "ChatArrowPosition", Summary = @"The arrow is not shown.", }},
            { "MudBlazor.ChatArrowPosition.Top", new() { Name = "Top", TypeName = "MudBlazor.ChatArrowPosition", TypeFriendlyName = "ChatArrowPosition", Summary = @"The arrow is attached to the top.", }},
            { "MudBlazor.ChatBubblePosition.End", new() { Name = "End", TypeName = "MudBlazor.ChatBubblePosition", TypeFriendlyName = "ChatBubblePosition", Summary = @"The component is aligned based on Right-to-Left (RTL) settings.", Remarks = @"When Right-to-Left is enabled, the component is aligned to the left.  Otherwise, the right.", }},
            { "MudBlazor.ChatBubblePosition.Start", new() { Name = "Start", TypeName = "MudBlazor.ChatBubblePosition", TypeFriendlyName = "ChatBubblePosition", Summary = @"The component is aligned based on Right-to-Left (RTL) settings.", Remarks = @"When Right-to-Left is enabled, the component is aligned to the right.  Otherwise, the left.", }},
            { "MudBlazor.CollectionComparer`1.Default", new() { Name = "Default", TypeName = "MudBlazor.CollectionComparer`1", TypeFriendlyName = "CollectionComparer<T>", }},
            { "MudBlazor.Color.Dark", new() { Name = "Dark", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The dark color theme, usually used for dark mode or dark-themed elements.", }},
            { "MudBlazor.Color.Default", new() { Name = "Default", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The default color theme.", }},
            { "MudBlazor.Color.Error", new() { Name = "Error", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The error color theme, used to indicate errors or critical issues.", }},
            { "MudBlazor.Color.Info", new() { Name = "Info", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The info color theme, used to indicate informational messages.", }},
            { "MudBlazor.Color.Inherit", new() { Name = "Inherit", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"Inherits the color from the parent element.", }},
            { "MudBlazor.Color.Primary", new() { Name = "Primary", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The primary color theme, usually the main color used in the application.", }},
            { "MudBlazor.Color.Secondary", new() { Name = "Secondary", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The secondary color theme, often used for accents and highlights.", }},
            { "MudBlazor.Color.Success", new() { Name = "Success", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The success color theme, used to indicate successful operations.", }},
            { "MudBlazor.Color.Surface", new() { Name = "Surface", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The surface color theme, typically used for the background or surface elements.", Remarks = @"Note: Not all components support this theme.", }},
            { "MudBlazor.Color.Tertiary", new() { Name = "Tertiary", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The tertiary color theme, typically used for additional accents or highlights.", }},
            { "MudBlazor.Color.Transparent", new() { Name = "Transparent", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The transparent theme, making elements see-through.", Remarks = @"Note: Not all components support this theme.", }},
            { "MudBlazor.Color.Warning", new() { Name = "Warning", TypeName = "MudBlazor.Color", TypeFriendlyName = "Color", Summary = @"The warning color theme, used to indicate potential issues or warnings.", }},
            { "MudBlazor.ColorPickerMode.HEX", new() { Name = "HEX", TypeName = "MudBlazor.ColorPickerMode", TypeFriendlyName = "ColorPickerMode", Summary = @"Hexadecimal values are used.", }},
            { "MudBlazor.ColorPickerMode.HSL", new() { Name = "HSL", TypeName = "MudBlazor.ColorPickerMode", TypeFriendlyName = "ColorPickerMode", Summary = @"Hue, Saturation, and Lightness color values are used.", }},
            { "MudBlazor.ColorPickerMode.RGB", new() { Name = "RGB", TypeName = "MudBlazor.ColorPickerMode", TypeFriendlyName = "ColorPickerMode", Summary = @"Red, Green, and Blue color values are used.", }},
            { "MudBlazor.ColorPickerView.Grid", new() { Name = "Grid", TypeName = "MudBlazor.ColorPickerView", TypeFriendlyName = "ColorPickerView", Summary = @"Colors are chosen from a grid of possible values.", }},
            { "MudBlazor.ColorPickerView.GridCompact", new() { Name = "GridCompact", TypeName = "MudBlazor.ColorPickerView", TypeFriendlyName = "ColorPickerView", Summary = @"Colors are chosen from a smaller grid of possible values.", }},
            { "MudBlazor.ColorPickerView.Palette", new() { Name = "Palette", TypeName = "MudBlazor.ColorPickerView", TypeFriendlyName = "ColorPickerView", Summary = @"Colors are chosen from a pre-defined palette.", }},
            { "MudBlazor.ColorPickerView.Spectrum", new() { Name = "Spectrum", TypeName = "MudBlazor.ColorPickerView", TypeFriendlyName = "ColorPickerView", Summary = @"Colors are chosen from a gradient of colors.", }},
            { "MudBlazor.ContentNavigationExpandBehaviour.Always", new() { Name = "Always", TypeName = "MudBlazor.ContentNavigationExpandBehaviour", TypeFriendlyName = "ContentNavigationExpandBehaviour", }},
            { "MudBlazor.ContentNavigationExpandBehaviour.WhenSectionIsActive", new() { Name = "WhenSectionIsActive", TypeName = "MudBlazor.ContentNavigationExpandBehaviour", TypeFriendlyName = "ContentNavigationExpandBehaviour", }},
            { "MudBlazor.DataGridEditMode.Cell", new() { Name = "Cell", TypeName = "MudBlazor.DataGridEditMode", TypeFriendlyName = "DataGridEditMode", Summary = @"Values are edited in the cell.", }},
            { "MudBlazor.DataGridEditMode.Form", new() { Name = "Form", TypeName = "MudBlazor.DataGridEditMode", TypeFriendlyName = "DataGridEditMode", Summary = @"A dialog is shown to edit values.", }},
            { "MudBlazor.DataGridEditTrigger.Manual", new() { Name = "Manual", TypeName = "MudBlazor.DataGridEditTrigger", TypeFriendlyName = "DataGridEditTrigger", Summary = @"Editing begins when the edit button is clicked.", }},
            { "MudBlazor.DataGridEditTrigger.OnRowClick", new() { Name = "OnRowClick", TypeName = "MudBlazor.DataGridEditTrigger", TypeFriendlyName = "DataGridEditTrigger", Summary = @"Editing begins when the row is clicked.", }},
            { "MudBlazor.DataGridFilterCaseSensitivity.CaseInsensitive", new() { Name = "CaseInsensitive", TypeName = "MudBlazor.DataGridFilterCaseSensitivity", TypeFriendlyName = "DataGridFilterCaseSensitivity", Summary = @"Text is compared using <see cref=""F:System.StringComparison.OrdinalIgnoreCase"" />.", Remarks = @"When using this value, casing of text does not matter.", }},
            { "MudBlazor.DataGridFilterCaseSensitivity.Default", new() { Name = "Default", TypeName = "MudBlazor.DataGridFilterCaseSensitivity", TypeFriendlyName = "DataGridFilterCaseSensitivity", Summary = @"Text is compared using <see cref=""F:System.StringComparison.Ordinal"" />.", Remarks = @"When using this value, casing of text matters.", }},
            { "MudBlazor.DataGridFilterCaseSensitivity.Ignore", new() { Name = "Ignore", TypeName = "MudBlazor.DataGridFilterCaseSensitivity", TypeFriendlyName = "DataGridFilterCaseSensitivity", Summary = @"Excludes any <see cref=""T:System.StringComparison"" /> value for text comparisons.", Remarks = @"This is typically used for Entity Framework expressions, which do not support string comparisons.", }},
            { "MudBlazor.DataGridFilterMode.ColumnFilterMenu", new() { Name = "ColumnFilterMenu", TypeName = "MudBlazor.DataGridFilterMode", TypeFriendlyName = "DataGridFilterMode", Summary = @"Only the current column filter is managed in a popover.", }},
            { "MudBlazor.DataGridFilterMode.ColumnFilterRow", new() { Name = "ColumnFilterRow", TypeName = "MudBlazor.DataGridFilterMode", TypeFriendlyName = "DataGridFilterMode", Summary = @"Filters are shown as a row in the grid.", }},
            { "MudBlazor.DataGridFilterMode.Simple", new() { Name = "Simple", TypeName = "MudBlazor.DataGridFilterMode", TypeFriendlyName = "DataGridFilterMode", Summary = @"All filters are managed in a single popover.", }},
            { "MudBlazor.DefaultConverter`1.GlobalGetFunc", new() { Name = "GlobalGetFunc", TypeName = "", TypeFriendlyName = "Func<T, string>", Summary = @"A static global delegate used if no converter is found.", }},
            { "MudBlazor.DefaultConverter`1.GlobalSetFunc", new() { Name = "GlobalSetFunc", TypeName = "", TypeFriendlyName = "Func<string, T>", Summary = @"A static global delegate used if no converter is found.", }},
            { "MudBlazor.DefaultFocus.Element", new() { Name = "Element", TypeName = "MudBlazor.DefaultFocus", TypeFriendlyName = "DefaultFocus", Summary = @"This component will receive focus.", }},
            { "MudBlazor.DefaultFocus.FirstChild", new() { Name = "FirstChild", TypeName = "MudBlazor.DefaultFocus", TypeFriendlyName = "DefaultFocus", Summary = @"The first child within this component will receive focus.", }},
            { "MudBlazor.DefaultFocus.LastChild", new() { Name = "LastChild", TypeName = "MudBlazor.DefaultFocus", TypeFriendlyName = "DefaultFocus", Summary = @"The last child within this component will receive focus.", }},
            { "MudBlazor.DefaultFocus.None", new() { Name = "None", TypeName = "MudBlazor.DefaultFocus", TypeFriendlyName = "DefaultFocus", Summary = @"No focus will occur.", }},
            { "MudBlazor.Defaults+Classes+Position.BottomCenter", new() { Name = "BottomCenter", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear on the bottom, centered horizontally.", }},
            { "MudBlazor.Defaults+Classes+Position.BottomEnd", new() { Name = "BottomEnd", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear on the bottom, aligned based on Right-to-Left settings.", }},
            { "MudBlazor.Defaults+Classes+Position.BottomLeft", new() { Name = "BottomLeft", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear in the bottom-left corner.", }},
            { "MudBlazor.Defaults+Classes+Position.BottomRight", new() { Name = "BottomRight", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear in the bottom-right corner.", }},
            { "MudBlazor.Defaults+Classes+Position.BottomStart", new() { Name = "BottomStart", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear on the bottom, aligned based on Right-to-Left settings.", }},
            { "MudBlazor.Defaults+Classes+Position.TopCenter", new() { Name = "TopCenter", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear at the top, centered horizontally.", }},
            { "MudBlazor.Defaults+Classes+Position.TopEnd", new() { Name = "TopEnd", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear at the top, aligned based on Right-to-Left settings.", }},
            { "MudBlazor.Defaults+Classes+Position.TopLeft", new() { Name = "TopLeft", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear in the top-left corner.", }},
            { "MudBlazor.Defaults+Classes+Position.TopRight", new() { Name = "TopRight", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear in the top-right corner.", }},
            { "MudBlazor.Defaults+Classes+Position.TopStart", new() { Name = "TopStart", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Snackbars will appear at the top, aligned based on Right-to-Left settings.", }},
            { "MudBlazor.DialogPosition.BottomCenter", new() { Name = "BottomCenter", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear on the bottom of the screen, centered horizontally.", }},
            { "MudBlazor.DialogPosition.BottomLeft", new() { Name = "BottomLeft", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear on the lower-left corner of the screen.", }},
            { "MudBlazor.DialogPosition.BottomRight", new() { Name = "BottomRight", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear on the lower-right corner of the screen.", }},
            { "MudBlazor.DialogPosition.Center", new() { Name = "Center", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear in the center of the screen.", }},
            { "MudBlazor.DialogPosition.CenterLeft", new() { Name = "CenterLeft", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear on the left side of the screen, centered vertically.", }},
            { "MudBlazor.DialogPosition.CenterRight", new() { Name = "CenterRight", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear on the left side of the screen, centered vertically.", }},
            { "MudBlazor.DialogPosition.Custom", new() { Name = "Custom", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear at a custom position.", }},
            { "MudBlazor.DialogPosition.TopCenter", new() { Name = "TopCenter", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear on the top of the screen, centered horizontally.", }},
            { "MudBlazor.DialogPosition.TopLeft", new() { Name = "TopLeft", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear on the upper-left corner of the screen.", }},
            { "MudBlazor.DialogPosition.TopRight", new() { Name = "TopRight", TypeName = "MudBlazor.DialogPosition", TypeFriendlyName = "DialogPosition", Summary = @"The dialog will appear on the upper-right corner of the screen.", }},
            { "MudBlazor.Direction.Bottom", new() { Name = "Bottom", TypeName = "MudBlazor.Direction", TypeFriendlyName = "Direction", }},
            { "MudBlazor.Direction.End", new() { Name = "End", TypeName = "MudBlazor.Direction", TypeFriendlyName = "Direction", }},
            { "MudBlazor.Direction.Left", new() { Name = "Left", TypeName = "MudBlazor.Direction", TypeFriendlyName = "Direction", }},
            { "MudBlazor.Direction.Right", new() { Name = "Right", TypeName = "MudBlazor.Direction", TypeFriendlyName = "Direction", }},
            { "MudBlazor.Direction.Start", new() { Name = "Start", TypeName = "MudBlazor.Direction", TypeFriendlyName = "Direction", }},
            { "MudBlazor.Direction.Top", new() { Name = "Top", TypeName = "MudBlazor.Direction", TypeFriendlyName = "Direction", }},
            { "MudBlazor.DividerType.FullWidth", new() { Name = "FullWidth", TypeName = "MudBlazor.DividerType", TypeFriendlyName = "DividerType", Summary = @"The divider will fill the width of its container.", }},
            { "MudBlazor.DividerType.Inset", new() { Name = "Inset", TypeName = "MudBlazor.DividerType", TypeFriendlyName = "DividerType", Summary = @"The divider has a margin on its left side.", }},
            { "MudBlazor.DividerType.Middle", new() { Name = "Middle", TypeName = "MudBlazor.DividerType", TypeFriendlyName = "DividerType", Summary = @"The divider has a margin on the left and right sides.", }},
            { "MudBlazor.DoubleEpsilonEqualityComparer.Default", new() { Name = "Default", TypeName = "MudBlazor.DoubleEpsilonEqualityComparer", TypeFriendlyName = "DoubleEpsilonEqualityComparer", Summary = @"Gets the default instance of <see cref=""T:MudBlazor.DoubleEpsilonEqualityComparer"" />.", }},
            { "MudBlazor.DrawerClipMode.Always", new() { Name = "Always", TypeName = "MudBlazor.DrawerClipMode", TypeFriendlyName = "DrawerClipMode", Summary = @"The drawer will display underneath the <see cref=""T:MudBlazor.MudAppBar"" /> and display over content when opened.", }},
            { "MudBlazor.DrawerClipMode.Docked", new() { Name = "Docked", TypeName = "MudBlazor.DrawerClipMode", TypeFriendlyName = "DrawerClipMode", Summary = @"The drawer will display underneath the <see cref=""T:MudBlazor.MudAppBar"" /> and push content to the side when opening.", }},
            { "MudBlazor.DrawerClipMode.Never", new() { Name = "Never", TypeName = "MudBlazor.DrawerClipMode", TypeFriendlyName = "DrawerClipMode", Summary = @"The drawer will display over the <see cref=""T:MudBlazor.MudAppBar"" /> and other content.", }},
            { "MudBlazor.DrawerVariant.Mini", new() { Name = "Mini", TypeName = "MudBlazor.DrawerVariant", TypeFriendlyName = "DrawerVariant", Summary = @"The drawer has a small width but will expand when hovering over it.", }},
            { "MudBlazor.DrawerVariant.Persistent", new() { Name = "Persistent", TypeName = "MudBlazor.DrawerVariant", TypeFriendlyName = "DrawerVariant", Summary = @"The drawer will open outside of its container, shifting other contents when opened.", }},
            { "MudBlazor.DrawerVariant.Responsive", new() { Name = "Responsive", TypeName = "MudBlazor.DrawerVariant", TypeFriendlyName = "DrawerVariant", Summary = @"The drawer behaves like <see cref=""F:MudBlazor.DrawerVariant.Persistent"" /> in wider screens, but <see cref=""F:MudBlazor.DrawerVariant.Temporary"" /> on smaller screens.", }},
            { "MudBlazor.DrawerVariant.Temporary", new() { Name = "Temporary", TypeName = "MudBlazor.DrawerVariant", TypeFriendlyName = "DrawerVariant", Summary = @"The drawer will open above all other content until a section is selected.", }},
            { "MudBlazor.DropdownWidth.Adaptive", new() { Name = "Adaptive", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Summary = @"The dropdown will open at the min width of it's activator parent, preventing it from being less wide but allowing it to grow.", }},
            { "MudBlazor.DropdownWidth.Ignore", new() { Name = "Ignore", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Summary = @"The dropdown width will be ignored.", }},
            { "MudBlazor.DropdownWidth.Relative", new() { Name = "Relative", TypeName = "MudBlazor.DropdownWidth", TypeFriendlyName = "DropdownWidth", Summary = @"The dropdown will open at the max width of it's activator parent preventing it from growing beyond that width.", }},
            { "MudBlazor.Edge.End", new() { Name = "End", TypeName = "MudBlazor.Edge", TypeFriendlyName = "Edge", Summary = @"A negative margin is applied to the end of the element.", Remarks = @"This reduces the space at the end (trailing side) of the element. It is commonly used when an adornment, such as an icon or label, is positioned at the end of the component and requires alignment with the right edge in left-to-right layouts (or the left edge in right-to-left layouts).", }},
            { "MudBlazor.Edge.False", new() { Name = "False", TypeName = "MudBlazor.Edge", TypeFriendlyName = "Edge", Summary = @"No negative margin is applied to the element.", Remarks = @"This is the default behavior, meaning the element maintains its normal margins without adjustments.It is used when there is no need to modify the element’s margin for adornments or icons.", }},
            { "MudBlazor.Edge.Start", new() { Name = "Start", TypeName = "MudBlazor.Edge", TypeFriendlyName = "Edge", Summary = @"A negative margin is applied to the start of the element.", Remarks = @"This reduces the space at the start (leading side) of the element. It is typically used when an adornment, such as an icon or label, is positioned at the beginning of the component and needs to be aligned more closely with the left edge in left-to-right layouts (or the right edge in right-to-left layouts).", }},
            { "MudBlazor.FilterOperator+Boolean.Is", new() { Name = "Is", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values which match the filter value.", }},
            { "MudBlazor.FilterOperator+DateTime.After", new() { Name = "After", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values after the filter date.", }},
            { "MudBlazor.FilterOperator+DateTime.Before", new() { Name = "Before", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values before the filter date.", }},
            { "MudBlazor.FilterOperator+DateTime.Empty", new() { Name = "Empty", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find null values.", }},
            { "MudBlazor.FilterOperator+DateTime.Is", new() { Name = "Is", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values matching the filter date.", }},
            { "MudBlazor.FilterOperator+DateTime.IsNot", new() { Name = "IsNot", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values different from the filter date.", }},
            { "MudBlazor.FilterOperator+DateTime.NotEmpty", new() { Name = "NotEmpty", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find any non-null value.", }},
            { "MudBlazor.FilterOperator+DateTime.OnOrAfter", new() { Name = "OnOrAfter", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values on or after the filter date.", }},
            { "MudBlazor.FilterOperator+DateTime.OnOrBefore", new() { Name = "OnOrBefore", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values on or before the filter date.", }},
            { "MudBlazor.FilterOperator+Enum.Is", new() { Name = "Is", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values matching the filter value.", }},
            { "MudBlazor.FilterOperator+Enum.IsNot", new() { Name = "IsNot", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values which do not match the filter value.", }},
            { "MudBlazor.FilterOperator+Guid.Equal", new() { Name = "Equal", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values matching the filter Guid.", }},
            { "MudBlazor.FilterOperator+Guid.NotEqual", new() { Name = "NotEqual", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values different from the filter Guid.", }},
            { "MudBlazor.FilterOperator+Number.Empty", new() { Name = "Empty", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find null values.", }},
            { "MudBlazor.FilterOperator+Number.Equal", new() { Name = "Equal", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find numbers equal to the filter value.", }},
            { "MudBlazor.FilterOperator+Number.GreaterThan", new() { Name = "GreaterThan", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find numbers larger than the filter value.", }},
            { "MudBlazor.FilterOperator+Number.GreaterThanOrEqual", new() { Name = "GreaterThanOrEqual", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find numbers larger than, or equal to, the filter value.", }},
            { "MudBlazor.FilterOperator+Number.LessThan", new() { Name = "LessThan", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find numbers smaller than the filter value.", }},
            { "MudBlazor.FilterOperator+Number.LessThanOrEqual", new() { Name = "LessThanOrEqual", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find numbers smaller than, or equal to, the filter value.", }},
            { "MudBlazor.FilterOperator+Number.NotEmpty", new() { Name = "NotEmpty", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find values which are not null.", }},
            { "MudBlazor.FilterOperator+Number.NotEqual", new() { Name = "NotEqual", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find numbers different from the filter value.", }},
            { "MudBlazor.FilterOperator+String.Contains", new() { Name = "Contains", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find text containing the filter value.", }},
            { "MudBlazor.FilterOperator+String.Empty", new() { Name = "Empty", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find text which is null, empty, or whitespace.", }},
            { "MudBlazor.FilterOperator+String.EndsWith", new() { Name = "EndsWith", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find text which ends with the filter value.", }},
            { "MudBlazor.FilterOperator+String.Equal", new() { Name = "Equal", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find text which is the same as the filter value.", }},
            { "MudBlazor.FilterOperator+String.NotContains", new() { Name = "NotContains", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find text which does not contain the filter value.", }},
            { "MudBlazor.FilterOperator+String.NotEmpty", new() { Name = "NotEmpty", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find text which is not null, empty, or whitespace.", }},
            { "MudBlazor.FilterOperator+String.NotEqual", new() { Name = "NotEqual", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find text which is different from the filter value.", }},
            { "MudBlazor.FilterOperator+String.StartsWith", new() { Name = "StartsWith", TypeName = "System.String", TypeFriendlyName = "string", Summary = @"Find text which starts with the filter value.", }},
            { "MudBlazor.HorizontalAlignment.Center", new() { Name = "Center", TypeName = "MudBlazor.HorizontalAlignment", TypeFriendlyName = "HorizontalAlignment", Summary = @"The component is horizontally centered.", }},
            { "MudBlazor.HorizontalAlignment.End", new() { Name = "End", TypeName = "MudBlazor.HorizontalAlignment", TypeFriendlyName = "HorizontalAlignment", Summary = @"The component is aligned based on Right-to-Left (RTL) settings.", Remarks = @"When Right-to-Left is enabled, the component is aligned to the left.  Otherwise, the right.", }},
            { "MudBlazor.HorizontalAlignment.Left", new() { Name = "Left", TypeName = "MudBlazor.HorizontalAlignment", TypeFriendlyName = "HorizontalAlignment", Summary = @"The component is aligned to the left.", }},
            { "MudBlazor.HorizontalAlignment.Right", new() { Name = "Right", TypeName = "MudBlazor.HorizontalAlignment", TypeFriendlyName = "HorizontalAlignment", Summary = @"The component is aligned to the right.", }},
            { "MudBlazor.HorizontalAlignment.Start", new() { Name = "Start", TypeName = "MudBlazor.HorizontalAlignment", TypeFriendlyName = "HorizontalAlignment", Summary = @"The component is aligned based on Right-to-Left (RTL) settings.", Remarks = @"When Right-to-Left is enabled, the component is aligned to the right.  Otherwise, the left.", }},
            { "MudBlazor.InputMode.decimal", new() { Name = "decimal", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Summary = @"Fractional numeric input keyboard containing the digits and decimal separator for the user's locale (typically . or ,). Devices may or may not show a minus key (-).<a href=""https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode#decimal"">Reference</a>", }},
            { "MudBlazor.InputMode.email", new() { Name = "email", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Summary = @"A virtual keyboard optimized for entering email addresses. Typically includes the @ character as well as other optimizations. Inputs that require email addresses should typically use &lt;input type=""email""&gt; instead.<a href=""https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode#email"">Reference</a>", }},
            { "MudBlazor.InputMode.none", new() { Name = "none", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Summary = @"No virtual keyboard. For when the page implements its own keyboard input control.<a href=""https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode#none"">Reference</a>", }},
            { "MudBlazor.InputMode.numeric", new() { Name = "numeric", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Summary = @"Numeric input keyboard, but only requires the digits 0–9. Devices may or may not show a minus key.<a href=""https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode#numeric"">Reference</a>", }},
            { "MudBlazor.InputMode.search", new() { Name = "search", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Summary = @"A virtual keyboard optimized for search input. For instance, the return/submit key may be labeled “Search”, along with possible other optimizations. Inputs that require a search query should typically use &lt;input type=""search""&gt; instead.<a href=""https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode#search"">Reference</a>", }},
            { "MudBlazor.InputMode.tel", new() { Name = "tel", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Summary = @"A telephone keypad input, including the digits 0–9, the asterisk (*), and the pound (#) key. Inputs that require a telephone number should typically use &lt;input type=""tel""&gt;instead.<a href=""https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode#tel"">Reference</a>", }},
            { "MudBlazor.InputMode.text", new() { Name = "text", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Summary = @"Default. Standard input keyboard for the user's current locale.<a href=""https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode#text"">Reference</a>", }},
            { "MudBlazor.InputMode.url", new() { Name = "url", TypeName = "MudBlazor.InputMode", TypeFriendlyName = "InputMode", Summary = @"A keypad optimized for entering URLs. This may have the / key more prominent, for example. Enhanced features could include history access and so on. Inputs that require a URL should typically use &lt;input type=""url""&gt; instead.<a href=""https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode#url"">Reference</a>", }},
            { "MudBlazor.InputType.Color", new() { Name = "Color", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Date", new() { Name = "Date", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.DateTimeLocal", new() { Name = "DateTimeLocal", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Email", new() { Name = "Email", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Hidden", new() { Name = "Hidden", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Month", new() { Name = "Month", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Number", new() { Name = "Number", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Password", new() { Name = "Password", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Search", new() { Name = "Search", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Telephone", new() { Name = "Telephone", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Text", new() { Name = "Text", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Time", new() { Name = "Time", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Url", new() { Name = "Url", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InputType.Week", new() { Name = "Week", TypeName = "MudBlazor.InputType", TypeFriendlyName = "InputType", }},
            { "MudBlazor.InterpolationOption.EndSlope", new() { Name = "EndSlope", TypeName = "MudBlazor.InterpolationOption", TypeFriendlyName = "InterpolationOption", Summary = @"Lines are smoothed to pass through each data point as an end-point spline.", }},
            { "MudBlazor.InterpolationOption.NaturalSpline", new() { Name = "NaturalSpline", TypeName = "MudBlazor.InterpolationOption", TypeFriendlyName = "InterpolationOption", Summary = @"Lines are smoothed to pass through each data point as a natural spline.", }},
            { "MudBlazor.InterpolationOption.Periodic", new() { Name = "Periodic", TypeName = "MudBlazor.InterpolationOption", TypeFriendlyName = "InterpolationOption", Summary = @"Lines are smoothed to pass through each data point as a periodic spline.", }},
            { "MudBlazor.InterpolationOption.Straight", new() { Name = "Straight", TypeName = "MudBlazor.InterpolationOption", TypeFriendlyName = "InterpolationOption", Summary = @"Lines are straight from one point to the next.", }},
            { "MudBlazor.Justify.Center", new() { Name = "Center", TypeName = "MudBlazor.Justify", TypeFriendlyName = "Justify", Summary = @"Items are centered horizontally.", }},
            { "MudBlazor.Justify.FlexEnd", new() { Name = "FlexEnd", TypeName = "MudBlazor.Justify", TypeFriendlyName = "Justify", Summary = @"Items are aligned to the end of the <see cref=""T:MudBlazor.MudStack"" />.", }},
            { "MudBlazor.Justify.FlexStart", new() { Name = "FlexStart", TypeName = "MudBlazor.Justify", TypeFriendlyName = "Justify", Summary = @"Items are aligned to the start of the <see cref=""T:MudBlazor.MudStack"" />.", }},
            { "MudBlazor.Justify.SpaceAround", new() { Name = "SpaceAround", TypeName = "MudBlazor.Justify", TypeFriendlyName = "Justify", Summary = @"Space is applied between each item, with additional spacing for the first and last item.", }},
            { "MudBlazor.Justify.SpaceBetween", new() { Name = "SpaceBetween", TypeName = "MudBlazor.Justify", TypeFriendlyName = "Justify", Summary = @"Space is applied between each item, with items aligned against the start and end.", }},
            { "MudBlazor.Justify.SpaceEvenly", new() { Name = "SpaceEvenly", TypeName = "MudBlazor.Justify", TypeFriendlyName = "Justify", Summary = @"Space is applied evenly between each item, including the edges of the first and last item.", }},
            { "MudBlazor.Margin.Dense", new() { Name = "Dense", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Summary = @"Compact spacing is applied.", }},
            { "MudBlazor.Margin.None", new() { Name = "None", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Summary = @"No spacing is applied.", }},
            { "MudBlazor.Margin.Normal", new() { Name = "Normal", TypeName = "MudBlazor.Margin", TypeFriendlyName = "Margin", Summary = @"Normal spacing is applied.", }},
            { "MudBlazor.MaxWidth.ExtraExtraLarge", new() { Name = "ExtraExtraLarge", TypeName = "MudBlazor.MaxWidth", TypeFriendlyName = "MaxWidth", }},
            { "MudBlazor.MaxWidth.ExtraLarge", new() { Name = "ExtraLarge", TypeName = "MudBlazor.MaxWidth", TypeFriendlyName = "MaxWidth", }},
            { "MudBlazor.MaxWidth.ExtraSmall", new() { Name = "ExtraSmall", TypeName = "MudBlazor.MaxWidth", TypeFriendlyName = "MaxWidth", }},
            { "MudBlazor.MaxWidth.False", new() { Name = "False", TypeName = "MudBlazor.MaxWidth", TypeFriendlyName = "MaxWidth", }},
            { "MudBlazor.MaxWidth.Large", new() { Name = "Large", TypeName = "MudBlazor.MaxWidth", TypeFriendlyName = "MaxWidth", }},
            { "MudBlazor.MaxWidth.Medium", new() { Name = "Medium", TypeName = "MudBlazor.MaxWidth", TypeFriendlyName = "MaxWidth", }},
            { "MudBlazor.MaxWidth.Small", new() { Name = "Small", TypeName = "MudBlazor.MaxWidth", TypeFriendlyName = "MaxWidth", }},
            { "MudBlazor.MouseEvent.LeftClick", new() { Name = "LeftClick", TypeName = "MudBlazor.MouseEvent", TypeFriendlyName = "MouseEvent", Summary = @"The left mouse button was clicked.", }},
            { "MudBlazor.MouseEvent.MouseOver", new() { Name = "MouseOver", TypeName = "MudBlazor.MouseEvent", TypeFriendlyName = "MouseEvent", Summary = @"The mouse is hovering over the activator.", }},
            { "MudBlazor.MouseEvent.RightClick", new() { Name = "RightClick", TypeName = "MudBlazor.MouseEvent", TypeFriendlyName = "MouseEvent", Summary = @"The right mouse button was clicked.", }},
            { "MudBlazor.MudBaseDatePicker.CurrentView", new() { Name = "CurrentView", TypeName = "MudBlazor.OpenTo", TypeFriendlyName = "OpenTo", IsProtected = true, }},
            { "MudBlazor.MudDataGrid`1.RenderedColumns", new() { Name = "RenderedColumns", TypeName = "", TypeFriendlyName = "List<Column<T>>", Summary = @"The columns currently being displayed.", }},
            { "MudBlazor.MudTabPanel.PanelRef", new() { Name = "PanelRef", TypeName = "Microsoft.AspNetCore.Components.ElementReference", TypeFriendlyName = "ElementReference", Summary = @"Reference to the underlying panel element.", }},
            { "MudBlazor.ObjectFit.Contain", new() { Name = "Contain", TypeName = "MudBlazor.ObjectFit", TypeFriendlyName = "ObjectFit", Summary = @"The content is scaled to maintain its aspect ratio while filling the container.", Remarks = @"The object is scaled to fill the container, while preserving its aspect ratio, which may cause a ""letterbox"" if its aspect ratio does not match the aspect ratio of its container.", }},
            { "MudBlazor.ObjectFit.Cover", new() { Name = "Cover", TypeName = "MudBlazor.ObjectFit", TypeFriendlyName = "ObjectFit", Summary = @"The content is sized to maintain its aspect ratio while filling the container.", Remarks = @"If the object's aspect ratio does not match the aspect ratio of its container, then the object will be clipped to fit.", }},
            { "MudBlazor.ObjectFit.Fill", new() { Name = "Fill", TypeName = "MudBlazor.ObjectFit", TypeFriendlyName = "ObjectFit", Summary = @"The content is sized to fill the container.", Remarks = @"The object will completely fill the container. If the object's aspect ratio does not match the aspect ratio of its container, then the object will be stretched to fit.", }},
            { "MudBlazor.ObjectFit.None", new() { Name = "None", TypeName = "MudBlazor.ObjectFit", TypeFriendlyName = "ObjectFit", Summary = @"The image is cropped to fit within its container.", }},
            { "MudBlazor.ObjectFit.ScaleDown", new() { Name = "ScaleDown", TypeName = "MudBlazor.ObjectFit", TypeFriendlyName = "ObjectFit", Summary = @"The content is sized as if <see cref=""F:MudBlazor.ObjectFit.None"" /> or <see cref=""F:MudBlazor.ObjectFit.Contain"" /> were specified, whichever would result in a smaller object size.", }},
            { "MudBlazor.ObjectPosition.Bottom", new() { Name = "Bottom", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Summary = @"The bottom of the object is aligned with the bottom of its container.", }},
            { "MudBlazor.ObjectPosition.Center", new() { Name = "Center", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Summary = @"The object is centered vertically and horizontally.", }},
            { "MudBlazor.ObjectPosition.Left", new() { Name = "Left", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Summary = @"The left of the object is aligned with the left of its container.", }},
            { "MudBlazor.ObjectPosition.LeftBottom", new() { Name = "LeftBottom", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Summary = @"The left and bottom of the object is aligned with the left and bottom of its container.", }},
            { "MudBlazor.ObjectPosition.LeftTop", new() { Name = "LeftTop", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Summary = @"The left and top of the object is aligned with the left and top of its container.", }},
            { "MudBlazor.ObjectPosition.Right", new() { Name = "Right", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Summary = @"The right of the object is aligned with the right of its container.", }},
            { "MudBlazor.ObjectPosition.RightBottom", new() { Name = "RightBottom", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Summary = @"The right and bottom of the object is aligned with the right and bottom of its container.", }},
            { "MudBlazor.ObjectPosition.RightTop", new() { Name = "RightTop", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Summary = @"The right and top of the object is aligned with the right and top of its container.", }},
            { "MudBlazor.ObjectPosition.Top", new() { Name = "Top", TypeName = "MudBlazor.ObjectPosition", TypeFriendlyName = "ObjectPosition", Summary = @"The top of the object is aligned with the top of its container.", }},
            { "MudBlazor.OpenTo.Date", new() { Name = "Date", TypeName = "MudBlazor.OpenTo", TypeFriendlyName = "OpenTo", Summary = @"The day picker is displayed.", }},
            { "MudBlazor.OpenTo.Hours", new() { Name = "Hours", TypeName = "MudBlazor.OpenTo", TypeFriendlyName = "OpenTo", Summary = @"The hours picker is displayed.", }},
            { "MudBlazor.OpenTo.Minutes", new() { Name = "Minutes", TypeName = "MudBlazor.OpenTo", TypeFriendlyName = "OpenTo", Summary = @"The minutes picker is displayed.", }},
            { "MudBlazor.OpenTo.Month", new() { Name = "Month", TypeName = "MudBlazor.OpenTo", TypeFriendlyName = "OpenTo", Summary = @"The month picker is displayed.", }},
            { "MudBlazor.OpenTo.None", new() { Name = "None", TypeName = "MudBlazor.OpenTo", TypeFriendlyName = "OpenTo", Summary = @"No default view.", }},
            { "MudBlazor.OpenTo.Year", new() { Name = "Year", TypeName = "MudBlazor.OpenTo", TypeFriendlyName = "OpenTo", Summary = @"The year picker is displayed.", }},
            { "MudBlazor.Orientation.Landscape", new() { Name = "Landscape", TypeName = "MudBlazor.Orientation", TypeFriendlyName = "Orientation", Summary = @"The picker is wider than it is tall, with a title on the left.", }},
            { "MudBlazor.Orientation.Portrait", new() { Name = "Portrait", TypeName = "MudBlazor.Orientation", TypeFriendlyName = "Orientation", Summary = @"The picker is taller than it is wide, with a title on top.", }},
            { "MudBlazor.Origin.BottomCenter", new() { Name = "BottomCenter", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Summary = @"The component is centered on the container's bottom center.", Remarks = @"For transform origins, the component is centered above the anchor origin.", }},
            { "MudBlazor.Origin.BottomLeft", new() { Name = "BottomLeft", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Summary = @"The component's top-left corner is at the container's bottom-left corner.", Remarks = @"For transform origins, the component displays up and to the right of the anchor origin.", }},
            { "MudBlazor.Origin.BottomRight", new() { Name = "BottomRight", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Summary = @"The component's top-left corner is at the container's bottom-right corner.", Remarks = @"For transform origins, the component displays up and to the left of the anchor origin.", }},
            { "MudBlazor.Origin.CenterCenter", new() { Name = "CenterCenter", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Summary = @"The component's top-left corner is at the center of the container.", Remarks = @"For transform origins, the component is centered over the anchor origin.", }},
            { "MudBlazor.Origin.CenterLeft", new() { Name = "CenterLeft", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Summary = @"The component's top-left corner is at the left of the container, and its center vertically.", Remarks = @"For transform origins, the component displays to the right of the anchor origin.", }},
            { "MudBlazor.Origin.CenterRight", new() { Name = "CenterRight", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Summary = @"The component's top-left corner is at the right of the container, and its center vertically.", Remarks = @"For transform origins, the component displays to the left of the anchor origin.", }},
            { "MudBlazor.Origin.TopCenter", new() { Name = "TopCenter", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Summary = @"The component is centered on the container's top center.", Remarks = @"For transform origins, the component displays below the anchor origin.", }},
            { "MudBlazor.Origin.TopLeft", new() { Name = "TopLeft", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Summary = @"The component's top-left corner is at the container's top-left corner.", Remarks = @"For transform origins, the component displays down and to the right of the anchor origin.", }},
            { "MudBlazor.Origin.TopRight", new() { Name = "TopRight", TypeName = "MudBlazor.Origin", TypeFriendlyName = "Origin", Summary = @"The component's top-left corner is at the container's top-right corner.", Remarks = @"For transform origins, the component displays down and to the left of the anchor origin.", }},
            { "MudBlazor.OverflowBehavior.FlipAlways", new() { Name = "FlipAlways", TypeName = "MudBlazor.OverflowBehavior", TypeFriendlyName = "OverflowBehavior", Summary = @"Flips the component if it would overflow its container, dynamically adjusting as necessary to prevent overflow.", }},
            { "MudBlazor.OverflowBehavior.FlipNever", new() { Name = "FlipNever", TypeName = "MudBlazor.OverflowBehavior", TypeFriendlyName = "OverflowBehavior", Summary = @"Prevents any adjustment of the component, even if it would overflow the container.", }},
            { "MudBlazor.OverflowBehavior.FlipOnOpen", new() { Name = "FlipOnOpen", TypeName = "MudBlazor.OverflowBehavior", TypeFriendlyName = "OverflowBehavior", Summary = @"Flips the component if it would overflow its container, but only when it first opens.  Does not update dynamically if overflow changes afterwards.", }},
            { "MudBlazor.Page.First", new() { Name = "First", TypeName = "MudBlazor.Page", TypeFriendlyName = "Page", Summary = @"Navigate to the first page of results.", }},
            { "MudBlazor.Page.Last", new() { Name = "Last", TypeName = "MudBlazor.Page", TypeFriendlyName = "Page", Summary = @"Navigate to the last page of results.", }},
            { "MudBlazor.Page.Next", new() { Name = "Next", TypeName = "MudBlazor.Page", TypeFriendlyName = "Page", Summary = @"Navigate to the next page of results.", }},
            { "MudBlazor.Page.Previous", new() { Name = "Previous", TypeName = "MudBlazor.Page", TypeFriendlyName = "Page", Summary = @"Navigate to the previous page of results.", }},
            { "MudBlazor.PickerVariant.Dialog", new() { Name = "Dialog", TypeName = "MudBlazor.PickerVariant", TypeFriendlyName = "PickerVariant", Summary = @"A dialog is displayed to pick a value.", }},
            { "MudBlazor.PickerVariant.Inline", new() { Name = "Inline", TypeName = "MudBlazor.PickerVariant", TypeFriendlyName = "PickerVariant", Summary = @"The picker displays when the input is clicked.", }},
            { "MudBlazor.PickerVariant.Static", new() { Name = "Static", TypeName = "MudBlazor.PickerVariant", TypeFriendlyName = "PickerVariant", Summary = @"The picker is always visible.", }},
            { "MudBlazor.Placement.Bottom", new() { Name = "Bottom", TypeName = "MudBlazor.Placement", TypeFriendlyName = "Placement", }},
            { "MudBlazor.Placement.End", new() { Name = "End", TypeName = "MudBlazor.Placement", TypeFriendlyName = "Placement", }},
            { "MudBlazor.Placement.Left", new() { Name = "Left", TypeName = "MudBlazor.Placement", TypeFriendlyName = "Placement", }},
            { "MudBlazor.Placement.Right", new() { Name = "Right", TypeName = "MudBlazor.Placement", TypeFriendlyName = "Placement", }},
            { "MudBlazor.Placement.Start", new() { Name = "Start", TypeName = "MudBlazor.Placement", TypeFriendlyName = "Placement", }},
            { "MudBlazor.Placement.Top", new() { Name = "Top", TypeName = "MudBlazor.Placement", TypeFriendlyName = "Placement", }},
            { "MudBlazor.PopoverHolderOperation.Create", new() { Name = "Create", TypeName = "MudBlazor.PopoverHolderOperation", TypeFriendlyName = "PopoverHolderOperation", Summary = @"Specifies the creation operation for a popover holder.", }},
            { "MudBlazor.PopoverHolderOperation.Remove", new() { Name = "Remove", TypeName = "MudBlazor.PopoverHolderOperation", TypeFriendlyName = "PopoverHolderOperation", Summary = @"Specifies the removal operation for a popover holder.", }},
            { "MudBlazor.PopoverHolderOperation.Update", new() { Name = "Update", TypeName = "MudBlazor.PopoverHolderOperation", TypeFriendlyName = "PopoverHolderOperation", Summary = @"Specifies the update operation for a popover holder.", }},
            { "MudBlazor.PopoverMode.Default", new() { Name = "Default", TypeName = "MudBlazor.PopoverMode", TypeFriendlyName = "PopoverMode", Summary = @"The default popover mode that uses the <see cref=""T:MudBlazor.IPopoverService"" />.", }},
            { "MudBlazor.Position.Bottom", new() { Name = "Bottom", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", }},
            { "MudBlazor.Position.Center", new() { Name = "Center", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", }},
            { "MudBlazor.Position.End", new() { Name = "End", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", }},
            { "MudBlazor.Position.Left", new() { Name = "Left", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", }},
            { "MudBlazor.Position.Right", new() { Name = "Right", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", }},
            { "MudBlazor.Position.Start", new() { Name = "Start", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", }},
            { "MudBlazor.Position.Top", new() { Name = "Top", TypeName = "MudBlazor.Position", TypeFriendlyName = "Position", }},
            { "MudBlazor.ResizeMode.Column", new() { Name = "Column", TypeName = "MudBlazor.ResizeMode", TypeFriendlyName = "ResizeMode", Summary = @"Columns can be expanded a limited amount, ensuring all columns remain visible.", }},
            { "MudBlazor.ResizeMode.Container", new() { Name = "Container", TypeName = "MudBlazor.ResizeMode", TypeFriendlyName = "ResizeMode", Summary = @"Columns can be expanded any amount; the grid width will be expanded.", }},
            { "MudBlazor.ResizeMode.None", new() { Name = "None", TypeName = "MudBlazor.ResizeMode", TypeFriendlyName = "ResizeMode", Summary = @"Nothing happens when the grid is resized.", }},
            { "MudBlazor.ScrollBehavior.Auto", new() { Name = "Auto", TypeName = "MudBlazor.ScrollBehavior", TypeFriendlyName = "ScrollBehavior", Summary = @"Scrolls immediately.", }},
            { "MudBlazor.ScrollBehavior.Smooth", new() { Name = "Smooth", TypeName = "MudBlazor.ScrollBehavior", TypeFriendlyName = "ScrollBehavior", Summary = @"Scrolls in a smooth fashion.", }},
            { "MudBlazor.SelectionMode.MultiSelection", new() { Name = "MultiSelection", TypeName = "MudBlazor.SelectionMode", TypeFriendlyName = "SelectionMode", Summary = @"More than one selection is allowed.", }},
            { "MudBlazor.SelectionMode.SingleSelection", new() { Name = "SingleSelection", TypeName = "MudBlazor.SelectionMode", TypeFriendlyName = "SelectionMode", Summary = @"One selection is allowed at a time.", }},
            { "MudBlazor.SelectionMode.ToggleSelection", new() { Name = "ToggleSelection", TypeName = "MudBlazor.SelectionMode", TypeFriendlyName = "SelectionMode", Summary = @"One selection is toggled.", }},
            { "MudBlazor.Severity.Error", new() { Name = "Error", TypeName = "MudBlazor.Severity", TypeFriendlyName = "Severity", }},
            { "MudBlazor.Severity.Info", new() { Name = "Info", TypeName = "MudBlazor.Severity", TypeFriendlyName = "Severity", }},
            { "MudBlazor.Severity.Normal", new() { Name = "Normal", TypeName = "MudBlazor.Severity", TypeFriendlyName = "Severity", }},
            { "MudBlazor.Severity.Success", new() { Name = "Success", TypeName = "MudBlazor.Severity", TypeFriendlyName = "Severity", }},
            { "MudBlazor.Severity.Warning", new() { Name = "Warning", TypeName = "MudBlazor.Severity", TypeFriendlyName = "Severity", }},
            { "MudBlazor.Size.Large", new() { Name = "Large", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Summary = @"The largest size.", }},
            { "MudBlazor.Size.Medium", new() { Name = "Medium", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Summary = @"A medium size.", }},
            { "MudBlazor.Size.Small", new() { Name = "Small", TypeName = "MudBlazor.Size", TypeFriendlyName = "Size", Summary = @"The smallest size.", }},
            { "MudBlazor.SkeletonType.Circle", new() { Name = "Circle", TypeName = "MudBlazor.SkeletonType", TypeFriendlyName = "SkeletonType", Summary = @"The skeleton displays a circle shape.", Remarks = @"Use the <see cref=""P:MudBlazor.MudSkeleton.Width"" /> and <see cref=""P:MudBlazor.MudSkeleton.Height"" /> parameters to control its size.", }},
            { "MudBlazor.SkeletonType.Rectangle", new() { Name = "Rectangle", TypeName = "MudBlazor.SkeletonType", TypeFriendlyName = "SkeletonType", Summary = @"The skeleton displays a rectangle shape.", Remarks = @"Use the <see cref=""P:MudBlazor.MudSkeleton.Width"" /> and <see cref=""P:MudBlazor.MudSkeleton.Height"" /> parameters to control its size.", }},
            { "MudBlazor.SkeletonType.Text", new() { Name = "Text", TypeName = "MudBlazor.SkeletonType", TypeFriendlyName = "SkeletonType", Summary = @"The skeleton is a placeholder for text.", Remarks = @"Use the <see cref=""P:MudBlazor.MudSkeleton.Width"" /> and <see cref=""P:MudBlazor.MudSkeleton.Height"" /> parameters to control its size.", }},
            { "MudBlazor.SnackbarDuplicatesBehavior.Allow", new() { Name = "Allow", TypeName = "MudBlazor.SnackbarDuplicatesBehavior", TypeFriendlyName = "SnackbarDuplicatesBehavior", Summary = @"Duplicate snackbars are allowed.", }},
            { "MudBlazor.SnackbarDuplicatesBehavior.GlobalDefault", new() { Name = "GlobalDefault", TypeName = "MudBlazor.SnackbarDuplicatesBehavior", TypeFriendlyName = "SnackbarDuplicatesBehavior", Summary = @"The global default is used to control duplicate snackbars.", }},
            { "MudBlazor.SnackbarDuplicatesBehavior.Prevent", new() { Name = "Prevent", TypeName = "MudBlazor.SnackbarDuplicatesBehavior", TypeFriendlyName = "SnackbarDuplicatesBehavior", Summary = @"Duplicate snackbars will not be displayed.", }},
            { "MudBlazor.SortDirection.Ascending", new() { Name = "Ascending", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", Summary = @"Results are sorted in ascending order (A-Z).", }},
            { "MudBlazor.SortDirection.Descending", new() { Name = "Descending", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", Summary = @"Results are sorted in descending order (Z-A).", }},
            { "MudBlazor.SortDirection.None", new() { Name = "None", TypeName = "MudBlazor.SortDirection", TypeFriendlyName = "SortDirection", Summary = @"No sort direction.", }},
            { "MudBlazor.SortMode.Multiple", new() { Name = "Multiple", TypeName = "MudBlazor.SortMode", TypeFriendlyName = "SortMode", Summary = @"Sorting can be done for multiple columns.", }},
            { "MudBlazor.SortMode.None", new() { Name = "None", TypeName = "MudBlazor.SortMode", TypeFriendlyName = "SortMode", Summary = @"Sorting is not allowed.", }},
            { "MudBlazor.SortMode.Single", new() { Name = "Single", TypeName = "MudBlazor.SortMode", TypeFriendlyName = "SortMode", Summary = @"Sorting can occur for one column at a time.", }},
            { "MudBlazor.StepAction.Activate", new() { Name = "Activate", TypeName = "MudBlazor.StepAction", TypeFriendlyName = "StepAction", Summary = @"A request to activate a step.", }},
            { "MudBlazor.StepAction.Complete", new() { Name = "Complete", TypeName = "MudBlazor.StepAction", TypeFriendlyName = "StepAction", Summary = @"A request to complete the last step.", }},
            { "MudBlazor.StepAction.Reset", new() { Name = "Reset", TypeName = "MudBlazor.StepAction", TypeFriendlyName = "StepAction", Summary = @"A request to start over at the first step.", }},
            { "MudBlazor.StepAction.Skip", new() { Name = "Skip", TypeName = "MudBlazor.StepAction", TypeFriendlyName = "StepAction", Summary = @"A request to skip the current step.", }},
            { "MudBlazor.StretchItems.All", new() { Name = "All", TypeName = "MudBlazor.StretchItems", TypeFriendlyName = "StretchItems", Summary = @"All items are stretched evenly.", }},
            { "MudBlazor.StretchItems.End", new() { Name = "End", TypeName = "MudBlazor.StretchItems", TypeFriendlyName = "StretchItems", Summary = @"The last item is stretched.", }},
            { "MudBlazor.StretchItems.Middle", new() { Name = "Middle", TypeName = "MudBlazor.StretchItems", TypeFriendlyName = "StretchItems", Summary = @"All items except for the first and last are stretched.", }},
            { "MudBlazor.StretchItems.None", new() { Name = "None", TypeName = "MudBlazor.StretchItems", TypeFriendlyName = "StretchItems", Summary = @"No stretching is applied.", }},
            { "MudBlazor.StretchItems.Start", new() { Name = "Start", TypeName = "MudBlazor.StretchItems", TypeFriendlyName = "StretchItems", Summary = @"The first item is stretched.", }},
            { "MudBlazor.StretchItems.StartAndEnd", new() { Name = "StartAndEnd", TypeName = "MudBlazor.StretchItems", TypeFriendlyName = "StretchItems", Summary = @"The first and last items are stretched.", }},
            { "MudBlazor.SwipeDirection.BottomToTop", new() { Name = "BottomToTop", TypeName = "MudBlazor.SwipeDirection", TypeFriendlyName = "SwipeDirection", }},
            { "MudBlazor.SwipeDirection.LeftToRight", new() { Name = "LeftToRight", TypeName = "MudBlazor.SwipeDirection", TypeFriendlyName = "SwipeDirection", }},
            { "MudBlazor.SwipeDirection.None", new() { Name = "None", TypeName = "MudBlazor.SwipeDirection", TypeFriendlyName = "SwipeDirection", }},
            { "MudBlazor.SwipeDirection.RightToLeft", new() { Name = "RightToLeft", TypeName = "MudBlazor.SwipeDirection", TypeFriendlyName = "SwipeDirection", }},
            { "MudBlazor.SwipeDirection.TopToBottom", new() { Name = "TopToBottom", TypeName = "MudBlazor.SwipeDirection", TypeFriendlyName = "SwipeDirection", }},
            { "MudBlazor.TabHeaderPosition.After", new() { Name = "After", TypeName = "MudBlazor.TabHeaderPosition", TypeFriendlyName = "TabHeaderPosition", Summary = @"Additional content is placed after the first tab", }},
            { "MudBlazor.TabHeaderPosition.Before", new() { Name = "Before", TypeName = "MudBlazor.TabHeaderPosition", TypeFriendlyName = "TabHeaderPosition", Summary = @"Additional content is placed before the first tab", }},
            { "MudBlazor.TabHeaderPosition.None", new() { Name = "None", TypeName = "MudBlazor.TabHeaderPosition", TypeFriendlyName = "TabHeaderPosition", Summary = @"No additional content is rendered", }},
            { "MudBlazor.TabInteractionType.Activate", new() { Name = "Activate", TypeName = "MudBlazor.TabInteractionType", TypeFriendlyName = "TabInteractionType", }},
            { "MudBlazor.TableApplyButtonPosition.End", new() { Name = "End", TypeName = "MudBlazor.TableApplyButtonPosition", TypeFriendlyName = "TableApplyButtonPosition", Summary = @"The commit button is at the end of the row.", }},
            { "MudBlazor.TableApplyButtonPosition.Start", new() { Name = "Start", TypeName = "MudBlazor.TableApplyButtonPosition", TypeFriendlyName = "TableApplyButtonPosition", Summary = @"The commit button is at the start of the row.", }},
            { "MudBlazor.TableApplyButtonPosition.StartAndEnd", new() { Name = "StartAndEnd", TypeName = "MudBlazor.TableApplyButtonPosition", TypeFriendlyName = "TableApplyButtonPosition", Summary = @"The commit button is at both the start and end of the row.", }},
            { "MudBlazor.TableEditButtonPosition.End", new() { Name = "End", TypeName = "MudBlazor.TableEditButtonPosition", TypeFriendlyName = "TableEditButtonPosition", Summary = @"The edit button is at the end of the row.", }},
            { "MudBlazor.TableEditButtonPosition.Start", new() { Name = "Start", TypeName = "MudBlazor.TableEditButtonPosition", TypeFriendlyName = "TableEditButtonPosition", Summary = @"The edit button is at the start of the row.", }},
            { "MudBlazor.TableEditButtonPosition.StartAndEnd", new() { Name = "StartAndEnd", TypeName = "MudBlazor.TableEditButtonPosition", TypeFriendlyName = "TableEditButtonPosition", Summary = @"The edit button is both at the start and end of the row.", }},
            { "MudBlazor.TableEditTrigger.EditButton", new() { Name = "EditButton", TypeName = "MudBlazor.TableEditTrigger", TypeFriendlyName = "TableEditTrigger", Summary = @"Editing begins when the edit button is clicked.", }},
            { "MudBlazor.TableEditTrigger.RowClick", new() { Name = "RowClick", TypeName = "MudBlazor.TableEditTrigger", TypeFriendlyName = "TableEditTrigger", Summary = @"Editing begins when a row is clicked.", }},
            { "MudBlazor.TimeEditMode.Normal", new() { Name = "Normal", TypeName = "MudBlazor.TimeEditMode", TypeFriendlyName = "TimeEditMode", }},
            { "MudBlazor.TimeEditMode.OnlyHours", new() { Name = "OnlyHours", TypeName = "MudBlazor.TimeEditMode", TypeFriendlyName = "TimeEditMode", }},
            { "MudBlazor.TimeEditMode.OnlyMinutes", new() { Name = "OnlyMinutes", TypeName = "MudBlazor.TimeEditMode", TypeFriendlyName = "TimeEditMode", }},
            { "MudBlazor.TimelineAlign.Default", new() { Name = "Default", TypeName = "MudBlazor.TimelineAlign", TypeFriendlyName = "TimelineAlign", }},
            { "MudBlazor.TimelineAlign.End", new() { Name = "End", TypeName = "MudBlazor.TimelineAlign", TypeFriendlyName = "TimelineAlign", }},
            { "MudBlazor.TimelineAlign.Start", new() { Name = "Start", TypeName = "MudBlazor.TimelineAlign", TypeFriendlyName = "TimelineAlign", }},
            { "MudBlazor.TimelineOrientation.Horizontal", new() { Name = "Horizontal", TypeName = "MudBlazor.TimelineOrientation", TypeFriendlyName = "TimelineOrientation", }},
            { "MudBlazor.TimelineOrientation.Vertical", new() { Name = "Vertical", TypeName = "MudBlazor.TimelineOrientation", TypeFriendlyName = "TimelineOrientation", }},
            { "MudBlazor.TimelinePosition.Alternate", new() { Name = "Alternate", TypeName = "MudBlazor.TimelinePosition", TypeFriendlyName = "TimelinePosition", }},
            { "MudBlazor.TimelinePosition.Bottom", new() { Name = "Bottom", TypeName = "MudBlazor.TimelinePosition", TypeFriendlyName = "TimelinePosition", }},
            { "MudBlazor.TimelinePosition.End", new() { Name = "End", TypeName = "MudBlazor.TimelinePosition", TypeFriendlyName = "TimelinePosition", }},
            { "MudBlazor.TimelinePosition.Left", new() { Name = "Left", TypeName = "MudBlazor.TimelinePosition", TypeFriendlyName = "TimelinePosition", }},
            { "MudBlazor.TimelinePosition.Right", new() { Name = "Right", TypeName = "MudBlazor.TimelinePosition", TypeFriendlyName = "TimelinePosition", }},
            { "MudBlazor.TimelinePosition.Start", new() { Name = "Start", TypeName = "MudBlazor.TimelinePosition", TypeFriendlyName = "TimelinePosition", }},
            { "MudBlazor.TimelinePosition.Top", new() { Name = "Top", TypeName = "MudBlazor.TimelinePosition", TypeFriendlyName = "TimelinePosition", }},
            { "MudBlazor.TimeSeriesDisplayType.Area", new() { Name = "Area", TypeName = "MudBlazor.TimeSeriesDisplayType", TypeFriendlyName = "TimeSeriesDisplayType", }},
            { "MudBlazor.TimeSeriesDisplayType.Line", new() { Name = "Line", TypeName = "MudBlazor.TimeSeriesDisplayType", TypeFriendlyName = "TimeSeriesDisplayType", }},
            { "MudBlazor.Transition.Custom", new() { Name = "Custom", TypeName = "MudBlazor.Transition", TypeFriendlyName = "Transition", }},
            { "MudBlazor.Transition.Fade", new() { Name = "Fade", TypeName = "MudBlazor.Transition", TypeFriendlyName = "Transition", }},
            { "MudBlazor.Transition.None", new() { Name = "None", TypeName = "MudBlazor.Transition", TypeFriendlyName = "Transition", }},
            { "MudBlazor.Transition.Slide", new() { Name = "Slide", TypeName = "MudBlazor.Transition", TypeFriendlyName = "Transition", }},
            { "MudBlazor.Typo.body1", new() { Name = "body1", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the body1 typography style, using the <c>p</c> HTML tag.", }},
            { "MudBlazor.Typo.body2", new() { Name = "body2", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the body2 typography style, using the <c>p</c> HTML tag.", }},
            { "MudBlazor.Typo.button", new() { Name = "button", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the button typography style, using the <c>span</c> HTML tag.", }},
            { "MudBlazor.Typo.caption", new() { Name = "caption", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the caption typography style, using the <c>span</c> HTML tag.", }},
            { "MudBlazor.Typo.h1", new() { Name = "h1", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the h1 typography style, using the <c>h1</c> HTML tag.", }},
            { "MudBlazor.Typo.h2", new() { Name = "h2", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the h2 typography style, using the <c>h2</c> HTML tag.", }},
            { "MudBlazor.Typo.h3", new() { Name = "h3", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the h3 typography style, using the <c>h3</c> HTML tag.", }},
            { "MudBlazor.Typo.h4", new() { Name = "h4", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the h4 typography style, using the <c>h4</c> HTML tag.", }},
            { "MudBlazor.Typo.h5", new() { Name = "h5", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the h5 typography style, using the <c>h5</c> HTML tag.", }},
            { "MudBlazor.Typo.h6", new() { Name = "h6", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the h6 typography style, using the <c>h6</c> HTML tag.", }},
            { "MudBlazor.Typo.inherit", new() { Name = "inherit", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Inherits the typography style from the parent element.", }},
            { "MudBlazor.Typo.overline", new() { Name = "overline", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the overline typography style, using the <c>span</c> HTML tag.", }},
            { "MudBlazor.Typo.subtitle1", new() { Name = "subtitle1", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the subtitle1 typography style, using the <c>p</c> HTML tag.", Remarks = @"The tag was changed from <c>h6</c> to <c>p</c> in v7.", }},
            { "MudBlazor.Typo.subtitle2", new() { Name = "subtitle2", TypeName = "MudBlazor.Typo", TypeFriendlyName = "Typo", Summary = @"Applies the subtitle2 typography style, using the <c>p</c> HTML tag.", Remarks = @"The tag was changed from <c>h6</c> to <c>p</c> in v7.", }},
            { "MudBlazor.Underline.Always", new() { Name = "Always", TypeName = "MudBlazor.Underline", TypeFriendlyName = "Underline", Summary = @"An underline is always displayed.", }},
            { "MudBlazor.Underline.Hover", new() { Name = "Hover", TypeName = "MudBlazor.Underline", TypeFriendlyName = "Underline", Summary = @"An underline is displayed when hovering over the link.", }},
            { "MudBlazor.Underline.None", new() { Name = "None", TypeName = "MudBlazor.Underline", TypeFriendlyName = "Underline", Summary = @"No underline is displayed.", }},
            { "MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1.Instance", new() { Name = "Instance", TypeName = "", TypeFriendlyName = "ICloneStrategy<T>", Summary = @"Represents a static field providing an instance of <see cref=""T:MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1"" />.", }},
            { "MudBlazor.Utilities.MudColorOutputFormats.ColorElements", new() { Name = "ColorElements", TypeName = "MudBlazor.Utilities.MudColorOutputFormats", TypeFriendlyName = "MudColorOutputFormats", Summary = @"Will output the color elements without any decorator and without alpha. Example 12,15,26", }},
            { "MudBlazor.Utilities.MudColorOutputFormats.Hex", new() { Name = "Hex", TypeName = "MudBlazor.Utilities.MudColorOutputFormats", TypeFriendlyName = "MudColorOutputFormats", Summary = @"Output will be starting with a # and include r,g and b but no alpha values. Example #ab2a3d", }},
            { "MudBlazor.Utilities.MudColorOutputFormats.HexA", new() { Name = "HexA", TypeName = "MudBlazor.Utilities.MudColorOutputFormats", TypeFriendlyName = "MudColorOutputFormats", Summary = @"Output will be starting with a # and include r,g and b and alpha values. Example #ab2a3dff", }},
            { "MudBlazor.Utilities.MudColorOutputFormats.RGB", new() { Name = "RGB", TypeName = "MudBlazor.Utilities.MudColorOutputFormats", TypeFriendlyName = "MudColorOutputFormats", Summary = @"Will output css like output for value. Example rgb(12,15,40)", }},
            { "MudBlazor.Utilities.MudColorOutputFormats.RGBA", new() { Name = "RGBA", TypeName = "MudBlazor.Utilities.MudColorOutputFormats", TypeFriendlyName = "MudColorOutputFormats", Summary = @"Will output css like output for value with alpha. Example rgba(12,15,40,0.42)", }},
            { "MudBlazor.Variant.Filled", new() { Name = "Filled", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Summary = @"The component interior is filled with a solid color.", }},
            { "MudBlazor.Variant.Outlined", new() { Name = "Outlined", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Summary = @"The component has an outline around the edge.", }},
            { "MudBlazor.Variant.Text", new() { Name = "Text", TypeName = "MudBlazor.Variant", TypeFriendlyName = "Variant", Summary = @"The component has no drop shadow, background or border.", }},
            { "MudBlazor.Width.False", new() { Name = "False", TypeName = "MudBlazor.Width", TypeFriendlyName = "Width", }},
            { "MudBlazor.Width.lg", new() { Name = "lg", TypeName = "MudBlazor.Width", TypeFriendlyName = "Width", }},
            { "MudBlazor.Width.md", new() { Name = "md", TypeName = "MudBlazor.Width", TypeFriendlyName = "Width", }},
            { "MudBlazor.Width.sm", new() { Name = "sm", TypeName = "MudBlazor.Width", TypeFriendlyName = "Width", }},
            { "MudBlazor.Width.xl", new() { Name = "xl", TypeName = "MudBlazor.Width", TypeFriendlyName = "Width", }},
            { "MudBlazor.Width.xs", new() { Name = "xs", TypeName = "MudBlazor.Width", TypeFriendlyName = "Width", }},
            { "MudBlazor.Width.xxl", new() { Name = "xxl", TypeName = "MudBlazor.Width", TypeFriendlyName = "Width", }},
            { "MudBlazor.Wrap.NoWrap", new() { Name = "NoWrap", TypeName = "MudBlazor.Wrap", TypeFriendlyName = "Wrap", Summary = @"No wrapping occurs.", Remarks = @"Items may overflow the container.", }},
            { "MudBlazor.Wrap.Wrap", new() { Name = "Wrap", TypeName = "MudBlazor.Wrap", TypeFriendlyName = "Wrap", Summary = @"Items are wrapped to fit the container.", Remarks = @"When <see cref=""P:MudBlazor.MudStack.Row"" /> is <c>true</c>, items are wrapped to fit into the width of the container.<br />When <c>false</c>, items are wrapped to fit into the height of the container.", }},
            { "MudBlazor.Wrap.WrapReverse", new() { Name = "WrapReverse", TypeName = "MudBlazor.Wrap", TypeFriendlyName = "Wrap", Summary = @"Behaves the same as wrap but cross-start and cross-end are permuted.", }},
            { "MudBlazor.XAxisLabelPosition.Bottom", new() { Name = "Bottom", TypeName = "MudBlazor.XAxisLabelPosition", TypeFriendlyName = "XAxisLabelPosition", Summary = @"The X axis labels are displayed at the bottom of the chart centered horizontally.", }},
            { "MudBlazor.XAxisLabelPosition.None", new() { Name = "None", TypeName = "MudBlazor.XAxisLabelPosition", TypeFriendlyName = "XAxisLabelPosition", Summary = @"Do not include X axis labels", }},
            { "MudBlazor.XAxisLabelPosition.Top", new() { Name = "Top", TypeName = "MudBlazor.XAxisLabelPosition", TypeFriendlyName = "XAxisLabelPosition", Summary = @"The X axis labels are displayed at the top of the chart centered horizontally.", }},
            { "MudBlazor.YAxisLabelPosition.Left", new() { Name = "Left", TypeName = "MudBlazor.YAxisLabelPosition", TypeFriendlyName = "YAxisLabelPosition", Summary = @"The Y axis labels are displayed at the left of the chart", }},
            { "MudBlazor.YAxisLabelPosition.None", new() { Name = "None", TypeName = "MudBlazor.YAxisLabelPosition", TypeFriendlyName = "YAxisLabelPosition", Summary = @"Do not include Y axis labels", }},
            { "MudBlazor.YAxisLabelPosition.Right", new() { Name = "Right", TypeName = "MudBlazor.YAxisLabelPosition", TypeFriendlyName = "YAxisLabelPosition", Summary = @"The Y Axis labels are displayed at the right of the chart", }},
        };

        // Build all of the documented events
        Events = new()
        {
            { "MudBlazor.Column`1.GroupingChanged", new() { Name = "GroupingChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.Column`1.Grouping"" /> property has changed.", }},
            { "MudBlazor.Column`1.HiddenChanged", new() { Name = "HiddenChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.Column`1.Hidden"" /> property has changed.", }},
            { "MudBlazor.Column`1.ValueChanged", new() { Name = "ValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.Column`1.Value"" /> has changed.", }},
            { "MudBlazor.DialogService.DialogInstanceAddedAsync", new() { Name = "DialogInstanceAddedAsync", TypeName = "System.Func`2[[MudBlazor.IDialogReference, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Threading.Tasks.Task, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "Func<IDialogReference, Task>", }},
            { "MudBlazor.DialogService.OnDialogCloseRequested", new() { Name = "OnDialogCloseRequested", TypeName = "System.Action`2[[MudBlazor.IDialogReference, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[MudBlazor.DialogResult, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Action<IDialogReference, DialogResult>", }},
            { "MudBlazor.HierarchyColumn`1.HiddenChanged", new() { Name = "HiddenChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.HierarchyColumn`1.Hidden"" /> property has changed.", }},
            { "MudBlazor.Internal.MudInputAdornment.AdornmentClick", new() { Name = "AdornmentClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when this adornment is clicked.", }},
            { "MudBlazor.MudAlert.CloseIconClicked", new() { Name = "CloseIconClicked", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.MudAlert, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<MudAlert>", IsParameter = true, Summary = @"Occurs when the close button has been clicked.", }},
            { "MudBlazor.MudAlert.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the alert has been clicked.", }},
            { "MudBlazor.MudAutocomplete`1.OnClearButtonClick", new() { Name = "OnClearButtonClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the Clear button has been clicked.", Remarks = @"The Text and Value properties will be blank when this callback occurs.", }},
            { "MudBlazor.MudAutocomplete`1.OpenChanged", new() { Name = "OpenChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudAutocomplete`1.Open"" /> property has changed.", }},
            { "MudBlazor.MudAutocomplete`1.ReturnedItemsCountChanged", new() { Name = "ReturnedItemsCountChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when the number of items returned by <see cref=""P:MudBlazor.MudAutocomplete`1.SearchFunc"" /> has changed.", Remarks = @"The number of items returned determines when custom templates are shown.  If the number is <c>0</c>, <see cref=""P:MudBlazor.MudAutocomplete`1.NoItemsTemplate"" /> will be shown. If the number is beyond <see cref=""P:MudBlazor.MudAutocomplete`1.MaxItems"" />, <see cref=""P:MudBlazor.MudAutocomplete`1.MoreItemsTemplate"" /> will be shown.", }},
            { "MudBlazor.MudBadge.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the badge has been clicked.", }},
            { "MudBlazor.MudBaseButton.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when this button has been clicked.", }},
            { "MudBlazor.MudBaseDatePicker.PickerMonthChanged", new() { Name = "PickerMonthChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<DateTime?>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudBaseDatePicker.PickerMonth"" /> has changed.", }},
            { "MudBlazor.MudBaseInput`1.OnAdornmentClick", new() { Name = "OnAdornmentClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the adornment text or icon has been clicked.", }},
            { "MudBlazor.MudBaseInput`1.OnBlur", new() { Name = "OnBlur", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.FocusEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<FocusEventArgs>", IsParameter = true, Summary = @"Occurs when the input loses focus.", }},
            { "MudBlazor.MudBaseInput`1.OnInternalInputChanged", new() { Name = "OnInternalInputChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.ChangeEventArgs, Microsoft.AspNetCore.Components, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<ChangeEventArgs>", IsParameter = true, Summary = @"Occurs when the internal text value has changed.", }},
            { "MudBlazor.MudBaseInput`1.OnKeyDown", new() { Name = "OnKeyDown", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.KeyboardEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<KeyboardEventArgs>", IsParameter = true, Summary = @"Occurs when a key has been pressed down.", }},
            { "MudBlazor.MudBaseInput`1.OnKeyUp", new() { Name = "OnKeyUp", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.KeyboardEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<KeyboardEventArgs>", IsParameter = true, Summary = @"Occurs when a pressed key has been released.", }},
            { "MudBlazor.MudBaseInput`1.TextChanged", new() { Name = "TextChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<string>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> property has changed.", }},
            { "MudBlazor.MudBaseInput`1.ValueChanged", new() { Name = "ValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property has changed.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnAdornmentClick", new() { Name = "OnAdornmentClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the adornment text or icon has been clicked.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnBlur", new() { Name = "OnBlur", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.FocusEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<FocusEventArgs>", IsParameter = true, Summary = @"Occurs when the input loses focus.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnInternalInputChanged", new() { Name = "OnInternalInputChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.ChangeEventArgs, Microsoft.AspNetCore.Components, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<ChangeEventArgs>", IsParameter = true, Summary = @"Occurs when the internal text value has changed.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnKeyDown", new() { Name = "OnKeyDown", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.KeyboardEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<KeyboardEventArgs>", IsParameter = true, Summary = @"Occurs when a key has been pressed down.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnKeyUp", new() { Name = "OnKeyUp", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.KeyboardEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<KeyboardEventArgs>", IsParameter = true, Summary = @"Occurs when a pressed key has been released.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged", new() { Name = "TextChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<string>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> property has changed.", }},
            { "MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValueChanged", new() { Name = "ValueChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<string>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> property has changed.", }},
            { "MudBlazor.MudBaseItemsControl`1.SelectedIndexChanged", new() { Name = "SelectedIndexChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> has changed.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged", new() { Name = "SelectedIndexChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> has changed.", }},
            { "MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged", new() { Name = "SelectedIndexChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBaseItemsControl`1.SelectedIndex"" /> has changed.", }},
            { "MudBlazor.MudBooleanInput`1.ValueChanged", new() { Name = "ValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudBooleanInput`1.Value"" /> has changed.", }},
            { "MudBlazor.MudBreakpointProvider.OnBreakpointChanged", new() { Name = "OnBreakpointChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.Breakpoint, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<Breakpoint>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudBreakpointProvider.Breakpoint"" /> has changed.", }},
            { "MudBlazor.MudChartBase.SelectedIndexChanged", new() { Name = "SelectedIndexChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudChartBase.SelectedIndex"" /> has changed.", }},
            { "MudBlazor.MudChatBubble.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when the chat bubble has been clicked.", }},
            { "MudBlazor.MudChatBubble.OnContextClick", new() { Name = "OnContextClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when the chat bubble has been right-clicked.", }},
            { "MudBlazor.MudChip`1.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when this chip is clicked.", Remarks = @"If an <see cref=""P:MudBlazor.MudChip`1.Href"" /> is set, this callback will not be triggered and the browser will handle the click.", }},
            { "MudBlazor.MudChip`1.OnClose", new() { Name = "OnClose", TypeName = "", TypeFriendlyName = "EventCallback<MudChip<T>>", IsParameter = true, Summary = @"Occurs when this chip has been closed.", Remarks = @"Subscribing to this event enables the close button, unless <see cref=""P:MudBlazor.MudChip`1.Href"" /> is also set.", }},
            { "MudBlazor.MudChip`1.SelectedChanged", new() { Name = "SelectedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudChip`1.Selected"" /> property has changed.", }},
            { "MudBlazor.MudChipSet`1.OnClose", new() { Name = "OnClose", TypeName = "", TypeFriendlyName = "EventCallback<MudChip<T>>", IsParameter = true, Summary = @"Occurs when any chip has been closed.", }},
            { "MudBlazor.MudChipSet`1.SelectedValueChanged", new() { Name = "SelectedValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudChipSet`1.SelectedValue"" /> has changed.", Remarks = @"This property is used when <see cref=""P:MudBlazor.MudChipSet`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.SingleSelection"" /> or <see cref=""F:MudBlazor.SelectionMode.ToggleSelection"" />.", }},
            { "MudBlazor.MudChipSet`1.SelectedValuesChanged", new() { Name = "SelectedValuesChanged", TypeName = "", TypeFriendlyName = "EventCallback<IReadOnlyCollection<T>>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudChipSet`1.SelectedValues"" /> has changed.", Remarks = @"This event occurs when <see cref=""P:MudBlazor.MudChipSet`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.MultiSelection"" />.", }},
            { "MudBlazor.MudCollapse.ExpandedChanged", new() { Name = "ExpandedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudCollapse.Expanded"" /> property has changed.", }},
            { "MudBlazor.MudCollapse.OnAnimationEnd", new() { Name = "OnAnimationEnd", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when the collapse or expand animation has finished.", }},
            { "MudBlazor.MudColorPicker.ValueChanged", new() { Name = "ValueChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<MudColor>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudColorPicker.Value"" /> property has changed.", }},
            { "MudBlazor.MudDataGrid`1.CanceledEditingItem", new() { Name = "CanceledEditingItem", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when editing of an item has been canceled.", }},
            { "MudBlazor.MudDataGrid`1.CommittedItemChanges", new() { Name = "CommittedItemChanges", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when the user saved changes to an item.", }},
            { "MudBlazor.MudDataGrid`1.CurrentPageChanged", new() { Name = "CurrentPageChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudDataGrid`1.CurrentPage"" /> has changed.", }},
            { "MudBlazor.MudDataGrid`1.FormFieldChanged", new() { Name = "FormFieldChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.Utilities.FormFieldChangedEventArgs, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<FormFieldChangedEventArgs>", IsParameter = true, Summary = @"Occurs when a field changes in the edit dialog.", Remarks = @"This event only occurs when <see cref=""P:MudBlazor.MudDataGrid`1.EditMode"" /> is <see cref=""F:MudBlazor.DataGridEditMode.Form"" />.", }},
            { "MudBlazor.MudDataGrid`1.RowClick", new() { Name = "RowClick", TypeName = "", TypeFriendlyName = "EventCallback<DataGridRowClickEventArgs<T>>", IsParameter = true, Summary = @"Occurs when a row has been clicked.", }},
            { "MudBlazor.MudDataGrid`1.RowContextMenuClick", new() { Name = "RowContextMenuClick", TypeName = "", TypeFriendlyName = "EventCallback<DataGridRowClickEventArgs<T>>", IsParameter = true, Summary = @"Occurs when a row has been right-clicked.", }},
            { "MudBlazor.MudDataGrid`1.RowsPerPageChanged", new() { Name = "RowsPerPageChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudDataGrid`1.RowsPerPage"" /> has changed.", }},
            { "MudBlazor.MudDataGrid`1.SelectedItemChanged", new() { Name = "SelectedItemChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudDataGrid`1.SelectedItem"" /> has changed.", Remarks = @"This typically occurs when a row has been clicked.", }},
            { "MudBlazor.MudDataGrid`1.SelectedItemsChanged", new() { Name = "SelectedItemsChanged", TypeName = "", TypeFriendlyName = "EventCallback<HashSet<T>>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudDataGrid`1.SelectedItems"" /> have changed.", Remarks = @"This typically occurs when one or more rows have been clicked when <see cref=""P:MudBlazor.MudDataGrid`1.MultiSelection"" /> is <c>true</c>.", }},
            { "MudBlazor.MudDataGrid`1.StartedEditingItem", new() { Name = "StartedEditingItem", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when edit mode begins for an item.", Remarks = @"If changes are committed, the <see cref=""P:MudBlazor.MudDataGrid`1.CommittedItemChanges"" /> event occurs.  If editing is canceled, the <see cref=""P:MudBlazor.MudDataGrid`1.CanceledEditingItem"" /> occurs.", }},
            { "MudBlazor.MudDatePicker.DateChanged", new() { Name = "DateChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<DateTime?>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudDatePicker.Date"" /> has changed.", }},
            { "MudBlazor.MudDateRangePicker.DateRangeChanged", new() { Name = "DateRangeChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.DateRange, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<DateRange>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudDateRangePicker.DateRange"" /> has changed.", }},
            { "MudBlazor.MudDebouncedInput`1.OnDebounceIntervalElapsed", new() { Name = "OnDebounceIntervalElapsed", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<string>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudDebouncedInput`1.DebounceInterval"" /> has elapsed.", Remarks = @"The value in <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> is included in this event.", }},
            { "MudBlazor.MudDialog.OnBackdropClick", new() { Name = "OnBackdropClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when the area outside the dialog has been clicked if <see cref=""P:MudBlazor.DialogOptions.BackdropClick"" /> is <c>true</c>.", Remarks = @"When set, this event will be called instead of the default backdrop click behavior of closing the dialog.", }},
            { "MudBlazor.MudDialog.OnKeyDown", new() { Name = "OnKeyDown", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.KeyboardEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<KeyboardEventArgs>", IsParameter = true, Summary = @"Occurs when a key has been pressed down.", }},
            { "MudBlazor.MudDialog.OnKeyUp", new() { Name = "OnKeyUp", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.KeyboardEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<KeyboardEventArgs>", IsParameter = true, Summary = @"Occurs when a pressed key has been released.", }},
            { "MudBlazor.MudDialog.VisibleChanged", new() { Name = "VisibleChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudDialog.Visible"" /> has changed.", }},
            { "MudBlazor.MudDrawer.OpenChanged", new() { Name = "OpenChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.MudDrawer.Open"" /> value has changed.", }},
            { "MudBlazor.MudDropContainer`1.ItemDropped", new() { Name = "ItemDropped", TypeName = "", TypeFriendlyName = "EventCallback<MudItemDropInfo<T>>", Category = "Items", Order = 208, IsParameter = true, Summary = @"Occurs when an item has been dropped into a <see cref=""T:MudBlazor.MudDropZone`1"" />.", }},
            { "MudBlazor.MudDropContainer`1.ItemPicked", new() { Name = "ItemPicked", TypeName = "", TypeFriendlyName = "EventCallback<MudDragAndDropItemTransaction<T>>", Category = "Items", Order = 208, IsParameter = true, Summary = @"Occurs when an item starts being dragged.", Remarks = @"A new <see cref=""T:MudBlazor.MudDragAndDropItemTransaction`1"" /> is started which tracks the drag-and-drop operation until it is completed or canceled.", }},
            { "MudBlazor.MudDropContainer`1.RefreshRequested", new() { Name = "RefreshRequested", TypeName = "System.EventHandler", TypeFriendlyName = "EventHandler", }},
            { "MudBlazor.MudDropContainer`1.TransactionEnded", new() { Name = "TransactionEnded", TypeName = "", TypeFriendlyName = "EventHandler<MudDragAndDropTransactionFinishedEventArgs<T>>", }},
            { "MudBlazor.MudDropContainer`1.TransactionIndexChanged", new() { Name = "TransactionIndexChanged", TypeName = "System.EventHandler`1[[MudBlazor.MudDragAndDropIndexChangedEventArgs, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventHandler<MudDragAndDropIndexChangedEventArgs>", }},
            { "MudBlazor.MudDropContainer`1.TransactionStarted", new() { Name = "TransactionStarted", TypeName = "", TypeFriendlyName = "EventHandler<MudDragAndDropItemTransaction<T>>", }},
            { "MudBlazor.MudDynamicDropItem`1.OnDragEnded", new() { Name = "OnDragEnded", TypeName = "", TypeFriendlyName = "EventCallback<T>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"An event callback set fires, when a drag operation has been ended. This included also a canceled transaction", }},
            { "MudBlazor.MudDynamicDropItem`1.OnDragStarted", new() { Name = "OnDragStarted", TypeName = "", TypeFriendlyName = "EventCallback<T>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"An event callback set fires, when a drag operation has been started", }},
            { "MudBlazor.MudDynamicTabs.AddTab", new() { Name = "AddTab", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"The callback, when the add button has been clicked", }},
            { "MudBlazor.MudDynamicTabs.CloseTab", new() { Name = "CloseTab", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.MudTabPanel, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<MudTabPanel>", IsParameter = true, Summary = @"The callback, when the close button has been clicked", }},
            { "MudBlazor.MudElement.RefChanged", new() { Name = "RefChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.ElementReference, Microsoft.AspNetCore.Components, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<ElementReference>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudElement.Ref"" /> has changed.", }},
            { "MudBlazor.MudExpansionPanel.ExpandedChanged", new() { Name = "ExpandedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudExpansionPanel.Expanded"" /> has changed.", }},
            { "MudBlazor.MudField.OnAdornmentClick", new() { Name = "OnAdornmentClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the adornment text or icon has been clicked.", }},
            { "MudBlazor.MudFileUpload`1.FilesChanged", new() { Name = "FilesChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudFileUpload`1.Files"" /> has changed.", }},
            { "MudBlazor.MudFileUpload`1.OnFilesChanged", new() { Name = "OnFilesChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<InputFileChangeEventArgs>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when the internal files have changed.", }},
            { "MudBlazor.MudForm.ErrorsChanged", new() { Name = "ErrorsChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.String[], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<string[]>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudForm.Errors"" /> has changed.", }},
            { "MudBlazor.MudForm.FieldChanged", new() { Name = "FieldChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.Utilities.FormFieldChangedEventArgs, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<FormFieldChangedEventArgs>", IsParameter = true, Summary = @"Occurs when an <see cref=""T:MudBlazor.Interfaces.IFormComponent"" /> within this form has changed.", }},
            { "MudBlazor.MudForm.IsTouchedChanged", new() { Name = "IsTouchedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudForm.IsTouched"" /> has changed.", }},
            { "MudBlazor.MudForm.IsValidChanged", new() { Name = "IsValidChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudForm.IsValid"" /> has changed.", }},
            { "MudBlazor.MudHidden.HiddenChanged", new() { Name = "HiddenChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudHidden.Hidden"" /> has changed.", }},
            { "MudBlazor.MudInput`1.OnClearButtonClick", new() { Name = "OnClearButtonClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the clear button is clicked.", Remarks = @"When clicked, the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> and <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> properties are reset.", }},
            { "MudBlazor.MudInput`1.OnDecrement", new() { Name = "OnDecrement", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when the <c>Down</c> arrow button is clicked.", Remarks = @"Only occurs when <see cref=""P:MudBlazor.MudInput`1.InputType"" /> is <see cref=""F:MudBlazor.InputType.Number"" />.  For numeric inputs, use the <see cref=""T:MudBlazor.MudNumericField`1"" /> component.", }},
            { "MudBlazor.MudInput`1.OnIncrement", new() { Name = "OnIncrement", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when the <c>Up</c> arrow button is clicked.", Remarks = @"Only occurs when <see cref=""P:MudBlazor.MudInput`1.InputType"" /> is <see cref=""F:MudBlazor.InputType.Number"" />.  For numeric inputs, use the <see cref=""T:MudBlazor.MudNumericField`1"" /> component.", }},
            { "MudBlazor.MudInput`1.OnMouseWheel", new() { Name = "OnMouseWheel", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.WheelEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<WheelEventArgs>", IsParameter = true, Summary = @"Occurs when a mouse wheel event is raised.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClearButtonClick", new() { Name = "OnClearButtonClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the clear button is clicked.", Remarks = @"When clicked, the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> and <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> properties are reset.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnDecrement", new() { Name = "OnDecrement", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when the <c>Down</c> arrow button is clicked.", Remarks = @"Only occurs when <see cref=""P:MudBlazor.MudInput`1.InputType"" /> is <see cref=""F:MudBlazor.InputType.Number"" />.  For numeric inputs, use the <see cref=""T:MudBlazor.MudNumericField`1"" /> component.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnIncrement", new() { Name = "OnIncrement", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when the <c>Up</c> arrow button is clicked.", Remarks = @"Only occurs when <see cref=""P:MudBlazor.MudInput`1.InputType"" /> is <see cref=""F:MudBlazor.InputType.Number"" />.  For numeric inputs, use the <see cref=""T:MudBlazor.MudNumericField`1"" /> component.", }},
            { "MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnMouseWheel", new() { Name = "OnMouseWheel", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.WheelEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<WheelEventArgs>", IsParameter = true, Summary = @"Occurs when a mouse wheel event is raised.", }},
            { "MudBlazor.MudLink.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when this link has been clicked.", }},
            { "MudBlazor.MudList`1.SelectedValueChanged", new() { Name = "SelectedValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudList`1.SelectedValue"" /> has changed.", Remarks = @"This event occurs when <see cref=""P:MudBlazor.MudList`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.SingleSelection"" />.", }},
            { "MudBlazor.MudList`1.SelectedValuesChanged", new() { Name = "SelectedValuesChanged", TypeName = "", TypeFriendlyName = "EventCallback<IReadOnlyCollection<T>>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudList`1.SelectedValues"" /> has changed.", Remarks = @"This event occurs when <see cref=""P:MudBlazor.MudList`1.SelectionMode"" /> is <see cref=""F:MudBlazor.SelectionMode.MultiSelection"" />.", }},
            { "MudBlazor.MudListItem`1.ExpandedChanged", new() { Name = "ExpandedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, }},
            { "MudBlazor.MudListItem`1.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"List click event.Also called when <see cref=""P:MudBlazor.MudListItem`1.Href"" /> is set", }},
            { "MudBlazor.MudMask.OnClearButtonClick", new() { Name = "OnClearButtonClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", Category = "List appearance", Order = 403, IsParameter = true, Summary = @"Occurs when the clear button is clicked.", }},
            { "MudBlazor.MudMenu.OpenChanged", new() { Name = "OpenChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudMenu.Open"" /> has changed.", }},
            { "MudBlazor.MudMenuItem.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when this menu item is clicked.", }},
            { "MudBlazor.MudMessageBox.OnCancel", new() { Name = "OnCancel", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the Cancel button is clicked, or this message box is closed via the Close button.", }},
            { "MudBlazor.MudMessageBox.OnNo", new() { Name = "OnNo", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the No button is clicked.", }},
            { "MudBlazor.MudMessageBox.OnYes", new() { Name = "OnYes", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the Yes button is clicked.", }},
            { "MudBlazor.MudMessageBox.VisibleChanged", new() { Name = "VisibleChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudMessageBox.Visible"" /> has changed.", }},
            { "MudBlazor.MudNavGroup.ExpandedChanged", new() { Name = "ExpandedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudNavGroup.Expanded"" /> has changed.", }},
            { "MudBlazor.MudNavLink.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when this link has been clicked.", Remarks = @"This event only occurs when the <see cref=""P:MudBlazor.MudNavLink.Href"" /> property has not been set.", }},
            { "MudBlazor.MudOverlay.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the overlay is clicked.", Remarks = @"If you need to close the overlay automatically, you can use <see cref=""P:MudBlazor.MudOverlay.AutoClose"" /> and <see cref=""P:MudBlazor.MudOverlay.OnClosed"" /> instead.", }},
            { "MudBlazor.MudOverlay.OnClosed", new() { Name = "OnClosed", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when the overlay is closed due to <see cref=""P:MudBlazor.MudOverlay.AutoClose"" />.", }},
            { "MudBlazor.MudOverlay.VisibleChanged", new() { Name = "VisibleChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudOverlay.Visible"" /> changes.", Remarks = @"This event is triggered when the visibility of the overlay changes.", }},
            { "MudBlazor.MudPagination.ControlButtonClicked", new() { Name = "ControlButtonClicked", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.Page, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<Page>", IsParameter = true, Summary = @"Occurs when the First, Previous, Next, or Last button is clicked.", }},
            { "MudBlazor.MudPagination.SelectedChanged", new() { Name = "SelectedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudPagination.Selected"" /> has changed.", }},
            { "MudBlazor.MudPicker`1.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the text input has been clicked.", }},
            { "MudBlazor.MudPicker`1.PickerClosed", new() { Name = "PickerClosed", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when this picker has closed.", }},
            { "MudBlazor.MudPicker`1.PickerOpened", new() { Name = "PickerOpened", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when this picker has opened.", }},
            { "MudBlazor.MudPicker`1.TextChanged", new() { Name = "TextChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<string>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudPicker`1.Text"" /> has changed.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the text input has been clicked.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerClosed", new() { Name = "PickerClosed", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when this picker has closed.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerOpened", new() { Name = "PickerOpened", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when this picker has opened.", }},
            { "MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].TextChanged", new() { Name = "TextChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<string>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudPicker`1.Text"" /> has changed.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the text input has been clicked.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClosed", new() { Name = "PickerClosed", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when this picker has closed.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerOpened", new() { Name = "PickerOpened", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when this picker has opened.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged", new() { Name = "TextChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<string>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudPicker`1.Text"" /> has changed.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the text input has been clicked.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClosed", new() { Name = "PickerClosed", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when this picker has closed.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerOpened", new() { Name = "PickerOpened", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", IsParameter = true, Summary = @"Occurs when this picker has opened.", }},
            { "MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged", new() { Name = "TextChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<string>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudPicker`1.Text"" /> has changed.", }},
            { "MudBlazor.MudRadioGroup`1.ValueChanged", new() { Name = "ValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs whenever <see cref=""P:MudBlazor.MudRadioGroup`1.Value"" /> has changed.", }},
            { "MudBlazor.MudRangeInput`1.OnClearButtonClick", new() { Name = "OnClearButtonClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the Clear button is clicked.", Remarks = @"When clicked, the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> and <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> properties are reset.", }},
            { "MudBlazor.MudRating.HoveredValueChanged", new() { Name = "HoveredValueChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int?>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudRating.HoveredValue"" /> has changed.", Remarks = @"Defaults to <c>null</c>.", }},
            { "MudBlazor.MudRating.SelectedValueChanged", new() { Name = "SelectedValueChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudRating.SelectedValue"" /> has changed.", }},
            { "MudBlazor.MudRatingItem.ItemClicked", new() { Name = "ItemClicked", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when this item is clicked.", Remarks = @"When clicked, the <see cref=""P:MudBlazor.MudRating.SelectedValue"" /> is changed.", }},
            { "MudBlazor.MudRatingItem.ItemHovered", new() { Name = "ItemHovered", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Nullable`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int?>", IsParameter = true, Summary = @"Occurs when the user hovers over this item.", Remarks = @"When hovered, the <see cref=""P:MudBlazor.MudRating.HoveredValue"" /> is changed.", }},
            { "MudBlazor.MudScrollToTop.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the scroll-to-top button is clicked.", }},
            { "MudBlazor.MudScrollToTop.OnScroll", new() { Name = "OnScroll", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.ScrollEventArgs, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<ScrollEventArgs>", IsParameter = true, Summary = @"Occurs when the page is scrolled.", }},
            { "MudBlazor.MudSelect`1.OnClearButtonClick", new() { Name = "OnClearButtonClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the clear button is clicked.", Remarks = @"Only occurs when <see cref=""P:MudBlazor.MudSelect`1.Clearable"" /> is <c>true</c>.   This event occurs after the <c>Text</c> and <c>Value</c> have been cleared.", }},
            { "MudBlazor.MudSelect`1.OnClose", new() { Name = "OnClose", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when this drop-down closes.", }},
            { "MudBlazor.MudSelect`1.OnOpen", new() { Name = "OnOpen", TypeName = "Microsoft.AspNetCore.Components.EventCallback", TypeFriendlyName = "EventCallback", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when this drop-down opens.", }},
            { "MudBlazor.MudSelect`1.SelectedValuesChanged", new() { Name = "SelectedValuesChanged", TypeName = "", TypeFriendlyName = "EventCallback<IEnumerable<T>>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudSelect`1.SelectedValues"" /> has changed.", }},
            { "MudBlazor.MudSlider`1.NullableValueChanged", new() { Name = "NullableValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T?>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudSlider`1.NullableValue"" /> has changed.", }},
            { "MudBlazor.MudSlider`1.ValueChanged", new() { Name = "ValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudSlider`1.Value"" /> has changed.", }},
            { "MudBlazor.MudStep.CompletedChanged", new() { Name = "CompletedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudStep.Completed"" /> has changed.", }},
            { "MudBlazor.MudStep.DisabledChanged", new() { Name = "DisabledChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudStep.Disabled"" /> has changed.", }},
            { "MudBlazor.MudStep.HasErrorChanged", new() { Name = "HasErrorChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudStep.HasError"" /> has changed.", }},
            { "MudBlazor.MudStep.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when this step is clicked.", }},
            { "MudBlazor.MudStepper.ActiveIndexChanged", new() { Name = "ActiveIndexChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudStepper.ActiveIndex"" /> has changed.", }},
            { "MudBlazor.MudSwipeArea.OnSwipeEnd", new() { Name = "OnSwipeEnd", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.SwipeEventArgs, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<SwipeEventArgs>", Category = "Behavior", Order = 100, IsParameter = true, }},
            { "MudBlazor.MudTable`1.OnRowClick", new() { Name = "OnRowClick", TypeName = "", TypeFriendlyName = "EventCallback<TableRowClickEventArgs<T>>", IsParameter = true, Summary = @"Occurs when a row has been clicked.", }},
            { "MudBlazor.MudTable`1.OnRowMouseEnter", new() { Name = "OnRowMouseEnter", TypeName = "", TypeFriendlyName = "EventCallback<TableRowHoverEventArgs<T>>", IsParameter = true, Summary = @"Occurs when the pointer hovers over a row.", }},
            { "MudBlazor.MudTable`1.OnRowMouseLeave", new() { Name = "OnRowMouseLeave", TypeName = "", TypeFriendlyName = "EventCallback<TableRowHoverEventArgs<T>>", IsParameter = true, Summary = @"Occurs when the pointer is no longer hovering over a row.", }},
            { "MudBlazor.MudTable`1.SelectedItemChanged", new() { Name = "SelectedItemChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudTable`1.SelectedItem"" /> has changed.", Remarks = @"Occurs when <c>MultiSelection</c> is <c>false</c>, otherwise <see cref=""P:MudBlazor.MudTable`1.SelectedItemsChanged"" /> occurs.", }},
            { "MudBlazor.MudTable`1.SelectedItemsChanged", new() { Name = "SelectedItemsChanged", TypeName = "", TypeFriendlyName = "EventCallback<HashSet<T>>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudTable`1.SelectedItems"" /> has changed.", Remarks = @"Occurs when <c>MultiSelection</c> is <c>true</c>, otherwise <see cref=""P:MudBlazor.MudTable`1.SelectedItemChanged"" /> occurs.", }},
            { "MudBlazor.MudTableBase.CurrentPageChanged", new() { Name = "CurrentPageChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudTableBase.CurrentPage"" /> has changed.", }},
            { "MudBlazor.MudTableBase.OnCancelEditClick", new() { Name = "OnCancelEditClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when changes to a row being edited are canceled.", Remarks = @"Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", }},
            { "MudBlazor.MudTableBase.OnCommitEditClick", new() { Name = "OnCommitEditClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when changes to a row being edited are committed.", Remarks = @"Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", }},
            { "MudBlazor.MudTableBase.OnPreviewEditClick", new() { Name = "OnPreviewEditClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<object>", IsParameter = true, Summary = @"Occurs before inline editing is enabled for a row.", Remarks = @"Requires <see cref=""P:MudBlazor.MudTableBase.Editable"" /> to be <c>true</c> and <see cref=""P:MudBlazor.MudTableBase.ReadOnly"" /> to be <c>false</c>.", }},
            { "MudBlazor.MudTableBase.RowsPerPageChanged", new() { Name = "RowsPerPageChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudTableBase.RowsPerPage"" /> has changed.", }},
            { "MudBlazor.MudTableGroupRow`1.OnRowClick", new() { Name = "OnRowClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when a grouping row is clicked.", }},
            { "MudBlazor.MudTableSortLabel`1.SortDirectionChanged", new() { Name = "SortDirectionChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.SortDirection, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<SortDirection>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudTableSortLabel`1.SortDirection"" /> has changed.", }},
            { "MudBlazor.MudTabPanel.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Raised when tab is clicked", }},
            { "MudBlazor.MudTabs.ActivePanelIndexChanged", new() { Name = "ActivePanelIndexChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Int32, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<int>", IsParameter = true, Summary = @"Fired when ActivePanelIndex changes.", }},
            { "MudBlazor.MudTextField`1.OnClearButtonClick", new() { Name = "OnClearButtonClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when the clear button is clicked.", Remarks = @"When clicked, the <see cref=""P:MudBlazor.MudBaseInput`1.Text"" /> and <see cref=""P:MudBlazor.MudBaseInput`1.Value"" /> properties are reset.", }},
            { "MudBlazor.MudTFootRow.OnRowClick", new() { Name = "OnRowClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when this footer row is clicked.", }},
            { "MudBlazor.MudTHeadRow.OnRowClick", new() { Name = "OnRowClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Occurs when this header row is clicked.", }},
            { "MudBlazor.MudThemeProvider.IsDarkModeChanged", new() { Name = "IsDarkModeChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Invoked when the dark mode changes.", }},
            { "MudBlazor.MudTimePicker.TimeChanged", new() { Name = "TimeChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<TimeSpan?>", IsParameter = true, Summary = @"Fired when the date changes.", }},
            { "MudBlazor.MudToggleGroup`1.ValueChanged", new() { Name = "ValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Fires when Value changes.", }},
            { "MudBlazor.MudToggleGroup`1.ValuesChanged", new() { Name = "ValuesChanged", TypeName = "", TypeFriendlyName = "EventCallback<IEnumerable<T>>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"Fires when Values change.", }},
            { "MudBlazor.MudToggleIconButton.ToggledChanged", new() { Name = "ToggledChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudToggleIconButton.Toggled"" /> is changed.", }},
            { "MudBlazor.MudTooltip.VisibleChanged", new() { Name = "VisibleChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", Category = "Behavior", Order = 100, IsParameter = true, Summary = @"An event triggered when the state of Visible has changed", }},
            { "MudBlazor.MudTr.CheckedChanged", new() { Name = "CheckedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when <see cref=""P:MudBlazor.MudTr.Checked"" /> has changed.", }},
            { "MudBlazor.MudTreeView`1.SelectedValueChanged", new() { Name = "SelectedValueChanged", TypeName = "", TypeFriendlyName = "EventCallback<T>", IsParameter = true, Summary = @"Called whenever the selected value changed.", }},
            { "MudBlazor.MudTreeView`1.SelectedValuesChanged", new() { Name = "SelectedValuesChanged", TypeName = "", TypeFriendlyName = "EventCallback<IReadOnlyCollection<T>>", IsParameter = true, Summary = @"Called whenever the selection changes.", }},
            { "MudBlazor.MudTreeViewItem`1.ExpandedChanged", new() { Name = "ExpandedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Called whenever expanded changed.", }},
            { "MudBlazor.MudTreeViewItem`1.OnClick", new() { Name = "OnClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Tree item click event.", }},
            { "MudBlazor.MudTreeViewItem`1.OnDoubleClick", new() { Name = "OnDoubleClick", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[Microsoft.AspNetCore.Components.Web.MouseEventArgs, Microsoft.AspNetCore.Components.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]]", TypeFriendlyName = "EventCallback<MouseEventArgs>", IsParameter = true, Summary = @"Tree item double click event.", }},
            { "MudBlazor.MudTreeViewItem`1.SelectedChanged", new() { Name = "SelectedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Called whenever the selected value changed.", }},
            { "MudBlazor.MudTreeViewItemToggleButton.ExpandedChanged", new() { Name = "ExpandedChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Called whenever expanded changed.", }},
            { "MudBlazor.SelectColumn`1.HiddenChanged", new() { Name = "HiddenChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[System.Boolean, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventCallback<bool>", IsParameter = true, Summary = @"Occurs when the <see cref=""P:MudBlazor.SelectColumn`1.Hidden"" /> property has changed.", }},
            { "MudBlazor.Snackbar.OnClose", new() { Name = "OnClose", TypeName = "System.Action`1[[MudBlazor.Snackbar, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "Action<Snackbar>", }},
            { "MudBlazor.Snackbar.OnUpdate", new() { Name = "OnUpdate", TypeName = "System.Action", TypeFriendlyName = "Action", }},
            { "MudBlazor.SnackbarService.OnSnackbarsUpdated", new() { Name = "OnSnackbarsUpdated", TypeName = "System.Action", TypeFriendlyName = "Action", }},
            { "MudBlazor.SvgLegend.OnVisibilityChanged", new() { Name = "OnVisibilityChanged", TypeName = "Microsoft.AspNetCore.Components.EventCallback`1[[MudBlazor.SvgLegend, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]", TypeFriendlyName = "EventCallback<SvgLegend>", Summary = @"Occurs when the <see cref=""P:MudBlazor.SvgLegend.Visible"" /> property has changed.", }},
            { "System.Exception.SerializeObjectState", new() { Name = "SerializeObjectState", TypeName = "System.EventHandler`1[[System.Runtime.Serialization.SafeSerializationEventArgs, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]", TypeFriendlyName = "EventHandler<SafeSerializationEventArgs>", }},
        };

        // Build all of the documented types
        Types = new()
        {
            { "MudBlazor.Adornment", new() {
                Name = "Adornment", 
                NameFriendly = "Adornment", 
                BaseTypeName = "Enum", 
                Summary = @"Specifies the position of an adornment in a field.", 
                Remarks = @"Adornments can be placed at the start or end of a field, or not displayed at all.", 
                Fields = { 
                    { "None", Fields["MudBlazor.Adornment.None"] },
                    { "Start", Fields["MudBlazor.Adornment.Start"] },
                    { "End", Fields["MudBlazor.Adornment.End"] },
                },
            }},
            { "MudBlazor.AggregateDefinition`1", new() {
                Name = "AggregateDefinition`1", 
                NameFriendly = "AggregateDefinition<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents a function which calculates aggregate values such as counts, sums, averages, and custom functions.", 
                Properties = { 
                    { "Type", Properties["MudBlazor.AggregateDefinition`1.Type"] },
                    { "NumberFormat", Properties["MudBlazor.AggregateDefinition`1.NumberFormat"] },
                    { "Culture", Properties["MudBlazor.AggregateDefinition`1.Culture"] },
                    { "DisplayFormat", Properties["MudBlazor.AggregateDefinition`1.DisplayFormat"] },
                    { "CustomAggregate", Properties["MudBlazor.AggregateDefinition`1.CustomAggregate"] },
                },
                Methods = { 
                    { "SimpleAvg", Methods["MudBlazor.AggregateDefinition`1.SimpleAvg"] },
                    { "SimpleCount", Methods["MudBlazor.AggregateDefinition`1.SimpleCount"] },
                    { "SimpleMax", Methods["MudBlazor.AggregateDefinition`1.SimpleMax"] },
                    { "SimpleMin", Methods["MudBlazor.AggregateDefinition`1.SimpleMin"] },
                    { "SimpleSum", Methods["MudBlazor.AggregateDefinition`1.SimpleSum"] },
                },
            }},
            { "MudBlazor.AggregateType", new() {
                Name = "AggregateType", 
                NameFriendly = "AggregateType", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the type of aggregation to perform.", 
                Fields = { 
                    { "Avg", Fields["MudBlazor.AggregateType.Avg"] },
                    { "Count", Fields["MudBlazor.AggregateType.Count"] },
                    { "Custom", Fields["MudBlazor.AggregateType.Custom"] },
                    { "Max", Fields["MudBlazor.AggregateType.Max"] },
                    { "Min", Fields["MudBlazor.AggregateType.Min"] },
                    { "Sum", Fields["MudBlazor.AggregateType.Sum"] },
                },
            }},
            { "MudBlazor.Align", new() {
                Name = "Align", 
                NameFriendly = "Align", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Inherit", Fields["MudBlazor.Align.Inherit"] },
                    { "Left", Fields["MudBlazor.Align.Left"] },
                    { "Center", Fields["MudBlazor.Align.Center"] },
                    { "Right", Fields["MudBlazor.Align.Right"] },
                    { "Justify", Fields["MudBlazor.Align.Justify"] },
                    { "Start", Fields["MudBlazor.Align.Start"] },
                    { "End", Fields["MudBlazor.Align.End"] },
                },
            }},
            { "MudBlazor.AlignItems", new() {
                Name = "AlignItems", 
                NameFriendly = "AlignItems", 
                BaseTypeName = "Enum", 
                Summary = @"The vertical alignment applied to items in a <see cref=""T:MudBlazor.MudStack"" /> or <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Fields = { 
                    { "Baseline", Fields["MudBlazor.AlignItems.Baseline"] },
                    { "Center", Fields["MudBlazor.AlignItems.Center"] },
                    { "Start", Fields["MudBlazor.AlignItems.Start"] },
                    { "End", Fields["MudBlazor.AlignItems.End"] },
                    { "Stretch", Fields["MudBlazor.AlignItems.Stretch"] },
                },
            }},
            { "MudBlazor.Anchor", new() {
                Name = "Anchor", 
                NameFriendly = "Anchor", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the edge of a conainter that a component will appear.", 
                Fields = { 
                    { "Left", Fields["MudBlazor.Anchor.Left"] },
                    { "Right", Fields["MudBlazor.Anchor.Right"] },
                    { "Start", Fields["MudBlazor.Anchor.Start"] },
                    { "End", Fields["MudBlazor.Anchor.End"] },
                    { "Top", Fields["MudBlazor.Anchor.Top"] },
                    { "Bottom", Fields["MudBlazor.Anchor.Bottom"] },
                },
            }},
            { "MudBlazor.Animation", new() {
                Name = "Animation", 
                NameFriendly = "Animation", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the type of animation used for a <see cref=""T:MudBlazor.MudSkeleton"" /> component.", 
                Fields = { 
                    { "False", Fields["MudBlazor.Animation.False"] },
                    { "Pulse", Fields["MudBlazor.Animation.Pulse"] },
                    { "Wave", Fields["MudBlazor.Animation.Wave"] },
                },
            }},
            { "MudBlazor.BaseMask", new() {
                Name = "BaseMask", 
                NameFriendly = "BaseMask", 
                BaseTypeName = "Object", 
                Summary = @"A base class for designing input masks for the <see cref=""T:MudBlazor.MudMask"" />, <see cref=""T:MudBlazor.MudTextField`1"" />, and <see cref=""T:MudBlazor.MudPicker`1"" /> components.", 
                Properties = { 
                    { "Mask", Properties["MudBlazor.BaseMask.Mask"] },
                    { "Text", Properties["MudBlazor.BaseMask.Text"] },
                    { "CaretPos", Properties["MudBlazor.BaseMask.CaretPos"] },
                    { "Selection", Properties["MudBlazor.BaseMask.Selection"] },
                    { "AllowOnlyDelimiters", Properties["MudBlazor.BaseMask.AllowOnlyDelimiters"] },
                    { "MaskChars", Properties["MudBlazor.BaseMask.MaskChars"] },
                },
                Methods = { 
                    { "GetCleanText", Methods["MudBlazor.BaseMask.GetCleanText"] },
                    { "Insert", Methods["MudBlazor.BaseMask.Insert"] },
                    { "Delete", Methods["MudBlazor.BaseMask.Delete"] },
                    { "Backspace", Methods["MudBlazor.BaseMask.Backspace"] },
                    { "Clear", Methods["MudBlazor.BaseMask.Clear"] },
                    { "SetText", Methods["MudBlazor.BaseMask.SetText"] },
                    { "UpdateFrom", Methods["MudBlazor.BaseMask.UpdateFrom"] },
                    { "Init", Methods["MudBlazor.BaseMask.Init"] },
                    { "InitInternals", Methods["MudBlazor.BaseMask.InitInternals"] },
                    { "UpdateText", Methods["MudBlazor.BaseMask.UpdateText"] },
                    { "DeleteSelection", Methods["MudBlazor.BaseMask.DeleteSelection"] },
                    { "IsDelimiter", Methods["MudBlazor.BaseMask.IsDelimiter"] },
                    { "Refresh", Methods["MudBlazor.BaseMask.Refresh"] },
                    { "ConsolidateSelection", Methods["MudBlazor.BaseMask.ConsolidateSelection"] },
                },
            }},
            { "MudBlazor.BaseTypography", new() {
                Name = "BaseTypography", 
                NameFriendly = "BaseTypography", 
                BaseTypeName = "Object", 
                Summary = @"Represents the base typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.Block", new() {
                Name = "Block", 
                NameFriendly = "Block", 
                BaseTypeName = "ValueType", 
                Summary = @"A set of contiguous characters used to build a <see cref=""T:MudBlazor.BlockMask"" />.", 
                Remarks = @"Example: a mask character of <c>a</c>, <c>Min</c> of <c>2</c>, and <c>Max</c> of <c>3</c>, would allow <c>ABC</c> as a valid value.<br />Example: a mask character of <c>0</c>, <c>Min</c> of <c>5</c>, and <c>Max</c> of <c>7</c>, would allow <c>09123</c> as a valid value.<br />Example: a mask character of <c>*</c>, <c>Min</c> of <c>1</c>, and <c>Max</c> of <c>4</c>, would allow <c>B2A7</c> as a valid value.<br />", 
                Properties = { 
                    { "MaskChar", Properties["MudBlazor.Block.MaskChar"] },
                    { "Min", Properties["MudBlazor.Block.Min"] },
                    { "Max", Properties["MudBlazor.Block.Max"] },
                },
                Methods = { 
                    { "Deconstruct", Methods["MudBlazor.Block.Deconstruct"] },
                },
            }},
            { "MudBlazor.BlockMask", new() {
                Name = "BlockMask", 
                NameFriendly = "BlockMask", 
                BaseTypeName = "RegexMask", 
                Summary = @"A mask consisting of contiguous sets of characters.", 
                Remarks = @"This mask is typically used for text which consists of blocks of letters and numbers, such as a flight number (e.g. <c>LH4234</c>) or product code (e.g. <c>SKU1920</c>).", 
                Properties = { 
                    { "Blocks", Properties["MudBlazor.BlockMask.Blocks"] },
                    { "Delimiters", Properties["MudBlazor.RegexMask.Delimiters"] },
                    { "Mask", Properties["MudBlazor.BaseMask.Mask"] },
                    { "Text", Properties["MudBlazor.BaseMask.Text"] },
                    { "CaretPos", Properties["MudBlazor.BaseMask.CaretPos"] },
                    { "Selection", Properties["MudBlazor.BaseMask.Selection"] },
                    { "AllowOnlyDelimiters", Properties["MudBlazor.BaseMask.AllowOnlyDelimiters"] },
                    { "MaskChars", Properties["MudBlazor.BaseMask.MaskChars"] },
                },
                Methods = { 
                    { "UpdateFrom", Methods["MudBlazor.BlockMask.UpdateFrom"] },
                    { "Insert", Methods["MudBlazor.RegexMask.Insert"] },
                    { "Delete", Methods["MudBlazor.RegexMask.Delete"] },
                    { "Backspace", Methods["MudBlazor.RegexMask.Backspace"] },
                    { "GetCleanText", Methods["MudBlazor.BaseMask.GetCleanText"] },
                    { "Clear", Methods["MudBlazor.BaseMask.Clear"] },
                    { "SetText", Methods["MudBlazor.BaseMask.SetText"] },
                    { "InitInternals", Methods["MudBlazor.BlockMask.InitInternals"] },
                    { "InitRegex", Methods["MudBlazor.BlockMask.InitRegex"] },
                    { "BuildRegex", Methods["MudBlazor.BlockMask.BuildRegex"] },
                    { "DeleteSelection", Methods["MudBlazor.RegexMask.DeleteSelection"] },
                    { "AlignAgainstMask", Methods["MudBlazor.RegexMask.AlignAgainstMask"] },
                    { "Init", Methods["MudBlazor.BaseMask.Init"] },
                    { "UpdateText", Methods["MudBlazor.BaseMask.UpdateText"] },
                    { "IsDelimiter", Methods["MudBlazor.BaseMask.IsDelimiter"] },
                    { "Refresh", Methods["MudBlazor.BaseMask.Refresh"] },
                    { "ConsolidateSelection", Methods["MudBlazor.BaseMask.ConsolidateSelection"] },
                },
            }},
            { "MudBlazor.Body1Typography", new() {
                Name = "Body1Typography", 
                NameFriendly = "Body1Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the Body1 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.Body2Typography", new() {
                Name = "Body2Typography", 
                NameFriendly = "Body2Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the Body2 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.BoolConverter`1", new() {
                Name = "BoolConverter`1", 
                NameFriendly = "BoolConverter<T>", 
                BaseTypeName = "Converter`2", 
                Summary = @"A universal T to bool? binding converter", 
                Properties = { 
                    { "SetFunc", Properties["MudBlazor.Converter`2.SetFunc"] },
                    { "GetFunc", Properties["MudBlazor.Converter`2.GetFunc"] },
                    { "Culture", Properties["MudBlazor.Converter`2.Culture"] },
                    { "OnError", Properties["MudBlazor.Converter`2.OnError"] },
                    { "SetError", Properties["MudBlazor.Converter`2.SetError"] },
                    { "GetError", Properties["MudBlazor.Converter`2.GetError"] },
                    { "SetErrorMessage", Properties["MudBlazor.Converter`2.SetErrorMessage"] },
                    { "GetErrorMessage", Properties["MudBlazor.Converter`2.GetErrorMessage"] },
                },
                Methods = { 
                    { "Set", Methods["MudBlazor.Converter`2.Set"] },
                    { "Get", Methods["MudBlazor.Converter`2.Get"] },
                    { "UpdateSetError", Methods["MudBlazor.Converter`2.UpdateSetError"] },
                    { "UpdateGetError", Methods["MudBlazor.Converter`2.UpdateGetError"] },
                },
            }},
            { "MudBlazor.BreadcrumbItem", new() {
                Name = "BreadcrumbItem", 
                NameFriendly = "BreadcrumbItem", 
                BaseTypeName = "Object", 
                Summary = @"Represents a portion of a list of breadcrumbs.", 
                Properties = { 
                    { "Text", Properties["MudBlazor.BreadcrumbItem.Text"] },
                    { "Href", Properties["MudBlazor.BreadcrumbItem.Href"] },
                    { "Disabled", Properties["MudBlazor.BreadcrumbItem.Disabled"] },
                    { "Icon", Properties["MudBlazor.BreadcrumbItem.Icon"] },
                    { "EqualityContract", Properties["MudBlazor.BreadcrumbItem.EqualityContract"] },
                },
                Methods = { 
                    { "<Clone>$", Methods["MudBlazor.BreadcrumbItem.<Clone>$"] },
                    { "PrintMembers", Methods["MudBlazor.BreadcrumbItem.PrintMembers"] },
                },
            }},
            { "MudBlazor.BreadcrumbLink", new() {
                Name = "BreadcrumbLink", 
                NameFriendly = "BreadcrumbLink", 
                BaseTypeName = "ComponentBase", 
                Summary = @"Represents a segment in a list of breadcrumbs.", 
                Properties = { 
                    { "Item", Properties["MudBlazor.BreadcrumbLink.Item"] },
                    { "Parent", Properties["MudBlazor.BreadcrumbLink.Parent"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.BreadcrumbSeparator", new() {
                Name = "BreadcrumbSeparator", 
                NameFriendly = "BreadcrumbSeparator", 
                BaseTypeName = "ComponentBase", 
                Summary = @"Represents a divider between breadcrumb items.", 
                Properties = { 
                    { "Parent", Properties["MudBlazor.BreadcrumbSeparator.Parent"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.Breakpoint", new() {
                Name = "Breakpoint", 
                NameFriendly = "Breakpoint", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates a browser width used to trigger behaviors.", 
                Remarks = @"Breakpoints are typically used to show or hide content based on the width of the browser window, such as customizing content for desktops, tablets, and mobile devices.", 
                Fields = { 
                    { "Xs", Fields["MudBlazor.Breakpoint.Xs"] },
                    { "Sm", Fields["MudBlazor.Breakpoint.Sm"] },
                    { "Md", Fields["MudBlazor.Breakpoint.Md"] },
                    { "Lg", Fields["MudBlazor.Breakpoint.Lg"] },
                    { "Xl", Fields["MudBlazor.Breakpoint.Xl"] },
                    { "Xxl", Fields["MudBlazor.Breakpoint.Xxl"] },
                    { "SmAndDown", Fields["MudBlazor.Breakpoint.SmAndDown"] },
                    { "MdAndDown", Fields["MudBlazor.Breakpoint.MdAndDown"] },
                    { "LgAndDown", Fields["MudBlazor.Breakpoint.LgAndDown"] },
                    { "XlAndDown", Fields["MudBlazor.Breakpoint.XlAndDown"] },
                    { "SmAndUp", Fields["MudBlazor.Breakpoint.SmAndUp"] },
                    { "MdAndUp", Fields["MudBlazor.Breakpoint.MdAndUp"] },
                    { "LgAndUp", Fields["MudBlazor.Breakpoint.LgAndUp"] },
                    { "XlAndUp", Fields["MudBlazor.Breakpoint.XlAndUp"] },
                    { "None", Fields["MudBlazor.Breakpoint.None"] },
                    { "Always", Fields["MudBlazor.Breakpoint.Always"] },
                },
            }},
            { "MudBlazor.Breakpoints", new() {
                Name = "Breakpoints", 
                NameFriendly = "Breakpoints", 
                BaseTypeName = "Object", 
                Summary = @"Represents the breakpoints for responsive design.", 
                Properties = { 
                    { "xs", Properties["MudBlazor.Breakpoints.xs"] },
                    { "sm", Properties["MudBlazor.Breakpoints.sm"] },
                    { "md", Properties["MudBlazor.Breakpoints.md"] },
                    { "lg", Properties["MudBlazor.Breakpoints.lg"] },
                    { "xl", Properties["MudBlazor.Breakpoints.xl"] },
                    { "xxl", Properties["MudBlazor.Breakpoints.xxl"] },
                },
            }},
            { "MudBlazor.BrowserViewportEventArgs", new() {
                Name = "BrowserViewportEventArgs", 
                NameFriendly = "BrowserViewportEventArgs", 
                BaseTypeName = "EventArgs", 
                Summary = @"Provides data for the browser viewport event.", 
                Properties = { 
                    { "JavaScriptListenerId", Properties["MudBlazor.BrowserViewportEventArgs.JavaScriptListenerId"] },
                    { "BrowserWindowSize", Properties["MudBlazor.BrowserViewportEventArgs.BrowserWindowSize"] },
                    { "Breakpoint", Properties["MudBlazor.BrowserViewportEventArgs.Breakpoint"] },
                    { "IsImmediate", Properties["MudBlazor.BrowserViewportEventArgs.IsImmediate"] },
                },
            }},
            { "MudBlazor.ButtonType", new() {
                Name = "ButtonType", 
                NameFriendly = "ButtonType", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the behavior performed when a button is clicked.", 
                Fields = { 
                    { "Button", Fields["MudBlazor.ButtonType.Button"] },
                    { "Submit", Fields["MudBlazor.ButtonType.Submit"] },
                    { "Reset", Fields["MudBlazor.ButtonType.Reset"] },
                },
            }},
            { "MudBlazor.ButtonTypography", new() {
                Name = "ButtonTypography", 
                NameFriendly = "ButtonTypography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the Button typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.CaptionTypography", new() {
                Name = "CaptionTypography", 
                NameFriendly = "CaptionTypography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the Caption typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.CellContext`1", new() {
                Name = "CellContext`1", 
                NameFriendly = "CellContext<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the current state of a cell in a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "Item", Properties["MudBlazor.CellContext`1.Item"] },
                    { "Actions", Properties["MudBlazor.CellContext`1.Actions"] },
                    { "Selected", Properties["MudBlazor.CellContext`1.Selected"] },
                    { "Open", Properties["MudBlazor.CellContext`1.Open"] },
                },
            }},
            { "MudBlazor.CellContext`1+CellActions", new() {
                Name = "CellActions", 
                NameFriendly = "CellActio<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents behaviors which can be performed on a cell.", 
                Properties = { 
                    { "SetSelectedItemAsync", Properties["MudBlazor.CellContext`1+CellActions.SetSelectedItemAsync"] },
                    { "StartEditingItemAsync", Properties["MudBlazor.CellContext`1+CellActions.StartEditingItemAsync"] },
                    { "CancelEditingItemAsync", Properties["MudBlazor.CellContext`1+CellActions.CancelEditingItemAsync"] },
                    { "ToggleHierarchyVisibilityForItemAsync", Properties["MudBlazor.CellContext`1+CellActions.ToggleHierarchyVisibilityForItemAsync"] },
                },
            }},
            { "MudBlazor.ChartOptions", new() {
                Name = "ChartOptions", 
                NameFriendly = "ChartOptions", 
                BaseTypeName = "Object", 
                Summary = @"Represents options which customize the display of a <see cref=""T:MudBlazor.MudChart"" />.", 
                Remarks = @"This class is typically used to control display features of a chart such as: colors, the number of horizontal and vertical ticks, and line smoothing options.", 
                Properties = { 
                    { "YAxisTicks", Properties["MudBlazor.ChartOptions.YAxisTicks"] },
                    { "MaxNumYAxisTicks", Properties["MudBlazor.ChartOptions.MaxNumYAxisTicks"] },
                    { "YAxisFormat", Properties["MudBlazor.ChartOptions.YAxisFormat"] },
                    { "YAxisLines", Properties["MudBlazor.ChartOptions.YAxisLines"] },
                    { "XAxisLines", Properties["MudBlazor.ChartOptions.XAxisLines"] },
                    { "YAxisRequireZeroPoint", Properties["MudBlazor.ChartOptions.YAxisRequireZeroPoint"] },
                    { "ShowLegend", Properties["MudBlazor.ChartOptions.ShowLegend"] },
                    { "ChartPalette", Properties["MudBlazor.ChartOptions.ChartPalette"] },
                    { "InterpolationOption", Properties["MudBlazor.ChartOptions.InterpolationOption"] },
                    { "LineStrokeWidth", Properties["MudBlazor.ChartOptions.LineStrokeWidth"] },
                    { "EnableSmoothGradient", Properties["MudBlazor.ChartOptions.EnableSmoothGradient"] },
                    { "XAxisLabelPosition", Properties["MudBlazor.ChartOptions.XAxisLabelPosition"] },
                    { "YAxisLabelPosition", Properties["MudBlazor.ChartOptions.YAxisLabelPosition"] },
                    { "ShowToolTips", Properties["MudBlazor.ChartOptions.ShowToolTips"] },
                    { "ShowLabels", Properties["MudBlazor.ChartOptions.ShowLabels"] },
                    { "ShowLegendLabels", Properties["MudBlazor.ChartOptions.ShowLegendLabels"] },
                    { "ValueFormatString", Properties["MudBlazor.ChartOptions.ValueFormatString"] },
                },
            }},
            { "MudBlazor.Charts.Bar", new() {
                Name = "Bar", 
                NameFriendly = "Bar", 
                BaseTypeName = "MudCategoryChartBase", 
                IsComponent = true, 
                Summary = @"Represents a chart which displays series values as rectangular bars.", 
                Properties = { 
                    { "MudChartParent", Properties["MudBlazor.Charts.Bar.MudChartParent"] },
                    { "InputData", Properties["MudBlazor.MudCategoryChartBase.InputData"] },
                    { "InputLabels", Properties["MudBlazor.MudCategoryChartBase.InputLabels"] },
                    { "XAxisLabels", Properties["MudBlazor.MudCategoryChartBase.XAxisLabels"] },
                    { "ChartSeries", Properties["MudBlazor.MudCategoryChartBase.ChartSeries"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetNormalizedData", Methods["MudBlazor.MudCategoryChartBase.GetNormalizedData"] },
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.Charts.Donut", new() {
                Name = "Donut", 
                NameFriendly = "Donut", 
                BaseTypeName = "MudCategoryChartBase", 
                IsComponent = true, 
                Summary = @"Represents a chart which displays values as ring shape.", 
                Properties = { 
                    { "MudChartParent", Properties["MudBlazor.Charts.Donut.MudChartParent"] },
                    { "InputData", Properties["MudBlazor.MudCategoryChartBase.InputData"] },
                    { "InputLabels", Properties["MudBlazor.MudCategoryChartBase.InputLabels"] },
                    { "XAxisLabels", Properties["MudBlazor.MudCategoryChartBase.XAxisLabels"] },
                    { "ChartSeries", Properties["MudBlazor.MudCategoryChartBase.ChartSeries"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "ParentWidth", Properties["MudBlazor.Charts.Donut.ParentWidth"] },
                    { "ParentHeight", Properties["MudBlazor.Charts.Donut.ParentHeight"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetNormalizedData", Methods["MudBlazor.MudCategoryChartBase.GetNormalizedData"] },
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.Charts.Filters", new() {
                Name = "Filters", 
                NameFriendly = "Filters", 
                BaseTypeName = "ComponentBase", 
                Properties = { 
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.Charts.HeatMap", new() {
                Name = "HeatMap", 
                NameFriendly = "HeatMap", 
                BaseTypeName = "MudCategoryChartBase", 
                IsComponent = true, 
                Properties = { 
                    { "MudChartParent", Properties["MudBlazor.Charts.HeatMap.MudChartParent"] },
                    { "InputData", Properties["MudBlazor.MudCategoryChartBase.InputData"] },
                    { "InputLabels", Properties["MudBlazor.MudCategoryChartBase.InputLabels"] },
                    { "XAxisLabels", Properties["MudBlazor.MudCategoryChartBase.XAxisLabels"] },
                    { "ChartSeries", Properties["MudBlazor.MudCategoryChartBase.ChartSeries"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetNormalizedData", Methods["MudBlazor.MudCategoryChartBase.GetNormalizedData"] },
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.Charts.HeatMapCell", new() {
                Name = "HeatMapCell", 
                NameFriendly = "HeatMapCell", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Row", Properties["MudBlazor.Charts.HeatMapCell.Row"] },
                    { "Column", Properties["MudBlazor.Charts.HeatMapCell.Column"] },
                    { "Value", Properties["MudBlazor.Charts.HeatMapCell.Value"] },
                    { "MudColor", Properties["MudBlazor.Charts.HeatMapCell.MudColor"] },
                    { "Width", Properties["MudBlazor.Charts.HeatMapCell.Width"] },
                    { "Height", Properties["MudBlazor.Charts.HeatMapCell.Height"] },
                    { "CustomFragment", Properties["MudBlazor.Charts.HeatMapCell.CustomFragment"] },
                },
            }},
            { "MudBlazor.Charts.Legend", new() {
                Name = "Legend", 
                NameFriendly = "Legend", 
                BaseTypeName = "MudChartBase", 
                IsComponent = true, 
                Summary = @"Represents a set of text labels which describe data values in a <see cref=""T:MudBlazor.MudChart"" />.", 
                Properties = { 
                    { "MudChartParent", Properties["MudBlazor.Charts.Legend.MudChartParent"] },
                    { "Data", Properties["MudBlazor.Charts.Legend.Data"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.Charts.Line", new() {
                Name = "Line", 
                NameFriendly = "Line", 
                BaseTypeName = "MudCategoryChartBase", 
                IsComponent = true, 
                Summary = @"Represents a chart which displays series values as connected lines.", 
                Properties = { 
                    { "MudChartParent", Properties["MudBlazor.Charts.Line.MudChartParent"] },
                    { "InputData", Properties["MudBlazor.MudCategoryChartBase.InputData"] },
                    { "InputLabels", Properties["MudBlazor.MudCategoryChartBase.InputLabels"] },
                    { "XAxisLabels", Properties["MudBlazor.MudCategoryChartBase.XAxisLabels"] },
                    { "ChartSeries", Properties["MudBlazor.MudCategoryChartBase.ChartSeries"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetNormalizedData", Methods["MudBlazor.MudCategoryChartBase.GetNormalizedData"] },
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.Charts.Pie", new() {
                Name = "Pie", 
                NameFriendly = "Pie", 
                BaseTypeName = "MudCategoryChartBase", 
                IsComponent = true, 
                Summary = @"Represents a chart which displays values as a percentage of a circle.", 
                Properties = { 
                    { "MudChartParent", Properties["MudBlazor.Charts.Pie.MudChartParent"] },
                    { "InputData", Properties["MudBlazor.MudCategoryChartBase.InputData"] },
                    { "InputLabels", Properties["MudBlazor.MudCategoryChartBase.InputLabels"] },
                    { "XAxisLabels", Properties["MudBlazor.MudCategoryChartBase.XAxisLabels"] },
                    { "ChartSeries", Properties["MudBlazor.MudCategoryChartBase.ChartSeries"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetNormalizedData", Methods["MudBlazor.MudCategoryChartBase.GetNormalizedData"] },
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.Charts.StackedBar", new() {
                Name = "StackedBar", 
                NameFriendly = "StackedBar", 
                BaseTypeName = "MudCategoryChartBase", 
                IsComponent = true, 
                Summary = @"Represents a chart which displays series values as portions of vertical rectangles.", 
                Properties = { 
                    { "MudChartParent", Properties["MudBlazor.Charts.StackedBar.MudChartParent"] },
                    { "InputData", Properties["MudBlazor.MudCategoryChartBase.InputData"] },
                    { "InputLabels", Properties["MudBlazor.MudCategoryChartBase.InputLabels"] },
                    { "XAxisLabels", Properties["MudBlazor.MudCategoryChartBase.XAxisLabels"] },
                    { "ChartSeries", Properties["MudBlazor.MudCategoryChartBase.ChartSeries"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetNormalizedData", Methods["MudBlazor.MudCategoryChartBase.GetNormalizedData"] },
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.Charts.TimeSeries", new() {
                Name = "TimeSeries", 
                NameFriendly = "TimeSeries", 
                BaseTypeName = "MudTimeSeriesChartBase", 
                IsComponent = true, 
                Summary = @"A chart which displays values over time.", 
                Properties = { 
                    { "MudChartParent", Properties["MudBlazor.Charts.TimeSeries.MudChartParent"] },
                    { "ChartSeries", Properties["MudBlazor.MudTimeSeriesChartBase.ChartSeries"] },
                    { "TimeLabelSpacing", Properties["MudBlazor.MudTimeSeriesChartBase.TimeLabelSpacing"] },
                    { "TimeLabelFormat", Properties["MudBlazor.MudTimeSeriesChartBase.TimeLabelFormat"] },
                    { "XAxisTitle", Properties["MudBlazor.MudTimeSeriesChartBase.XAxisTitle"] },
                    { "YAxisTitle", Properties["MudBlazor.MudTimeSeriesChartBase.YAxisTitle"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.ChartSeries", new() {
                Name = "ChartSeries", 
                NameFriendly = "ChartSeries", 
                BaseTypeName = "Object", 
                Summary = @"Represents a set of data to display in a <see cref=""T:MudBlazor.MudChart"" />.", 
                Remarks = @"This class is typically used to display multiple sets of values in a line, bar, or stacked bar chart.", 
                Properties = { 
                    { "Name", Properties["MudBlazor.ChartSeries.Name"] },
                    { "Data", Properties["MudBlazor.ChartSeries.Data"] },
                    { "Visible", Properties["MudBlazor.ChartSeries.Visible"] },
                    { "Index", Properties["MudBlazor.ChartSeries.Index"] },
                },
            }},
            { "MudBlazor.ChartType", new() {
                Name = "ChartType", 
                NameFriendly = "ChartType", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the type of chart to display.", 
                Fields = { 
                    { "Donut", Fields["MudBlazor.ChartType.Donut"] },
                    { "Line", Fields["MudBlazor.ChartType.Line"] },
                    { "Pie", Fields["MudBlazor.ChartType.Pie"] },
                    { "Bar", Fields["MudBlazor.ChartType.Bar"] },
                    { "StackedBar", Fields["MudBlazor.ChartType.StackedBar"] },
                    { "Timeseries", Fields["MudBlazor.ChartType.Timeseries"] },
                    { "HeatMap", Fields["MudBlazor.ChartType.HeatMap"] },
                },
            }},
            { "MudBlazor.ChatArrowPosition", new() {
                Name = "ChatArrowPosition", 
                NameFriendly = "ChatArrowPosition", 
                BaseTypeName = "Enum", 
                Summary = @"The position of the Chat Bubble Arrow", 
                Fields = { 
                    { "Top", Fields["MudBlazor.ChatArrowPosition.Top"] },
                    { "Middle", Fields["MudBlazor.ChatArrowPosition.Middle"] },
                    { "Bottom", Fields["MudBlazor.ChatArrowPosition.Bottom"] },
                    { "None", Fields["MudBlazor.ChatArrowPosition.None"] },
                },
            }},
            { "MudBlazor.ChatBubblePosition", new() {
                Name = "ChatBubblePosition", 
                NameFriendly = "ChatBubblePosition", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Start", Fields["MudBlazor.ChatBubblePosition.Start"] },
                    { "End", Fields["MudBlazor.ChatBubblePosition.End"] },
                },
            }},
            { "MudBlazor.CollectionComparer`1", new() {
                Name = "CollectionComparer`1", 
                NameFriendly = "CollectionComparer<T>", 
                BaseTypeName = "Object", 
                Summary = @"Provides a comparer for <see cref=""T:System.Collections.Generic.IReadOnlyCollection`1"" /> values by using a <see cref=""T:System.Collections.Generic.IEqualityComparer`1"" />.Equality is based on HashSet and the given IEqualityComparerNote: Order of the sequence is not relevant, neither are multiple entries of the same value !", 
                Fields = { 
                    { "Default", Fields["MudBlazor.CollectionComparer`1.Default"] },
                },
                Methods = { 
                    { "CombineHashCodes", Methods["MudBlazor.CollectionComparer`1.CombineHashCodes"] },
                },
            }},
            { "MudBlazor.Color", new() {
                Name = "Color", 
                NameFriendly = "Color", 
                BaseTypeName = "Enum", 
                Summary = @"The color themes available in MudBlazor, allowing components to adapt their visual style based on the selected color.", 
                Fields = { 
                    { "Default", Fields["MudBlazor.Color.Default"] },
                    { "Primary", Fields["MudBlazor.Color.Primary"] },
                    { "Secondary", Fields["MudBlazor.Color.Secondary"] },
                    { "Tertiary", Fields["MudBlazor.Color.Tertiary"] },
                    { "Info", Fields["MudBlazor.Color.Info"] },
                    { "Success", Fields["MudBlazor.Color.Success"] },
                    { "Warning", Fields["MudBlazor.Color.Warning"] },
                    { "Error", Fields["MudBlazor.Color.Error"] },
                    { "Dark", Fields["MudBlazor.Color.Dark"] },
                    { "Transparent", Fields["MudBlazor.Color.Transparent"] },
                    { "Inherit", Fields["MudBlazor.Color.Inherit"] },
                    { "Surface", Fields["MudBlazor.Color.Surface"] },
                },
            }},
            { "MudBlazor.ColorPickerMode", new() {
                Name = "ColorPickerMode", 
                NameFriendly = "ColorPickerMode", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the initial mode used by a <see cref=""T:MudBlazor.MudColorPicker"" />.", 
                Fields = { 
                    { "RGB", Fields["MudBlazor.ColorPickerMode.RGB"] },
                    { "HSL", Fields["MudBlazor.ColorPickerMode.HSL"] },
                    { "HEX", Fields["MudBlazor.ColorPickerMode.HEX"] },
                },
            }},
            { "MudBlazor.ColorPickerView", new() {
                Name = "ColorPickerView", 
                NameFriendly = "ColorPickerView", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the color selection view for a <see cref=""T:MudBlazor.MudColorPicker"" />.", 
                Fields = { 
                    { "Spectrum", Fields["MudBlazor.ColorPickerView.Spectrum"] },
                    { "Palette", Fields["MudBlazor.ColorPickerView.Palette"] },
                    { "Grid", Fields["MudBlazor.ColorPickerView.Grid"] },
                    { "GridCompact", Fields["MudBlazor.ColorPickerView.GridCompact"] },
                },
            }},
            { "MudBlazor.Column`1", new() {
                Name = "Column`1", 
                NameFriendly = "Column<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a vertical set of values.", 
                Properties = { 
                    { "DataGrid", Properties["MudBlazor.Column`1.DataGrid"] },
                    { "Value", Properties["MudBlazor.Column`1.Value"] },
                    { "Title", Properties["MudBlazor.Column`1.Title"] },
                    { "HideSmall", Properties["MudBlazor.Column`1.HideSmall"] },
                    { "FooterColSpan", Properties["MudBlazor.Column`1.FooterColSpan"] },
                    { "HeaderColSpan", Properties["MudBlazor.Column`1.HeaderColSpan"] },
                    { "HeaderTemplate", Properties["MudBlazor.Column`1.HeaderTemplate"] },
                    { "CellTemplate", Properties["MudBlazor.Column`1.CellTemplate"] },
                    { "FooterTemplate", Properties["MudBlazor.Column`1.FooterTemplate"] },
                    { "GroupTemplate", Properties["MudBlazor.Column`1.GroupTemplate"] },
                    { "AggregateTemplate", Properties["MudBlazor.Column`1.AggregateTemplate"] },
                    { "GroupBy", Properties["MudBlazor.Column`1.GroupBy"] },
                    { "Required", Properties["MudBlazor.Column`1.Required"] },
                    { "HeaderClass", Properties["MudBlazor.Column`1.HeaderClass"] },
                    { "HeaderClassFunc", Properties["MudBlazor.Column`1.HeaderClassFunc"] },
                    { "HeaderStyle", Properties["MudBlazor.Column`1.HeaderStyle"] },
                    { "HeaderStyleFunc", Properties["MudBlazor.Column`1.HeaderStyleFunc"] },
                    { "Sortable", Properties["MudBlazor.Column`1.Sortable"] },
                    { "Resizable", Properties["MudBlazor.Column`1.Resizable"] },
                    { "DragAndDropEnabled", Properties["MudBlazor.Column`1.DragAndDropEnabled"] },
                    { "Filterable", Properties["MudBlazor.Column`1.Filterable"] },
                    { "ShowFilterIcon", Properties["MudBlazor.Column`1.ShowFilterIcon"] },
                    { "Hideable", Properties["MudBlazor.Column`1.Hideable"] },
                    { "Hidden", Properties["MudBlazor.Column`1.Hidden"] },
                    { "ShowColumnOptions", Properties["MudBlazor.Column`1.ShowColumnOptions"] },
                    { "Comparer", Properties["MudBlazor.Column`1.Comparer"] },
                    { "SortBy", Properties["MudBlazor.Column`1.SortBy"] },
                    { "InitialDirection", Properties["MudBlazor.Column`1.InitialDirection"] },
                    { "SortIcon", Properties["MudBlazor.Column`1.SortIcon"] },
                    { "Groupable", Properties["MudBlazor.Column`1.Groupable"] },
                    { "Grouping", Properties["MudBlazor.Column`1.Grouping"] },
                    { "StickyLeft", Properties["MudBlazor.Column`1.StickyLeft"] },
                    { "StickyRight", Properties["MudBlazor.Column`1.StickyRight"] },
                    { "FilterTemplate", Properties["MudBlazor.Column`1.FilterTemplate"] },
                    { "FilterOperators", Properties["MudBlazor.Column`1.FilterOperators"] },
                    { "Identifier", Properties["MudBlazor.Column`1.Identifier"] },
                    { "Culture", Properties["MudBlazor.Column`1.Culture"] },
                    { "CellClass", Properties["MudBlazor.Column`1.CellClass"] },
                    { "CellClassFunc", Properties["MudBlazor.Column`1.CellClassFunc"] },
                    { "CellStyle", Properties["MudBlazor.Column`1.CellStyle"] },
                    { "CellStyleFunc", Properties["MudBlazor.Column`1.CellStyleFunc"] },
                    { "Editable", Properties["MudBlazor.Column`1.Editable"] },
                    { "EditTemplate", Properties["MudBlazor.Column`1.EditTemplate"] },
                    { "FooterClass", Properties["MudBlazor.Column`1.FooterClass"] },
                    { "FooterClassFunc", Properties["MudBlazor.Column`1.FooterClassFunc"] },
                    { "FooterStyle", Properties["MudBlazor.Column`1.FooterStyle"] },
                    { "FooterStyleFunc", Properties["MudBlazor.Column`1.FooterStyleFunc"] },
                    { "EnableFooterSelection", Properties["MudBlazor.Column`1.EnableFooterSelection"] },
                    { "AggregateDefinition", Properties["MudBlazor.Column`1.AggregateDefinition"] },
                    { "FilterContext", Properties["MudBlazor.Column`1.FilterContext"] },
                    { "PropertyName", Properties["MudBlazor.Column`1.PropertyName"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "HideAsync", Methods["MudBlazor.Column`1.HideAsync"] },
                    { "ShowAsync", Methods["MudBlazor.Column`1.ShowAsync"] },
                    { "ToggleAsync", Methods["MudBlazor.Column`1.ToggleAsync"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.Column`1.ValueChanged"] },
                    { "HiddenChanged", Events["MudBlazor.Column`1.HiddenChanged"] },
                    { "GroupingChanged", Events["MudBlazor.Column`1.GroupingChanged"] },
                },
            }},
            { "MudBlazor.CommonSnackbarOptions", new() {
                Name = "CommonSnackbarOptions", 
                NameFriendly = "CommonSnackbarOptions", 
                BaseTypeName = "Object", 
                Summary = @"The options which control Snackbar pop-ups.", 
                Properties = { 
                    { "MaximumOpacity", Properties["MudBlazor.CommonSnackbarOptions.MaximumOpacity"] },
                    { "ShowTransitionDuration", Properties["MudBlazor.CommonSnackbarOptions.ShowTransitionDuration"] },
                    { "VisibleStateDuration", Properties["MudBlazor.CommonSnackbarOptions.VisibleStateDuration"] },
                    { "HideTransitionDuration", Properties["MudBlazor.CommonSnackbarOptions.HideTransitionDuration"] },
                    { "ShowCloseIcon", Properties["MudBlazor.CommonSnackbarOptions.ShowCloseIcon"] },
                    { "RequireInteraction", Properties["MudBlazor.CommonSnackbarOptions.RequireInteraction"] },
                    { "BackgroundBlurred", Properties["MudBlazor.CommonSnackbarOptions.BackgroundBlurred"] },
                    { "SnackbarVariant", Properties["MudBlazor.CommonSnackbarOptions.SnackbarVariant"] },
                    { "IconSize", Properties["MudBlazor.CommonSnackbarOptions.IconSize"] },
                    { "NormalIcon", Properties["MudBlazor.CommonSnackbarOptions.NormalIcon"] },
                    { "InfoIcon", Properties["MudBlazor.CommonSnackbarOptions.InfoIcon"] },
                    { "SuccessIcon", Properties["MudBlazor.CommonSnackbarOptions.SuccessIcon"] },
                    { "WarningIcon", Properties["MudBlazor.CommonSnackbarOptions.WarningIcon"] },
                    { "ErrorIcon", Properties["MudBlazor.CommonSnackbarOptions.ErrorIcon"] },
                },
            }},
            { "MudBlazor.ComponentBaseWithState", new() {
                Name = "ComponentBaseWithState", 
                NameFriendly = "ComponentBaseWithState", 
                BaseTypeName = "ComponentBase", 
                Summary = @"Represents a base class for designing components which maintain state.", 
                Properties = { 
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.Components.Highlighter.Splitter", new() {
                Name = "Splitter", 
                NameFriendly = "Splitter", 
                BaseTypeName = "Object", 
                Summary = @"Splits text into fragments based on text to be highlighted.", 
                Methods = { 
                    { "GetFragments", Methods["MudBlazor.Components.Highlighter.Splitter.GetFragments"] },
                },
            }},
            { "MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageMarkupString", new() {
                Name = "SnackbarMessageMarkupString", 
                NameFriendly = "SnackbarMessageMarkupString", 
                BaseTypeName = "ComponentBase", 
                Properties = { 
                    { "Message", Properties["MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageMarkupString.Message"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageRenderFragment", new() {
                Name = "SnackbarMessageRenderFragment", 
                NameFriendly = "SnackbarMessageRenderFragment", 
                BaseTypeName = "ComponentBase", 
                Properties = { 
                    { "Message", Properties["MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageRenderFragment.Message"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageText", new() {
                Name = "SnackbarMessageText", 
                NameFriendly = "SnackbarMessageText", 
                BaseTypeName = "ComponentBase", 
                Properties = { 
                    { "Message", Properties["MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageText.Message"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.ContentNavigationExpandBehaviour", new() {
                Name = "ContentNavigationExpandBehaviour", 
                NameFriendly = "ContentNavigationExpandBehaviour", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Always", Fields["MudBlazor.ContentNavigationExpandBehaviour.Always"] },
                    { "WhenSectionIsActive", Fields["MudBlazor.ContentNavigationExpandBehaviour.WhenSectionIsActive"] },
                },
            }},
            { "MudBlazor.Converter`1", new() {
                Name = "Converter`1", 
                NameFriendly = "Converter<T>", 
                BaseTypeName = "Converter`2", 
                Summary = @"<para>Converter from T to string</para><para>Set converts to stringGet converts from string</para>", 
                Properties = { 
                    { "Format", Properties["MudBlazor.Converter`1.Format"] },
                    { "SetFunc", Properties["MudBlazor.Converter`2.SetFunc"] },
                    { "GetFunc", Properties["MudBlazor.Converter`2.GetFunc"] },
                    { "Culture", Properties["MudBlazor.Converter`2.Culture"] },
                    { "OnError", Properties["MudBlazor.Converter`2.OnError"] },
                    { "SetError", Properties["MudBlazor.Converter`2.SetError"] },
                    { "GetError", Properties["MudBlazor.Converter`2.GetError"] },
                    { "SetErrorMessage", Properties["MudBlazor.Converter`2.SetErrorMessage"] },
                    { "GetErrorMessage", Properties["MudBlazor.Converter`2.GetErrorMessage"] },
                },
                Methods = { 
                    { "Set", Methods["MudBlazor.Converter`2.Set"] },
                    { "Get", Methods["MudBlazor.Converter`2.Get"] },
                    { "UpdateSetError", Methods["MudBlazor.Converter`2.UpdateSetError"] },
                    { "UpdateGetError", Methods["MudBlazor.Converter`2.UpdateGetError"] },
                },
            }},
            { "MudBlazor.Converter`2", new() {
                Name = "Converter`2", 
                NameFriendly = "Converter<T, U>", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "SetFunc", Properties["MudBlazor.Converter`2.SetFunc"] },
                    { "GetFunc", Properties["MudBlazor.Converter`2.GetFunc"] },
                    { "Culture", Properties["MudBlazor.Converter`2.Culture"] },
                    { "OnError", Properties["MudBlazor.Converter`2.OnError"] },
                    { "SetError", Properties["MudBlazor.Converter`2.SetError"] },
                    { "GetError", Properties["MudBlazor.Converter`2.GetError"] },
                    { "SetErrorMessage", Properties["MudBlazor.Converter`2.SetErrorMessage"] },
                    { "GetErrorMessage", Properties["MudBlazor.Converter`2.GetErrorMessage"] },
                },
                Methods = { 
                    { "Set", Methods["MudBlazor.Converter`2.Set"] },
                    { "Get", Methods["MudBlazor.Converter`2.Get"] },
                    { "UpdateSetError", Methods["MudBlazor.Converter`2.UpdateSetError"] },
                    { "UpdateGetError", Methods["MudBlazor.Converter`2.UpdateGetError"] },
                },
            }},
            { "MudBlazor.Converters", new() {
                Name = "Converters", 
                NameFriendly = "Converters", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "DefaultCulture", Properties["MudBlazor.Converters.DefaultCulture"] },
                    { "IsoDate", Properties["MudBlazor.Converters.IsoDate"] },
                    { "NullableIsoDate", Properties["MudBlazor.Converters.NullableIsoDate"] },
                },
                Methods = { 
                    { "DateFormat", Methods["MudBlazor.Converters.DateFormat"] },
                },
            }},
            { "MudBlazor.DataGridEditMode", new() {
                Name = "DataGridEditMode", 
                NameFriendly = "DataGridEditMode", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates how values are edited for <see cref=""T:MudBlazor.MudDataGrid`1"" /> cells.", 
                Fields = { 
                    { "Cell", Fields["MudBlazor.DataGridEditMode.Cell"] },
                    { "Form", Fields["MudBlazor.DataGridEditMode.Form"] },
                },
            }},
            { "MudBlazor.DataGridEditTrigger", new() {
                Name = "DataGridEditTrigger", 
                NameFriendly = "DataGridEditTrigger", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the behavior which begins editing a cell.", 
                Fields = { 
                    { "OnRowClick", Fields["MudBlazor.DataGridEditTrigger.OnRowClick"] },
                    { "Manual", Fields["MudBlazor.DataGridEditTrigger.Manual"] },
                },
            }},
            { "MudBlazor.DataGridFilterCaseSensitivity", new() {
                Name = "DataGridFilterCaseSensitivity", 
                NameFriendly = "DataGridFilterCaseSensitivity", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates how string values are compared for a <see cref=""T:MudBlazor.MudDataGrid`1"" /> filter.", 
                Fields = { 
                    { "Default", Fields["MudBlazor.DataGridFilterCaseSensitivity.Default"] },
                    { "CaseInsensitive", Fields["MudBlazor.DataGridFilterCaseSensitivity.CaseInsensitive"] },
                    { "Ignore", Fields["MudBlazor.DataGridFilterCaseSensitivity.Ignore"] },
                },
            }},
            { "MudBlazor.DataGridFilterMode", new() {
                Name = "DataGridFilterMode", 
                NameFriendly = "DataGridFilterMode", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the filtering behavior for <see cref=""T:MudBlazor.MudDataGrid`1"" /> rows.", 
                Fields = { 
                    { "Simple", Fields["MudBlazor.DataGridFilterMode.Simple"] },
                    { "ColumnFilterMenu", Fields["MudBlazor.DataGridFilterMode.ColumnFilterMenu"] },
                    { "ColumnFilterRow", Fields["MudBlazor.DataGridFilterMode.ColumnFilterRow"] },
                },
            }},
            { "MudBlazor.DataGridRowClickEventArgs`1", new() {
                Name = "DataGridRowClickEventArgs`1", 
                NameFriendly = "DataGridRowClickEventArgs<T>", 
                BaseTypeName = "EventArgs", 
                Summary = @"Represents the information related to a <see cref=""P:MudBlazor.MudDataGrid`1.RowClick"" /> event.", 
                Properties = { 
                    { "MouseEventArgs", Properties["MudBlazor.DataGridRowClickEventArgs`1.MouseEventArgs"] },
                    { "Item", Properties["MudBlazor.DataGridRowClickEventArgs`1.Item"] },
                    { "RowIndex", Properties["MudBlazor.DataGridRowClickEventArgs`1.RowIndex"] },
                },
            }},
            { "MudBlazor.DataGridRowValidator", new() {
                Name = "DataGridRowValidator", 
                NameFriendly = "DataGridRowValidator", 
                BaseTypeName = "Object", 
                Summary = @"Represents the validation logic for a <see cref=""T:MudBlazor.MudDataGrid`1"" /> row.", 
                Properties = { 
                    { "IsValid", Properties["MudBlazor.DataGridRowValidator.IsValid"] },
                    { "Errors", Properties["MudBlazor.DataGridRowValidator.Errors"] },
                    { "Model", Properties["MudBlazor.DataGridRowValidator.Model"] },
                },
                Methods = { 
                    { "Validate", Methods["MudBlazor.DataGridRowValidator.Validate"] },
                },
            }},
            { "MudBlazor.DateConverter", new() {
                Name = "DateConverter", 
                NameFriendly = "DateConverter", 
                BaseTypeName = "Converter`1", 
                Summary = @"A ready made DateTime to string binding converter with configurable date format and culture", 
                Properties = { 
                    { "DateFormat", Properties["MudBlazor.DateConverter.DateFormat"] },
                    { "Format", Properties["MudBlazor.Converter`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format"] },
                    { "SetFunc", Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFunc"] },
                    { "GetFunc", Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetFunc"] },
                    { "Culture", Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"] },
                    { "OnError", Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnError"] },
                    { "SetError", Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetError"] },
                    { "GetError", Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetError"] },
                    { "SetErrorMessage", Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetErrorMessage"] },
                    { "GetErrorMessage", Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorMessage"] },
                },
                Methods = { 
                    { "Set", Methods["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Set"] },
                    { "Get", Methods["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Get"] },
                    { "UpdateSetError", Methods["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateSetError"] },
                    { "UpdateGetError", Methods["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateGetError"] },
                },
            }},
            { "MudBlazor.DateMask", new() {
                Name = "DateMask", 
                NameFriendly = "DateMask", 
                BaseTypeName = "PatternMask", 
                Summary = @"An input pattern mask which accepts date values.", 
                Remarks = @"Date masks consist of a combination of: days (e.g. <c>dd</c>), months (e.g. <c>MM</c>), and years (e.g. <c>yy</c> or <c>yyyy</c>), and any delimiter.  Custom characters can be used to represent days, months, and years.<br />Examples: <c>yyyy-MM-dd</c>, <c>MM/dd/yyyy</c>, <c>MM/yy</c>.  If custom characters are used, replace the letter blocks with custom characters.", 
                Properties = { 
                    { "Placeholder", Properties["MudBlazor.PatternMask.Placeholder"] },
                    { "Transformation", Properties["MudBlazor.PatternMask.Transformation"] },
                    { "CleanDelimiters", Properties["MudBlazor.PatternMask.CleanDelimiters"] },
                    { "Mask", Properties["MudBlazor.BaseMask.Mask"] },
                    { "Text", Properties["MudBlazor.BaseMask.Text"] },
                    { "CaretPos", Properties["MudBlazor.BaseMask.CaretPos"] },
                    { "Selection", Properties["MudBlazor.BaseMask.Selection"] },
                    { "AllowOnlyDelimiters", Properties["MudBlazor.BaseMask.AllowOnlyDelimiters"] },
                    { "MaskChars", Properties["MudBlazor.BaseMask.MaskChars"] },
                },
                Methods = { 
                    { "UpdateFrom", Methods["MudBlazor.DateMask.UpdateFrom"] },
                    { "Insert", Methods["MudBlazor.PatternMask.Insert"] },
                    { "Delete", Methods["MudBlazor.PatternMask.Delete"] },
                    { "Backspace", Methods["MudBlazor.PatternMask.Backspace"] },
                    { "GetCleanText", Methods["MudBlazor.PatternMask.GetCleanText"] },
                    { "Clear", Methods["MudBlazor.BaseMask.Clear"] },
                    { "SetText", Methods["MudBlazor.BaseMask.SetText"] },
                    { "ModifyPartiallyAlignedMask", Methods["MudBlazor.DateMask.ModifyPartiallyAlignedMask"] },
                    { "ModifyFinalText", Methods["MudBlazor.DateMask.ModifyFinalText"] },
                    { "DeleteSelection", Methods["MudBlazor.PatternMask.DeleteSelection"] },
                    { "FillWithPlaceholder", Methods["MudBlazor.PatternMask.FillWithPlaceholder"] },
                    { "AlignAgainstMask", Methods["MudBlazor.PatternMask.AlignAgainstMask"] },
                    { "IsMatch", Methods["MudBlazor.PatternMask.IsMatch"] },
                    { "InitInternals", Methods["MudBlazor.PatternMask.InitInternals"] },
                    { "UpdateText", Methods["MudBlazor.PatternMask.UpdateText"] },
                    { "Init", Methods["MudBlazor.BaseMask.Init"] },
                    { "IsDelimiter", Methods["MudBlazor.BaseMask.IsDelimiter"] },
                    { "Refresh", Methods["MudBlazor.BaseMask.Refresh"] },
                    { "ConsolidateSelection", Methods["MudBlazor.BaseMask.ConsolidateSelection"] },
                },
            }},
            { "MudBlazor.DateRange", new() {
                Name = "DateRange", 
                NameFriendly = "DateRange", 
                BaseTypeName = "Range`1", 
                Summary = @"Represents a date range used by a <see cref=""T:MudBlazor.MudDatePicker"" />.", 
                Properties = { 
                    { "Start", Properties["MudBlazor.Range`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start"] },
                    { "End", Properties["MudBlazor.Range`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].End"] },
                },
                Methods = { 
                    { "ToIsoDateString", Methods["MudBlazor.DateRange.ToIsoDateString"] },
                    { "TryParse", Methods["MudBlazor.DateRange.TryParse"] },
                },
            }},
            { "MudBlazor.DefaultConverter`1", new() {
                Name = "DefaultConverter`1", 
                NameFriendly = "DefaultConverter<T>", 
                BaseTypeName = "Converter`1", 
                Summary = @"A universal T to string binding converter", 
                Properties = { 
                    { "DefaultTimeSpanFormat", Properties["MudBlazor.DefaultConverter`1.DefaultTimeSpanFormat"] },
                    { "Format", Properties["MudBlazor.Converter`1.Format"] },
                    { "SetFunc", Properties["MudBlazor.Converter`2.SetFunc"] },
                    { "GetFunc", Properties["MudBlazor.Converter`2.GetFunc"] },
                    { "Culture", Properties["MudBlazor.Converter`2.Culture"] },
                    { "OnError", Properties["MudBlazor.Converter`2.OnError"] },
                    { "SetError", Properties["MudBlazor.Converter`2.SetError"] },
                    { "GetError", Properties["MudBlazor.Converter`2.GetError"] },
                    { "SetErrorMessage", Properties["MudBlazor.Converter`2.SetErrorMessage"] },
                    { "GetErrorMessage", Properties["MudBlazor.Converter`2.GetErrorMessage"] },
                },
                Fields = { 
                    { "GlobalGetFunc", Fields["MudBlazor.DefaultConverter`1.GlobalGetFunc"] },
                    { "GlobalSetFunc", Fields["MudBlazor.DefaultConverter`1.GlobalSetFunc"] },
                },
                Methods = { 
                    { "IsNullableEnum", Methods["MudBlazor.DefaultConverter`1.IsNullableEnum"] },
                    { "Set", Methods["MudBlazor.Converter`2.Set"] },
                    { "Get", Methods["MudBlazor.Converter`2.Get"] },
                    { "ConvertFromString", Methods["MudBlazor.DefaultConverter`1.ConvertFromString"] },
                    { "ConvertToString", Methods["MudBlazor.DefaultConverter`1.ConvertToString"] },
                    { "UpdateSetError", Methods["MudBlazor.Converter`2.UpdateSetError"] },
                    { "UpdateGetError", Methods["MudBlazor.Converter`2.UpdateGetError"] },
                },
            }},
            { "MudBlazor.DefaultFocus", new() {
                Name = "DefaultFocus", 
                NameFriendly = "DefaultFocus", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the element which will receive focus.", 
                Fields = { 
                    { "None", Fields["MudBlazor.DefaultFocus.None"] },
                    { "Element", Fields["MudBlazor.DefaultFocus.Element"] },
                    { "FirstChild", Fields["MudBlazor.DefaultFocus.FirstChild"] },
                    { "LastChild", Fields["MudBlazor.DefaultFocus.LastChild"] },
                },
            }},
            { "MudBlazor.DefaultLocalizationInterceptor", new() {
                Name = "DefaultLocalizationInterceptor", 
                NameFriendly = "DefaultLocalizationInterceptor", 
                BaseTypeName = "AbstractLocalizationInterceptor", 
                Summary = @"The <see cref=""T:MudBlazor.DefaultLocalizationInterceptor"" /> manages translations, incorporating English as the default language,facilitating the addition of custom translations without imposing limitations on their implementation.", 
                Properties = { 
                    { "IgnoreDefaultEnglish", Properties["MudBlazor.DefaultLocalizationInterceptor.IgnoreDefaultEnglish"] },
                },
                Methods = { 
                    { "Handle", Methods["MudBlazor.DefaultLocalizationInterceptor.Handle"] },
                    { "TranslationWithFallback", Methods["MudBlazor.DefaultLocalizationInterceptor.TranslationWithFallback"] },
                },
            }},
            { "MudBlazor.Defaults", new() {
                Name = "Defaults", 
                NameFriendly = "Defaults", 
                BaseTypeName = "Object", 
                Summary = @"Contains common snackbar CSS classes.", 
            }},
            { "MudBlazor.Defaults+Classes", new() {
                Name = "Classes", 
                NameFriendly = "Classes", 
                BaseTypeName = "Object", 
                Summary = @"Contains common snackbar CSS classes.", 
            }},
            { "MudBlazor.Defaults+Classes+Position", new() {
                Name = "Position", 
                NameFriendly = "Position", 
                BaseTypeName = "Object", 
                Summary = @"The CSS classes used to position snackbars.", 
                Fields = { 
                    { "TopLeft", Fields["MudBlazor.Defaults+Classes+Position.TopLeft"] },
                    { "TopCenter", Fields["MudBlazor.Defaults+Classes+Position.TopCenter"] },
                    { "TopRight", Fields["MudBlazor.Defaults+Classes+Position.TopRight"] },
                    { "TopStart", Fields["MudBlazor.Defaults+Classes+Position.TopStart"] },
                    { "TopEnd", Fields["MudBlazor.Defaults+Classes+Position.TopEnd"] },
                    { "BottomLeft", Fields["MudBlazor.Defaults+Classes+Position.BottomLeft"] },
                    { "BottomCenter", Fields["MudBlazor.Defaults+Classes+Position.BottomCenter"] },
                    { "BottomRight", Fields["MudBlazor.Defaults+Classes+Position.BottomRight"] },
                    { "BottomStart", Fields["MudBlazor.Defaults+Classes+Position.BottomStart"] },
                    { "BottomEnd", Fields["MudBlazor.Defaults+Classes+Position.BottomEnd"] },
                },
            }},
            { "MudBlazor.DefaultTypography", new() {
                Name = "DefaultTypography", 
                NameFriendly = "DefaultTypography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the default typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.DialogOptions", new() {
                Name = "DialogOptions", 
                NameFriendly = "DialogOptions", 
                BaseTypeName = "Object", 
                Summary = @"The customization options for a <see cref=""T:MudBlazor.MudDialog"" />.", 
                Properties = { 
                    { "Position", Properties["MudBlazor.DialogOptions.Position"] },
                    { "MaxWidth", Properties["MudBlazor.DialogOptions.MaxWidth"] },
                    { "BackdropClick", Properties["MudBlazor.DialogOptions.BackdropClick"] },
                    { "CloseOnEscapeKey", Properties["MudBlazor.DialogOptions.CloseOnEscapeKey"] },
                    { "NoHeader", Properties["MudBlazor.DialogOptions.NoHeader"] },
                    { "CloseButton", Properties["MudBlazor.DialogOptions.CloseButton"] },
                    { "FullScreen", Properties["MudBlazor.DialogOptions.FullScreen"] },
                    { "FullWidth", Properties["MudBlazor.DialogOptions.FullWidth"] },
                    { "BackgroundClass", Properties["MudBlazor.DialogOptions.BackgroundClass"] },
                    { "EqualityContract", Properties["MudBlazor.DialogOptions.EqualityContract"] },
                },
                Methods = { 
                    { "<Clone>$", Methods["MudBlazor.DialogOptions.<Clone>$"] },
                    { "PrintMembers", Methods["MudBlazor.DialogOptions.PrintMembers"] },
                },
            }},
            { "MudBlazor.DialogParameters", new() {
                Name = "DialogParameters", 
                NameFriendly = "DialogParameters", 
                BaseTypeName = "Object", 
                Summary = @"The parameters passed into a <see cref=""T:MudBlazor.MudDialog"" /> instance.", 
                Properties = { 
                    { "Count", Properties["MudBlazor.DialogParameters.Count"] },
                    { "Item", Properties["MudBlazor.DialogParameters.Item"] },
                },
                Methods = { 
                    { "Add", Methods["MudBlazor.DialogParameters.Add"] },
                    { "Get", Methods["MudBlazor.DialogParameters.Get"] },
                    { "TryGet", Methods["MudBlazor.DialogParameters.TryGet"] },
                    { "GetEnumerator", Methods["MudBlazor.DialogParameters.GetEnumerator"] },
                },
            }},
            { "MudBlazor.DialogParameters`1", new() {
                Name = "DialogParameters`1", 
                NameFriendly = "DialogParameters<T>", 
                BaseTypeName = "DialogParameters", 
                Summary = @"The parameters passed into a <see cref=""T:MudBlazor.MudDialog"" /> instance.", 
                Properties = { 
                    { "Count", Properties["MudBlazor.DialogParameters.Count"] },
                    { "Item", Properties["MudBlazor.DialogParameters.Item"] },
                },
                Methods = { 
                    { "Add", Methods["MudBlazor.DialogParameters`1.Add"] },
                    { "Get", Methods["MudBlazor.DialogParameters`1.Get"] },
                    { "TryGet", Methods["MudBlazor.DialogParameters`1.TryGet"] },
                    { "GetEnumerator", Methods["MudBlazor.DialogParameters.GetEnumerator"] },
                },
            }},
            { "MudBlazor.DialogPosition", new() {
                Name = "DialogPosition", 
                NameFriendly = "DialogPosition", 
                BaseTypeName = "Enum", 
                Summary = @"The location of a <see cref=""T:MudBlazor.MudDialog"" /> when it is opened.", 
                Fields = { 
                    { "Center", Fields["MudBlazor.DialogPosition.Center"] },
                    { "CenterLeft", Fields["MudBlazor.DialogPosition.CenterLeft"] },
                    { "CenterRight", Fields["MudBlazor.DialogPosition.CenterRight"] },
                    { "TopCenter", Fields["MudBlazor.DialogPosition.TopCenter"] },
                    { "TopLeft", Fields["MudBlazor.DialogPosition.TopLeft"] },
                    { "TopRight", Fields["MudBlazor.DialogPosition.TopRight"] },
                    { "BottomCenter", Fields["MudBlazor.DialogPosition.BottomCenter"] },
                    { "BottomLeft", Fields["MudBlazor.DialogPosition.BottomLeft"] },
                    { "BottomRight", Fields["MudBlazor.DialogPosition.BottomRight"] },
                    { "Custom", Fields["MudBlazor.DialogPosition.Custom"] },
                },
            }},
            { "MudBlazor.DialogReference", new() {
                Name = "DialogReference", 
                NameFriendly = "DialogReference", 
                BaseTypeName = "Object", 
                Summary = @"An instance of a <see cref=""T:MudBlazor.MudDialog"" />.", 
                Properties = { 
                    { "Id", Properties["MudBlazor.DialogReference.Id"] },
                    { "Dialog", Properties["MudBlazor.DialogReference.Dialog"] },
                    { "RenderFragment", Properties["MudBlazor.DialogReference.RenderFragment"] },
                    { "Result", Properties["MudBlazor.DialogReference.Result"] },
                },
                Methods = { 
                    { "Close", Methods["MudBlazor.DialogReference.Close"] },
                    { "Dismiss", Methods["MudBlazor.DialogReference.Dismiss"] },
                    { "InjectDialog", Methods["MudBlazor.DialogReference.InjectDialog"] },
                    { "InjectRenderFragment", Methods["MudBlazor.DialogReference.InjectRenderFragment"] },
                    { "GetReturnValueAsync", Methods["MudBlazor.DialogReference.GetReturnValueAsync"] },
                },
            }},
            { "MudBlazor.DialogResult", new() {
                Name = "DialogResult", 
                NameFriendly = "DialogResult", 
                BaseTypeName = "Object", 
                Summary = @"The result of a user's interaction with a <see cref=""T:MudBlazor.MudDialog"" />.", 
                Properties = { 
                    { "Data", Properties["MudBlazor.DialogResult.Data"] },
                    { "DataType", Properties["MudBlazor.DialogResult.DataType"] },
                    { "Canceled", Properties["MudBlazor.DialogResult.Canceled"] },
                },
                Methods = { 
                    { "Ok", Methods["MudBlazor.DialogResult.Ok"] },
                    { "Cancel", Methods["MudBlazor.DialogResult.Cancel"] },
                },
            }},
            { "MudBlazor.DialogService", new() {
                Name = "DialogService", 
                NameFriendly = "DialogService", 
                BaseTypeName = "Object", 
                Summary = @"A service for managing <see cref=""T:MudBlazor.MudDialog"" /> components.", 
                Remarks = @"This service requires a <see cref=""T:MudBlazor.MudDialogProvider"" /> in your layout page.", 
                Methods = { 
                    { "Show", Methods["MudBlazor.DialogService.Show"] },
                    { "ShowAsync", Methods["MudBlazor.DialogService.ShowAsync"] },
                    { "ShowMessageBox", Methods["MudBlazor.DialogService.ShowMessageBox"] },
                    { "Close", Methods["MudBlazor.DialogService.Close"] },
                    { "CreateReference", Methods["MudBlazor.DialogService.CreateReference"] },
                },
                Events = { 
                    { "DialogInstanceAddedAsync", Events["MudBlazor.DialogService.DialogInstanceAddedAsync"] },
                    { "OnDialogCloseRequested", Events["MudBlazor.DialogService.OnDialogCloseRequested"] },
                },
            }},
            { "MudBlazor.Direction", new() {
                Name = "Direction", 
                NameFriendly = "Direction", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Bottom", Fields["MudBlazor.Direction.Bottom"] },
                    { "Top", Fields["MudBlazor.Direction.Top"] },
                    { "Left", Fields["MudBlazor.Direction.Left"] },
                    { "Right", Fields["MudBlazor.Direction.Right"] },
                    { "Start", Fields["MudBlazor.Direction.Start"] },
                    { "End", Fields["MudBlazor.Direction.End"] },
                },
            }},
            { "MudBlazor.DividerType", new() {
                Name = "DividerType", 
                NameFriendly = "DividerType", 
                BaseTypeName = "Enum", 
                Summary = @"The type of <see cref=""T:MudBlazor.MudDivider"" /> to display.", 
                Fields = { 
                    { "FullWidth", Fields["MudBlazor.DividerType.FullWidth"] },
                    { "Inset", Fields["MudBlazor.DividerType.Inset"] },
                    { "Middle", Fields["MudBlazor.DividerType.Middle"] },
                },
            }},
            { "MudBlazor.DoubleEpsilonEqualityComparer", new() {
                Name = "DoubleEpsilonEqualityComparer", 
                NameFriendly = "DoubleEpsilonEqualityComparer", 
                BaseTypeName = "Object", 
                Summary = @"Provides a comparer for <see cref=""T:System.Double"" /> values with an epsilon tolerance.", 
                Fields = { 
                    { "Default", Fields["MudBlazor.DoubleEpsilonEqualityComparer.Default"] },
                },
            }},
            { "MudBlazor.DrawerClipMode", new() {
                Name = "DrawerClipMode", 
                NameFriendly = "DrawerClipMode", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the clipping behavior of a <see cref=""T:MudBlazor.MudDrawer"" /> when inside of a <see cref=""T:MudBlazor.MudLayout"" />.", 
                Fields = { 
                    { "Never", Fields["MudBlazor.DrawerClipMode.Never"] },
                    { "Docked", Fields["MudBlazor.DrawerClipMode.Docked"] },
                    { "Always", Fields["MudBlazor.DrawerClipMode.Always"] },
                },
            }},
            { "MudBlazor.DrawerVariant", new() {
                Name = "DrawerVariant", 
                NameFriendly = "DrawerVariant", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the behavior of a <see cref=""T:MudBlazor.MudDrawer"" />.", 
                Fields = { 
                    { "Temporary", Fields["MudBlazor.DrawerVariant.Temporary"] },
                    { "Responsive", Fields["MudBlazor.DrawerVariant.Responsive"] },
                    { "Persistent", Fields["MudBlazor.DrawerVariant.Persistent"] },
                    { "Mini", Fields["MudBlazor.DrawerVariant.Mini"] },
                },
            }},
            { "MudBlazor.DropdownSettings", new() {
                Name = "DropdownSettings", 
                NameFriendly = "DropdownSettings", 
                BaseTypeName = "ValueType", 
                Summary = @"The behavior of a dropdown popover.", 
                Properties = { 
                    { "Fixed", Properties["MudBlazor.DropdownSettings.Fixed"] },
                    { "OverflowBehavior", Properties["MudBlazor.DropdownSettings.OverflowBehavior"] },
                },
            }},
            { "MudBlazor.DropdownWidth", new() {
                Name = "DropdownWidth", 
                NameFriendly = "DropdownWidth", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the behavior of a <see cref=""T:MudBlazor.MudPopover"" /> drop down relative width.", 
                Fields = { 
                    { "Relative", Fields["MudBlazor.DropdownWidth.Relative"] },
                    { "Adaptive", Fields["MudBlazor.DropdownWidth.Adaptive"] },
                    { "Ignore", Fields["MudBlazor.DropdownWidth.Ignore"] },
                },
            }},
            { "MudBlazor.Edge", new() {
                Name = "Edge", 
                NameFriendly = "Edge", 
                BaseTypeName = "Enum", 
                Summary = @"Specifies where a negative margin is applied within a layout component.This is typically used in conjunction with elements that have leading or trailing adornments.", 
                Remarks = @"Negative margins are often applied to ensure adornments or icons align more closely with the edge of the component.Depending on the design requirements, this margin can be applied at the start or end of an element,or not applied at all (default behavior).", 
                Fields = { 
                    { "False", Fields["MudBlazor.Edge.False"] },
                    { "Start", Fields["MudBlazor.Edge.Start"] },
                    { "End", Fields["MudBlazor.Edge.End"] },
                },
            }},
            { "MudBlazor.EditButtonContext", new() {
                Name = "EditButtonContext", 
                NameFriendly = "EditButtonContext", 
                BaseTypeName = "Object", 
                Summary = @"Information about the Edit button of a <see cref=""T:MudBlazor.MudTable`1"" /> row.", 
                Properties = { 
                    { "ButtonAction", Properties["MudBlazor.EditButtonContext.ButtonAction"] },
                    { "ButtonDisabled", Properties["MudBlazor.EditButtonContext.ButtonDisabled"] },
                    { "Item", Properties["MudBlazor.EditButtonContext.Item"] },
                },
            }},
            { "MudBlazor.EventHandlers", new() {
                Name = "EventHandlers", 
                NameFriendly = "EventHandlers", 
                BaseTypeName = "Object", 
            }},
            { "MudBlazor.EventUtil", new() {
                Name = "EventUtil", 
                NameFriendly = "EventUtil", 
                BaseTypeName = "Object", 
                Summary = @"Utility class for opting out of rerendering in Blazor when an EventCallback is invoked.By default, components inherit from ComponentBase, which automatically invokes StateHasChangedafter the component's event handlers are invoked. In some cases, it might be unnecessary orundesirable to trigger a rerender after an event handler is invoked. For example, an eventhandler might not modify the component state.https://learn.microsoft.com/aspnet/core/blazor/performance?view=aspnetcore-6.0#avoid-rerendering-after-handling-events-without-state-changes", 
                Methods = { 
                    { "AsNonRenderingEventHandler", Methods["MudBlazor.EventUtil.AsNonRenderingEventHandler"] },
                },
            }},
            { "MudBlazor.FieldType", new() {
                Name = "FieldType", 
                NameFriendly = "FieldType", 
                BaseTypeName = "Object", 
                Summary = @"Represents a description of a <see cref=""T:MudBlazor.MudGrid"" /> field.", 
                Properties = { 
                    { "InnerType", Properties["MudBlazor.FieldType.InnerType"] },
                    { "IsString", Properties["MudBlazor.FieldType.IsString"] },
                    { "IsNumber", Properties["MudBlazor.FieldType.IsNumber"] },
                    { "IsEnum", Properties["MudBlazor.FieldType.IsEnum"] },
                    { "IsDateTime", Properties["MudBlazor.FieldType.IsDateTime"] },
                    { "IsBoolean", Properties["MudBlazor.FieldType.IsBoolean"] },
                    { "IsGuid", Properties["MudBlazor.FieldType.IsGuid"] },
                },
                Methods = { 
                    { "Identify", Methods["MudBlazor.FieldType.Identify"] },
                },
            }},
            { "MudBlazor.FilterContext`1", new() {
                Name = "FilterContext`1", 
                NameFriendly = "FilterContext<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the current state of a filter in a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "FilterDefinition", Properties["MudBlazor.FilterContext`1.FilterDefinition"] },
                    { "Items", Properties["MudBlazor.FilterContext`1.Items"] },
                    { "FilterDefinitions", Properties["MudBlazor.FilterContext`1.FilterDefinitions"] },
                    { "Actions", Properties["MudBlazor.FilterContext`1.Actions"] },
                },
            }},
            { "MudBlazor.FilterContext`1+FilterActions", new() {
                Name = "FilterActions", 
                NameFriendly = "FilterActio<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the apply and clear behaviors for a filter of a<see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "ApplyFilterAsync", Properties["MudBlazor.FilterContext`1+FilterActions.ApplyFilterAsync"] },
                    { "ApplyFiltersAsync", Properties["MudBlazor.FilterContext`1+FilterActions.ApplyFiltersAsync"] },
                    { "ClearFilterAsync", Properties["MudBlazor.FilterContext`1+FilterActions.ClearFilterAsync"] },
                    { "ClearFiltersAsync", Properties["MudBlazor.FilterContext`1+FilterActions.ClearFiltersAsync"] },
                },
            }},
            { "MudBlazor.FilterDefinition`1", new() {
                Name = "FilterDefinition`1", 
                NameFriendly = "FilterDefinition<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the logic of a filter applied to <see cref=""T:MudBlazor.MudGrid"" /> data.", 
                Properties = { 
                    { "Id", Properties["MudBlazor.FilterDefinition`1.Id"] },
                    { "Column", Properties["MudBlazor.FilterDefinition`1.Column"] },
                    { "Title", Properties["MudBlazor.FilterDefinition`1.Title"] },
                    { "Operator", Properties["MudBlazor.FilterDefinition`1.Operator"] },
                    { "Value", Properties["MudBlazor.FilterDefinition`1.Value"] },
                    { "FilterFunction", Properties["MudBlazor.FilterDefinition`1.FilterFunction"] },
                    { "FieldType", Properties["MudBlazor.FilterDefinition`1.FieldType"] },
                },
                Methods = { 
                    { "GenerateFilterFunction", Methods["MudBlazor.FilterDefinition`1.GenerateFilterFunction"] },
                    { "Clone", Methods["MudBlazor.FilterDefinition`1.Clone"] },
                },
            }},
            { "MudBlazor.FilterExpressionGenerator", new() {
                Name = "FilterExpressionGenerator", 
                NameFriendly = "FilterExpressionGenerator", 
                BaseTypeName = "Object", 
                Summary = @"Represents a service which generates C# functions from text-based filter operations.", 
                Methods = { 
                    { "GenerateExpression", Methods["MudBlazor.FilterExpressionGenerator.GenerateExpression"] },
                },
            }},
            { "MudBlazor.FilterHeaderCell`1", new() {
                Name = "FilterHeaderCell`1", 
                NameFriendly = "FilterHeaderCell<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a column filter shown when <see cref=""P:MudBlazor.MudDataGrid`1.FilterMode"" /> is <see cref=""F:MudBlazor.DataGridFilterMode.ColumnFilterRow"" />.", 
                Properties = { 
                    { "DataGrid", Properties["MudBlazor.FilterHeaderCell`1.DataGrid"] },
                    { "Column", Properties["MudBlazor.FilterHeaderCell`1.Column"] },
                    { "ChildContent", Properties["MudBlazor.FilterHeaderCell`1.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.FilterOperator", new() {
                Name = "FilterOperator", 
                NameFriendly = "FilterOperator", 
                BaseTypeName = "Object", 
                Summary = @"Represents comparison operations which execute a filter in a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
            }},
            { "MudBlazor.FilterOperator+Boolean", new() {
                Name = "Boolean", 
                NameFriendly = "Boolean", 
                BaseTypeName = "Object", 
                Summary = @"Represents filters which are available for boolean values.", 
                Fields = { 
                    { "Is", Fields["MudBlazor.FilterOperator+Boolean.Is"] },
                },
            }},
            { "MudBlazor.FilterOperator+DateTime", new() {
                Name = "DateTime", 
                NameFriendly = "DateTime", 
                BaseTypeName = "Object", 
                Summary = @"Represents filters which are available for date and time values.", 
                Fields = { 
                    { "Is", Fields["MudBlazor.FilterOperator+DateTime.Is"] },
                    { "IsNot", Fields["MudBlazor.FilterOperator+DateTime.IsNot"] },
                    { "After", Fields["MudBlazor.FilterOperator+DateTime.After"] },
                    { "OnOrAfter", Fields["MudBlazor.FilterOperator+DateTime.OnOrAfter"] },
                    { "Before", Fields["MudBlazor.FilterOperator+DateTime.Before"] },
                    { "OnOrBefore", Fields["MudBlazor.FilterOperator+DateTime.OnOrBefore"] },
                    { "Empty", Fields["MudBlazor.FilterOperator+DateTime.Empty"] },
                    { "NotEmpty", Fields["MudBlazor.FilterOperator+DateTime.NotEmpty"] },
                },
            }},
            { "MudBlazor.FilterOperator+Enum", new() {
                Name = "Enum", 
                NameFriendly = "Enum", 
                BaseTypeName = "Object", 
                Summary = @"Represents filters which are available for enumerations.", 
                Fields = { 
                    { "Is", Fields["MudBlazor.FilterOperator+Enum.Is"] },
                    { "IsNot", Fields["MudBlazor.FilterOperator+Enum.IsNot"] },
                },
            }},
            { "MudBlazor.FilterOperator+Guid", new() {
                Name = "Guid", 
                NameFriendly = "Guid", 
                BaseTypeName = "Object", 
                Summary = @"Represents filters which are available for Guid values.", 
                Fields = { 
                    { "Equal", Fields["MudBlazor.FilterOperator+Guid.Equal"] },
                    { "NotEqual", Fields["MudBlazor.FilterOperator+Guid.NotEqual"] },
                },
            }},
            { "MudBlazor.FilterOperator+Number", new() {
                Name = "Number", 
                NameFriendly = "Number", 
                BaseTypeName = "Object", 
                Summary = @"Represents filters which are available for numeric values.", 
                Remarks = @"Numeric filters support all numeric types, including <c>int</c>, <c>double</c>, <c>decimal</c>, <c>long</c>, <c>short</c>, <c>sbyte</c>, <c>byte</c>, <c>ulong</c>, <c>ushort</c>, <c>uint</c>, <c>float</c> and <c>BigInteger</c>.", 
                Fields = { 
                    { "Equal", Fields["MudBlazor.FilterOperator+Number.Equal"] },
                    { "NotEqual", Fields["MudBlazor.FilterOperator+Number.NotEqual"] },
                    { "GreaterThan", Fields["MudBlazor.FilterOperator+Number.GreaterThan"] },
                    { "GreaterThanOrEqual", Fields["MudBlazor.FilterOperator+Number.GreaterThanOrEqual"] },
                    { "LessThan", Fields["MudBlazor.FilterOperator+Number.LessThan"] },
                    { "LessThanOrEqual", Fields["MudBlazor.FilterOperator+Number.LessThanOrEqual"] },
                    { "Empty", Fields["MudBlazor.FilterOperator+Number.Empty"] },
                    { "NotEmpty", Fields["MudBlazor.FilterOperator+Number.NotEmpty"] },
                },
            }},
            { "MudBlazor.FilterOperator+String", new() {
                Name = "String", 
                NameFriendly = "String", 
                BaseTypeName = "Object", 
                Summary = @"Represents filters which are available for <c>string</c> values.", 
                Remarks = @"You can control case sensitivity of filters by setting the <see cref=""P:MudBlazor.MudDataGrid`1.FilterCaseSensitivity"" /> property.", 
                Fields = { 
                    { "Contains", Fields["MudBlazor.FilterOperator+String.Contains"] },
                    { "NotContains", Fields["MudBlazor.FilterOperator+String.NotContains"] },
                    { "Equal", Fields["MudBlazor.FilterOperator+String.Equal"] },
                    { "NotEqual", Fields["MudBlazor.FilterOperator+String.NotEqual"] },
                    { "StartsWith", Fields["MudBlazor.FilterOperator+String.StartsWith"] },
                    { "EndsWith", Fields["MudBlazor.FilterOperator+String.EndsWith"] },
                    { "Empty", Fields["MudBlazor.FilterOperator+String.Empty"] },
                    { "NotEmpty", Fields["MudBlazor.FilterOperator+String.NotEmpty"] },
                },
            }},
            { "MudBlazor.FilterOptions", new() {
                Name = "FilterOptions", 
                NameFriendly = "FilterOptions", 
                BaseTypeName = "Object", 
                Summary = @"Represents additional options applied to the filter of a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "FilterCaseSensitivity", Properties["MudBlazor.FilterOptions.FilterCaseSensitivity"] },
                    { "Default", Properties["MudBlazor.FilterOptions.Default"] },
                },
            }},
            { "MudBlazor.FooterCell`1", new() {
                Name = "FooterCell`1", 
                NameFriendly = "FooterCell<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a cell displayed at the bottom of a column.", 
                Properties = { 
                    { "DataGrid", Properties["MudBlazor.FooterCell`1.DataGrid"] },
                    { "Column", Properties["MudBlazor.FooterCell`1.Column"] },
                    { "ChildContent", Properties["MudBlazor.FooterCell`1.ChildContent"] },
                    { "CurrentItems", Properties["MudBlazor.FooterCell`1.CurrentItems"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.FooterContext`1", new() {
                Name = "FooterContext`1", 
                NameFriendly = "FooterContext<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the current state of a footer in a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "Items", Properties["MudBlazor.FooterContext`1.Items"] },
                    { "Actions", Properties["MudBlazor.FooterContext`1.Actions"] },
                    { "IsAllSelected", Properties["MudBlazor.FooterContext`1.IsAllSelected"] },
                },
            }},
            { "MudBlazor.FooterContext`1+FooterActions", new() {
                Name = "FooterActions", 
                NameFriendly = "FooterActio<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the actions which can be performed on the footer of <see cref=""T:MudBlazor.MudDataGrid`1"" /> columns.", 
                Properties = { 
                    { "SetSelectAllAsync", Properties["MudBlazor.FooterContext`1+FooterActions.SetSelectAllAsync"] },
                },
            }},
            { "MudBlazor.GridData`1", new() {
                Name = "GridData`1", 
                NameFriendly = "GridData<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents data to display in a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "Items", Properties["MudBlazor.GridData`1.Items"] },
                    { "TotalItems", Properties["MudBlazor.GridData`1.TotalItems"] },
                },
            }},
            { "MudBlazor.GridState`1", new() {
                Name = "GridState`1", 
                NameFriendly = "GridState<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the current paging, sorting, and filtering for a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "Page", Properties["MudBlazor.GridState`1.Page"] },
                    { "PageSize", Properties["MudBlazor.GridState`1.PageSize"] },
                    { "SortDefinitions", Properties["MudBlazor.GridState`1.SortDefinitions"] },
                    { "FilterDefinitions", Properties["MudBlazor.GridState`1.FilterDefinitions"] },
                },
            }},
            { "MudBlazor.GridStateVirtualize`1", new() {
                Name = "GridStateVirtualize`1", 
                NameFriendly = "GridStateVirtualize<T>", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "StartIndex", Properties["MudBlazor.GridStateVirtualize`1.StartIndex"] },
                    { "Count", Properties["MudBlazor.GridStateVirtualize`1.Count"] },
                    { "SortDefinitions", Properties["MudBlazor.GridStateVirtualize`1.SortDefinitions"] },
                    { "FilterDefinitions", Properties["MudBlazor.GridStateVirtualize`1.FilterDefinitions"] },
                },
            }},
            { "MudBlazor.GroupDefinition`1", new() {
                Name = "GroupDefinition`1", 
                NameFriendly = "GroupDefinition<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the grouping information for columns in a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "Grouping", Properties["MudBlazor.GroupDefinition`1.Grouping"] },
                    { "Expanded", Properties["MudBlazor.GroupDefinition`1.Expanded"] },
                },
            }},
            { "MudBlazor.H1Typography", new() {
                Name = "H1Typography", 
                NameFriendly = "H1Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the H1 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.H2Typography", new() {
                Name = "H2Typography", 
                NameFriendly = "H2Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the H2 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.H3Typography", new() {
                Name = "H3Typography", 
                NameFriendly = "H3Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the H3 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.H4Typography", new() {
                Name = "H4Typography", 
                NameFriendly = "H4Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the H4 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.H5Typography", new() {
                Name = "H5Typography", 
                NameFriendly = "H5Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the H5 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.H6Typography", new() {
                Name = "H6Typography", 
                NameFriendly = "H6Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the H6 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.HeaderCell`1", new() {
                Name = "HeaderCell`1", 
                NameFriendly = "HeaderCell<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a cell displayed at the top of a <see cref=""T:MudBlazor.MudDataGrid`1"" /> column.", 
                Properties = { 
                    { "DataGrid", Properties["MudBlazor.HeaderCell`1.DataGrid"] },
                    { "IsOnlyHeader", Properties["MudBlazor.HeaderCell`1.IsOnlyHeader"] },
                    { "Column", Properties["MudBlazor.HeaderCell`1.Column"] },
                    { "ChildContent", Properties["MudBlazor.HeaderCell`1.ChildContent"] },
                    { "SortDirection", Properties["MudBlazor.HeaderCell`1.SortDirection"] },
                    { "Width", Properties["MudBlazor.HeaderCell`1.Width"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.HeaderContext`1", new() {
                Name = "HeaderContext`1", 
                NameFriendly = "HeaderContext<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the current state of a header in a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "Items", Properties["MudBlazor.HeaderContext`1.Items"] },
                    { "Actions", Properties["MudBlazor.HeaderContext`1.Actions"] },
                    { "IsAllSelected", Properties["MudBlazor.HeaderContext`1.IsAllSelected"] },
                },
            }},
            { "MudBlazor.HeaderContext`1+HeaderActions", new() {
                Name = "HeaderActions", 
                NameFriendly = "HeaderActio<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents the behaviors allowed for a <see cref=""T:MudBlazor.MudDataGrid`1"" /> header.", 
                Properties = { 
                    { "SetSelectAllAsync", Properties["MudBlazor.HeaderContext`1+HeaderActions.SetSelectAllAsync"] },
                },
            }},
            { "MudBlazor.HierarchyColumn`1", new() {
                Name = "HierarchyColumn`1", 
                NameFriendly = "HierarchyColumn<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a column in a <see cref=""T:MudBlazor.MudDataGrid`1"" /> which can be expanded to show additional information.", 
                Properties = { 
                    { "ClosedIcon", Properties["MudBlazor.HierarchyColumn`1.ClosedIcon"] },
                    { "OpenIcon", Properties["MudBlazor.HierarchyColumn`1.OpenIcon"] },
                    { "IconSize", Properties["MudBlazor.HierarchyColumn`1.IconSize"] },
                    { "ButtonDisabledFunc", Properties["MudBlazor.HierarchyColumn`1.ButtonDisabledFunc"] },
                    { "DragAndDropEnabled", Properties["MudBlazor.HierarchyColumn`1.DragAndDropEnabled"] },
                    { "Hideable", Properties["MudBlazor.HierarchyColumn`1.Hideable"] },
                    { "Hidden", Properties["MudBlazor.HierarchyColumn`1.Hidden"] },
                    { "InitiallyExpandedFunc", Properties["MudBlazor.HierarchyColumn`1.InitiallyExpandedFunc"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "HiddenChanged", Events["MudBlazor.HierarchyColumn`1.HiddenChanged"] },
                },
            }},
            { "MudBlazor.HorizontalAlignment", new() {
                Name = "HorizontalAlignment", 
                NameFriendly = "HorizontalAlignment", 
                BaseTypeName = "Enum", 
                Summary = @"The position of a component relative to its container.", 
                Fields = { 
                    { "Center", Fields["MudBlazor.HorizontalAlignment.Center"] },
                    { "Left", Fields["MudBlazor.HorizontalAlignment.Left"] },
                    { "Right", Fields["MudBlazor.HorizontalAlignment.Right"] },
                    { "Start", Fields["MudBlazor.HorizontalAlignment.Start"] },
                    { "End", Fields["MudBlazor.HorizontalAlignment.End"] },
                },
            }},
            { "MudBlazor.InputMode", new() {
                Name = "InputMode", 
                NameFriendly = "InputMode", 
                BaseTypeName = "Enum", 
                Summary = @"The inputmode global attribute is an enumerated attribute that hints at the type of data that might be entered by the user while editing the element or its contents.Not supported by safari. Use Pattern to achieve special mobile keyboards in safari.https://developer.mozilla.org/docs/Web/HTML/Global_attributes/inputmode", 
                Fields = { 
                    { "none", Fields["MudBlazor.InputMode.none"] },
                    { "text", Fields["MudBlazor.InputMode.text"] },
                    { "decimal", Fields["MudBlazor.InputMode.decimal"] },
                    { "numeric", Fields["MudBlazor.InputMode.numeric"] },
                    { "tel", Fields["MudBlazor.InputMode.tel"] },
                    { "search", Fields["MudBlazor.InputMode.search"] },
                    { "email", Fields["MudBlazor.InputMode.email"] },
                    { "url", Fields["MudBlazor.InputMode.url"] },
                },
            }},
            { "MudBlazor.InputType", new() {
                Name = "InputType", 
                NameFriendly = "InputType", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Text", Fields["MudBlazor.InputType.Text"] },
                    { "Password", Fields["MudBlazor.InputType.Password"] },
                    { "Email", Fields["MudBlazor.InputType.Email"] },
                    { "Hidden", Fields["MudBlazor.InputType.Hidden"] },
                    { "Number", Fields["MudBlazor.InputType.Number"] },
                    { "Search", Fields["MudBlazor.InputType.Search"] },
                    { "Telephone", Fields["MudBlazor.InputType.Telephone"] },
                    { "Url", Fields["MudBlazor.InputType.Url"] },
                    { "Color", Fields["MudBlazor.InputType.Color"] },
                    { "Date", Fields["MudBlazor.InputType.Date"] },
                    { "DateTimeLocal", Fields["MudBlazor.InputType.DateTimeLocal"] },
                    { "Month", Fields["MudBlazor.InputType.Month"] },
                    { "Time", Fields["MudBlazor.InputType.Time"] },
                    { "Week", Fields["MudBlazor.InputType.Week"] },
                },
            }},
            { "MudBlazor.Internal.MudInputAdornment", new() {
                Name = "MudInputAdornment", 
                NameFriendly = "MudInputAdornment", 
                BaseTypeName = "ComponentBase", 
                Summary = @"An icon displayed within an input component.", 
                Properties = { 
                    { "Class", Properties["MudBlazor.Internal.MudInputAdornment.Class"] },
                    { "Text", Properties["MudBlazor.Internal.MudInputAdornment.Text"] },
                    { "Icon", Properties["MudBlazor.Internal.MudInputAdornment.Icon"] },
                    { "Placement", Properties["MudBlazor.Internal.MudInputAdornment.Placement"] },
                    { "Size", Properties["MudBlazor.Internal.MudInputAdornment.Size"] },
                    { "Color", Properties["MudBlazor.Internal.MudInputAdornment.Color"] },
                    { "AriaLabel", Properties["MudBlazor.Internal.MudInputAdornment.AriaLabel"] },
                    { "Classname", Properties["MudBlazor.Internal.MudInputAdornment.Classname"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "AdornmentClick", Events["MudBlazor.Internal.MudInputAdornment.AdornmentClick"] },
                },
            }},
            { "MudBlazor.Interop.BoundingClientRect", new() {
                Name = "BoundingClientRect", 
                NameFriendly = "BoundingClientRect", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Top", Properties["MudBlazor.Interop.BoundingClientRect.Top"] },
                    { "Left", Properties["MudBlazor.Interop.BoundingClientRect.Left"] },
                    { "Width", Properties["MudBlazor.Interop.BoundingClientRect.Width"] },
                    { "Height", Properties["MudBlazor.Interop.BoundingClientRect.Height"] },
                    { "WindowHeight", Properties["MudBlazor.Interop.BoundingClientRect.WindowHeight"] },
                    { "WindowWidth", Properties["MudBlazor.Interop.BoundingClientRect.WindowWidth"] },
                    { "ScrollX", Properties["MudBlazor.Interop.BoundingClientRect.ScrollX"] },
                    { "ScrollY", Properties["MudBlazor.Interop.BoundingClientRect.ScrollY"] },
                    { "X", Properties["MudBlazor.Interop.BoundingClientRect.X"] },
                    { "Y", Properties["MudBlazor.Interop.BoundingClientRect.Y"] },
                    { "Bottom", Properties["MudBlazor.Interop.BoundingClientRect.Bottom"] },
                    { "Right", Properties["MudBlazor.Interop.BoundingClientRect.Right"] },
                    { "AbsoluteLeft", Properties["MudBlazor.Interop.BoundingClientRect.AbsoluteLeft"] },
                    { "AbsoluteTop", Properties["MudBlazor.Interop.BoundingClientRect.AbsoluteTop"] },
                    { "AbsoluteRight", Properties["MudBlazor.Interop.BoundingClientRect.AbsoluteRight"] },
                    { "AbsoluteBottom", Properties["MudBlazor.Interop.BoundingClientRect.AbsoluteBottom"] },
                    { "IsOutsideBottom", Properties["MudBlazor.Interop.BoundingClientRect.IsOutsideBottom"] },
                    { "IsOutsideLeft", Properties["MudBlazor.Interop.BoundingClientRect.IsOutsideLeft"] },
                    { "IsOutsideTop", Properties["MudBlazor.Interop.BoundingClientRect.IsOutsideTop"] },
                    { "IsOutsideRight", Properties["MudBlazor.Interop.BoundingClientRect.IsOutsideRight"] },
                },
                Methods = { 
                    { "Clone", Methods["MudBlazor.Interop.BoundingClientRect.Clone"] },
                },
            }},
            { "MudBlazor.InterpolationOption", new() {
                Name = "InterpolationOption", 
                NameFriendly = "InterpolationOption", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the technique used to smooth lines connecting values in a <see cref=""T:MudBlazor.MudChart"" />.", 
                Fields = { 
                    { "NaturalSpline", Fields["MudBlazor.InterpolationOption.NaturalSpline"] },
                    { "EndSlope", Fields["MudBlazor.InterpolationOption.EndSlope"] },
                    { "Periodic", Fields["MudBlazor.InterpolationOption.Periodic"] },
                    { "Straight", Fields["MudBlazor.InterpolationOption.Straight"] },
                },
            }},
            { "MudBlazor.Justify", new() {
                Name = "Justify", 
                NameFriendly = "Justify", 
                BaseTypeName = "Enum", 
                Summary = @"The horizontal distribution of child items in a <see cref=""T:MudBlazor.MudStack"" /> component.", 
                Fields = { 
                    { "FlexStart", Fields["MudBlazor.Justify.FlexStart"] },
                    { "Center", Fields["MudBlazor.Justify.Center"] },
                    { "FlexEnd", Fields["MudBlazor.Justify.FlexEnd"] },
                    { "SpaceBetween", Fields["MudBlazor.Justify.SpaceBetween"] },
                    { "SpaceAround", Fields["MudBlazor.Justify.SpaceAround"] },
                    { "SpaceEvenly", Fields["MudBlazor.Justify.SpaceEvenly"] },
                },
            }},
            { "MudBlazor.KeyObserver", new() {
                Name = "KeyObserver", 
                NameFriendly = "KeyObserver", 
                BaseTypeName = "Object", 
                Summary = @"Represents a key observer that handles key down and key up events for a specific HTML element.", 
                Methods = { 
                    { "KeyUp", Methods["MudBlazor.KeyObserver.KeyUp"] },
                    { "KeyDown", Methods["MudBlazor.KeyObserver.KeyDown"] },
                    { "KeyUpIgnore", Methods["MudBlazor.KeyObserver.KeyUpIgnore"] },
                    { "KeyDownIgnore", Methods["MudBlazor.KeyObserver.KeyDownIgnore"] },
                },
            }},
            { "MudBlazor.LayoutProperties", new() {
                Name = "LayoutProperties", 
                NameFriendly = "LayoutProperties", 
                BaseTypeName = "Object", 
                Summary = @"Represents the layout properties for a user interface.", 
                Properties = { 
                    { "DefaultBorderRadius", Properties["MudBlazor.LayoutProperties.DefaultBorderRadius"] },
                    { "DrawerMiniWidthLeft", Properties["MudBlazor.LayoutProperties.DrawerMiniWidthLeft"] },
                    { "DrawerMiniWidthRight", Properties["MudBlazor.LayoutProperties.DrawerMiniWidthRight"] },
                    { "DrawerWidthLeft", Properties["MudBlazor.LayoutProperties.DrawerWidthLeft"] },
                    { "DrawerWidthRight", Properties["MudBlazor.LayoutProperties.DrawerWidthRight"] },
                    { "AppbarHeight", Properties["MudBlazor.LayoutProperties.AppbarHeight"] },
                },
            }},
            { "MudBlazor.Margin", new() {
                Name = "Margin", 
                NameFriendly = "Margin", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the amount of spacing to apply.", 
                Fields = { 
                    { "None", Fields["MudBlazor.Margin.None"] },
                    { "Dense", Fields["MudBlazor.Margin.Dense"] },
                    { "Normal", Fields["MudBlazor.Margin.Normal"] },
                },
            }},
            { "MudBlazor.MaskChar", new() {
                Name = "MaskChar", 
                NameFriendly = "MaskChar", 
                BaseTypeName = "ValueType", 
                Summary = @"A character which represents a set of allowed values in a <see cref=""T:MudBlazor.MudMask"" />.", 
                Remarks = @"Masks are built from mask characters, which each represent a regular expression for that character.<br />For example: the mask character <c>0</c> with regular expression <c>\d</c> would allow any digit for that character.", 
                Properties = { 
                    { "Char", Properties["MudBlazor.MaskChar.Char"] },
                    { "Regex", Properties["MudBlazor.MaskChar.Regex"] },
                },
                Methods = { 
                    { "Letter", Methods["MudBlazor.MaskChar.Letter"] },
                    { "Digit", Methods["MudBlazor.MaskChar.Digit"] },
                    { "LetterOrDigit", Methods["MudBlazor.MaskChar.LetterOrDigit"] },
                },
            }},
            { "MudBlazor.MaskOption", new() {
                Name = "MaskOption", 
                NameFriendly = "MaskOption", 
                BaseTypeName = "ValueType", 
                Summary = @"A filter which determines when to use a mask for a <see cref=""T:MudBlazor.MultiMask"" />.", 
                Remarks = @"Example: to use this mask when an input starts with <c>4</c>, use an expression of <c>^4</c>.", 
                Properties = { 
                    { "Id", Properties["MudBlazor.MaskOption.Id"] },
                    { "Mask", Properties["MudBlazor.MaskOption.Mask"] },
                    { "Regex", Properties["MudBlazor.MaskOption.Regex"] },
                },
                Methods = { 
                    { "Deconstruct", Methods["MudBlazor.MaskOption.Deconstruct"] },
                },
            }},
            { "MudBlazor.MaxWidth", new() {
                Name = "MaxWidth", 
                NameFriendly = "MaxWidth", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Large", Fields["MudBlazor.MaxWidth.Large"] },
                    { "Medium", Fields["MudBlazor.MaxWidth.Medium"] },
                    { "Small", Fields["MudBlazor.MaxWidth.Small"] },
                    { "ExtraLarge", Fields["MudBlazor.MaxWidth.ExtraLarge"] },
                    { "ExtraExtraLarge", Fields["MudBlazor.MaxWidth.ExtraExtraLarge"] },
                    { "ExtraSmall", Fields["MudBlazor.MaxWidth.ExtraSmall"] },
                    { "False", Fields["MudBlazor.MaxWidth.False"] },
                },
            }},
            { "MudBlazor.MessageBoxOptions", new() {
                Name = "MessageBoxOptions", 
                NameFriendly = "MessageBoxOptions", 
                BaseTypeName = "Object", 
                Summary = @"Represents options which are used during calls to show a simple <see cref=""T:MudBlazor.MudDialog"" />.", 
                Properties = { 
                    { "Title", Properties["MudBlazor.MessageBoxOptions.Title"] },
                    { "Message", Properties["MudBlazor.MessageBoxOptions.Message"] },
                    { "MarkupMessage", Properties["MudBlazor.MessageBoxOptions.MarkupMessage"] },
                    { "YesText", Properties["MudBlazor.MessageBoxOptions.YesText"] },
                    { "NoText", Properties["MudBlazor.MessageBoxOptions.NoText"] },
                    { "CancelText", Properties["MudBlazor.MessageBoxOptions.CancelText"] },
                },
            }},
            { "MudBlazor.MouseEvent", new() {
                Name = "MouseEvent", 
                NameFriendly = "MouseEvent", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the action which displays a <see cref=""T:MudBlazor.MudMenu"" />.", 
                Fields = { 
                    { "LeftClick", Fields["MudBlazor.MouseEvent.LeftClick"] },
                    { "RightClick", Fields["MudBlazor.MouseEvent.RightClick"] },
                    { "MouseOver", Fields["MudBlazor.MouseEvent.MouseOver"] },
                },
            }},
            { "MudBlazor.MudAlert", new() {
                Name = "MudAlert", 
                NameFriendly = "MudAlert", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents an alert used to display an important message which is statically embedded in the page content.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudAlert.RightToLeft"] },
                    { "ContentAlignment", Properties["MudBlazor.MudAlert.ContentAlignment"] },
                    { "CloseIcon", Properties["MudBlazor.MudAlert.CloseIcon"] },
                    { "ShowCloseIcon", Properties["MudBlazor.MudAlert.ShowCloseIcon"] },
                    { "Elevation", Properties["MudBlazor.MudAlert.Elevation"] },
                    { "Square", Properties["MudBlazor.MudAlert.Square"] },
                    { "Dense", Properties["MudBlazor.MudAlert.Dense"] },
                    { "NoIcon", Properties["MudBlazor.MudAlert.NoIcon"] },
                    { "Severity", Properties["MudBlazor.MudAlert.Severity"] },
                    { "Variant", Properties["MudBlazor.MudAlert.Variant"] },
                    { "ChildContent", Properties["MudBlazor.MudAlert.ChildContent"] },
                    { "Icon", Properties["MudBlazor.MudAlert.Icon"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudAlert.Classname"] },
                    { "ClassPosition", Properties["MudBlazor.MudAlert.ClassPosition"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "CloseIconClicked", Events["MudBlazor.MudAlert.CloseIconClicked"] },
                    { "OnClick", Events["MudBlazor.MudAlert.OnClick"] },
                },
            }},
            { "MudBlazor.MudAppBar", new() {
                Name = "MudAppBar", 
                NameFriendly = "MudAppBar", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a bar used to display actions, branding, navigation and screen titles.", 
                Remarks = @"This component is often used to keep important information persistent while browsing different pages to ease navigation and access to actions for users.", 
                Properties = { 
                    { "Bottom", Properties["MudBlazor.MudAppBar.Bottom"] },
                    { "Contextual", Properties["MudBlazor.MudAppBar.Contextual"] },
                    { "Elevation", Properties["MudBlazor.MudAppBar.Elevation"] },
                    { "Dense", Properties["MudBlazor.MudAppBar.Dense"] },
                    { "Gutters", Properties["MudBlazor.MudAppBar.Gutters"] },
                    { "Color", Properties["MudBlazor.MudAppBar.Color"] },
                    { "Fixed", Properties["MudBlazor.MudAppBar.Fixed"] },
                    { "WrapContent", Properties["MudBlazor.MudAppBar.WrapContent"] },
                    { "ToolBarClass", Properties["MudBlazor.MudAppBar.ToolBarClass"] },
                    { "ChildContent", Properties["MudBlazor.MudAppBar.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudAppBar.Classname"] },
                    { "ToolBarClassname", Properties["MudBlazor.MudAppBar.ToolBarClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudAutocomplete`1", new() {
                Name = "MudAutocomplete`1", 
                NameFriendly = "MudAutocomplete<T>", 
                BaseTypeName = "MudBaseInput`1", 
                IsComponent = true, 
                Summary = @"Represents a component with simple and flexible type-ahead functionality.", 
                Properties = { 
                    { "InputClass", Properties["MudBlazor.MudAutocomplete`1.InputClass"] },
                    { "PopoverClass", Properties["MudBlazor.MudAutocomplete`1.PopoverClass"] },
                    { "ListClass", Properties["MudBlazor.MudAutocomplete`1.ListClass"] },
                    { "ListItemClass", Properties["MudBlazor.MudAutocomplete`1.ListItemClass"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudAutocomplete`1.AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudAutocomplete`1.TransformOrigin"] },
                    { "Dense", Properties["MudBlazor.MudAutocomplete`1.Dense"] },
                    { "OpenIcon", Properties["MudBlazor.MudAutocomplete`1.OpenIcon"] },
                    { "CloseIcon", Properties["MudBlazor.MudAutocomplete`1.CloseIcon"] },
                    { "MaxHeight", Properties["MudBlazor.MudAutocomplete`1.MaxHeight"] },
                    { "ToStringFunc", Properties["MudBlazor.MudAutocomplete`1.ToStringFunc"] },
                    { "ShowProgressIndicator", Properties["MudBlazor.MudAutocomplete`1.ShowProgressIndicator"] },
                    { "ProgressIndicatorColor", Properties["MudBlazor.MudAutocomplete`1.ProgressIndicatorColor"] },
                    { "SearchFunc", Properties["MudBlazor.MudAutocomplete`1.SearchFunc"] },
                    { "MaxItems", Properties["MudBlazor.MudAutocomplete`1.MaxItems"] },
                    { "MinCharacters", Properties["MudBlazor.MudAutocomplete`1.MinCharacters"] },
                    { "ResetValueOnEmptyText", Properties["MudBlazor.MudAutocomplete`1.ResetValueOnEmptyText"] },
                    { "SelectOnActivation", Properties["MudBlazor.MudAutocomplete`1.SelectOnActivation"] },
                    { "Strict", Properties["MudBlazor.MudAutocomplete`1.Strict"] },
                    { "DebounceInterval", Properties["MudBlazor.MudAutocomplete`1.DebounceInterval"] },
                    { "ItemTemplate", Properties["MudBlazor.MudAutocomplete`1.ItemTemplate"] },
                    { "ItemSelectedTemplate", Properties["MudBlazor.MudAutocomplete`1.ItemSelectedTemplate"] },
                    { "ItemDisabledTemplate", Properties["MudBlazor.MudAutocomplete`1.ItemDisabledTemplate"] },
                    { "MoreItemsTemplate", Properties["MudBlazor.MudAutocomplete`1.MoreItemsTemplate"] },
                    { "NoItemsTemplate", Properties["MudBlazor.MudAutocomplete`1.NoItemsTemplate"] },
                    { "BeforeItemsTemplate", Properties["MudBlazor.MudAutocomplete`1.BeforeItemsTemplate"] },
                    { "AfterItemsTemplate", Properties["MudBlazor.MudAutocomplete`1.AfterItemsTemplate"] },
                    { "ProgressIndicatorTemplate", Properties["MudBlazor.MudAutocomplete`1.ProgressIndicatorTemplate"] },
                    { "ProgressIndicatorInPopoverTemplate", Properties["MudBlazor.MudAutocomplete`1.ProgressIndicatorInPopoverTemplate"] },
                    { "RelativeWidth", Properties["MudBlazor.MudAutocomplete`1.RelativeWidth"] },
                    { "CoerceText", Properties["MudBlazor.MudAutocomplete`1.CoerceText"] },
                    { "CoerceValue", Properties["MudBlazor.MudAutocomplete`1.CoerceValue"] },
                    { "DropdownSettings", Properties["MudBlazor.MudAutocomplete`1.DropdownSettings"] },
                    { "ItemDisabledFunc", Properties["MudBlazor.MudAutocomplete`1.ItemDisabledFunc"] },
                    { "SelectValueOnTab", Properties["MudBlazor.MudAutocomplete`1.SelectValueOnTab"] },
                    { "OpenOnFocus", Properties["MudBlazor.MudAutocomplete`1.OpenOnFocus"] },
                    { "Clearable", Properties["MudBlazor.MudAutocomplete`1.Clearable"] },
                    { "ClearIcon", Properties["MudBlazor.MudAutocomplete`1.ClearIcon"] },
                    { "Open", Properties["MudBlazor.MudAutocomplete`1.Open"] },
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1.ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1.FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1.Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1.Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1.HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1.HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1.HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1.AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1.AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1.Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1.OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1.AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1.AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1.IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1.Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1.Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1.Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1.Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1.Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1.MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1.Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1.AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1.Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1.Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1.TextUpdateSuppression"] },
                    { "InputMode", Properties["MudBlazor.MudBaseInput`1.InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudBaseInput`1.Pattern"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1.ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1.Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1.Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1.InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudAutocomplete`1.Classname"] },
                    { "InputClassname", Properties["MudBlazor.MudAutocomplete`1.InputClassname"] },
                    { "AutocompleteClassname", Properties["MudBlazor.MudAutocomplete`1.AutocompleteClassname"] },
                    { "CircularProgressClassname", Properties["MudBlazor.MudAutocomplete`1.CircularProgressClassname"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1.InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "SelectOptionAsync", Methods["MudBlazor.MudAutocomplete`1.SelectOptionAsync"] },
                    { "ToggleMenuAsync", Methods["MudBlazor.MudAutocomplete`1.ToggleMenuAsync"] },
                    { "CloseMenuAsync", Methods["MudBlazor.MudAutocomplete`1.CloseMenuAsync"] },
                    { "OpenMenuAsync", Methods["MudBlazor.MudAutocomplete`1.OpenMenuAsync"] },
                    { "ClearAsync", Methods["MudBlazor.MudAutocomplete`1.ClearAsync"] },
                    { "FocusAsync", Methods["MudBlazor.MudAutocomplete`1.FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudAutocomplete`1.BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudAutocomplete`1.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudAutocomplete`1.SelectRangeAsync"] },
                    { "ForceUpdate", Methods["MudBlazor.MudBaseInput`1.ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1.ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "GetListItemClassname", Methods["MudBlazor.MudAutocomplete`1.GetListItemClassname"] },
                    { "GetAutocomplete", Methods["MudBlazor.MudAutocomplete`1.GetAutocomplete"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudAutocomplete`1.UpdateTextPropertyAsync"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudAutocomplete`1.UpdateValuePropertyAsync"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudAutocomplete`1.ResetValueAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudAutocomplete`1.DisposeAsyncCore"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1.GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudBaseInput`1.SetTextAsync"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyUpAsync"] },
                    { "SetValueAsync", Methods["MudBlazor.MudBaseInput`1.SetValueAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1.SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1.SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1.ValidateValue"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1.GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1.GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "OpenChanged", Events["MudBlazor.MudAutocomplete`1.OpenChanged"] },
                    { "OnClearButtonClick", Events["MudBlazor.MudAutocomplete`1.OnClearButtonClick"] },
                    { "ReturnedItemsCountChanged", Events["MudBlazor.MudAutocomplete`1.ReturnedItemsCountChanged"] },
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1.OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1.TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1.OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1.OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1.OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1.OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudAvatar", new() {
                Name = "MudAvatar", 
                NameFriendly = "MudAvatar", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a component which displays circular user profile pictures, icons or text.", 
                Properties = { 
                    { "Elevation", Properties["MudBlazor.MudAvatar.Elevation"] },
                    { "Square", Properties["MudBlazor.MudAvatar.Square"] },
                    { "Rounded", Properties["MudBlazor.MudAvatar.Rounded"] },
                    { "Color", Properties["MudBlazor.MudAvatar.Color"] },
                    { "Size", Properties["MudBlazor.MudAvatar.Size"] },
                    { "Variant", Properties["MudBlazor.MudAvatar.Variant"] },
                    { "ChildContent", Properties["MudBlazor.MudAvatar.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "AvatarGroup", Properties["MudBlazor.MudAvatar.AvatarGroup"] },
                    { "Classname", Properties["MudBlazor.MudAvatar.Classname"] },
                    { "Stylesname", Properties["MudBlazor.MudAvatar.Stylesname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudAvatarGroup", new() {
                Name = "MudAvatarGroup", 
                NameFriendly = "MudAvatarGroup", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a grouping of multiple <see cref=""T:MudBlazor.MudAvatar"" /> components.", 
                Properties = { 
                    { "Spacing", Properties["MudBlazor.MudAvatarGroup.Spacing"] },
                    { "Outlined", Properties["MudBlazor.MudAvatarGroup.Outlined"] },
                    { "OutlineColor", Properties["MudBlazor.MudAvatarGroup.OutlineColor"] },
                    { "MaxElevation", Properties["MudBlazor.MudAvatarGroup.MaxElevation"] },
                    { "MaxSquare", Properties["MudBlazor.MudAvatarGroup.MaxSquare"] },
                    { "MaxRounded", Properties["MudBlazor.MudAvatarGroup.MaxRounded"] },
                    { "MaxColor", Properties["MudBlazor.MudAvatarGroup.MaxColor"] },
                    { "MaxSize", Properties["MudBlazor.MudAvatarGroup.MaxSize"] },
                    { "MaxVariant", Properties["MudBlazor.MudAvatarGroup.MaxVariant"] },
                    { "Max", Properties["MudBlazor.MudAvatarGroup.Max"] },
                    { "MaxAvatarClass", Properties["MudBlazor.MudAvatarGroup.MaxAvatarClass"] },
                    { "MaxAvatarsTemplate", Properties["MudBlazor.MudAvatarGroup.MaxAvatarsTemplate"] },
                    { "ChildContent", Properties["MudBlazor.MudAvatarGroup.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudAvatarGroup.Classname"] },
                    { "MaxAvatarClassname", Properties["MudBlazor.MudAvatarGroup.MaxAvatarClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudBadge", new() {
                Name = "MudBadge", 
                NameFriendly = "MudBadge", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents an overlay added to an icon or button to add information such as a number of new items.", 
                Properties = { 
                    { "Origin", Properties["MudBlazor.MudBadge.Origin"] },
                    { "Elevation", Properties["MudBlazor.MudBadge.Elevation"] },
                    { "Visible", Properties["MudBlazor.MudBadge.Visible"] },
                    { "Color", Properties["MudBlazor.MudBadge.Color"] },
                    { "Dot", Properties["MudBlazor.MudBadge.Dot"] },
                    { "Overlap", Properties["MudBlazor.MudBadge.Overlap"] },
                    { "Bordered", Properties["MudBlazor.MudBadge.Bordered"] },
                    { "Icon", Properties["MudBlazor.MudBadge.Icon"] },
                    { "Max", Properties["MudBlazor.MudBadge.Max"] },
                    { "Content", Properties["MudBlazor.MudBadge.Content"] },
                    { "BadgeClass", Properties["MudBlazor.MudBadge.BadgeClass"] },
                    { "BadgeAriaLabel", Properties["MudBlazor.MudBadge.BadgeAriaLabel"] },
                    { "ChildContent", Properties["MudBlazor.MudBadge.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudBadge.Classname"] },
                    { "WrapperClass", Properties["MudBlazor.MudBadge.WrapperClass"] },
                    { "BadgeClassname", Properties["MudBlazor.MudBadge.BadgeClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudBadge.OnClick"] },
                },
            }},
            { "MudBlazor.MudBaseBindableItemsControl`2", new() {
                Name = "MudBaseBindableItemsControl`2", 
                NameFriendly = "MudBaseBindableItemsControl<TChildComponent, TData>", 
                BaseTypeName = "MudBaseItemsControl`1", 
                IsComponent = true, 
                Summary = @"Represents a base class for designing components with bindable items.", 
                Properties = { 
                    { "ItemsSource", Properties["MudBlazor.MudBaseBindableItemsControl`2.ItemsSource"] },
                    { "ItemTemplate", Properties["MudBlazor.MudBaseBindableItemsControl`2.ItemTemplate"] },
                    { "SelectedItem", Properties["MudBlazor.MudBaseBindableItemsControl`2.SelectedItem"] },
                    { "ChildContent", Properties["MudBlazor.MudBaseItemsControl`1.ChildContent"] },
                    { "SelectedIndex", Properties["MudBlazor.MudBaseItemsControl`1.SelectedIndex"] },
                    { "LastContainer", Properties["MudBlazor.MudBaseItemsControl`1.LastContainer"] },
                    { "Items", Properties["MudBlazor.MudBaseItemsControl`1.Items"] },
                    { "SelectedContainer", Properties["MudBlazor.MudBaseItemsControl`1.SelectedContainer"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "Previous", Methods["MudBlazor.MudBaseItemsControl`1.Previous"] },
                    { "Next", Methods["MudBlazor.MudBaseItemsControl`1.Next"] },
                    { "MoveTo", Methods["MudBlazor.MudBaseItemsControl`1.MoveTo"] },
                    { "AddItem", Methods["MudBlazor.MudBaseItemsControl`1.AddItem"] },
                    { "SelectionChanged", Methods["MudBlazor.MudBaseItemsControl`1.SelectionChanged"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudBaseItemsControl`1.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.MudBaseButton", new() {
                Name = "MudBaseButton", 
                NameFriendly = "MudBaseButton", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a base class for designing button components.", 
                Properties = { 
                    { "HtmlTag", Properties["MudBlazor.MudBaseButton.HtmlTag"] },
                    { "ButtonType", Properties["MudBlazor.MudBaseButton.ButtonType"] },
                    { "Href", Properties["MudBlazor.MudBaseButton.Href"] },
                    { "Target", Properties["MudBlazor.MudBaseButton.Target"] },
                    { "Rel", Properties["MudBlazor.MudBaseButton.Rel"] },
                    { "Disabled", Properties["MudBlazor.MudBaseButton.Disabled"] },
                    { "ClickPropagation", Properties["MudBlazor.MudBaseButton.ClickPropagation"] },
                    { "DropShadow", Properties["MudBlazor.MudBaseButton.DropShadow"] },
                    { "Ripple", Properties["MudBlazor.MudBaseButton.Ripple"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Activatable", Properties["MudBlazor.MudBaseButton.Activatable"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudBaseButton.FocusAsync"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseButton.GetDisabledState"] },
                    { "OnClickHandler", Methods["MudBlazor.MudBaseButton.OnClickHandler"] },
                    { "GetClickPropagation", Methods["MudBlazor.MudBaseButton.GetClickPropagation"] },
                    { "GetRel", Methods["MudBlazor.MudBaseButton.GetRel"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudBaseButton.OnClick"] },
                },
            }},
            { "MudBlazor.MudBaseDatePicker", new() {
                Name = "MudBaseDatePicker", 
                NameFriendly = "MudBaseDatePicker", 
                BaseTypeName = "MudPicker`1", 
                IsComponent = true, 
                Summary = @"Represents a base class for designing date picker components.", 
                Properties = { 
                    { "MaxDate", Properties["MudBlazor.MudBaseDatePicker.MaxDate"] },
                    { "MinDate", Properties["MudBlazor.MudBaseDatePicker.MinDate"] },
                    { "OpenTo", Properties["MudBlazor.MudBaseDatePicker.OpenTo"] },
                    { "DateFormat", Properties["MudBlazor.MudBaseDatePicker.DateFormat"] },
                    { "FirstDayOfWeek", Properties["MudBlazor.MudBaseDatePicker.FirstDayOfWeek"] },
                    { "PickerMonth", Properties["MudBlazor.MudBaseDatePicker.PickerMonth"] },
                    { "ClosingDelay", Properties["MudBlazor.MudBaseDatePicker.ClosingDelay"] },
                    { "DisplayMonths", Properties["MudBlazor.MudBaseDatePicker.DisplayMonths"] },
                    { "MaxMonthColumns", Properties["MudBlazor.MudBaseDatePicker.MaxMonthColumns"] },
                    { "StartMonth", Properties["MudBlazor.MudBaseDatePicker.StartMonth"] },
                    { "ShowWeekNumbers", Properties["MudBlazor.MudBaseDatePicker.ShowWeekNumbers"] },
                    { "TitleDateFormat", Properties["MudBlazor.MudBaseDatePicker.TitleDateFormat"] },
                    { "AutoClose", Properties["MudBlazor.MudBaseDatePicker.AutoClose"] },
                    { "IsDateDisabledFunc", Properties["MudBlazor.MudBaseDatePicker.IsDateDisabledFunc"] },
                    { "AdditionalDateClassesFunc", Properties["MudBlazor.MudBaseDatePicker.AdditionalDateClassesFunc"] },
                    { "PreviousIcon", Properties["MudBlazor.MudBaseDatePicker.PreviousIcon"] },
                    { "NextIcon", Properties["MudBlazor.MudBaseDatePicker.NextIcon"] },
                    { "FixYear", Properties["MudBlazor.MudBaseDatePicker.FixYear"] },
                    { "FixMonth", Properties["MudBlazor.MudBaseDatePicker.FixMonth"] },
                    { "FixDay", Properties["MudBlazor.MudBaseDatePicker.FixDay"] },
                    { "AdornmentColor", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel"] },
                    { "Placeholder", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder"] },
                    { "Elevation", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Elevation"] },
                    { "Square", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Square"] },
                    { "Rounded", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rounded"] },
                    { "HelperText", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus"] },
                    { "Label", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label"] },
                    { "Clearable", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable"] },
                    { "Disabled", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled"] },
                    { "Underline", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline"] },
                    { "ReadOnly", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly"] },
                    { "Editable", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Editable"] },
                    { "ShowToolbar", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShowToolbar"] },
                    { "ToolbarClass", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToolbarClass"] },
                    { "PickerVariant", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerVariant"] },
                    { "Variant", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant"] },
                    { "Adornment", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment"] },
                    { "Orientation", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Orientation"] },
                    { "IconSize", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize"] },
                    { "Color", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Color"] },
                    { "ImmediateText", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ImmediateText"] },
                    { "Text", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"] },
                    { "ActionsClass", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClass"] },
                    { "PickerActions", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerActions"] },
                    { "Margin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin"] },
                    { "Mask", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Mask"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TransformOrigin"] },
                    { "OverflowBehavior", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OverflowBehavior"] },
                    { "RelativeWidth", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RelativeWidth"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "ScrollManager", Properties["MudBlazor.MudBaseDatePicker.ScrollManager"] },
                    { "IsRange", Properties["MudBlazor.MudBaseDatePicker.IsRange"] },
                    { "PickerContent", Properties["MudBlazor.MudBaseDatePicker.PickerContent"] },
                    { "PickerClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClassname"] },
                    { "PickerPaperClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperClassname"] },
                    { "PickerPaperStylename", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperStylename"] },
                    { "PickerInlineClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInlineClassname"] },
                    { "PickerContainerClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerContainerClassname"] },
                    { "PickerInputClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInputClassname"] },
                    { "PopoverClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PopoverClassname"] },
                    { "ActionsClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClassname"] },
                    { "Open", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Open"] },
                    { "InputContent", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputContent"] },
                    { "Render", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Render"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Fields = { 
                    { "CurrentView", Fields["MudBlazor.MudBaseDatePicker.CurrentView"] },
                },
                Methods = { 
                    { "ScrollToYear", Methods["MudBlazor.MudBaseDatePicker.ScrollToYear"] },
                    { "ToggleOpenAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToggleOpenAsync"] },
                    { "CloseAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CloseAsync"] },
                    { "OpenAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OpenAsync"] },
                    { "ClearAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ClearAsync"] },
                    { "FocusAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"] },
                    { "DateFormatChangedAsync", Methods["MudBlazor.MudBaseDatePicker.DateFormatChangedAsync"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseDatePicker.SetCulture"] },
                    { "OnPickerOpenedAsync", Methods["MudBlazor.MudBaseDatePicker.OnPickerOpenedAsync"] },
                    { "GetMonthStart", Methods["MudBlazor.MudBaseDatePicker.GetMonthStart"] },
                    { "GetMonthEnd", Methods["MudBlazor.MudBaseDatePicker.GetMonthEnd"] },
                    { "GetFirstDayOfWeek", Methods["MudBlazor.MudBaseDatePicker.GetFirstDayOfWeek"] },
                    { "GetWeek", Methods["MudBlazor.MudBaseDatePicker.GetWeek"] },
                    { "GetNextView", Methods["MudBlazor.MudBaseDatePicker.GetNextView"] },
                    { "SubmitAndCloseAsync", Methods["MudBlazor.MudBaseDatePicker.SubmitAndCloseAsync"] },
                    { "GetDayClasses", Methods["MudBlazor.MudBaseDatePicker.GetDayClasses"] },
                    { "OnDayClickedAsync", Methods["MudBlazor.MudBaseDatePicker.OnDayClickedAsync"] },
                    { "OnMonthSelectedAsync", Methods["MudBlazor.MudBaseDatePicker.OnMonthSelectedAsync"] },
                    { "OnYearClickedAsync", Methods["MudBlazor.MudBaseDatePicker.OnYearClickedAsync"] },
                    { "OnMonthClicked", Methods["MudBlazor.MudBaseDatePicker.OnMonthClicked"] },
                    { "GetAbbreviatedDayNames", Methods["MudBlazor.MudBaseDatePicker.GetAbbreviatedDayNames"] },
                    { "GetMonthName", Methods["MudBlazor.MudBaseDatePicker.GetMonthName"] },
                    { "GetTitleDateString", Methods["MudBlazor.MudBaseDatePicker.GetTitleDateString"] },
                    { "FormatTitleDate", Methods["MudBlazor.MudBaseDatePicker.FormatTitleDate"] },
                    { "GetFormattedYearString", Methods["MudBlazor.MudBaseDatePicker.GetFormattedYearString"] },
                    { "GetCalendarStartOfMonth", Methods["MudBlazor.MudBaseDatePicker.GetCalendarStartOfMonth"] },
                    { "GetCalendarYear", Methods["MudBlazor.MudBaseDatePicker.GetCalendarYear"] },
                    { "GetDisabledState", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync"] },
                    { "StringValueChangedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].StringValueChangedAsync"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync"] },
                    { "OnOpenedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnOpenedAsync"] },
                    { "OnClosedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClosedAsync"] },
                    { "OnPickerClosedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPickerClosedAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].DisposeAsyncCore"] },
                    { "SetConverter", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"] },
                },
                Events = { 
                    { "PickerMonthChanged", Events["MudBlazor.MudBaseDatePicker.PickerMonthChanged"] },
                    { "PickerOpened", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerOpened"] },
                    { "PickerClosed", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClosed"] },
                    { "TextChanged", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"] },
                    { "OnClick", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClick"] },
                },
            }},
            { "MudBlazor.MudBaseInput`1", new() {
                Name = "MudBaseInput`1", 
                NameFriendly = "MudBaseInput<T>", 
                BaseTypeName = "MudFormComponent`2", 
                IsComponent = true, 
                Summary = @"Represents a base class for designing form input components.", 
                Properties = { 
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1.ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1.FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1.Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1.Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1.HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1.HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1.HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1.AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1.AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1.Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1.OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1.AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1.AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1.IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1.Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1.Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1.Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1.Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1.Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1.MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1.Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1.AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1.Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1.Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1.TextUpdateSuppression"] },
                    { "InputMode", Properties["MudBlazor.MudBaseInput`1.InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudBaseInput`1.Pattern"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1.ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1.Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1.Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1.InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1.InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudBaseInput`1.FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudBaseInput`1.BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudBaseInput`1.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudBaseInput`1.SelectRangeAsync"] },
                    { "ForceUpdate", Methods["MudBlazor.MudBaseInput`1.ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1.ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1.GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudBaseInput`1.SetTextAsync"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudBaseInput`1.UpdateTextPropertyAsync"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyUpAsync"] },
                    { "SetValueAsync", Methods["MudBlazor.MudBaseInput`1.SetValueAsync"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudBaseInput`1.UpdateValuePropertyAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1.SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1.SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1.ValidateValue"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudBaseInput`1.ResetValueAsync"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1.GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1.GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudFormComponent`2.DisposeAsyncCore"] },
                },
                Events = { 
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1.OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1.TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1.OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1.OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1.OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1.OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudBaseItemsControl`1", new() {
                Name = "MudBaseItemsControl`1", 
                NameFriendly = "MudBaseItemsControl<TChildComponent>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a base class for designing components which contain items.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudBaseItemsControl`1.ChildContent"] },
                    { "SelectedIndex", Properties["MudBlazor.MudBaseItemsControl`1.SelectedIndex"] },
                    { "LastContainer", Properties["MudBlazor.MudBaseItemsControl`1.LastContainer"] },
                    { "Items", Properties["MudBlazor.MudBaseItemsControl`1.Items"] },
                    { "SelectedContainer", Properties["MudBlazor.MudBaseItemsControl`1.SelectedContainer"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "Previous", Methods["MudBlazor.MudBaseItemsControl`1.Previous"] },
                    { "Next", Methods["MudBlazor.MudBaseItemsControl`1.Next"] },
                    { "MoveTo", Methods["MudBlazor.MudBaseItemsControl`1.MoveTo"] },
                    { "AddItem", Methods["MudBlazor.MudBaseItemsControl`1.AddItem"] },
                    { "SelectionChanged", Methods["MudBlazor.MudBaseItemsControl`1.SelectionChanged"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudBaseItemsControl`1.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.MudBooleanInput`1", new() {
                Name = "MudBooleanInput`1", 
                NameFriendly = "MudBooleanInput<T>", 
                BaseTypeName = "MudFormComponent`2", 
                IsComponent = true, 
                Summary = @"Represents a form input component which stores a boolean value.", 
                Properties = { 
                    { "Disabled", Properties["MudBlazor.MudBooleanInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBooleanInput`1.ReadOnly"] },
                    { "Value", Properties["MudBlazor.MudBooleanInput`1.Value"] },
                    { "StopClickPropagation", Properties["MudBlazor.MudBooleanInput`1.StopClickPropagation"] },
                    { "RightToLeft", Properties["MudBlazor.MudBooleanInput`1.RightToLeft"] },
                    { "LabelPlacement", Properties["MudBlazor.MudBooleanInput`1.LabelPlacement"] },
                    { "Label", Properties["MudBlazor.MudBooleanInput`1.Label"] },
                    { "Ripple", Properties["MudBlazor.MudBooleanInput`1.Ripple"] },
                    { "Size", Properties["MudBlazor.MudBooleanInput`1.Size"] },
                    { "Color", Properties["MudBlazor.MudBooleanInput`1.Color"] },
                    { "ChildContent", Properties["MudBlazor.MudBooleanInput`1.ChildContent"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudBooleanInput`1.Classname"] },
                    { "LabelClassname", Properties["MudBlazor.MudBooleanInput`1.LabelClassname"] },
                    { "IconClassname", Properties["MudBlazor.MudBooleanInput`1.IconClassname"] },
                    { "BoolValue", Properties["MudBlazor.MudBooleanInput`1.BoolValue"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBooleanInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBooleanInput`1.GetReadOnlyState"] },
                    { "OnChange", Methods["MudBlazor.MudBooleanInput`1.OnChange"] },
                    { "SetBoolValueAsync", Methods["MudBlazor.MudBooleanInput`1.SetBoolValueAsync"] },
                    { "SetCheckedAsync", Methods["MudBlazor.MudBooleanInput`1.SetCheckedAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBooleanInput`1.SetConverter"] },
                    { "HasValue", Methods["MudBlazor.MudBooleanInput`1.HasValue"] },
                    { "ConvertPlacement", Methods["MudBlazor.MudBooleanInput`1.ConvertPlacement"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2.SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2.ValidateValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudFormComponent`2.ResetValueAsync"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudFormComponent`2.DisposeAsyncCore"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.MudBooleanInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudBreadcrumbs", new() {
                Name = "MudBreadcrumbs", 
                NameFriendly = "MudBreadcrumbs", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a series of links used to show the user's current location.", 
                Properties = { 
                    { "Items", Properties["MudBlazor.MudBreadcrumbs.Items"] },
                    { "Separator", Properties["MudBlazor.MudBreadcrumbs.Separator"] },
                    { "SeparatorTemplate", Properties["MudBlazor.MudBreadcrumbs.SeparatorTemplate"] },
                    { "ItemTemplate", Properties["MudBlazor.MudBreadcrumbs.ItemTemplate"] },
                    { "MaxItems", Properties["MudBlazor.MudBreadcrumbs.MaxItems"] },
                    { "ExpanderIcon", Properties["MudBlazor.MudBreadcrumbs.ExpanderIcon"] },
                    { "Collapsed", Properties["MudBlazor.MudBreadcrumbs.Collapsed"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudBreakpointProvider", new() {
                Name = "MudBreakpointProvider", 
                NameFriendly = "MudBreakpointProvider", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a cascading parameter which exposes the window's current breakpoint (xs, sm, md, lg, xl).", 
                Properties = { 
                    { "Breakpoint", Properties["MudBlazor.MudBreakpointProvider.Breakpoint"] },
                    { "ChildContent", Properties["MudBlazor.MudBreakpointProvider.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "BrowserViewportService", Properties["MudBlazor.MudBreakpointProvider.BrowserViewportService"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "OnBreakpointChanged", Events["MudBlazor.MudBreakpointProvider.OnBreakpointChanged"] },
                },
            }},
            { "MudBlazor.MudButton", new() {
                Name = "MudButton", 
                NameFriendly = "MudButton", 
                BaseTypeName = "MudBaseButton", 
                IsComponent = true, 
                Summary = @"Represents a button for actions, links, and commands.", 
                Remarks = @"Creates a <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/Button"">button</see> element,or <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/a"">anchor</see> if <c>Href</c> is set.<br />You can directly add attributes like <c>title</c> or <c>aria-label</c>.", 
                Properties = { 
                    { "StartIcon", Properties["MudBlazor.MudButton.StartIcon"] },
                    { "EndIcon", Properties["MudBlazor.MudButton.EndIcon"] },
                    { "IconColor", Properties["MudBlazor.MudButton.IconColor"] },
                    { "IconSize", Properties["MudBlazor.MudButton.IconSize"] },
                    { "IconClass", Properties["MudBlazor.MudButton.IconClass"] },
                    { "Color", Properties["MudBlazor.MudButton.Color"] },
                    { "Size", Properties["MudBlazor.MudButton.Size"] },
                    { "Variant", Properties["MudBlazor.MudButton.Variant"] },
                    { "FullWidth", Properties["MudBlazor.MudButton.FullWidth"] },
                    { "ChildContent", Properties["MudBlazor.MudButton.ChildContent"] },
                    { "HtmlTag", Properties["MudBlazor.MudBaseButton.HtmlTag"] },
                    { "ButtonType", Properties["MudBlazor.MudBaseButton.ButtonType"] },
                    { "Href", Properties["MudBlazor.MudBaseButton.Href"] },
                    { "Target", Properties["MudBlazor.MudBaseButton.Target"] },
                    { "Rel", Properties["MudBlazor.MudBaseButton.Rel"] },
                    { "Disabled", Properties["MudBlazor.MudBaseButton.Disabled"] },
                    { "ClickPropagation", Properties["MudBlazor.MudBaseButton.ClickPropagation"] },
                    { "DropShadow", Properties["MudBlazor.MudBaseButton.DropShadow"] },
                    { "Ripple", Properties["MudBlazor.MudBaseButton.Ripple"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudButton.Classname"] },
                    { "StartIconClass", Properties["MudBlazor.MudButton.StartIconClass"] },
                    { "EndIconClass", Properties["MudBlazor.MudButton.EndIconClass"] },
                    { "Activatable", Properties["MudBlazor.MudBaseButton.Activatable"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                GlobalSettings = { 
                    { "Color", Properties["MudBlazor.MudGlobal+ButtonDefaults.Color"] },
                    { "Variant", Properties["MudBlazor.MudGlobal+ButtonDefaults.Variant"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudBaseButton.FocusAsync"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseButton.GetDisabledState"] },
                    { "OnClickHandler", Methods["MudBlazor.MudBaseButton.OnClickHandler"] },
                    { "GetClickPropagation", Methods["MudBlazor.MudBaseButton.GetClickPropagation"] },
                    { "GetRel", Methods["MudBlazor.MudBaseButton.GetRel"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudBaseButton.OnClick"] },
                },
            }},
            { "MudBlazor.MudButtonGroup", new() {
                Name = "MudButtonGroup", 
                NameFriendly = "MudButtonGroup", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a group of connected <see cref=""T:MudBlazor.MudButton"" /> components.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudButtonGroup.RightToLeft"] },
                    { "OverrideStyles", Properties["MudBlazor.MudButtonGroup.OverrideStyles"] },
                    { "ChildContent", Properties["MudBlazor.MudButtonGroup.ChildContent"] },
                    { "Vertical", Properties["MudBlazor.MudButtonGroup.Vertical"] },
                    { "DropShadow", Properties["MudBlazor.MudButtonGroup.DropShadow"] },
                    { "Color", Properties["MudBlazor.MudButtonGroup.Color"] },
                    { "Size", Properties["MudBlazor.MudButtonGroup.Size"] },
                    { "Variant", Properties["MudBlazor.MudButtonGroup.Variant"] },
                    { "FullWidth", Properties["MudBlazor.MudButtonGroup.FullWidth"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudButtonGroup.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudCard", new() {
                Name = "MudCard", 
                NameFriendly = "MudCard", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a block of content which can include a header, image, content, and actions.", 
                Properties = { 
                    { "Elevation", Properties["MudBlazor.MudCard.Elevation"] },
                    { "Square", Properties["MudBlazor.MudCard.Square"] },
                    { "Outlined", Properties["MudBlazor.MudCard.Outlined"] },
                    { "ChildContent", Properties["MudBlazor.MudCard.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudCard.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudCardActions", new() {
                Name = "MudCardActions", 
                NameFriendly = "MudCardActions", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a set of buttons displayed as part of a <see cref=""T:MudBlazor.MudCard"" />.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudCardActions.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudCardActions.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudCardContent", new() {
                Name = "MudCardContent", 
                NameFriendly = "MudCardContent", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents the primary content displayed within a <see cref=""T:MudBlazor.MudCard"" />.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudCardContent.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudCardContent.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudCardHeader", new() {
                Name = "MudCardHeader", 
                NameFriendly = "MudCardHeader", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents the top portion of a <see cref=""T:MudBlazor.MudCard"" />.", 
                Properties = { 
                    { "CardHeaderAvatar", Properties["MudBlazor.MudCardHeader.CardHeaderAvatar"] },
                    { "CardHeaderContent", Properties["MudBlazor.MudCardHeader.CardHeaderContent"] },
                    { "CardHeaderActions", Properties["MudBlazor.MudCardHeader.CardHeaderActions"] },
                    { "ChildContent", Properties["MudBlazor.MudCardHeader.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudCardHeader.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudCardMedia", new() {
                Name = "MudCardMedia", 
                NameFriendly = "MudCardMedia", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents an image displayed as part of a <see cref=""T:MudBlazor.MudCard"" />.", 
                Properties = { 
                    { "Title", Properties["MudBlazor.MudCardMedia.Title"] },
                    { "Image", Properties["MudBlazor.MudCardMedia.Image"] },
                    { "Height", Properties["MudBlazor.MudCardMedia.Height"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "StyleString", Properties["MudBlazor.MudCardMedia.StyleString"] },
                    { "Classname", Properties["MudBlazor.MudCardMedia.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudCarousel`1", new() {
                Name = "MudCarousel`1", 
                NameFriendly = "MudCarousel<TData>", 
                BaseTypeName = "MudBaseBindableItemsControl`2", 
                IsComponent = true, 
                Summary = @"Represents a set of slides which transition after a delay.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudCarousel`1.RightToLeft"] },
                    { "ShowArrows", Properties["MudBlazor.MudCarousel`1.ShowArrows"] },
                    { "ArrowsPosition", Properties["MudBlazor.MudCarousel`1.ArrowsPosition"] },
                    { "ShowBullets", Properties["MudBlazor.MudCarousel`1.ShowBullets"] },
                    { "BulletsPosition", Properties["MudBlazor.MudCarousel`1.BulletsPosition"] },
                    { "BulletsColor", Properties["MudBlazor.MudCarousel`1.BulletsColor"] },
                    { "AutoCycle", Properties["MudBlazor.MudCarousel`1.AutoCycle"] },
                    { "AutoCycleTime", Properties["MudBlazor.MudCarousel`1.AutoCycleTime"] },
                    { "NavigationButtonsClass", Properties["MudBlazor.MudCarousel`1.NavigationButtonsClass"] },
                    { "BulletsClass", Properties["MudBlazor.MudCarousel`1.BulletsClass"] },
                    { "PreviousIcon", Properties["MudBlazor.MudCarousel`1.PreviousIcon"] },
                    { "CheckedIcon", Properties["MudBlazor.MudCarousel`1.CheckedIcon"] },
                    { "UncheckedIcon", Properties["MudBlazor.MudCarousel`1.UncheckedIcon"] },
                    { "NextIcon", Properties["MudBlazor.MudCarousel`1.NextIcon"] },
                    { "NextButtonTemplate", Properties["MudBlazor.MudCarousel`1.NextButtonTemplate"] },
                    { "PreviousButtonTemplate", Properties["MudBlazor.MudCarousel`1.PreviousButtonTemplate"] },
                    { "BulletTemplate", Properties["MudBlazor.MudCarousel`1.BulletTemplate"] },
                    { "EnableSwipeGesture", Properties["MudBlazor.MudCarousel`1.EnableSwipeGesture"] },
                    { "ItemsSource", Properties["MudBlazor.MudBaseBindableItemsControl`2.ItemsSource"] },
                    { "ItemTemplate", Properties["MudBlazor.MudBaseBindableItemsControl`2.ItemTemplate"] },
                    { "SelectedItem", Properties["MudBlazor.MudBaseBindableItemsControl`2.SelectedItem"] },
                    { "ChildContent", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ChildContent"] },
                    { "SelectedIndex", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex"] },
                    { "LastContainer", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].LastContainer"] },
                    { "Items", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Items"] },
                    { "SelectedContainer", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedContainer"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudCarousel`1.Classname"] },
                    { "NavigationButtonsClassName", Properties["MudBlazor.MudCarousel`1.NavigationButtonsClassName"] },
                    { "BulletsButtonsClassName", Properties["MudBlazor.MudCarousel`1.BulletsButtonsClassName"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "AddItem", Methods["MudBlazor.MudCarousel`1.AddItem"] },
                    { "Previous", Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Previous"] },
                    { "Next", Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Next"] },
                    { "MoveTo", Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].MoveTo"] },
                    { "SelectionChanged", Methods["MudBlazor.MudCarousel`1.SelectionChanged"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudCarousel`1.DisposeAsyncCore"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.MudCarouselItem", new() {
                Name = "MudCarouselItem", 
                NameFriendly = "MudCarouselItem", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a slide displayed within a <see cref=""T:MudBlazor.MudCarousel`1"" />.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudCarouselItem.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudCarouselItem.RightToLeft"] },
                    { "Color", Properties["MudBlazor.MudCarouselItem.Color"] },
                    { "Transition", Properties["MudBlazor.MudCarouselItem.Transition"] },
                    { "CustomTransitionEnter", Properties["MudBlazor.MudCarouselItem.CustomTransitionEnter"] },
                    { "CustomTransitionExit", Properties["MudBlazor.MudCarouselItem.CustomTransitionExit"] },
                    { "Visible", Properties["MudBlazor.MudCarouselItem.Visible"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudCarouselItem.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudCategoryChartBase", new() {
                Name = "MudCategoryChartBase", 
                NameFriendly = "MudCategoryChartBase", 
                BaseTypeName = "MudChartBase", 
                IsComponent = true, 
                Summary = @"Represents a base class for designing category <see cref=""T:MudBlazor.MudChart"" /> components.", 
                Properties = { 
                    { "InputData", Properties["MudBlazor.MudCategoryChartBase.InputData"] },
                    { "InputLabels", Properties["MudBlazor.MudCategoryChartBase.InputLabels"] },
                    { "XAxisLabels", Properties["MudBlazor.MudCategoryChartBase.XAxisLabels"] },
                    { "ChartSeries", Properties["MudBlazor.MudCategoryChartBase.ChartSeries"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetNormalizedData", Methods["MudBlazor.MudCategoryChartBase.GetNormalizedData"] },
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.MudChart", new() {
                Name = "MudChart", 
                NameFriendly = "MudChart", 
                BaseTypeName = "MudCategoryChartBase", 
                IsComponent = true, 
                Summary = @"Represents a graphic display of data values in a line, bar, stacked bar, pie, heat map, or donut shape.", 
                Properties = { 
                    { "InputData", Properties["MudBlazor.MudCategoryChartBase.InputData"] },
                    { "InputLabels", Properties["MudBlazor.MudCategoryChartBase.InputLabels"] },
                    { "XAxisLabels", Properties["MudBlazor.MudCategoryChartBase.XAxisLabels"] },
                    { "ChartSeries", Properties["MudBlazor.MudCategoryChartBase.ChartSeries"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetNormalizedData", Methods["MudBlazor.MudCategoryChartBase.GetNormalizedData"] },
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.MudChartBase", new() {
                Name = "MudChartBase", 
                NameFriendly = "MudChartBase", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Shared a base class for designing category <see cref=""T:MudBlazor.MudChart"" /> and <see cref=""T:MudBlazor.MudTimeSeriesChart"" /> components.", 
                Properties = { 
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.MudChat", new() {
                Name = "MudChat", 
                NameFriendly = "MudChat", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudChat.RightToLeft"] },
                    { "Color", Properties["MudBlazor.MudChat.Color"] },
                    { "Variant", Properties["MudBlazor.MudChat.Variant"] },
                    { "ChatPosition", Properties["MudBlazor.MudChat.ChatPosition"] },
                    { "ArrowPosition", Properties["MudBlazor.MudChat.ArrowPosition"] },
                    { "ChildContent", Properties["MudBlazor.MudChat.ChildContent"] },
                    { "Elevation", Properties["MudBlazor.MudChat.Elevation"] },
                    { "Square", Properties["MudBlazor.MudChat.Square"] },
                    { "Dense", Properties["MudBlazor.MudChat.Dense"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChat.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudChatBubble", new() {
                Name = "MudChatBubble", 
                NameFriendly = "MudChatBubble", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents the content displayed within a <see cref=""T:MudBlazor.MudChat"" />.", 
                Properties = { 
                    { "ElementReference", Properties["MudBlazor.MudChatBubble.ElementReference"] },
                    { "ParentVariant", Properties["MudBlazor.MudChatBubble.ParentVariant"] },
                    { "ParentColor", Properties["MudBlazor.MudChatBubble.ParentColor"] },
                    { "ParentArrowPosition", Properties["MudBlazor.MudChatBubble.ParentArrowPosition"] },
                    { "Color", Properties["MudBlazor.MudChatBubble.Color"] },
                    { "Variant", Properties["MudBlazor.MudChatBubble.Variant"] },
                    { "ChildContent", Properties["MudBlazor.MudChatBubble.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChatBubble.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudChatBubble.OnClick"] },
                    { "OnContextClick", Events["MudBlazor.MudChatBubble.OnContextClick"] },
                },
            }},
            { "MudBlazor.MudChatFooter", new() {
                Name = "MudChatFooter", 
                NameFriendly = "MudChatFooter", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents the footer of a <see cref=""T:MudBlazor.MudChat"" />.", 
                Properties = { 
                    { "Text", Properties["MudBlazor.MudChatFooter.Text"] },
                    { "ChildContent", Properties["MudBlazor.MudChatFooter.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChatFooter.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudChatHeader", new() {
                Name = "MudChatHeader", 
                NameFriendly = "MudChatHeader", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents the header of a <see cref=""T:MudBlazor.MudChat"" />.", 
                Properties = { 
                    { "Name", Properties["MudBlazor.MudChatHeader.Name"] },
                    { "Time", Properties["MudBlazor.MudChatHeader.Time"] },
                    { "ChildContent", Properties["MudBlazor.MudChatHeader.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChatHeader.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudCheckBox`1", new() {
                Name = "MudCheckBox`1", 
                NameFriendly = "MudCheckBox<T>", 
                BaseTypeName = "MudBooleanInput`1", 
                IsComponent = true, 
                Summary = @"Represents a form input for boolean values or selecting multiple items in a list.", 
                Properties = { 
                    { "UncheckedColor", Properties["MudBlazor.MudCheckBox`1.UncheckedColor"] },
                    { "KeyboardEnabled", Properties["MudBlazor.MudCheckBox`1.KeyboardEnabled"] },
                    { "Dense", Properties["MudBlazor.MudCheckBox`1.Dense"] },
                    { "CheckedIcon", Properties["MudBlazor.MudCheckBox`1.CheckedIcon"] },
                    { "UncheckedIcon", Properties["MudBlazor.MudCheckBox`1.UncheckedIcon"] },
                    { "IndeterminateIcon", Properties["MudBlazor.MudCheckBox`1.IndeterminateIcon"] },
                    { "TriState", Properties["MudBlazor.MudCheckBox`1.TriState"] },
                    { "Disabled", Properties["MudBlazor.MudBooleanInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBooleanInput`1.ReadOnly"] },
                    { "Value", Properties["MudBlazor.MudBooleanInput`1.Value"] },
                    { "StopClickPropagation", Properties["MudBlazor.MudBooleanInput`1.StopClickPropagation"] },
                    { "RightToLeft", Properties["MudBlazor.MudBooleanInput`1.RightToLeft"] },
                    { "LabelPlacement", Properties["MudBlazor.MudBooleanInput`1.LabelPlacement"] },
                    { "Label", Properties["MudBlazor.MudBooleanInput`1.Label"] },
                    { "Ripple", Properties["MudBlazor.MudBooleanInput`1.Ripple"] },
                    { "Size", Properties["MudBlazor.MudBooleanInput`1.Size"] },
                    { "Color", Properties["MudBlazor.MudBooleanInput`1.Color"] },
                    { "ChildContent", Properties["MudBlazor.MudBooleanInput`1.ChildContent"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudCheckBox`1.Classname"] },
                    { "LabelClassname", Properties["MudBlazor.MudCheckBox`1.LabelClassname"] },
                    { "IconClassname", Properties["MudBlazor.MudCheckBox`1.IconClassname"] },
                    { "BoolValue", Properties["MudBlazor.MudBooleanInput`1.BoolValue"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "OnChange", Methods["MudBlazor.MudCheckBox`1.OnChange"] },
                    { "HandleKeyDownAsync", Methods["MudBlazor.MudCheckBox`1.HandleKeyDownAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudCheckBox`1.DisposeAsyncCore"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBooleanInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBooleanInput`1.GetReadOnlyState"] },
                    { "SetBoolValueAsync", Methods["MudBlazor.MudBooleanInput`1.SetBoolValueAsync"] },
                    { "SetCheckedAsync", Methods["MudBlazor.MudBooleanInput`1.SetCheckedAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBooleanInput`1.SetConverter"] },
                    { "HasValue", Methods["MudBlazor.MudBooleanInput`1.HasValue"] },
                    { "ConvertPlacement", Methods["MudBlazor.MudBooleanInput`1.ConvertPlacement"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2.SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2.ValidateValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudFormComponent`2.ResetValueAsync"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.MudBooleanInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudChip`1", new() {
                Name = "MudChip`1", 
                NameFriendly = "MudChip<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a compact element used to enter information, select a choice, filter content, or trigger an action.", 
                Properties = { 
                    { "UriHelper", Properties["MudBlazor.MudChip`1.UriHelper"] },
                    { "JsApiService", Properties["MudBlazor.MudChip`1.JsApiService"] },
                    { "Color", Properties["MudBlazor.MudChip`1.Color"] },
                    { "SelectedColor", Properties["MudBlazor.MudChip`1.SelectedColor"] },
                    { "Size", Properties["MudBlazor.MudChip`1.Size"] },
                    { "Variant", Properties["MudBlazor.MudChip`1.Variant"] },
                    { "AvatarContent", Properties["MudBlazor.MudChip`1.AvatarContent"] },
                    { "Label", Properties["MudBlazor.MudChip`1.Label"] },
                    { "Disabled", Properties["MudBlazor.MudChip`1.Disabled"] },
                    { "Icon", Properties["MudBlazor.MudChip`1.Icon"] },
                    { "CheckedIcon", Properties["MudBlazor.MudChip`1.CheckedIcon"] },
                    { "IconColor", Properties["MudBlazor.MudChip`1.IconColor"] },
                    { "CloseIcon", Properties["MudBlazor.MudChip`1.CloseIcon"] },
                    { "Ripple", Properties["MudBlazor.MudChip`1.Ripple"] },
                    { "ChildContent", Properties["MudBlazor.MudChip`1.ChildContent"] },
                    { "Href", Properties["MudBlazor.MudChip`1.Href"] },
                    { "Target", Properties["MudBlazor.MudChip`1.Target"] },
                    { "Rel", Properties["MudBlazor.MudChip`1.Rel"] },
                    { "Text", Properties["MudBlazor.MudChip`1.Text"] },
                    { "Value", Properties["MudBlazor.MudChip`1.Value"] },
                    { "Default", Properties["MudBlazor.MudChip`1.Default"] },
                    { "Selected", Properties["MudBlazor.MudChip`1.Selected"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChip`1.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetHtmlTag", Methods["MudBlazor.MudChip`1.GetHtmlTag"] },
                    { "GetAttributes", Methods["MudBlazor.MudChip`1.GetAttributes"] },
                    { "OnCloseAsync", Methods["MudBlazor.MudChip`1.OnCloseAsync"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudChip`1.OnClick"] },
                    { "OnClose", Events["MudBlazor.MudChip`1.OnClose"] },
                    { "SelectedChanged", Events["MudBlazor.MudChip`1.SelectedChanged"] },
                },
            }},
            { "MudBlazor.MudChipSet`1", new() {
                Name = "MudChipSet`1", 
                NameFriendly = "MudChipSet<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a set of multiple <see cref=""T:MudBlazor.MudChip`1"" /> components.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudChipSet`1.ChildContent"] },
                    { "SelectionMode", Properties["MudBlazor.MudChipSet`1.SelectionMode"] },
                    { "AllClosable", Properties["MudBlazor.MudChipSet`1.AllClosable"] },
                    { "Variant", Properties["MudBlazor.MudChipSet`1.Variant"] },
                    { "Color", Properties["MudBlazor.MudChipSet`1.Color"] },
                    { "SelectedColor", Properties["MudBlazor.MudChipSet`1.SelectedColor"] },
                    { "IconColor", Properties["MudBlazor.MudChipSet`1.IconColor"] },
                    { "Size", Properties["MudBlazor.MudChipSet`1.Size"] },
                    { "CheckMark", Properties["MudBlazor.MudChipSet`1.CheckMark"] },
                    { "CheckedIcon", Properties["MudBlazor.MudChipSet`1.CheckedIcon"] },
                    { "CloseIcon", Properties["MudBlazor.MudChipSet`1.CloseIcon"] },
                    { "Ripple", Properties["MudBlazor.MudChipSet`1.Ripple"] },
                    { "Label", Properties["MudBlazor.MudChipSet`1.Label"] },
                    { "Disabled", Properties["MudBlazor.MudChipSet`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudChipSet`1.ReadOnly"] },
                    { "Comparer", Properties["MudBlazor.MudChipSet`1.Comparer"] },
                    { "SelectedValue", Properties["MudBlazor.MudChipSet`1.SelectedValue"] },
                    { "SelectedValues", Properties["MudBlazor.MudChipSet`1.SelectedValues"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChipSet`1.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "SelectedValueChanged", Events["MudBlazor.MudChipSet`1.SelectedValueChanged"] },
                    { "SelectedValuesChanged", Events["MudBlazor.MudChipSet`1.SelectedValuesChanged"] },
                    { "OnClose", Events["MudBlazor.MudChipSet`1.OnClose"] },
                },
            }},
            { "MudBlazor.MudCollapse", new() {
                Name = "MudCollapse", 
                NameFriendly = "MudCollapse", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a container for content which can be collapsed and expanded.", 
                Properties = { 
                    { "Expanded", Properties["MudBlazor.MudCollapse.Expanded"] },
                    { "MaxHeight", Properties["MudBlazor.MudCollapse.MaxHeight"] },
                    { "ChildContent", Properties["MudBlazor.MudCollapse.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudCollapse.Classname"] },
                    { "Stylename", Properties["MudBlazor.MudCollapse.Stylename"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "OnAnimationEnd", Events["MudBlazor.MudCollapse.OnAnimationEnd"] },
                    { "ExpandedChanged", Events["MudBlazor.MudCollapse.ExpandedChanged"] },
                },
            }},
            { "MudBlazor.MudColorPicker", new() {
                Name = "MudColorPicker", 
                NameFriendly = "MudColorPicker", 
                BaseTypeName = "MudPicker`1", 
                IsComponent = true, 
                Summary = @"Represents a sophisticated and customizable pop-up for choosing a color.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudColorPicker.RightToLeft"] },
                    { "ShowAlpha", Properties["MudBlazor.MudColorPicker.ShowAlpha"] },
                    { "ShowColorField", Properties["MudBlazor.MudColorPicker.ShowColorField"] },
                    { "ShowModeSwitch", Properties["MudBlazor.MudColorPicker.ShowModeSwitch"] },
                    { "ShowInputs", Properties["MudBlazor.MudColorPicker.ShowInputs"] },
                    { "ShowSliders", Properties["MudBlazor.MudColorPicker.ShowSliders"] },
                    { "ShowPreview", Properties["MudBlazor.MudColorPicker.ShowPreview"] },
                    { "ColorPickerMode", Properties["MudBlazor.MudColorPicker.ColorPickerMode"] },
                    { "ColorPickerView", Properties["MudBlazor.MudColorPicker.ColorPickerView"] },
                    { "UpdateBindingIfOnlyHSLChanged", Properties["MudBlazor.MudColorPicker.UpdateBindingIfOnlyHSLChanged"] },
                    { "Value", Properties["MudBlazor.MudColorPicker.Value"] },
                    { "Palette", Properties["MudBlazor.MudColorPicker.Palette"] },
                    { "DragEffect", Properties["MudBlazor.MudColorPicker.DragEffect"] },
                    { "CloseIcon", Properties["MudBlazor.MudColorPicker.CloseIcon"] },
                    { "SpectrumIcon", Properties["MudBlazor.MudColorPicker.SpectrumIcon"] },
                    { "GridIcon", Properties["MudBlazor.MudColorPicker.GridIcon"] },
                    { "PaletteIcon", Properties["MudBlazor.MudColorPicker.PaletteIcon"] },
                    { "ImportExportIcon", Properties["MudBlazor.MudColorPicker.ImportExportIcon"] },
                    { "ThrottleInterval", Properties["MudBlazor.MudColorPicker.ThrottleInterval"] },
                    { "AdornmentColor", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AdornmentColor"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AdornmentIcon"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AdornmentAriaLabel"] },
                    { "Placeholder", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Placeholder"] },
                    { "Elevation", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Elevation"] },
                    { "Square", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Square"] },
                    { "Rounded", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Rounded"] },
                    { "HelperText", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].HelperTextOnFocus"] },
                    { "Label", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Label"] },
                    { "Clearable", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Clearable"] },
                    { "Disabled", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Disabled"] },
                    { "Underline", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Underline"] },
                    { "ReadOnly", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ReadOnly"] },
                    { "Editable", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Editable"] },
                    { "ShowToolbar", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ShowToolbar"] },
                    { "ToolbarClass", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ToolbarClass"] },
                    { "PickerVariant", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerVariant"] },
                    { "Variant", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Variant"] },
                    { "Adornment", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Adornment"] },
                    { "Orientation", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Orientation"] },
                    { "IconSize", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].IconSize"] },
                    { "Color", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Color"] },
                    { "ImmediateText", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ImmediateText"] },
                    { "Text", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Text"] },
                    { "ActionsClass", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ActionsClass"] },
                    { "PickerActions", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerActions"] },
                    { "Margin", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Margin"] },
                    { "Mask", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Mask"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].TransformOrigin"] },
                    { "OverflowBehavior", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OverflowBehavior"] },
                    { "RelativeWidth", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].RelativeWidth"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "PickerContent", Properties["MudBlazor.MudColorPicker.PickerContent"] },
                    { "PickerClassname", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerClassname"] },
                    { "PickerPaperClassname", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerPaperClassname"] },
                    { "PickerPaperStylename", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerPaperStylename"] },
                    { "PickerInlineClassname", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerInlineClassname"] },
                    { "PickerContainerClassname", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerContainerClassname"] },
                    { "PickerInputClassname", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerInputClassname"] },
                    { "PopoverClassname", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PopoverClassname"] },
                    { "ActionsClassname", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ActionsClassname"] },
                    { "Open", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Open"] },
                    { "InputContent", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].InputContent"] },
                    { "Render", Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Render"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ChangeMode", Methods["MudBlazor.MudColorPicker.ChangeMode"] },
                    { "ChangeView", Methods["MudBlazor.MudColorPicker.ChangeView"] },
                    { "SetR", Methods["MudBlazor.MudColorPicker.SetR"] },
                    { "SetG", Methods["MudBlazor.MudColorPicker.SetG"] },
                    { "SetB", Methods["MudBlazor.MudColorPicker.SetB"] },
                    { "SetH", Methods["MudBlazor.MudColorPicker.SetH"] },
                    { "SetS", Methods["MudBlazor.MudColorPicker.SetS"] },
                    { "SetL", Methods["MudBlazor.MudColorPicker.SetL"] },
                    { "SetAlpha", Methods["MudBlazor.MudColorPicker.SetAlpha"] },
                    { "SetInputString", Methods["MudBlazor.MudColorPicker.SetInputString"] },
                    { "ToggleOpenAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ToggleOpenAsync"] },
                    { "CloseAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].CloseAsync"] },
                    { "OpenAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OpenAsync"] },
                    { "ClearAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ClearAsync"] },
                    { "FocusAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectRangeAsync"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"] },
                    { "StringValueChangedAsync", Methods["MudBlazor.MudColorPicker.StringValueChangedAsync"] },
                    { "GetDisabledState", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SetTextAsync"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ResetValueAsync"] },
                    { "OnOpenedAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnOpenedAsync"] },
                    { "OnClosedAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnClosedAsync"] },
                    { "OnPickerOpenedAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnPickerOpenedAsync"] },
                    { "OnPickerClosedAsync", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnPickerClosedAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].DisposeAsyncCore"] },
                    { "SetConverter", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.MudColorPicker.ValueChanged"] },
                    { "PickerOpened", Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerOpened"] },
                    { "PickerClosed", Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerClosed"] },
                    { "TextChanged", Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].TextChanged"] },
                    { "OnClick", Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnClick"] },
                },
            }},
            { "MudBlazor.MudComponentBase", new() {
                Name = "MudComponentBase", 
                NameFriendly = "MudComponentBase", 
                BaseTypeName = "ComponentBaseWithState", 
                Summary = @"Represents a base class for designing MudBlazor components.", 
                Properties = { 
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudContainer", new() {
                Name = "MudContainer", 
                NameFriendly = "MudContainer", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "Fixed", Properties["MudBlazor.MudContainer.Fixed"] },
                    { "MaxWidth", Properties["MudBlazor.MudContainer.MaxWidth"] },
                    { "Gutters", Properties["MudBlazor.MudContainer.Gutters"] },
                    { "ChildContent", Properties["MudBlazor.MudContainer.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudContainer.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudContextualActionBar", new() {
                Name = "MudContextualActionBar", 
                NameFriendly = "MudContextualActionBar", 
                BaseTypeName = "MudAppBar", 
                IsComponent = true, 
                Summary = @"A contextual app bar.", 
                Properties = { 
                    { "Visible", Properties["MudBlazor.MudContextualActionBar.Visible"] },
                    { "Bottom", Properties["MudBlazor.MudAppBar.Bottom"] },
                    { "Elevation", Properties["MudBlazor.MudAppBar.Elevation"] },
                    { "Dense", Properties["MudBlazor.MudAppBar.Dense"] },
                    { "Gutters", Properties["MudBlazor.MudAppBar.Gutters"] },
                    { "Color", Properties["MudBlazor.MudAppBar.Color"] },
                    { "Fixed", Properties["MudBlazor.MudAppBar.Fixed"] },
                    { "WrapContent", Properties["MudBlazor.MudAppBar.WrapContent"] },
                    { "ToolBarClass", Properties["MudBlazor.MudAppBar.ToolBarClass"] },
                    { "ChildContent", Properties["MudBlazor.MudAppBar.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudAppBar.Classname"] },
                    { "ToolBarClassname", Properties["MudBlazor.MudAppBar.ToolBarClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudDataGrid`1", new() {
                Name = "MudDataGrid`1", 
                NameFriendly = "MudDataGrid<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a sortable, filterable data grid with multiselection and pagination.", 
                Properties = { 
                    { "PagerStateHasChangedEvent", Properties["MudBlazor.MudDataGrid`1.PagerStateHasChangedEvent"] },
                    { "ColumnsPanelReordering", Properties["MudBlazor.MudDataGrid`1.ColumnsPanelReordering"] },
                    { "DragDropColumnReordering", Properties["MudBlazor.MudDataGrid`1.DragDropColumnReordering"] },
                    { "DragIndicatorIcon", Properties["MudBlazor.MudDataGrid`1.DragIndicatorIcon"] },
                    { "DragIndicatorSize", Properties["MudBlazor.MudDataGrid`1.DragIndicatorSize"] },
                    { "DropAllowedClass", Properties["MudBlazor.MudDataGrid`1.DropAllowedClass"] },
                    { "DropNotAllowedClass", Properties["MudBlazor.MudDataGrid`1.DropNotAllowedClass"] },
                    { "ApplyDropClassesOnDragStarted", Properties["MudBlazor.MudDataGrid`1.ApplyDropClassesOnDragStarted"] },
                    { "SortMode", Properties["MudBlazor.MudDataGrid`1.SortMode"] },
                    { "Filterable", Properties["MudBlazor.MudDataGrid`1.Filterable"] },
                    { "Hideable", Properties["MudBlazor.MudDataGrid`1.Hideable"] },
                    { "ShowColumnOptions", Properties["MudBlazor.MudDataGrid`1.ShowColumnOptions"] },
                    { "Breakpoint", Properties["MudBlazor.MudDataGrid`1.Breakpoint"] },
                    { "Elevation", Properties["MudBlazor.MudDataGrid`1.Elevation"] },
                    { "Square", Properties["MudBlazor.MudDataGrid`1.Square"] },
                    { "Outlined", Properties["MudBlazor.MudDataGrid`1.Outlined"] },
                    { "Bordered", Properties["MudBlazor.MudDataGrid`1.Bordered"] },
                    { "ColGroup", Properties["MudBlazor.MudDataGrid`1.ColGroup"] },
                    { "Dense", Properties["MudBlazor.MudDataGrid`1.Dense"] },
                    { "Hover", Properties["MudBlazor.MudDataGrid`1.Hover"] },
                    { "Striped", Properties["MudBlazor.MudDataGrid`1.Striped"] },
                    { "FixedHeader", Properties["MudBlazor.MudDataGrid`1.FixedHeader"] },
                    { "FixedFooter", Properties["MudBlazor.MudDataGrid`1.FixedFooter"] },
                    { "ShowFilterIcons", Properties["MudBlazor.MudDataGrid`1.ShowFilterIcons"] },
                    { "FilterMode", Properties["MudBlazor.MudDataGrid`1.FilterMode"] },
                    { "FilterCaseSensitivity", Properties["MudBlazor.MudDataGrid`1.FilterCaseSensitivity"] },
                    { "FilterTemplate", Properties["MudBlazor.MudDataGrid`1.FilterTemplate"] },
                    { "FilterDefinitions", Properties["MudBlazor.MudDataGrid`1.FilterDefinitions"] },
                    { "SortDefinitions", Properties["MudBlazor.MudDataGrid`1.SortDefinitions"] },
                    { "Virtualize", Properties["MudBlazor.MudDataGrid`1.Virtualize"] },
                    { "RowLoadingContent", Properties["MudBlazor.MudDataGrid`1.RowLoadingContent"] },
                    { "OverscanCount", Properties["MudBlazor.MudDataGrid`1.OverscanCount"] },
                    { "ItemSize", Properties["MudBlazor.MudDataGrid`1.ItemSize"] },
                    { "RowClass", Properties["MudBlazor.MudDataGrid`1.RowClass"] },
                    { "RowStyle", Properties["MudBlazor.MudDataGrid`1.RowStyle"] },
                    { "RowClassFunc", Properties["MudBlazor.MudDataGrid`1.RowClassFunc"] },
                    { "RowStyleFunc", Properties["MudBlazor.MudDataGrid`1.RowStyleFunc"] },
                    { "MultiSelection", Properties["MudBlazor.MudDataGrid`1.MultiSelection"] },
                    { "SelectOnRowClick", Properties["MudBlazor.MudDataGrid`1.SelectOnRowClick"] },
                    { "EditMode", Properties["MudBlazor.MudDataGrid`1.EditMode"] },
                    { "EditTrigger", Properties["MudBlazor.MudDataGrid`1.EditTrigger"] },
                    { "EditDialogOptions", Properties["MudBlazor.MudDataGrid`1.EditDialogOptions"] },
                    { "CloneStrategy", Properties["MudBlazor.MudDataGrid`1.CloneStrategy"] },
                    { "Items", Properties["MudBlazor.MudDataGrid`1.Items"] },
                    { "Loading", Properties["MudBlazor.MudDataGrid`1.Loading"] },
                    { "CanCancelEdit", Properties["MudBlazor.MudDataGrid`1.CanCancelEdit"] },
                    { "LoadingProgressColor", Properties["MudBlazor.MudDataGrid`1.LoadingProgressColor"] },
                    { "ToolBarContent", Properties["MudBlazor.MudDataGrid`1.ToolBarContent"] },
                    { "HorizontalScrollbar", Properties["MudBlazor.MudDataGrid`1.HorizontalScrollbar"] },
                    { "ColumnResizeMode", Properties["MudBlazor.MudDataGrid`1.ColumnResizeMode"] },
                    { "HeaderClass", Properties["MudBlazor.MudDataGrid`1.HeaderClass"] },
                    { "Height", Properties["MudBlazor.MudDataGrid`1.Height"] },
                    { "FooterClass", Properties["MudBlazor.MudDataGrid`1.FooterClass"] },
                    { "QuickFilter", Properties["MudBlazor.MudDataGrid`1.QuickFilter"] },
                    { "Header", Properties["MudBlazor.MudDataGrid`1.Header"] },
                    { "Columns", Properties["MudBlazor.MudDataGrid`1.Columns"] },
                    { "Culture", Properties["MudBlazor.MudDataGrid`1.Culture"] },
                    { "ChildRowContent", Properties["MudBlazor.MudDataGrid`1.ChildRowContent"] },
                    { "NoRecordsContent", Properties["MudBlazor.MudDataGrid`1.NoRecordsContent"] },
                    { "LoadingContent", Properties["MudBlazor.MudDataGrid`1.LoadingContent"] },
                    { "PagerContent", Properties["MudBlazor.MudDataGrid`1.PagerContent"] },
                    { "ServerData", Properties["MudBlazor.MudDataGrid`1.ServerData"] },
                    { "VirtualizeServerData", Properties["MudBlazor.MudDataGrid`1.VirtualizeServerData"] },
                    { "RowsPerPage", Properties["MudBlazor.MudDataGrid`1.RowsPerPage"] },
                    { "CurrentPage", Properties["MudBlazor.MudDataGrid`1.CurrentPage"] },
                    { "ReadOnly", Properties["MudBlazor.MudDataGrid`1.ReadOnly"] },
                    { "SelectedItems", Properties["MudBlazor.MudDataGrid`1.SelectedItems"] },
                    { "SelectedItem", Properties["MudBlazor.MudDataGrid`1.SelectedItem"] },
                    { "Groupable", Properties["MudBlazor.MudDataGrid`1.Groupable"] },
                    { "GroupExpanded", Properties["MudBlazor.MudDataGrid`1.GroupExpanded"] },
                    { "GroupClass", Properties["MudBlazor.MudDataGrid`1.GroupClass"] },
                    { "GroupStyle", Properties["MudBlazor.MudDataGrid`1.GroupStyle"] },
                    { "GroupClassFunc", Properties["MudBlazor.MudDataGrid`1.GroupClassFunc"] },
                    { "GroupStyleFunc", Properties["MudBlazor.MudDataGrid`1.GroupStyleFunc"] },
                    { "ShowMenuIcon", Properties["MudBlazor.MudDataGrid`1.ShowMenuIcon"] },
                    { "Comparer", Properties["MudBlazor.MudDataGrid`1.Comparer"] },
                    { "Selection", Properties["MudBlazor.MudDataGrid`1.Selection"] },
                    { "HasPager", Properties["MudBlazor.MudDataGrid`1.HasPager"] },
                    { "ServerItems", Properties["MudBlazor.MudDataGrid`1.ServerItems"] },
                    { "FilteredItems", Properties["MudBlazor.MudDataGrid`1.FilteredItems"] },
                    { "Validator", Properties["MudBlazor.MudDataGrid`1.Validator"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudDataGrid`1.Classname"] },
                    { "Stylename", Properties["MudBlazor.MudDataGrid`1.Stylename"] },
                    { "TableStyle", Properties["MudBlazor.MudDataGrid`1.TableStyle"] },
                    { "TableClass", Properties["MudBlazor.MudDataGrid`1.TableClass"] },
                    { "HeadClassname", Properties["MudBlazor.MudDataGrid`1.HeadClassname"] },
                    { "FootClassname", Properties["MudBlazor.MudDataGrid`1.FootClassname"] },
                    { "HeaderFooterStyle", Properties["MudBlazor.MudDataGrid`1.HeaderFooterStyle"] },
                    { "numPages", Properties["MudBlazor.MudDataGrid`1.numPages"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Fields = { 
                    { "RenderedColumns", Fields["MudBlazor.MudDataGrid`1.RenderedColumns"] },
                },
                Methods = { 
                    { "SetDefaultFilterDefinition", Methods["MudBlazor.MudDataGrid`1.SetDefaultFilterDefinition"] },
                    { "AddFilter", Methods["MudBlazor.MudDataGrid`1.AddFilter"] },
                    { "ClearFiltersAsync", Methods["MudBlazor.MudDataGrid`1.ClearFiltersAsync"] },
                    { "AddFilterAsync", Methods["MudBlazor.MudDataGrid`1.AddFilterAsync"] },
                    { "GetFilteredItemsCount", Methods["MudBlazor.MudDataGrid`1.GetFilteredItemsCount"] },
                    { "NavigateTo", Methods["MudBlazor.MudDataGrid`1.NavigateTo"] },
                    { "SetRowsPerPageAsync", Methods["MudBlazor.MudDataGrid`1.SetRowsPerPageAsync"] },
                    { "SetSortAsync", Methods["MudBlazor.MudDataGrid`1.SetSortAsync"] },
                    { "ExtendSortAsync", Methods["MudBlazor.MudDataGrid`1.ExtendSortAsync"] },
                    { "RemoveSortAsync", Methods["MudBlazor.MudDataGrid`1.RemoveSortAsync"] },
                    { "SetSelectedItemAsync", Methods["MudBlazor.MudDataGrid`1.SetSelectedItemAsync"] },
                    { "SetEditingItemAsync", Methods["MudBlazor.MudDataGrid`1.SetEditingItemAsync"] },
                    { "CancelEditingItemAsync", Methods["MudBlazor.MudDataGrid`1.CancelEditingItemAsync"] },
                    { "ToggleFiltersMenu", Methods["MudBlazor.MudDataGrid`1.ToggleFiltersMenu"] },
                    { "ReloadServerData", Methods["MudBlazor.MudDataGrid`1.ReloadServerData"] },
                    { "OpenFilters", Methods["MudBlazor.MudDataGrid`1.OpenFilters"] },
                    { "ShowColumnsPanel", Methods["MudBlazor.MudDataGrid`1.ShowColumnsPanel"] },
                    { "HideColumnsPanel", Methods["MudBlazor.MudDataGrid`1.HideColumnsPanel"] },
                    { "GroupItems", Methods["MudBlazor.MudDataGrid`1.GroupItems"] },
                    { "ExpandAllGroups", Methods["MudBlazor.MudDataGrid`1.ExpandAllGroups"] },
                    { "CollapseAllGroups", Methods["MudBlazor.MudDataGrid`1.CollapseAllGroups"] },
                    { "GetItemsOfPage", Methods["MudBlazor.MudDataGrid`1.GetItemsOfPage"] },
                },
                Events = { 
                    { "SelectedItemChanged", Events["MudBlazor.MudDataGrid`1.SelectedItemChanged"] },
                    { "SelectedItemsChanged", Events["MudBlazor.MudDataGrid`1.SelectedItemsChanged"] },
                    { "RowClick", Events["MudBlazor.MudDataGrid`1.RowClick"] },
                    { "RowContextMenuClick", Events["MudBlazor.MudDataGrid`1.RowContextMenuClick"] },
                    { "StartedEditingItem", Events["MudBlazor.MudDataGrid`1.StartedEditingItem"] },
                    { "CanceledEditingItem", Events["MudBlazor.MudDataGrid`1.CanceledEditingItem"] },
                    { "CommittedItemChanges", Events["MudBlazor.MudDataGrid`1.CommittedItemChanges"] },
                    { "FormFieldChanged", Events["MudBlazor.MudDataGrid`1.FormFieldChanged"] },
                    { "RowsPerPageChanged", Events["MudBlazor.MudDataGrid`1.RowsPerPageChanged"] },
                    { "CurrentPageChanged", Events["MudBlazor.MudDataGrid`1.CurrentPageChanged"] },
                },
            }},
            { "MudBlazor.MudDataGridPager`1", new() {
                Name = "MudDataGridPager`1", 
                NameFriendly = "MudDataGridPager<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a pager for navigating pages of a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "DataGrid", Properties["MudBlazor.MudDataGridPager`1.DataGrid"] },
                    { "PageSizeSelector", Properties["MudBlazor.MudDataGridPager`1.PageSizeSelector"] },
                    { "Disabled", Properties["MudBlazor.MudDataGridPager`1.Disabled"] },
                    { "PageSizeOptions", Properties["MudBlazor.MudDataGridPager`1.PageSizeOptions"] },
                    { "InfoFormat", Properties["MudBlazor.MudDataGridPager`1.InfoFormat"] },
                    { "RowsPerPageString", Properties["MudBlazor.MudDataGridPager`1.RowsPerPageString"] },
                    { "ShowNavigation", Properties["MudBlazor.MudDataGridPager`1.ShowNavigation"] },
                    { "ShowPageNumber", Properties["MudBlazor.MudDataGridPager`1.ShowPageNumber"] },
                    { "AllItemsText", Properties["MudBlazor.MudDataGridPager`1.AllItemsText"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudDataGridPager`1.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudDatePicker", new() {
                Name = "MudDatePicker", 
                NameFriendly = "MudDatePicker", 
                BaseTypeName = "MudBaseDatePicker", 
                IsComponent = true, 
                Summary = @"Represents a picker for dates.", 
                Properties = { 
                    { "Date", Properties["MudBlazor.MudDatePicker.Date"] },
                    { "MaxDate", Properties["MudBlazor.MudBaseDatePicker.MaxDate"] },
                    { "MinDate", Properties["MudBlazor.MudBaseDatePicker.MinDate"] },
                    { "OpenTo", Properties["MudBlazor.MudBaseDatePicker.OpenTo"] },
                    { "DateFormat", Properties["MudBlazor.MudBaseDatePicker.DateFormat"] },
                    { "FirstDayOfWeek", Properties["MudBlazor.MudBaseDatePicker.FirstDayOfWeek"] },
                    { "PickerMonth", Properties["MudBlazor.MudBaseDatePicker.PickerMonth"] },
                    { "ClosingDelay", Properties["MudBlazor.MudBaseDatePicker.ClosingDelay"] },
                    { "DisplayMonths", Properties["MudBlazor.MudBaseDatePicker.DisplayMonths"] },
                    { "MaxMonthColumns", Properties["MudBlazor.MudBaseDatePicker.MaxMonthColumns"] },
                    { "StartMonth", Properties["MudBlazor.MudBaseDatePicker.StartMonth"] },
                    { "ShowWeekNumbers", Properties["MudBlazor.MudBaseDatePicker.ShowWeekNumbers"] },
                    { "TitleDateFormat", Properties["MudBlazor.MudBaseDatePicker.TitleDateFormat"] },
                    { "AutoClose", Properties["MudBlazor.MudBaseDatePicker.AutoClose"] },
                    { "IsDateDisabledFunc", Properties["MudBlazor.MudBaseDatePicker.IsDateDisabledFunc"] },
                    { "AdditionalDateClassesFunc", Properties["MudBlazor.MudBaseDatePicker.AdditionalDateClassesFunc"] },
                    { "PreviousIcon", Properties["MudBlazor.MudBaseDatePicker.PreviousIcon"] },
                    { "NextIcon", Properties["MudBlazor.MudBaseDatePicker.NextIcon"] },
                    { "FixYear", Properties["MudBlazor.MudBaseDatePicker.FixYear"] },
                    { "FixMonth", Properties["MudBlazor.MudBaseDatePicker.FixMonth"] },
                    { "FixDay", Properties["MudBlazor.MudBaseDatePicker.FixDay"] },
                    { "AdornmentColor", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel"] },
                    { "Placeholder", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder"] },
                    { "Elevation", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Elevation"] },
                    { "Square", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Square"] },
                    { "Rounded", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rounded"] },
                    { "HelperText", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus"] },
                    { "Label", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label"] },
                    { "Clearable", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable"] },
                    { "Disabled", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled"] },
                    { "Underline", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline"] },
                    { "ReadOnly", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly"] },
                    { "Editable", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Editable"] },
                    { "ShowToolbar", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShowToolbar"] },
                    { "ToolbarClass", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToolbarClass"] },
                    { "PickerVariant", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerVariant"] },
                    { "Variant", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant"] },
                    { "Adornment", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment"] },
                    { "Orientation", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Orientation"] },
                    { "IconSize", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize"] },
                    { "Color", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Color"] },
                    { "ImmediateText", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ImmediateText"] },
                    { "Text", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"] },
                    { "ActionsClass", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClass"] },
                    { "PickerActions", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerActions"] },
                    { "Margin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin"] },
                    { "Mask", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Mask"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TransformOrigin"] },
                    { "OverflowBehavior", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OverflowBehavior"] },
                    { "RelativeWidth", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RelativeWidth"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "TimeProvider", Properties["MudBlazor.MudDatePicker.TimeProvider"] },
                    { "ScrollManager", Properties["MudBlazor.MudBaseDatePicker.ScrollManager"] },
                    { "IsRange", Properties["MudBlazor.MudBaseDatePicker.IsRange"] },
                    { "PickerContent", Properties["MudBlazor.MudBaseDatePicker.PickerContent"] },
                    { "PickerClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClassname"] },
                    { "PickerPaperClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperClassname"] },
                    { "PickerPaperStylename", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperStylename"] },
                    { "PickerInlineClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInlineClassname"] },
                    { "PickerContainerClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerContainerClassname"] },
                    { "PickerInputClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInputClassname"] },
                    { "PopoverClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PopoverClassname"] },
                    { "ActionsClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClassname"] },
                    { "Open", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Open"] },
                    { "InputContent", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputContent"] },
                    { "Render", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Render"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Fields = { 
                    { "CurrentView", Fields["MudBlazor.MudBaseDatePicker.CurrentView"] },
                },
                Methods = { 
                    { "ClearAsync", Methods["MudBlazor.MudDatePicker.ClearAsync"] },
                    { "GoToDate", Methods["MudBlazor.MudDatePicker.GoToDate"] },
                    { "ScrollToYear", Methods["MudBlazor.MudBaseDatePicker.ScrollToYear"] },
                    { "ToggleOpenAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToggleOpenAsync"] },
                    { "CloseAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CloseAsync"] },
                    { "OpenAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OpenAsync"] },
                    { "FocusAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"] },
                    { "SetDateAsync", Methods["MudBlazor.MudDatePicker.SetDateAsync"] },
                    { "DateFormatChangedAsync", Methods["MudBlazor.MudDatePicker.DateFormatChangedAsync"] },
                    { "StringValueChangedAsync", Methods["MudBlazor.MudDatePicker.StringValueChangedAsync"] },
                    { "GetDayClasses", Methods["MudBlazor.MudDatePicker.GetDayClasses"] },
                    { "OnDayClickedAsync", Methods["MudBlazor.MudDatePicker.OnDayClickedAsync"] },
                    { "OnMonthSelectedAsync", Methods["MudBlazor.MudDatePicker.OnMonthSelectedAsync"] },
                    { "OnYearClickedAsync", Methods["MudBlazor.MudDatePicker.OnYearClickedAsync"] },
                    { "OnOpenedAsync", Methods["MudBlazor.MudDatePicker.OnOpenedAsync"] },
                    { "GetTitleDateString", Methods["MudBlazor.MudDatePicker.GetTitleDateString"] },
                    { "GetCalendarStartOfMonth", Methods["MudBlazor.MudDatePicker.GetCalendarStartOfMonth"] },
                    { "GetCalendarYear", Methods["MudBlazor.MudDatePicker.GetCalendarYear"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseDatePicker.SetCulture"] },
                    { "OnPickerOpenedAsync", Methods["MudBlazor.MudBaseDatePicker.OnPickerOpenedAsync"] },
                    { "GetMonthStart", Methods["MudBlazor.MudBaseDatePicker.GetMonthStart"] },
                    { "GetMonthEnd", Methods["MudBlazor.MudBaseDatePicker.GetMonthEnd"] },
                    { "GetFirstDayOfWeek", Methods["MudBlazor.MudBaseDatePicker.GetFirstDayOfWeek"] },
                    { "GetWeek", Methods["MudBlazor.MudBaseDatePicker.GetWeek"] },
                    { "GetNextView", Methods["MudBlazor.MudBaseDatePicker.GetNextView"] },
                    { "SubmitAndCloseAsync", Methods["MudBlazor.MudBaseDatePicker.SubmitAndCloseAsync"] },
                    { "OnMonthClicked", Methods["MudBlazor.MudBaseDatePicker.OnMonthClicked"] },
                    { "GetAbbreviatedDayNames", Methods["MudBlazor.MudBaseDatePicker.GetAbbreviatedDayNames"] },
                    { "GetMonthName", Methods["MudBlazor.MudBaseDatePicker.GetMonthName"] },
                    { "FormatTitleDate", Methods["MudBlazor.MudBaseDatePicker.FormatTitleDate"] },
                    { "GetFormattedYearString", Methods["MudBlazor.MudBaseDatePicker.GetFormattedYearString"] },
                    { "GetDisabledState", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync"] },
                    { "OnClosedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClosedAsync"] },
                    { "OnPickerClosedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPickerClosedAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].DisposeAsyncCore"] },
                    { "SetConverter", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"] },
                },
                Events = { 
                    { "DateChanged", Events["MudBlazor.MudDatePicker.DateChanged"] },
                    { "PickerMonthChanged", Events["MudBlazor.MudBaseDatePicker.PickerMonthChanged"] },
                    { "PickerOpened", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerOpened"] },
                    { "PickerClosed", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClosed"] },
                    { "TextChanged", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"] },
                    { "OnClick", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClick"] },
                },
            }},
            { "MudBlazor.MudDateRangePicker", new() {
                Name = "MudDateRangePicker", 
                NameFriendly = "MudDateRangePicker", 
                BaseTypeName = "MudBaseDatePicker", 
                IsComponent = true, 
                Summary = @"Represents a picker for a range of dates.", 
                Properties = { 
                    { "PlaceholderStart", Properties["MudBlazor.MudDateRangePicker.PlaceholderStart"] },
                    { "PlaceholderEnd", Properties["MudBlazor.MudDateRangePicker.PlaceholderEnd"] },
                    { "SeparatorIcon", Properties["MudBlazor.MudDateRangePicker.SeparatorIcon"] },
                    { "DateRange", Properties["MudBlazor.MudDateRangePicker.DateRange"] },
                    { "AllowDisabledDatesInRange", Properties["MudBlazor.MudDateRangePicker.AllowDisabledDatesInRange"] },
                    { "MaxDate", Properties["MudBlazor.MudBaseDatePicker.MaxDate"] },
                    { "MinDate", Properties["MudBlazor.MudBaseDatePicker.MinDate"] },
                    { "OpenTo", Properties["MudBlazor.MudBaseDatePicker.OpenTo"] },
                    { "DateFormat", Properties["MudBlazor.MudBaseDatePicker.DateFormat"] },
                    { "FirstDayOfWeek", Properties["MudBlazor.MudBaseDatePicker.FirstDayOfWeek"] },
                    { "PickerMonth", Properties["MudBlazor.MudBaseDatePicker.PickerMonth"] },
                    { "ClosingDelay", Properties["MudBlazor.MudBaseDatePicker.ClosingDelay"] },
                    { "DisplayMonths", Properties["MudBlazor.MudBaseDatePicker.DisplayMonths"] },
                    { "MaxMonthColumns", Properties["MudBlazor.MudBaseDatePicker.MaxMonthColumns"] },
                    { "StartMonth", Properties["MudBlazor.MudBaseDatePicker.StartMonth"] },
                    { "ShowWeekNumbers", Properties["MudBlazor.MudBaseDatePicker.ShowWeekNumbers"] },
                    { "TitleDateFormat", Properties["MudBlazor.MudBaseDatePicker.TitleDateFormat"] },
                    { "AutoClose", Properties["MudBlazor.MudBaseDatePicker.AutoClose"] },
                    { "IsDateDisabledFunc", Properties["MudBlazor.MudBaseDatePicker.IsDateDisabledFunc"] },
                    { "AdditionalDateClassesFunc", Properties["MudBlazor.MudBaseDatePicker.AdditionalDateClassesFunc"] },
                    { "PreviousIcon", Properties["MudBlazor.MudBaseDatePicker.PreviousIcon"] },
                    { "NextIcon", Properties["MudBlazor.MudBaseDatePicker.NextIcon"] },
                    { "FixYear", Properties["MudBlazor.MudBaseDatePicker.FixYear"] },
                    { "FixMonth", Properties["MudBlazor.MudBaseDatePicker.FixMonth"] },
                    { "FixDay", Properties["MudBlazor.MudBaseDatePicker.FixDay"] },
                    { "AdornmentColor", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel"] },
                    { "Placeholder", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder"] },
                    { "Elevation", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Elevation"] },
                    { "Square", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Square"] },
                    { "Rounded", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rounded"] },
                    { "HelperText", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus"] },
                    { "Label", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label"] },
                    { "Clearable", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable"] },
                    { "Disabled", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled"] },
                    { "Underline", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline"] },
                    { "ReadOnly", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly"] },
                    { "Editable", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Editable"] },
                    { "ShowToolbar", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShowToolbar"] },
                    { "ToolbarClass", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToolbarClass"] },
                    { "PickerVariant", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerVariant"] },
                    { "Variant", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant"] },
                    { "Adornment", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment"] },
                    { "Orientation", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Orientation"] },
                    { "IconSize", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize"] },
                    { "Color", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Color"] },
                    { "ImmediateText", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ImmediateText"] },
                    { "Text", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"] },
                    { "ActionsClass", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClass"] },
                    { "PickerActions", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerActions"] },
                    { "Margin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin"] },
                    { "Mask", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Mask"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TransformOrigin"] },
                    { "OverflowBehavior", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OverflowBehavior"] },
                    { "RelativeWidth", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RelativeWidth"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "IsRange", Properties["MudBlazor.MudDateRangePicker.IsRange"] },
                    { "InputContent", Properties["MudBlazor.MudDateRangePicker.InputContent"] },
                    { "ScrollManager", Properties["MudBlazor.MudBaseDatePicker.ScrollManager"] },
                    { "PickerContent", Properties["MudBlazor.MudBaseDatePicker.PickerContent"] },
                    { "PickerClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClassname"] },
                    { "PickerPaperClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperClassname"] },
                    { "PickerPaperStylename", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperStylename"] },
                    { "PickerInlineClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInlineClassname"] },
                    { "PickerContainerClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerContainerClassname"] },
                    { "PickerInputClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInputClassname"] },
                    { "PopoverClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PopoverClassname"] },
                    { "ActionsClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClassname"] },
                    { "Open", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Open"] },
                    { "Render", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Render"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Fields = { 
                    { "CurrentView", Fields["MudBlazor.MudBaseDatePicker.CurrentView"] },
                },
                Methods = { 
                    { "FocusStartAsync", Methods["MudBlazor.MudDateRangePicker.FocusStartAsync"] },
                    { "SelectStartAsync", Methods["MudBlazor.MudDateRangePicker.SelectStartAsync"] },
                    { "SelectRangeStartAsync", Methods["MudBlazor.MudDateRangePicker.SelectRangeStartAsync"] },
                    { "FocusEndAsync", Methods["MudBlazor.MudDateRangePicker.FocusEndAsync"] },
                    { "SelectEndAsync", Methods["MudBlazor.MudDateRangePicker.SelectEndAsync"] },
                    { "SelectRangeEndAsync", Methods["MudBlazor.MudDateRangePicker.SelectRangeEndAsync"] },
                    { "ClearAsync", Methods["MudBlazor.MudDateRangePicker.ClearAsync"] },
                    { "ScrollToYear", Methods["MudBlazor.MudBaseDatePicker.ScrollToYear"] },
                    { "ToggleOpenAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToggleOpenAsync"] },
                    { "CloseAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CloseAsync"] },
                    { "OpenAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OpenAsync"] },
                    { "FocusAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"] },
                    { "SetDateRangeAsync", Methods["MudBlazor.MudDateRangePicker.SetDateRangeAsync"] },
                    { "DateFormatChangedAsync", Methods["MudBlazor.MudDateRangePicker.DateFormatChangedAsync"] },
                    { "StringValueChangedAsync", Methods["MudBlazor.MudDateRangePicker.StringValueChangedAsync"] },
                    { "HasValue", Methods["MudBlazor.MudDateRangePicker.HasValue"] },
                    { "OnPickerClosedAsync", Methods["MudBlazor.MudDateRangePicker.OnPickerClosedAsync"] },
                    { "GetDayClasses", Methods["MudBlazor.MudDateRangePicker.GetDayClasses"] },
                    { "OnDayClickedAsync", Methods["MudBlazor.MudDateRangePicker.OnDayClickedAsync"] },
                    { "OnOpenedAsync", Methods["MudBlazor.MudDateRangePicker.OnOpenedAsync"] },
                    { "GetTitleDateString", Methods["MudBlazor.MudDateRangePicker.GetTitleDateString"] },
                    { "GetCalendarStartOfMonth", Methods["MudBlazor.MudDateRangePicker.GetCalendarStartOfMonth"] },
                    { "GetCalendarYear", Methods["MudBlazor.MudDateRangePicker.GetCalendarYear"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseDatePicker.SetCulture"] },
                    { "OnPickerOpenedAsync", Methods["MudBlazor.MudBaseDatePicker.OnPickerOpenedAsync"] },
                    { "GetMonthStart", Methods["MudBlazor.MudBaseDatePicker.GetMonthStart"] },
                    { "GetMonthEnd", Methods["MudBlazor.MudBaseDatePicker.GetMonthEnd"] },
                    { "GetFirstDayOfWeek", Methods["MudBlazor.MudBaseDatePicker.GetFirstDayOfWeek"] },
                    { "GetWeek", Methods["MudBlazor.MudBaseDatePicker.GetWeek"] },
                    { "GetNextView", Methods["MudBlazor.MudBaseDatePicker.GetNextView"] },
                    { "SubmitAndCloseAsync", Methods["MudBlazor.MudBaseDatePicker.SubmitAndCloseAsync"] },
                    { "OnMonthSelectedAsync", Methods["MudBlazor.MudBaseDatePicker.OnMonthSelectedAsync"] },
                    { "OnYearClickedAsync", Methods["MudBlazor.MudBaseDatePicker.OnYearClickedAsync"] },
                    { "OnMonthClicked", Methods["MudBlazor.MudBaseDatePicker.OnMonthClicked"] },
                    { "GetAbbreviatedDayNames", Methods["MudBlazor.MudBaseDatePicker.GetAbbreviatedDayNames"] },
                    { "GetMonthName", Methods["MudBlazor.MudBaseDatePicker.GetMonthName"] },
                    { "FormatTitleDate", Methods["MudBlazor.MudBaseDatePicker.FormatTitleDate"] },
                    { "GetFormattedYearString", Methods["MudBlazor.MudBaseDatePicker.GetFormattedYearString"] },
                    { "GetDisabledState", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync"] },
                    { "OnClosedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClosedAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].DisposeAsyncCore"] },
                    { "SetConverter", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"] },
                },
                Events = { 
                    { "DateRangeChanged", Events["MudBlazor.MudDateRangePicker.DateRangeChanged"] },
                    { "PickerMonthChanged", Events["MudBlazor.MudBaseDatePicker.PickerMonthChanged"] },
                    { "PickerOpened", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerOpened"] },
                    { "PickerClosed", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClosed"] },
                    { "TextChanged", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"] },
                    { "OnClick", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClick"] },
                },
            }},
            { "MudBlazor.MudDebouncedInput`1", new() {
                Name = "MudDebouncedInput`1", 
                NameFriendly = "MudDebouncedInput<T>", 
                BaseTypeName = "MudBaseInput`1", 
                IsComponent = true, 
                Summary = @"A base class for designing input components which update after a delay.", 
                Properties = { 
                    { "DebounceInterval", Properties["MudBlazor.MudDebouncedInput`1.DebounceInterval"] },
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1.ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1.FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1.Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1.Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1.HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1.HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1.HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1.AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1.AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1.Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1.OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1.AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1.AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1.IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1.Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1.Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1.Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1.Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1.Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1.MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1.Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1.AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1.Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1.Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1.TextUpdateSuppression"] },
                    { "InputMode", Properties["MudBlazor.MudBaseInput`1.InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudBaseInput`1.Pattern"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1.ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1.Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1.Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1.InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1.InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudBaseInput`1.FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudBaseInput`1.BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudBaseInput`1.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudBaseInput`1.SelectRangeAsync"] },
                    { "ForceUpdate", Methods["MudBlazor.MudBaseInput`1.ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1.ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "OnChange", Methods["MudBlazor.MudDebouncedInput`1.OnChange"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudDebouncedInput`1.UpdateTextPropertyAsync"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudDebouncedInput`1.UpdateValuePropertyAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudDebouncedInput`1.DisposeAsyncCore"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1.GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudBaseInput`1.SetTextAsync"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyUpAsync"] },
                    { "SetValueAsync", Methods["MudBlazor.MudBaseInput`1.SetValueAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1.SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1.SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1.ValidateValue"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudBaseInput`1.ResetValueAsync"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1.GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1.GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "OnDebounceIntervalElapsed", Events["MudBlazor.MudDebouncedInput`1.OnDebounceIntervalElapsed"] },
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1.OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1.TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1.OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1.OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1.OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1.OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudDialog", new() {
                Name = "MudDialog", 
                NameFriendly = "MudDialog", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"An overlay providing the user with information, a choice, or other input.", 
                Properties = { 
                    { "TitleContent", Properties["MudBlazor.MudDialog.TitleContent"] },
                    { "DialogContent", Properties["MudBlazor.MudDialog.DialogContent"] },
                    { "DialogActions", Properties["MudBlazor.MudDialog.DialogActions"] },
                    { "Options", Properties["MudBlazor.MudDialog.Options"] },
                    { "Gutters", Properties["MudBlazor.MudDialog.Gutters"] },
                    { "TitleClass", Properties["MudBlazor.MudDialog.TitleClass"] },
                    { "ContentClass", Properties["MudBlazor.MudDialog.ContentClass"] },
                    { "ActionsClass", Properties["MudBlazor.MudDialog.ActionsClass"] },
                    { "ContentStyle", Properties["MudBlazor.MudDialog.ContentStyle"] },
                    { "Visible", Properties["MudBlazor.MudDialog.Visible"] },
                    { "DefaultFocus", Properties["MudBlazor.MudDialog.DefaultFocus"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "ContentClassname", Properties["MudBlazor.MudDialog.ContentClassname"] },
                    { "ActionsClassname", Properties["MudBlazor.MudDialog.ActionsClassname"] },
                    { "DialogService", Properties["MudBlazor.MudDialog.DialogService"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                GlobalSettings = { 
                    { "DefaultFocus", Properties["MudBlazor.MudGlobal+DialogDefaults.DefaultFocus"] },
                },
                Methods = { 
                    { "ShowAsync", Methods["MudBlazor.MudDialog.ShowAsync"] },
                    { "CloseAsync", Methods["MudBlazor.MudDialog.CloseAsync"] },
                },
                Events = { 
                    { "OnBackdropClick", Events["MudBlazor.MudDialog.OnBackdropClick"] },
                    { "OnKeyDown", Events["MudBlazor.MudDialog.OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudDialog.OnKeyUp"] },
                    { "VisibleChanged", Events["MudBlazor.MudDialog.VisibleChanged"] },
                },
            }},
            { "MudBlazor.MudDialogContainer", new() {
                Name = "MudDialogContainer", 
                NameFriendly = "MudDialogContainer", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"An instance of a <see cref=""T:MudBlazor.MudDialog"" />.", 
                Remarks = @"When a <see cref=""T:MudBlazor.MudDialog"" /> is shown, a new instance is created.  This instance can then be used to perform actions such as hiding the dialog programmatically.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudDialogContainer.RightToLeft"] },
                    { "Options", Properties["MudBlazor.MudDialogContainer.Options"] },
                    { "Title", Properties["MudBlazor.MudDialogContainer.Title"] },
                    { "TitleContent", Properties["MudBlazor.MudDialogContainer.TitleContent"] },
                    { "Content", Properties["MudBlazor.MudDialogContainer.Content"] },
                    { "Id", Properties["MudBlazor.MudDialogContainer.Id"] },
                    { "CloseIcon", Properties["MudBlazor.MudDialogContainer.CloseIcon"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "TitleClassname", Properties["MudBlazor.MudDialogContainer.TitleClassname"] },
                    { "Classname", Properties["MudBlazor.MudDialogContainer.Classname"] },
                    { "BackgroundClassname", Properties["MudBlazor.MudDialogContainer.BackgroundClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "DisposeAsyncCore", Methods["MudBlazor.MudDialogContainer.DisposeAsyncCore"] },
                },
            }},
            { "MudBlazor.MudDialogProvider", new() {
                Name = "MudDialogProvider", 
                NameFriendly = "MudDialogProvider", 
                BaseTypeName = "ComponentBase", 
                Summary = @"A manager for <see cref=""T:MudBlazor.MudDialog"" /> instances.", 
                Remarks = @"Add this component to your layout page if your application needs to display dialogs.", 
                Properties = { 
                    { "NoHeader", Properties["MudBlazor.MudDialogProvider.NoHeader"] },
                    { "CloseButton", Properties["MudBlazor.MudDialogProvider.CloseButton"] },
                    { "BackdropClick", Properties["MudBlazor.MudDialogProvider.BackdropClick"] },
                    { "CloseOnEscapeKey", Properties["MudBlazor.MudDialogProvider.CloseOnEscapeKey"] },
                    { "FullWidth", Properties["MudBlazor.MudDialogProvider.FullWidth"] },
                    { "Position", Properties["MudBlazor.MudDialogProvider.Position"] },
                    { "MaxWidth", Properties["MudBlazor.MudDialogProvider.MaxWidth"] },
                    { "BackgroundClass", Properties["MudBlazor.MudDialogProvider.BackgroundClass"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "DismissAll", Methods["MudBlazor.MudDialogProvider.DismissAll"] },
                },
            }},
            { "MudBlazor.MudDivider", new() {
                Name = "MudDivider", 
                NameFriendly = "MudDivider", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A thin line that groups content in lists and layouts.", 
                Properties = { 
                    { "Absolute", Properties["MudBlazor.MudDivider.Absolute"] },
                    { "FlexItem", Properties["MudBlazor.MudDivider.FlexItem"] },
                    { "Light", Properties["MudBlazor.MudDivider.Light"] },
                    { "Vertical", Properties["MudBlazor.MudDivider.Vertical"] },
                    { "DividerType", Properties["MudBlazor.MudDivider.DividerType"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudDivider.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudDragAndDropIndexChangedEventArgs", new() {
                Name = "MudDragAndDropIndexChangedEventArgs", 
                NameFriendly = "MudDragAndDropIndexChangedEventArgs", 
                BaseTypeName = "EventArgs", 
                Summary = @"The information related to a <see cref=""T:MudBlazor.MudDropZone`1"" /> index change event.", 
                Properties = { 
                    { "ZoneIdentifier", Properties["MudBlazor.MudDragAndDropIndexChangedEventArgs.ZoneIdentifier"] },
                    { "Index", Properties["MudBlazor.MudDragAndDropIndexChangedEventArgs.Index"] },
                    { "OldZoneIdentifier", Properties["MudBlazor.MudDragAndDropIndexChangedEventArgs.OldZoneIdentifier"] },
                },
            }},
            { "MudBlazor.MudDragAndDropItemTransaction`1", new() {
                Name = "MudDragAndDropItemTransaction`1", 
                NameFriendly = "MudDragAndDropItemTransaction<T>", 
                BaseTypeName = "Object", 
                Summary = @"The information related to a <see cref=""T:MudBlazor.MudDropZone`1"" /> drag-and-drop transaction.", 
                Properties = { 
                    { "Item", Properties["MudBlazor.MudDragAndDropItemTransaction`1.Item"] },
                    { "Index", Properties["MudBlazor.MudDragAndDropItemTransaction`1.Index"] },
                    { "SourceIndex", Properties["MudBlazor.MudDragAndDropItemTransaction`1.SourceIndex"] },
                    { "SourceZoneIdentifier", Properties["MudBlazor.MudDragAndDropItemTransaction`1.SourceZoneIdentifier"] },
                    { "CurrentZone", Properties["MudBlazor.MudDragAndDropItemTransaction`1.CurrentZone"] },
                },
                Methods = { 
                    { "Cancel", Methods["MudBlazor.MudDragAndDropItemTransaction`1.Cancel"] },
                    { "Commit", Methods["MudBlazor.MudDragAndDropItemTransaction`1.Commit"] },
                },
            }},
            { "MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1", new() {
                Name = "MudDragAndDropTransactionFinishedEventArgs`1", 
                NameFriendly = "MudDragAndDropTransactionFinishedEventArgs<T>", 
                BaseTypeName = "EventArgs", 
                Summary = @"The information related to a <see cref=""T:MudBlazor.MudDropZone`1"" /> completed drag-and-drop transaction.", 
                Properties = { 
                    { "Item", Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.Item"] },
                    { "Success", Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.Success"] },
                    { "OriginatedDropzoneIdentifier", Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.OriginatedDropzoneIdentifier"] },
                    { "DestinationDropzoneIdentifier", Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.DestinationDropzoneIdentifier"] },
                    { "OriginIndex", Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.OriginIndex"] },
                    { "DestinationIndex", Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.DestinationIndex"] },
                },
            }},
            { "MudBlazor.MudDrawer", new() {
                Name = "MudDrawer", 
                NameFriendly = "MudDrawer", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a navigation panel docked to the side of the page.", 
                Properties = { 
                    { "Fixed", Properties["MudBlazor.MudDrawer.Fixed"] },
                    { "Elevation", Properties["MudBlazor.MudDrawer.Elevation"] },
                    { "Anchor", Properties["MudBlazor.MudDrawer.Anchor"] },
                    { "Color", Properties["MudBlazor.MudDrawer.Color"] },
                    { "Variant", Properties["MudBlazor.MudDrawer.Variant"] },
                    { "ChildContent", Properties["MudBlazor.MudDrawer.ChildContent"] },
                    { "Overlay", Properties["MudBlazor.MudDrawer.Overlay"] },
                    { "OverlayAutoClose", Properties["MudBlazor.MudDrawer.OverlayAutoClose"] },
                    { "OpenMiniOnHover", Properties["MudBlazor.MudDrawer.OpenMiniOnHover"] },
                    { "Breakpoint", Properties["MudBlazor.MudDrawer.Breakpoint"] },
                    { "Open", Properties["MudBlazor.MudDrawer.Open"] },
                    { "Width", Properties["MudBlazor.MudDrawer.Width"] },
                    { "MiniWidth", Properties["MudBlazor.MudDrawer.MiniWidth"] },
                    { "Height", Properties["MudBlazor.MudDrawer.Height"] },
                    { "ClipMode", Properties["MudBlazor.MudDrawer.ClipMode"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudDrawer.Classname"] },
                    { "OverlayClass", Properties["MudBlazor.MudDrawer.OverlayClass"] },
                    { "Stylename", Properties["MudBlazor.MudDrawer.Stylename"] },
                    { "BrowserViewportService", Properties["MudBlazor.MudDrawer.BrowserViewportService"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "OpenChanged", Events["MudBlazor.MudDrawer.OpenChanged"] },
                },
            }},
            { "MudBlazor.MudDrawerContainer", new() {
                Name = "MudDrawerContainer", 
                NameFriendly = "MudDrawerContainer", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A container for a <see cref=""T:MudBlazor.MudDrawer"" /> component.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudDrawerContainer.RightToLeft"] },
                    { "ChildContent", Properties["MudBlazor.MudDrawerContainer.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Fixed", Properties["MudBlazor.MudDrawerContainer.Fixed"] },
                    { "Classname", Properties["MudBlazor.MudDrawerContainer.Classname"] },
                    { "Stylename", Properties["MudBlazor.MudDrawerContainer.Stylename"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudDrawerHeader", new() {
                Name = "MudDrawerHeader", 
                NameFriendly = "MudDrawerHeader", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents content at the top of a <see cref=""T:MudBlazor.MudDrawer"" />.", 
                Properties = { 
                    { "Dense", Properties["MudBlazor.MudDrawerHeader.Dense"] },
                    { "LinkToIndex", Properties["MudBlazor.MudDrawerHeader.LinkToIndex"] },
                    { "ChildContent", Properties["MudBlazor.MudDrawerHeader.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudDrawerHeader.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudDropContainer`1", new() {
                Name = "MudDropContainer`1", 
                NameFriendly = "MudDropContainer<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A container of <see cref=""T:MudBlazor.MudDropZone`1"" /> components for drag-and-drop operations.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudDropContainer`1.ChildContent"] },
                    { "Items", Properties["MudBlazor.MudDropContainer`1.Items"] },
                    { "ItemRenderer", Properties["MudBlazor.MudDropContainer`1.ItemRenderer"] },
                    { "ItemsSelector", Properties["MudBlazor.MudDropContainer`1.ItemsSelector"] },
                    { "CanDrop", Properties["MudBlazor.MudDropContainer`1.CanDrop"] },
                    { "CanDropClass", Properties["MudBlazor.MudDropContainer`1.CanDropClass"] },
                    { "NoDropClass", Properties["MudBlazor.MudDropContainer`1.NoDropClass"] },
                    { "ApplyDropClassesOnDragStarted", Properties["MudBlazor.MudDropContainer`1.ApplyDropClassesOnDragStarted"] },
                    { "ItemDisabled", Properties["MudBlazor.MudDropContainer`1.ItemDisabled"] },
                    { "DisabledClass", Properties["MudBlazor.MudDropContainer`1.DisabledClass"] },
                    { "DraggingClass", Properties["MudBlazor.MudDropContainer`1.DraggingClass"] },
                    { "ItemDraggingClass", Properties["MudBlazor.MudDropContainer`1.ItemDraggingClass"] },
                    { "ItemsClassSelector", Properties["MudBlazor.MudDropContainer`1.ItemsClassSelector"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudDropContainer`1.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "StartTransaction", Methods["MudBlazor.MudDropContainer`1.StartTransaction"] },
                    { "GetTransactionItem", Methods["MudBlazor.MudDropContainer`1.GetTransactionItem"] },
                    { "TransactionInProgress", Methods["MudBlazor.MudDropContainer`1.TransactionInProgress"] },
                    { "GetTransactionOriginZoneIdentifier", Methods["MudBlazor.MudDropContainer`1.GetTransactionOriginZoneIdentifier"] },
                    { "GetTransactionCurrentZoneIdentifier", Methods["MudBlazor.MudDropContainer`1.GetTransactionCurrentZoneIdentifier"] },
                    { "IsTransactionOriginatedFromInside", Methods["MudBlazor.MudDropContainer`1.IsTransactionOriginatedFromInside"] },
                    { "GetTransactionIndex", Methods["MudBlazor.MudDropContainer`1.GetTransactionIndex"] },
                    { "IsItemMovedDownwards", Methods["MudBlazor.MudDropContainer`1.IsItemMovedDownwards"] },
                    { "HasTransactionIndexChanged", Methods["MudBlazor.MudDropContainer`1.HasTransactionIndexChanged"] },
                    { "IsOrigin", Methods["MudBlazor.MudDropContainer`1.IsOrigin"] },
                    { "CommitTransaction", Methods["MudBlazor.MudDropContainer`1.CommitTransaction"] },
                    { "CancelTransaction", Methods["MudBlazor.MudDropContainer`1.CancelTransaction"] },
                    { "UpdateTransactionIndex", Methods["MudBlazor.MudDropContainer`1.UpdateTransactionIndex"] },
                    { "Refresh", Methods["MudBlazor.MudDropContainer`1.Refresh"] },
                },
                Events = { 
                    { "ItemDropped", Events["MudBlazor.MudDropContainer`1.ItemDropped"] },
                    { "ItemPicked", Events["MudBlazor.MudDropContainer`1.ItemPicked"] },
                    { "TransactionStarted", Events["MudBlazor.MudDropContainer`1.TransactionStarted"] },
                    { "TransactionIndexChanged", Events["MudBlazor.MudDropContainer`1.TransactionIndexChanged"] },
                    { "TransactionEnded", Events["MudBlazor.MudDropContainer`1.TransactionEnded"] },
                    { "RefreshRequested", Events["MudBlazor.MudDropContainer`1.RefreshRequested"] },
                },
            }},
            { "MudBlazor.MudDropZone`1", new() {
                Name = "MudDropZone`1", 
                NameFriendly = "MudDropZone<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A location which can participate in a drag-and-drop operation.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudDropZone`1.ChildContent"] },
                    { "Identifier", Properties["MudBlazor.MudDropZone`1.Identifier"] },
                    { "ItemRenderer", Properties["MudBlazor.MudDropZone`1.ItemRenderer"] },
                    { "ItemsSelector", Properties["MudBlazor.MudDropZone`1.ItemsSelector"] },
                    { "CanDrop", Properties["MudBlazor.MudDropZone`1.CanDrop"] },
                    { "CanDropClass", Properties["MudBlazor.MudDropZone`1.CanDropClass"] },
                    { "NoDropClass", Properties["MudBlazor.MudDropZone`1.NoDropClass"] },
                    { "ApplyDropClassesOnDragStarted", Properties["MudBlazor.MudDropZone`1.ApplyDropClassesOnDragStarted"] },
                    { "ItemDisabled", Properties["MudBlazor.MudDropZone`1.ItemDisabled"] },
                    { "DisabledClass", Properties["MudBlazor.MudDropZone`1.DisabledClass"] },
                    { "DraggingClass", Properties["MudBlazor.MudDropZone`1.DraggingClass"] },
                    { "ItemDraggingClass", Properties["MudBlazor.MudDropZone`1.ItemDraggingClass"] },
                    { "ItemsClassSelector", Properties["MudBlazor.MudDropZone`1.ItemsClassSelector"] },
                    { "AllowReorder", Properties["MudBlazor.MudDropZone`1.AllowReorder"] },
                    { "OnlyZone", Properties["MudBlazor.MudDropZone`1.OnlyZone"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Container", Properties["MudBlazor.MudDropZone`1.Container"] },
                    { "Classname", Properties["MudBlazor.MudDropZone`1.Classname"] },
                    { "PlaceholderClassname", Properties["MudBlazor.MudDropZone`1.PlaceholderClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudDynamicDropItem`1", new() {
                Name = "MudDynamicDropItem`1", 
                NameFriendly = "MudDynamicDropItem<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "ZoneIdentifier", Properties["MudBlazor.MudDynamicDropItem`1.ZoneIdentifier"] },
                    { "Item", Properties["MudBlazor.MudDynamicDropItem`1.Item"] },
                    { "ChildContent", Properties["MudBlazor.MudDynamicDropItem`1.ChildContent"] },
                    { "DraggingClass", Properties["MudBlazor.MudDynamicDropItem`1.DraggingClass"] },
                    { "Disabled", Properties["MudBlazor.MudDynamicDropItem`1.Disabled"] },
                    { "DisabledClass", Properties["MudBlazor.MudDynamicDropItem`1.DisabledClass"] },
                    { "Index", Properties["MudBlazor.MudDynamicDropItem`1.Index"] },
                    { "HideContent", Properties["MudBlazor.MudDynamicDropItem`1.HideContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Container", Properties["MudBlazor.MudDynamicDropItem`1.Container"] },
                    { "Classname", Properties["MudBlazor.MudDynamicDropItem`1.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "OnDragStarted", Events["MudBlazor.MudDynamicDropItem`1.OnDragStarted"] },
                    { "OnDragEnded", Events["MudBlazor.MudDynamicDropItem`1.OnDragEnded"] },
                },
            }},
            { "MudBlazor.MudDynamicTabs", new() {
                Name = "MudDynamicTabs", 
                NameFriendly = "MudDynamicTabs", 
                BaseTypeName = "MudTabs", 
                IsComponent = true, 
                Properties = { 
                    { "AddTabIcon", Properties["MudBlazor.MudDynamicTabs.AddTabIcon"] },
                    { "CloseTabIcon", Properties["MudBlazor.MudDynamicTabs.CloseTabIcon"] },
                    { "AddIconClass", Properties["MudBlazor.MudDynamicTabs.AddIconClass"] },
                    { "AddIconStyle", Properties["MudBlazor.MudDynamicTabs.AddIconStyle"] },
                    { "CloseIconClass", Properties["MudBlazor.MudDynamicTabs.CloseIconClass"] },
                    { "CloseIconStyle", Properties["MudBlazor.MudDynamicTabs.CloseIconStyle"] },
                    { "AddIconToolTip", Properties["MudBlazor.MudDynamicTabs.AddIconToolTip"] },
                    { "CloseIconToolTip", Properties["MudBlazor.MudDynamicTabs.CloseIconToolTip"] },
                    { "Render", Properties["MudBlazor.MudDynamicTabs.Render"] },
                    { "RightToLeft", Properties["MudBlazor.MudTabs.RightToLeft"] },
                    { "KeepPanelsAlive", Properties["MudBlazor.MudTabs.KeepPanelsAlive"] },
                    { "Rounded", Properties["MudBlazor.MudTabs.Rounded"] },
                    { "Border", Properties["MudBlazor.MudTabs.Border"] },
                    { "Outlined", Properties["MudBlazor.MudTabs.Outlined"] },
                    { "Centered", Properties["MudBlazor.MudTabs.Centered"] },
                    { "HideSlider", Properties["MudBlazor.MudTabs.HideSlider"] },
                    { "PrevIcon", Properties["MudBlazor.MudTabs.PrevIcon"] },
                    { "NextIcon", Properties["MudBlazor.MudTabs.NextIcon"] },
                    { "AlwaysShowScrollButtons", Properties["MudBlazor.MudTabs.AlwaysShowScrollButtons"] },
                    { "MaxHeight", Properties["MudBlazor.MudTabs.MaxHeight"] },
                    { "MinimumTabWidth", Properties["MudBlazor.MudTabs.MinimumTabWidth"] },
                    { "Position", Properties["MudBlazor.MudTabs.Position"] },
                    { "Color", Properties["MudBlazor.MudTabs.Color"] },
                    { "SliderColor", Properties["MudBlazor.MudTabs.SliderColor"] },
                    { "IconColor", Properties["MudBlazor.MudTabs.IconColor"] },
                    { "ScrollIconColor", Properties["MudBlazor.MudTabs.ScrollIconColor"] },
                    { "Elevation", Properties["MudBlazor.MudTabs.Elevation"] },
                    { "ApplyEffectsToContainer", Properties["MudBlazor.MudTabs.ApplyEffectsToContainer"] },
                    { "Ripple", Properties["MudBlazor.MudTabs.Ripple"] },
                    { "SliderAnimation", Properties["MudBlazor.MudTabs.SliderAnimation"] },
                    { "ChildContent", Properties["MudBlazor.MudTabs.ChildContent"] },
                    { "PrePanelContent", Properties["MudBlazor.MudTabs.PrePanelContent"] },
                    { "TabPanelClass", Properties["MudBlazor.MudTabs.TabPanelClass"] },
                    { "TabHeaderClass", Properties["MudBlazor.MudTabs.TabHeaderClass"] },
                    { "ActiveTabClass", Properties["MudBlazor.MudTabs.ActiveTabClass"] },
                    { "PanelClass", Properties["MudBlazor.MudTabs.PanelClass"] },
                    { "ActivePanel", Properties["MudBlazor.MudTabs.ActivePanel"] },
                    { "ActivePanelIndex", Properties["MudBlazor.MudTabs.ActivePanelIndex"] },
                    { "Panels", Properties["MudBlazor.MudTabs.Panels"] },
                    { "Header", Properties["MudBlazor.MudTabs.Header"] },
                    { "HeaderPosition", Properties["MudBlazor.MudTabs.HeaderPosition"] },
                    { "TabPanelHeader", Properties["MudBlazor.MudTabs.TabPanelHeader"] },
                    { "TabPanelHeaderPosition", Properties["MudBlazor.MudTabs.TabPanelHeaderPosition"] },
                    { "OnPreviewInteraction", Properties["MudBlazor.MudTabs.OnPreviewInteraction"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "InternalClassName", Properties["MudBlazor.MudDynamicTabs.InternalClassName"] },
                    { "TabsClassnames", Properties["MudBlazor.MudTabs.TabsClassnames"] },
                    { "TabBarClassnames", Properties["MudBlazor.MudTabs.TabBarClassnames"] },
                    { "WrapperClassnames", Properties["MudBlazor.MudTabs.WrapperClassnames"] },
                    { "WrapperScrollStyle", Properties["MudBlazor.MudTabs.WrapperScrollStyle"] },
                    { "PanelsClassnames", Properties["MudBlazor.MudTabs.PanelsClassnames"] },
                    { "SliderClass", Properties["MudBlazor.MudTabs.SliderClass"] },
                    { "MaxHeightStyles", Properties["MudBlazor.MudTabs.MaxHeightStyles"] },
                    { "SliderStyle", Properties["MudBlazor.MudTabs.SliderStyle"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ActivatePanel", Methods["MudBlazor.MudTabs.ActivatePanel"] },
                },
                Events = { 
                    { "AddTab", Events["MudBlazor.MudDynamicTabs.AddTab"] },
                    { "CloseTab", Events["MudBlazor.MudDynamicTabs.CloseTab"] },
                    { "ActivePanelIndexChanged", Events["MudBlazor.MudTabs.ActivePanelIndexChanged"] },
                },
            }},
            { "MudBlazor.MudElement", new() {
                Name = "MudElement", 
                NameFriendly = "MudElement", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A primitive component which allows dynamically changing the HTML element rendered under the hood.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudElement.ChildContent"] },
                    { "HtmlTag", Properties["MudBlazor.MudElement.HtmlTag"] },
                    { "Ref", Properties["MudBlazor.MudElement.Ref"] },
                    { "ClickPropagation", Properties["MudBlazor.MudElement.ClickPropagation"] },
                    { "PreventDefault", Properties["MudBlazor.MudElement.PreventDefault"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "RefChanged", Events["MudBlazor.MudElement.RefChanged"] },
                },
            }},
            { "MudBlazor.MudExpansionPanel", new() {
                Name = "MudExpansionPanel", 
                NameFriendly = "MudExpansionPanel", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component which can be expanded to show more content or collapsed to show only its header.", 
                Remarks = @"This component is always inside a <see cref=""T:MudBlazor.MudExpansionPanels"" /> component.", 
                Properties = { 
                    { "MaxHeight", Properties["MudBlazor.MudExpansionPanel.MaxHeight"] },
                    { "HeaderClass", Properties["MudBlazor.MudExpansionPanel.HeaderClass"] },
                    { "TitleContent", Properties["MudBlazor.MudExpansionPanel.TitleContent"] },
                    { "Text", Properties["MudBlazor.MudExpansionPanel.Text"] },
                    { "HideIcon", Properties["MudBlazor.MudExpansionPanel.HideIcon"] },
                    { "Icon", Properties["MudBlazor.MudExpansionPanel.Icon"] },
                    { "Dense", Properties["MudBlazor.MudExpansionPanel.Dense"] },
                    { "Gutters", Properties["MudBlazor.MudExpansionPanel.Gutters"] },
                    { "Expanded", Properties["MudBlazor.MudExpansionPanel.Expanded"] },
                    { "Disabled", Properties["MudBlazor.MudExpansionPanel.Disabled"] },
                    { "ChildContent", Properties["MudBlazor.MudExpansionPanel.ChildContent"] },
                    { "NextPanelExpanded", Properties["MudBlazor.MudExpansionPanel.NextPanelExpanded"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudExpansionPanel.Classname"] },
                    { "HeaderClassname", Properties["MudBlazor.MudExpansionPanel.HeaderClassname"] },
                    { "PanelContentClassname", Properties["MudBlazor.MudExpansionPanel.PanelContentClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ToggleExpansionAsync", Methods["MudBlazor.MudExpansionPanel.ToggleExpansionAsync"] },
                    { "ExpandAsync", Methods["MudBlazor.MudExpansionPanel.ExpandAsync"] },
                    { "CollapseAsync", Methods["MudBlazor.MudExpansionPanel.CollapseAsync"] },
                },
                Events = { 
                    { "ExpandedChanged", Events["MudBlazor.MudExpansionPanel.ExpandedChanged"] },
                },
            }},
            { "MudBlazor.MudExpansionPanels", new() {
                Name = "MudExpansionPanels", 
                NameFriendly = "MudExpansionPanels", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A container which manages <see cref=""T:MudBlazor.MudExpansionPanel"" /> components such that when one panel is expanded the others are collapsed automatically.", 
                Properties = { 
                    { "Square", Properties["MudBlazor.MudExpansionPanels.Square"] },
                    { "MultiExpansion", Properties["MudBlazor.MudExpansionPanels.MultiExpansion"] },
                    { "Elevation", Properties["MudBlazor.MudExpansionPanels.Elevation"] },
                    { "Dense", Properties["MudBlazor.MudExpansionPanels.Dense"] },
                    { "Gutters", Properties["MudBlazor.MudExpansionPanels.Gutters"] },
                    { "Outlined", Properties["MudBlazor.MudExpansionPanels.Outlined"] },
                    { "ChildContent", Properties["MudBlazor.MudExpansionPanels.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudExpansionPanels.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "UpdateAllAsync", Methods["MudBlazor.MudExpansionPanels.UpdateAllAsync"] },
                    { "CollapseAllExceptAsync", Methods["MudBlazor.MudExpansionPanels.CollapseAllExceptAsync"] },
                    { "CollapseAllAsync", Methods["MudBlazor.MudExpansionPanels.CollapseAllAsync"] },
                    { "ExpandAllAsync", Methods["MudBlazor.MudExpansionPanels.ExpandAllAsync"] },
                },
            }},
            { "MudBlazor.MudFab", new() {
                Name = "MudFab", 
                NameFriendly = "MudFab", 
                BaseTypeName = "MudBaseButton", 
                IsComponent = true, 
                Summary = @"Represents a floating action button.", 
                Remarks = @"Creates a <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/Button"">button</see> element,or <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/a"">anchor</see> if <c>Href</c> is set.<br />You can directly add attributes like <c>title</c> or <c>aria-label</c>.", 
                Properties = { 
                    { "Color", Properties["MudBlazor.MudFab.Color"] },
                    { "Size", Properties["MudBlazor.MudFab.Size"] },
                    { "StartIcon", Properties["MudBlazor.MudFab.StartIcon"] },
                    { "EndIcon", Properties["MudBlazor.MudFab.EndIcon"] },
                    { "IconColor", Properties["MudBlazor.MudFab.IconColor"] },
                    { "IconSize", Properties["MudBlazor.MudFab.IconSize"] },
                    { "Label", Properties["MudBlazor.MudFab.Label"] },
                    { "HtmlTag", Properties["MudBlazor.MudBaseButton.HtmlTag"] },
                    { "ButtonType", Properties["MudBlazor.MudBaseButton.ButtonType"] },
                    { "Href", Properties["MudBlazor.MudBaseButton.Href"] },
                    { "Target", Properties["MudBlazor.MudBaseButton.Target"] },
                    { "Rel", Properties["MudBlazor.MudBaseButton.Rel"] },
                    { "Disabled", Properties["MudBlazor.MudBaseButton.Disabled"] },
                    { "ClickPropagation", Properties["MudBlazor.MudBaseButton.ClickPropagation"] },
                    { "DropShadow", Properties["MudBlazor.MudBaseButton.DropShadow"] },
                    { "Ripple", Properties["MudBlazor.MudBaseButton.Ripple"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudFab.Classname"] },
                    { "Activatable", Properties["MudBlazor.MudBaseButton.Activatable"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudBaseButton.FocusAsync"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseButton.GetDisabledState"] },
                    { "OnClickHandler", Methods["MudBlazor.MudBaseButton.OnClickHandler"] },
                    { "GetClickPropagation", Methods["MudBlazor.MudBaseButton.GetClickPropagation"] },
                    { "GetRel", Methods["MudBlazor.MudBaseButton.GetRel"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudBaseButton.OnClick"] },
                },
            }},
            { "MudBlazor.MudField", new() {
                Name = "MudField", 
                NameFriendly = "MudField", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component similar to <see cref=""T:MudBlazor.MudTextField`1"" /> which supports custom content.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudField.ChildContent"] },
                    { "Margin", Properties["MudBlazor.MudField.Margin"] },
                    { "Typo", Properties["MudBlazor.MudField.Typo"] },
                    { "Error", Properties["MudBlazor.MudField.Error"] },
                    { "ErrorText", Properties["MudBlazor.MudField.ErrorText"] },
                    { "HelperText", Properties["MudBlazor.MudField.HelperText"] },
                    { "FullWidth", Properties["MudBlazor.MudField.FullWidth"] },
                    { "Label", Properties["MudBlazor.MudField.Label"] },
                    { "Variant", Properties["MudBlazor.MudField.Variant"] },
                    { "Disabled", Properties["MudBlazor.MudField.Disabled"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudField.AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudField.AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudField.Adornment"] },
                    { "AdornmentColor", Properties["MudBlazor.MudField.AdornmentColor"] },
                    { "IconSize", Properties["MudBlazor.MudField.IconSize"] },
                    { "InnerPadding", Properties["MudBlazor.MudField.InnerPadding"] },
                    { "Underline", Properties["MudBlazor.MudField.Underline"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudField.Classname"] },
                    { "InnerClassname", Properties["MudBlazor.MudField.InnerClassname"] },
                    { "AdornmentClassname", Properties["MudBlazor.MudField.AdornmentClassname"] },
                    { "InputControlClassname", Properties["MudBlazor.MudField.InputControlClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "OnAdornmentClick", Events["MudBlazor.MudField.OnAdornmentClick"] },
                },
            }},
            { "MudBlazor.MudFileUpload`1", new() {
                Name = "MudFileUpload`1", 
                NameFriendly = "MudFileUpload<T>", 
                BaseTypeName = "MudFormComponent`2", 
                IsComponent = true, 
                Summary = @"A form component for uploading one or more files.  For <c>T</c>, use either <c>IBrowserFile</c> for a single file or <c>IReadOnlyList&lt;IBrowserFile&gt;</c> for multiple files.", 
                Properties = { 
                    { "Files", Properties["MudBlazor.MudFileUpload`1.Files"] },
                    { "AppendMultipleFiles", Properties["MudBlazor.MudFileUpload`1.AppendMultipleFiles"] },
                    { "ActivatorContent", Properties["MudBlazor.MudFileUpload`1.ActivatorContent"] },
                    { "SelectedTemplate", Properties["MudBlazor.MudFileUpload`1.SelectedTemplate"] },
                    { "SuppressOnChangeWhenInvalid", Properties["MudBlazor.MudFileUpload`1.SuppressOnChangeWhenInvalid"] },
                    { "Accept", Properties["MudBlazor.MudFileUpload`1.Accept"] },
                    { "Hidden", Properties["MudBlazor.MudFileUpload`1.Hidden"] },
                    { "InputClass", Properties["MudBlazor.MudFileUpload`1.InputClass"] },
                    { "InputStyle", Properties["MudBlazor.MudFileUpload`1.InputStyle"] },
                    { "MaximumFileCount", Properties["MudBlazor.MudFileUpload`1.MaximumFileCount"] },
                    { "Disabled", Properties["MudBlazor.MudFileUpload`1.Disabled"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudFileUpload`1.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ClearAsync", Methods["MudBlazor.MudFileUpload`1.ClearAsync"] },
                    { "OpenFilePickerAsync", Methods["MudBlazor.MudFileUpload`1.OpenFilePickerAsync"] },
                    { "Activate", Methods["MudBlazor.MudFileUpload`1.Activate"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "GetDisabledState", Methods["MudBlazor.MudFileUpload`1.GetDisabledState"] },
                    { "ReadValue", Methods["MudBlazor.MudFileUpload`1.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFileUpload`1.WriteValueAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudFormComponent`2.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2.SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2.ValidateValue"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudFormComponent`2.ResetValueAsync"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudFormComponent`2.DisposeAsyncCore"] },
                },
                Events = { 
                    { "FilesChanged", Events["MudBlazor.MudFileUpload`1.FilesChanged"] },
                    { "OnFilesChanged", Events["MudBlazor.MudFileUpload`1.OnFilesChanged"] },
                },
            }},
            { "MudBlazor.MudFlexBreak", new() {
                Name = "MudFlexBreak", 
                NameFriendly = "MudFlexBreak", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component for breaking a flex display using CSS styles.", 
                Properties = { 
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudFlexBreak.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudFocusTrap", new() {
                Name = "MudFocusTrap", 
                NameFriendly = "MudFocusTrap", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component which prevents the keyboard focus from cycling out of its child content.", 
                Remarks = @"Typically used within dialogs and other overlays.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudFocusTrap.ChildContent"] },
                    { "Disabled", Properties["MudBlazor.MudFocusTrap.Disabled"] },
                    { "DefaultFocus", Properties["MudBlazor.MudFocusTrap.DefaultFocus"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudFocusTrap.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudForm", new() {
                Name = "MudForm", 
                NameFriendly = "MudForm", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component for collecting and validating user input. Every input derived from MudFormComponent within it is monitored and validated.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudForm.ChildContent"] },
                    { "IsValid", Properties["MudBlazor.MudForm.IsValid"] },
                    { "IsTouched", Properties["MudBlazor.MudForm.IsTouched"] },
                    { "Disabled", Properties["MudBlazor.MudForm.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudForm.ReadOnly"] },
                    { "ValidationDelay", Properties["MudBlazor.MudForm.ValidationDelay"] },
                    { "SuppressRenderingOnValidation", Properties["MudBlazor.MudForm.SuppressRenderingOnValidation"] },
                    { "SuppressImplicitSubmission", Properties["MudBlazor.MudForm.SuppressImplicitSubmission"] },
                    { "Spacing", Properties["MudBlazor.MudForm.Spacing"] },
                    { "Validation", Properties["MudBlazor.MudForm.Validation"] },
                    { "OverrideFieldValidation", Properties["MudBlazor.MudForm.OverrideFieldValidation"] },
                    { "Errors", Properties["MudBlazor.MudForm.Errors"] },
                    { "Model", Properties["MudBlazor.MudForm.Model"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudForm.Classname"] },
                    { "ChildForms", Properties["MudBlazor.MudForm.ChildForms"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "Validate", Methods["MudBlazor.MudForm.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudForm.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudForm.ResetValidation"] },
                    { "ResetTouched", Methods["MudBlazor.MudForm.ResetTouched"] },
                    { "GetDisabledState", Methods["MudBlazor.MudForm.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudForm.GetReadOnlyState"] },
                    { "OnEvaluateForm", Methods["MudBlazor.MudForm.OnEvaluateForm"] },
                },
                Events = { 
                    { "IsValidChanged", Events["MudBlazor.MudForm.IsValidChanged"] },
                    { "IsTouchedChanged", Events["MudBlazor.MudForm.IsTouchedChanged"] },
                    { "FieldChanged", Events["MudBlazor.MudForm.FieldChanged"] },
                    { "ErrorsChanged", Events["MudBlazor.MudForm.ErrorsChanged"] },
                },
            }},
            { "MudBlazor.MudFormComponent`2", new() {
                Name = "MudFormComponent`2", 
                NameFriendly = "MudFormComponent<T, U>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a base class for designing form input components.", 
                Properties = { 
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "SetConverter", Methods["MudBlazor.MudFormComponent`2.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2.SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2.ValidateValue"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudFormComponent`2.ResetValueAsync"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudFormComponent`2.DisposeAsyncCore"] },
                },
            }},
            { "MudBlazor.MudGlobal", new() {
                Name = "MudGlobal", 
                NameFriendly = "MudGlobal", 
                BaseTypeName = "Object", 
                Summary = @"A collection of settings that let you control the default behavior or appearance of MudBlazor components.", 
                Properties = { 
                    { "Rounded", Properties["MudBlazor.MudGlobal.Rounded"] },
                    { "UnhandledExceptionHandler", Properties["MudBlazor.MudGlobal.UnhandledExceptionHandler"] },
                },
            }},
            { "MudBlazor.MudGlobal+ButtonDefaults", new() {
                Name = "ButtonDefaults", 
                NameFriendly = "ButtonDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Color", Properties["MudBlazor.MudGlobal+ButtonDefaults.Color"] },
                    { "Variant", Properties["MudBlazor.MudGlobal+ButtonDefaults.Variant"] },
                },
            }},
            { "MudBlazor.MudGlobal+DialogDefaults", new() {
                Name = "DialogDefaults", 
                NameFriendly = "DialogDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "DefaultFocus", Properties["MudBlazor.MudGlobal+DialogDefaults.DefaultFocus"] },
                },
            }},
            { "MudBlazor.MudGlobal+GridDefaults", new() {
                Name = "GridDefaults", 
                NameFriendly = "GridDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Spacing", Properties["MudBlazor.MudGlobal+GridDefaults.Spacing"] },
                },
            }},
            { "MudBlazor.MudGlobal+InputDefaults", new() {
                Name = "InputDefaults", 
                NameFriendly = "InputDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "ShrinkLabel", Properties["MudBlazor.MudGlobal+InputDefaults.ShrinkLabel"] },
                    { "Variant", Properties["MudBlazor.MudGlobal+InputDefaults.Variant"] },
                    { "Margin", Properties["MudBlazor.MudGlobal+InputDefaults.Margin"] },
                },
            }},
            { "MudBlazor.MudGlobal+LinkDefaults", new() {
                Name = "LinkDefaults", 
                NameFriendly = "LinkDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Color", Properties["MudBlazor.MudGlobal+LinkDefaults.Color"] },
                    { "Typo", Properties["MudBlazor.MudGlobal+LinkDefaults.Typo"] },
                    { "Underline", Properties["MudBlazor.MudGlobal+LinkDefaults.Underline"] },
                },
            }},
            { "MudBlazor.MudGlobal+MenuDefaults", new() {
                Name = "MenuDefaults", 
                NameFriendly = "MenuDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "HoverDelay", Properties["MudBlazor.MudGlobal+MenuDefaults.HoverDelay"] },
                },
            }},
            { "MudBlazor.MudGlobal+PopoverDefaults", new() {
                Name = "PopoverDefaults", 
                NameFriendly = "PopoverDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Elevation", Properties["MudBlazor.MudGlobal+PopoverDefaults.Elevation"] },
                },
            }},
            { "MudBlazor.MudGlobal+StackDefaults", new() {
                Name = "StackDefaults", 
                NameFriendly = "StackDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Spacing", Properties["MudBlazor.MudGlobal+StackDefaults.Spacing"] },
                },
            }},
            { "MudBlazor.MudGlobal+TooltipDefaults", new() {
                Name = "TooltipDefaults", 
                NameFriendly = "TooltipDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Delay", Properties["MudBlazor.MudGlobal+TooltipDefaults.Delay"] },
                    { "Duration", Properties["MudBlazor.MudGlobal+TooltipDefaults.Duration"] },
                },
            }},
            { "MudBlazor.MudGlobal+TransitionDefaults", new() {
                Name = "TransitionDefaults", 
                NameFriendly = "TransitionDefaults", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Delay", Properties["MudBlazor.MudGlobal+TransitionDefaults.Delay"] },
                    { "Duration", Properties["MudBlazor.MudGlobal+TransitionDefaults.Duration"] },
                },
            }},
            { "MudBlazor.MudGrid", new() {
                Name = "MudGrid", 
                NameFriendly = "MudGrid", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component for organizing the layout of page content.", 
                Properties = { 
                    { "Spacing", Properties["MudBlazor.MudGrid.Spacing"] },
                    { "Justify", Properties["MudBlazor.MudGrid.Justify"] },
                    { "ChildContent", Properties["MudBlazor.MudGrid.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudGrid.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                GlobalSettings = { 
                    { "Spacing", Properties["MudBlazor.MudGlobal+GridDefaults.Spacing"] },
                },
            }},
            { "MudBlazor.MudHeatMapCell", new() {
                Name = "MudHeatMapCell", 
                NameFriendly = "MudHeatMapCell", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a single cell in a <see cref=""T:MudBlazor.Charts.HeatMap"" />. You can override the value from the <see cref=""T:MudBlazor.ChartSeries"" /> or provide a custom graphic to be shown inside the cell. You should provide a width and height for the custom graphic you are includingso the Heat Map can resize it dynamically.", 
                Properties = { 
                    { "Row", Properties["MudBlazor.MudHeatMapCell.Row"] },
                    { "Column", Properties["MudBlazor.MudHeatMapCell.Column"] },
                    { "Value", Properties["MudBlazor.MudHeatMapCell.Value"] },
                    { "MudColor", Properties["MudBlazor.MudHeatMapCell.MudColor"] },
                    { "Width", Properties["MudBlazor.MudHeatMapCell.Width"] },
                    { "Height", Properties["MudBlazor.MudHeatMapCell.Height"] },
                    { "ChildContent", Properties["MudBlazor.MudHeatMapCell.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudHidden", new() {
                Name = "MudHidden", 
                NameFriendly = "MudHidden", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component which conditionally renders content depending on the screen size.", 
                Remarks = @"This component uses JavaScript to listen for browser window size changes.  If you want a solution using only CSS, you can use the <see href=""https://mudblazor.com/features/display#class-reference"">responsive display classes</see>.", 
                Properties = { 
                    { "CurrentBreakpointFromProvider", Properties["MudBlazor.MudHidden.CurrentBreakpointFromProvider"] },
                    { "Breakpoint", Properties["MudBlazor.MudHidden.Breakpoint"] },
                    { "Invert", Properties["MudBlazor.MudHidden.Invert"] },
                    { "Hidden", Properties["MudBlazor.MudHidden.Hidden"] },
                    { "ChildContent", Properties["MudBlazor.MudHidden.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "BrowserViewportService", Properties["MudBlazor.MudHidden.BrowserViewportService"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "UpdateAsync", Methods["MudBlazor.MudHidden.UpdateAsync"] },
                },
                Events = { 
                    { "HiddenChanged", Events["MudBlazor.MudHidden.HiddenChanged"] },
                },
            }},
            { "MudBlazor.MudHighlighter", new() {
                Name = "MudHighlighter", 
                NameFriendly = "MudHighlighter", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component which highlights words or phrases within text.", 
                Properties = { 
                    { "Text", Properties["MudBlazor.MudHighlighter.Text"] },
                    { "HighlightedText", Properties["MudBlazor.MudHighlighter.HighlightedText"] },
                    { "HighlightedTexts", Properties["MudBlazor.MudHighlighter.HighlightedTexts"] },
                    { "CaseSensitive", Properties["MudBlazor.MudHighlighter.CaseSensitive"] },
                    { "UntilNextBoundary", Properties["MudBlazor.MudHighlighter.UntilNextBoundary"] },
                    { "Markup", Properties["MudBlazor.MudHighlighter.Markup"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudIcon", new() {
                Name = "MudIcon", 
                NameFriendly = "MudIcon", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A picture displayed via an SVG path or font.", 
                Remarks = @"You can use the <see cref=""T:MudBlazor.Icons"" /> class and <see href=""https://mudblazor.com/features/icons#icons"">Icons Reference</see> for SVG paths, or a <see href=""https://fontawesome.com/icons"">Font Awesome CSS Class</see>.", 
                Properties = { 
                    { "Icon", Properties["MudBlazor.MudIcon.Icon"] },
                    { "Title", Properties["MudBlazor.MudIcon.Title"] },
                    { "Size", Properties["MudBlazor.MudIcon.Size"] },
                    { "Disabled", Properties["MudBlazor.MudIcon.Disabled"] },
                    { "Color", Properties["MudBlazor.MudIcon.Color"] },
                    { "ViewBox", Properties["MudBlazor.MudIcon.ViewBox"] },
                    { "ChildContent", Properties["MudBlazor.MudIcon.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudIcon.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudIconButton", new() {
                Name = "MudIconButton", 
                NameFriendly = "MudIconButton", 
                BaseTypeName = "MudBaseButton", 
                IsComponent = true, 
                Summary = @"Represents a button consisting of an icon.", 
                Remarks = @"Creates a <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/Button"">button</see> element,or <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/a"">anchor</see> if <c>Href</c> is set.<br />You can directly add attributes like <c>title</c> or <c>aria-label</c>.", 
                Properties = { 
                    { "Icon", Properties["MudBlazor.MudIconButton.Icon"] },
                    { "Color", Properties["MudBlazor.MudIconButton.Color"] },
                    { "Size", Properties["MudBlazor.MudIconButton.Size"] },
                    { "Edge", Properties["MudBlazor.MudIconButton.Edge"] },
                    { "Variant", Properties["MudBlazor.MudIconButton.Variant"] },
                    { "ChildContent", Properties["MudBlazor.MudIconButton.ChildContent"] },
                    { "HtmlTag", Properties["MudBlazor.MudBaseButton.HtmlTag"] },
                    { "ButtonType", Properties["MudBlazor.MudBaseButton.ButtonType"] },
                    { "Href", Properties["MudBlazor.MudBaseButton.Href"] },
                    { "Target", Properties["MudBlazor.MudBaseButton.Target"] },
                    { "Rel", Properties["MudBlazor.MudBaseButton.Rel"] },
                    { "Disabled", Properties["MudBlazor.MudBaseButton.Disabled"] },
                    { "ClickPropagation", Properties["MudBlazor.MudBaseButton.ClickPropagation"] },
                    { "DropShadow", Properties["MudBlazor.MudBaseButton.DropShadow"] },
                    { "Ripple", Properties["MudBlazor.MudBaseButton.Ripple"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudIconButton.Classname"] },
                    { "AsButton", Properties["MudBlazor.MudIconButton.AsButton"] },
                    { "Activatable", Properties["MudBlazor.MudBaseButton.Activatable"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudBaseButton.FocusAsync"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseButton.GetDisabledState"] },
                    { "OnClickHandler", Methods["MudBlazor.MudBaseButton.OnClickHandler"] },
                    { "GetClickPropagation", Methods["MudBlazor.MudBaseButton.GetClickPropagation"] },
                    { "GetRel", Methods["MudBlazor.MudBaseButton.GetRel"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudBaseButton.OnClick"] },
                },
            }},
            { "MudBlazor.MudImage", new() {
                Name = "MudImage", 
                NameFriendly = "MudImage", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A simple component that displays an image.", 
                Remarks = @"This component is equivalent to the <c>img</c> HTML tag.", 
                Properties = { 
                    { "Fluid", Properties["MudBlazor.MudImage.Fluid"] },
                    { "Src", Properties["MudBlazor.MudImage.Src"] },
                    { "Alt", Properties["MudBlazor.MudImage.Alt"] },
                    { "Height", Properties["MudBlazor.MudImage.Height"] },
                    { "Width", Properties["MudBlazor.MudImage.Width"] },
                    { "Elevation", Properties["MudBlazor.MudImage.Elevation"] },
                    { "ObjectFit", Properties["MudBlazor.MudImage.ObjectFit"] },
                    { "ObjectPosition", Properties["MudBlazor.MudImage.ObjectPosition"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudImage.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudInput`1", new() {
                Name = "MudInput`1", 
                NameFriendly = "MudInput<T>", 
                BaseTypeName = "MudBaseInput`1", 
                IsComponent = true, 
                Summary = @"A component for collecting an input value.", 
                Properties = { 
                    { "InputType", Properties["MudBlazor.MudInput`1.InputType"] },
                    { "ChildContent", Properties["MudBlazor.MudInput`1.ChildContent"] },
                    { "ElementReference", Properties["MudBlazor.MudInput`1.ElementReference"] },
                    { "HideSpinButtons", Properties["MudBlazor.MudInput`1.HideSpinButtons"] },
                    { "Clearable", Properties["MudBlazor.MudInput`1.Clearable"] },
                    { "ClearIcon", Properties["MudBlazor.MudInput`1.ClearIcon"] },
                    { "NumericUpIcon", Properties["MudBlazor.MudInput`1.NumericUpIcon"] },
                    { "NumericDownIcon", Properties["MudBlazor.MudInput`1.NumericDownIcon"] },
                    { "AutoGrow", Properties["MudBlazor.MudInput`1.AutoGrow"] },
                    { "MaxLines", Properties["MudBlazor.MudInput`1.MaxLines"] },
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1.ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1.FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1.Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1.Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1.HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1.HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1.HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1.AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1.AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1.Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1.OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1.AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1.AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1.IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1.Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1.Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1.Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1.Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1.Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1.MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1.Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1.AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1.Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1.Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1.TextUpdateSuppression"] },
                    { "InputMode", Properties["MudBlazor.MudBaseInput`1.InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudBaseInput`1.Pattern"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1.ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1.Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1.Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1.InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudInput`1.Classname"] },
                    { "InputClassname", Properties["MudBlazor.MudInput`1.InputClassname"] },
                    { "AdornmentClassname", Properties["MudBlazor.MudInput`1.AdornmentClassname"] },
                    { "ClearButtonClassname", Properties["MudBlazor.MudInput`1.ClearButtonClassname"] },
                    { "InputTypeString", Properties["MudBlazor.MudInput`1.InputTypeString"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1.InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudInput`1.FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudInput`1.BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudInput`1.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudInput`1.SelectRangeAsync"] },
                    { "SetText", Methods["MudBlazor.MudInput`1.SetText"] },
                    { "ForceUpdate", Methods["MudBlazor.MudBaseInput`1.ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1.ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "OnInput", Methods["MudBlazor.MudInput`1.OnInput"] },
                    { "OnChange", Methods["MudBlazor.MudInput`1.OnChange"] },
                    { "OnPaste", Methods["MudBlazor.MudInput`1.OnPaste"] },
                    { "HandleClearButtonAsync", Methods["MudBlazor.MudInput`1.HandleClearButtonAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudInput`1.DisposeAsyncCore"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1.GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudBaseInput`1.SetTextAsync"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudBaseInput`1.UpdateTextPropertyAsync"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyUpAsync"] },
                    { "SetValueAsync", Methods["MudBlazor.MudBaseInput`1.SetValueAsync"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudBaseInput`1.UpdateValuePropertyAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1.SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1.SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1.ValidateValue"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudBaseInput`1.ResetValueAsync"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1.GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1.GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "OnIncrement", Events["MudBlazor.MudInput`1.OnIncrement"] },
                    { "OnDecrement", Events["MudBlazor.MudInput`1.OnDecrement"] },
                    { "OnClearButtonClick", Events["MudBlazor.MudInput`1.OnClearButtonClick"] },
                    { "OnMouseWheel", Events["MudBlazor.MudInput`1.OnMouseWheel"] },
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1.OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1.TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1.OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1.OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1.OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1.OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudInputControl", new() {
                Name = "MudInputControl", 
                NameFriendly = "MudInputControl", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A base class for designing input components.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudInputControl.ChildContent"] },
                    { "InputContent", Properties["MudBlazor.MudInputControl.InputContent"] },
                    { "Margin", Properties["MudBlazor.MudInputControl.Margin"] },
                    { "Required", Properties["MudBlazor.MudInputControl.Required"] },
                    { "Error", Properties["MudBlazor.MudInputControl.Error"] },
                    { "ErrorText", Properties["MudBlazor.MudInputControl.ErrorText"] },
                    { "ErrorId", Properties["MudBlazor.MudInputControl.ErrorId"] },
                    { "HelperText", Properties["MudBlazor.MudInputControl.HelperText"] },
                    { "HelperId", Properties["MudBlazor.MudInputControl.HelperId"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudInputControl.HelperTextOnFocus"] },
                    { "CounterText", Properties["MudBlazor.MudInputControl.CounterText"] },
                    { "FullWidth", Properties["MudBlazor.MudInputControl.FullWidth"] },
                    { "Label", Properties["MudBlazor.MudInputControl.Label"] },
                    { "Variant", Properties["MudBlazor.MudInputControl.Variant"] },
                    { "Disabled", Properties["MudBlazor.MudInputControl.Disabled"] },
                    { "ForId", Properties["MudBlazor.MudInputControl.ForId"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudInputControl.Classname"] },
                    { "HelperContainer", Properties["MudBlazor.MudInputControl.HelperContainer"] },
                    { "HelperClass", Properties["MudBlazor.MudInputControl.HelperClass"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudInputLabel", new() {
                Name = "MudInputLabel", 
                NameFriendly = "MudInputLabel", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A label which describes a <see cref=""T:MudBlazor.MudInput`1"" /> component.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudInputLabel.ChildContent"] },
                    { "Disabled", Properties["MudBlazor.MudInputLabel.Disabled"] },
                    { "Error", Properties["MudBlazor.MudInputLabel.Error"] },
                    { "Variant", Properties["MudBlazor.MudInputLabel.Variant"] },
                    { "Margin", Properties["MudBlazor.MudInputLabel.Margin"] },
                    { "ForId", Properties["MudBlazor.MudInputLabel.ForId"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudInputLabel.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudInputString", new() {
                Name = "MudInputString", 
                NameFriendly = "MudInputString", 
                BaseTypeName = "MudInput`1", 
                IsComponent = true, 
                Summary = @"An input component for collecting alphanumeric values.", 
                Properties = { 
                    { "InputType", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputType"] },
                    { "ChildContent", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ChildContent"] },
                    { "ElementReference", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ElementReference"] },
                    { "HideSpinButtons", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HideSpinButtons"] },
                    { "Clearable", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable"] },
                    { "ClearIcon", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ClearIcon"] },
                    { "NumericUpIcon", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].NumericUpIcon"] },
                    { "NumericDownIcon", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].NumericDownIcon"] },
                    { "AutoGrow", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AutoGrow"] },
                    { "MaxLines", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MaxLines"] },
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextUpdateSuppression"] },
                    { "InputMode", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Pattern"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Classname"] },
                    { "InputClassname", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputClassname"] },
                    { "AdornmentClassname", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentClassname"] },
                    { "ClearButtonClassname", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ClearButtonClassname"] },
                    { "InputTypeString", Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputTypeString"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync"] },
                    { "SetText", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetText"] },
                    { "ForceUpdate", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"] },
                    { "OnInput", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnInput"] },
                    { "OnChange", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnChange"] },
                    { "OnPaste", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPaste"] },
                    { "HandleClearButtonAsync", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HandleClearButtonAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].DisposeAsyncCore"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateTextPropertyAsync"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeKeyUpAsync"] },
                    { "SetValueAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetValueAsync"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateValuePropertyAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"] },
                },
                Events = { 
                    { "OnIncrement", Events["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnIncrement"] },
                    { "OnDecrement", Events["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnDecrement"] },
                    { "OnClearButtonClick", Events["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClearButtonClick"] },
                    { "OnMouseWheel", Events["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnMouseWheel"] },
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValueChanged"] },
                },
            }},
            { "MudBlazor.MudItem", new() {
                Name = "MudItem", 
                NameFriendly = "MudItem", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A portion of a <see cref=""T:MudBlazor.MudGrid"" />.", 
                Properties = { 
                    { "xs", Properties["MudBlazor.MudItem.xs"] },
                    { "sm", Properties["MudBlazor.MudItem.sm"] },
                    { "md", Properties["MudBlazor.MudItem.md"] },
                    { "lg", Properties["MudBlazor.MudItem.lg"] },
                    { "xl", Properties["MudBlazor.MudItem.xl"] },
                    { "xxl", Properties["MudBlazor.MudItem.xxl"] },
                    { "ChildContent", Properties["MudBlazor.MudItem.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudItem.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudItemDropInfo`1", new() {
                Name = "MudItemDropInfo`1", 
                NameFriendly = "MudItemDropInfo<T>", 
                BaseTypeName = "Object", 
                Summary = @"Record encapsulating data regarding a completed transaction", 
                Properties = { 
                    { "Item", Properties["MudBlazor.MudItemDropInfo`1.Item"] },
                    { "DropzoneIdentifier", Properties["MudBlazor.MudItemDropInfo`1.DropzoneIdentifier"] },
                    { "IndexInZone", Properties["MudBlazor.MudItemDropInfo`1.IndexInZone"] },
                    { "EqualityContract", Properties["MudBlazor.MudItemDropInfo`1.EqualityContract"] },
                },
                Methods = { 
                    { "<Clone>$", Methods["MudBlazor.MudItemDropInfo`1.<Clone>$"] },
                    { "Deconstruct", Methods["MudBlazor.MudItemDropInfo`1.Deconstruct"] },
                    { "PrintMembers", Methods["MudBlazor.MudItemDropInfo`1.PrintMembers"] },
                },
            }},
            { "MudBlazor.MudLayout", new() {
                Name = "MudLayout", 
                NameFriendly = "MudLayout", 
                BaseTypeName = "MudDrawerContainer", 
                IsComponent = true, 
                Summary = @"A component which defines a common structure for multiple pages.", 
                Remarks = @"Layouts often contain <see cref=""T:MudBlazor.MudAppBar"" /> and <see cref=""T:MudBlazor.MudDrawer"" /> components.  The <see cref=""T:MudBlazor.MudMainContent"" /> component is used to contain page content.  In your layout component, but above this component, add <see cref=""T:MudBlazor.MudThemeProvider"" />, <see cref=""T:MudBlazor.MudPopoverProvider"" />, <see cref=""T:MudBlazor.MudDialogProvider"" />, and <see cref=""T:MudBlazor.MudSnackbarProvider"" /> components to enable all MudBlazor features.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudDrawerContainer.RightToLeft"] },
                    { "ChildContent", Properties["MudBlazor.MudDrawerContainer.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudLayout.Classname"] },
                    { "Fixed", Properties["MudBlazor.MudDrawerContainer.Fixed"] },
                    { "Stylename", Properties["MudBlazor.MudDrawerContainer.Stylename"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudLink", new() {
                Name = "MudLink", 
                NameFriendly = "MudLink", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A clickable link which can navigate to a URL.", 
                Properties = { 
                    { "Color", Properties["MudBlazor.MudLink.Color"] },
                    { "Typo", Properties["MudBlazor.MudLink.Typo"] },
                    { "Underline", Properties["MudBlazor.MudLink.Underline"] },
                    { "Href", Properties["MudBlazor.MudLink.Href"] },
                    { "Target", Properties["MudBlazor.MudLink.Target"] },
                    { "Disabled", Properties["MudBlazor.MudLink.Disabled"] },
                    { "ChildContent", Properties["MudBlazor.MudLink.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudLink.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                GlobalSettings = { 
                    { "Color", Properties["MudBlazor.MudGlobal+LinkDefaults.Color"] },
                    { "Typo", Properties["MudBlazor.MudGlobal+LinkDefaults.Typo"] },
                    { "Underline", Properties["MudBlazor.MudGlobal+LinkDefaults.Underline"] },
                },
                Methods = { 
                    { "OnClickHandler", Methods["MudBlazor.MudLink.OnClickHandler"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudLink.OnClick"] },
                },
            }},
            { "MudBlazor.MudList`1", new() {
                Name = "MudList`1", 
                NameFriendly = "MudList<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A scrollable list for displaying text, avatars, and icons.", 
                Remarks = @"This component contains an optional <see cref=""T:MudBlazor.MudListSubheader"" /> and one or more <see cref=""T:MudBlazor.MudListItem`1"" />.", 
                Properties = { 
                    { "Color", Properties["MudBlazor.MudList`1.Color"] },
                    { "CheckBoxColor", Properties["MudBlazor.MudList`1.CheckBoxColor"] },
                    { "ChildContent", Properties["MudBlazor.MudList`1.ChildContent"] },
                    { "ReadOnly", Properties["MudBlazor.MudList`1.ReadOnly"] },
                    { "Padding", Properties["MudBlazor.MudList`1.Padding"] },
                    { "Dense", Properties["MudBlazor.MudList`1.Dense"] },
                    { "Gutters", Properties["MudBlazor.MudList`1.Gutters"] },
                    { "Disabled", Properties["MudBlazor.MudList`1.Disabled"] },
                    { "SelectionMode", Properties["MudBlazor.MudList`1.SelectionMode"] },
                    { "SelectedValue", Properties["MudBlazor.MudList`1.SelectedValue"] },
                    { "SelectedValues", Properties["MudBlazor.MudList`1.SelectedValues"] },
                    { "Comparer", Properties["MudBlazor.MudList`1.Comparer"] },
                    { "CheckedIcon", Properties["MudBlazor.MudList`1.CheckedIcon"] },
                    { "UncheckedIcon", Properties["MudBlazor.MudList`1.UncheckedIcon"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudList`1.Classname"] },
                    { "ParentList", Properties["MudBlazor.MudList`1.ParentList"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "SelectedValueChanged", Events["MudBlazor.MudList`1.SelectedValueChanged"] },
                    { "SelectedValuesChanged", Events["MudBlazor.MudList`1.SelectedValuesChanged"] },
                },
            }},
            { "MudBlazor.MudListItem`1", new() {
                Name = "MudListItem`1", 
                NameFriendly = "MudListItem<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"An item within a <see cref=""T:MudBlazor.MudList`1"" /> component.", 
                Properties = { 
                    { "Text", Properties["MudBlazor.MudListItem`1.Text"] },
                    { "SecondaryText", Properties["MudBlazor.MudListItem`1.SecondaryText"] },
                    { "Value", Properties["MudBlazor.MudListItem`1.Value"] },
                    { "AvatarContent", Properties["MudBlazor.MudListItem`1.AvatarContent"] },
                    { "Href", Properties["MudBlazor.MudListItem`1.Href"] },
                    { "Target", Properties["MudBlazor.MudListItem`1.Target"] },
                    { "ForceLoad", Properties["MudBlazor.MudListItem`1.ForceLoad"] },
                    { "Disabled", Properties["MudBlazor.MudListItem`1.Disabled"] },
                    { "Ripple", Properties["MudBlazor.MudListItem`1.Ripple"] },
                    { "Icon", Properties["MudBlazor.MudListItem`1.Icon"] },
                    { "IconColor", Properties["MudBlazor.MudListItem`1.IconColor"] },
                    { "IconSize", Properties["MudBlazor.MudListItem`1.IconSize"] },
                    { "ExpandIconColor", Properties["MudBlazor.MudListItem`1.ExpandIconColor"] },
                    { "ExpandLessIcon", Properties["MudBlazor.MudListItem`1.ExpandLessIcon"] },
                    { "ExpandMoreIcon", Properties["MudBlazor.MudListItem`1.ExpandMoreIcon"] },
                    { "Inset", Properties["MudBlazor.MudListItem`1.Inset"] },
                    { "Dense", Properties["MudBlazor.MudListItem`1.Dense"] },
                    { "Gutters", Properties["MudBlazor.MudListItem`1.Gutters"] },
                    { "Expanded", Properties["MudBlazor.MudListItem`1.Expanded"] },
                    { "ChildContent", Properties["MudBlazor.MudListItem`1.ChildContent"] },
                    { "OnClickPreventDefault", Properties["MudBlazor.MudListItem`1.OnClickPreventDefault"] },
                    { "NestedList", Properties["MudBlazor.MudListItem`1.NestedList"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudListItem`1.Classname"] },
                    { "UriHelper", Properties["MudBlazor.MudListItem`1.UriHelper"] },
                    { "MudList", Properties["MudBlazor.MudListItem`1.MudList"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "OnClickHandlerAsync", Methods["MudBlazor.MudListItem`1.OnClickHandlerAsync"] },
                },
                Events = { 
                    { "ExpandedChanged", Events["MudBlazor.MudListItem`1.ExpandedChanged"] },
                    { "OnClick", Events["MudBlazor.MudListItem`1.OnClick"] },
                },
            }},
            { "MudBlazor.MudListSubheader", new() {
                Name = "MudListSubheader", 
                NameFriendly = "MudListSubheader", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A header displayed as part of a <see cref=""T:MudBlazor.MudList`1"" />.", 
                Remarks = @"Typically used to describe a list.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudListSubheader.ChildContent"] },
                    { "Gutters", Properties["MudBlazor.MudListSubheader.Gutters"] },
                    { "Inset", Properties["MudBlazor.MudListSubheader.Inset"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudListSubheader.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudLocalizer", new() {
                Name = "MudLocalizer", 
                NameFriendly = "MudLocalizer", 
                BaseTypeName = "Object", 
                Summary = @"This customizable localizer service allows users to supply custom translations for MudBlazor components.Users can register custom implementations using the following syntax, where the scope depends on the implementation:<c>services.Add{scope}Transient&lt;MudLocalizer, CustomMudLocalizerImpl&gt;()</c>or<c>services.TryAdd{scope}Transient&lt;MudLocalizer, CustomMudLocalizerImpl&gt;()</c>", 
                Properties = { 
                    { "Item", Properties["MudBlazor.MudLocalizer.Item"] },
                },
            }},
            { "MudBlazor.MudMainContent", new() {
                Name = "MudMainContent", 
                NameFriendly = "MudMainContent", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents the main content area of the <see cref=""T:MudBlazor.MudLayout"" />.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudMainContent.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudMainContent.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudMask", new() {
                Name = "MudMask", 
                NameFriendly = "MudMask", 
                BaseTypeName = "MudBaseInput`1", 
                IsComponent = true, 
                Summary = @"A text input which conforms user input to a specific format while typing.<remarks>Note that MudMask is recommended to be used in WASM projects only because it has known problemsin BSS, especially with high network latency.</remarks>", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudMask.ChildContent"] },
                    { "Mask", Properties["MudBlazor.MudMask.Mask"] },
                    { "InputType", Properties["MudBlazor.MudMask.InputType"] },
                    { "Clearable", Properties["MudBlazor.MudMask.Clearable"] },
                    { "ClearIcon", Properties["MudBlazor.MudMask.ClearIcon"] },
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextUpdateSuppression"] },
                    { "InputMode", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Pattern"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudMask.Classname"] },
                    { "InputClassname", Properties["MudBlazor.MudMask.InputClassname"] },
                    { "AdornmentClassname", Properties["MudBlazor.MudMask.AdornmentClassname"] },
                    { "ClearButtonClassname", Properties["MudBlazor.MudMask.ClearButtonClassname"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "Clear", Methods["MudBlazor.MudMask.Clear"] },
                    { "FocusAsync", Methods["MudBlazor.MudMask.FocusAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudMask.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudMask.SelectRangeAsync"] },
                    { "OnSelect", Methods["MudBlazor.MudMask.OnSelect"] },
                    { "BlurAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"] },
                    { "ForceUpdate", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudMask.UpdateTextPropertyAsync"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudMask.UpdateValuePropertyAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudMask.DisposeAsyncCore"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeKeyUpAsync"] },
                    { "SetValueAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetValueAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"] },
                },
                Events = { 
                    { "OnClearButtonClick", Events["MudBlazor.MudMask.OnClearButtonClick"] },
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValueChanged"] },
                },
            }},
            { "MudBlazor.MudMenu", new() {
                Name = "MudMenu", 
                NameFriendly = "MudMenu", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"An interactive menu that displays a list of options.", 
                Properties = { 
                    { "Label", Properties["MudBlazor.MudMenu.Label"] },
                    { "AriaLabel", Properties["MudBlazor.MudMenu.AriaLabel"] },
                    { "ListClass", Properties["MudBlazor.MudMenu.ListClass"] },
                    { "PopoverClass", Properties["MudBlazor.MudMenu.PopoverClass"] },
                    { "Icon", Properties["MudBlazor.MudMenu.Icon"] },
                    { "IconColor", Properties["MudBlazor.MudMenu.IconColor"] },
                    { "StartIcon", Properties["MudBlazor.MudMenu.StartIcon"] },
                    { "EndIcon", Properties["MudBlazor.MudMenu.EndIcon"] },
                    { "Color", Properties["MudBlazor.MudMenu.Color"] },
                    { "Size", Properties["MudBlazor.MudMenu.Size"] },
                    { "Variant", Properties["MudBlazor.MudMenu.Variant"] },
                    { "Dense", Properties["MudBlazor.MudMenu.Dense"] },
                    { "FullWidth", Properties["MudBlazor.MudMenu.FullWidth"] },
                    { "MaxHeight", Properties["MudBlazor.MudMenu.MaxHeight"] },
                    { "PositionAtCursor", Properties["MudBlazor.MudMenu.PositionAtCursor"] },
                    { "ActivatorContent", Properties["MudBlazor.MudMenu.ActivatorContent"] },
                    { "ActivationEvent", Properties["MudBlazor.MudMenu.ActivationEvent"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudMenu.AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudMenu.TransformOrigin"] },
                    { "DropdownSettings", Properties["MudBlazor.MudMenu.DropdownSettings"] },
                    { "RelativeWidth", Properties["MudBlazor.MudMenu.RelativeWidth"] },
                    { "LockScroll", Properties["MudBlazor.MudMenu.LockScroll"] },
                    { "Disabled", Properties["MudBlazor.MudMenu.Disabled"] },
                    { "Ripple", Properties["MudBlazor.MudMenu.Ripple"] },
                    { "DropShadow", Properties["MudBlazor.MudMenu.DropShadow"] },
                    { "ChildContent", Properties["MudBlazor.MudMenu.ChildContent"] },
                    { "Open", Properties["MudBlazor.MudMenu.Open"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudMenu.Classname"] },
                    { "PopoverClassname", Properties["MudBlazor.MudMenu.PopoverClassname"] },
                    { "ListClassname", Properties["MudBlazor.MudMenu.ListClassname"] },
                    { "ActivatorClassname", Properties["MudBlazor.MudMenu.ActivatorClassname"] },
                    { "Stylename", Properties["MudBlazor.MudMenu.Stylename"] },
                    { "ParentMenu", Properties["MudBlazor.MudMenu.ParentMenu"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                GlobalSettings = { 
                    { "HoverDelay", Properties["MudBlazor.MudGlobal+MenuDefaults.HoverDelay"] },
                },
                Methods = { 
                    { "CloseMenuAsync", Methods["MudBlazor.MudMenu.CloseMenuAsync"] },
                    { "CloseAllMenusAsync", Methods["MudBlazor.MudMenu.CloseAllMenusAsync"] },
                    { "OpenMenuAsync", Methods["MudBlazor.MudMenu.OpenMenuAsync"] },
                    { "ToggleMenuAsync", Methods["MudBlazor.MudMenu.ToggleMenuAsync"] },
                    { "GetActivatorHidden", Methods["MudBlazor.MudMenu.GetActivatorHidden"] },
                    { "GetAnchorOrigin", Methods["MudBlazor.MudMenu.GetAnchorOrigin"] },
                    { "RegisterChild", Methods["MudBlazor.MudMenu.RegisterChild"] },
                    { "UnregisterChild", Methods["MudBlazor.MudMenu.UnregisterChild"] },
                    { "OnOpenChanged", Methods["MudBlazor.MudMenu.OnOpenChanged"] },
                    { "OpenSubMenuAsync", Methods["MudBlazor.MudMenu.OpenSubMenuAsync"] },
                    { "HasPointerOver", Methods["MudBlazor.MudMenu.HasPointerOver"] },
                },
                Events = { 
                    { "OpenChanged", Events["MudBlazor.MudMenu.OpenChanged"] },
                },
            }},
            { "MudBlazor.MudMenuItem", new() {
                Name = "MudMenuItem", 
                NameFriendly = "MudMenuItem", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A choice displayed as part of a list within a <see cref=""T:MudBlazor.MudMenu"" /> component.", 
                Properties = { 
                    { "ParentMenu", Properties["MudBlazor.MudMenuItem.ParentMenu"] },
                    { "Label", Properties["MudBlazor.MudMenuItem.Label"] },
                    { "ChildContent", Properties["MudBlazor.MudMenuItem.ChildContent"] },
                    { "Disabled", Properties["MudBlazor.MudMenuItem.Disabled"] },
                    { "Href", Properties["MudBlazor.MudMenuItem.Href"] },
                    { "Target", Properties["MudBlazor.MudMenuItem.Target"] },
                    { "ForceLoad", Properties["MudBlazor.MudMenuItem.ForceLoad"] },
                    { "Icon", Properties["MudBlazor.MudMenuItem.Icon"] },
                    { "IconColor", Properties["MudBlazor.MudMenuItem.IconColor"] },
                    { "AutoClose", Properties["MudBlazor.MudMenuItem.AutoClose"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "UriHelper", Properties["MudBlazor.MudMenuItem.UriHelper"] },
                    { "JsApiService", Properties["MudBlazor.MudMenuItem.JsApiService"] },
                    { "Classname", Properties["MudBlazor.MudMenuItem.Classname"] },
                    { "ActivatesSubMenu", Properties["MudBlazor.MudMenuItem.ActivatesSubMenu"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetHtmlTag", Methods["MudBlazor.MudMenuItem.GetHtmlTag"] },
                    { "GetDisabled", Methods["MudBlazor.MudMenuItem.GetDisabled"] },
                    { "GetDense", Methods["MudBlazor.MudMenuItem.GetDense"] },
                    { "GetTypo", Methods["MudBlazor.MudMenuItem.GetTypo"] },
                    { "OnClickHandlerAsync", Methods["MudBlazor.MudMenuItem.OnClickHandlerAsync"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudMenuItem.OnClick"] },
                },
            }},
            { "MudBlazor.MudMessageBox", new() {
                Name = "MudMessageBox", 
                NameFriendly = "MudMessageBox", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A pop-up dialog with a simple message and button choices.", 
                Properties = { 
                    { "Title", Properties["MudBlazor.MudMessageBox.Title"] },
                    { "TitleContent", Properties["MudBlazor.MudMessageBox.TitleContent"] },
                    { "Message", Properties["MudBlazor.MudMessageBox.Message"] },
                    { "MarkupMessage", Properties["MudBlazor.MudMessageBox.MarkupMessage"] },
                    { "MessageContent", Properties["MudBlazor.MudMessageBox.MessageContent"] },
                    { "CancelText", Properties["MudBlazor.MudMessageBox.CancelText"] },
                    { "CancelButton", Properties["MudBlazor.MudMessageBox.CancelButton"] },
                    { "NoText", Properties["MudBlazor.MudMessageBox.NoText"] },
                    { "NoButton", Properties["MudBlazor.MudMessageBox.NoButton"] },
                    { "YesText", Properties["MudBlazor.MudMessageBox.YesText"] },
                    { "YesButton", Properties["MudBlazor.MudMessageBox.YesButton"] },
                    { "Visible", Properties["MudBlazor.MudMessageBox.Visible"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudMessageBox.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ShowAsync", Methods["MudBlazor.MudMessageBox.ShowAsync"] },
                    { "Close", Methods["MudBlazor.MudMessageBox.Close"] },
                },
                Events = { 
                    { "OnYes", Events["MudBlazor.MudMessageBox.OnYes"] },
                    { "OnNo", Events["MudBlazor.MudMessageBox.OnNo"] },
                    { "OnCancel", Events["MudBlazor.MudMessageBox.OnCancel"] },
                    { "VisibleChanged", Events["MudBlazor.MudMessageBox.VisibleChanged"] },
                },
            }},
            { "MudBlazor.MudNavGroup", new() {
                Name = "MudNavGroup", 
                NameFriendly = "MudNavGroup", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A deeper level of navigation links as part of a <see cref=""T:MudBlazor.MudNavMenu"" />.", 
                Properties = { 
                    { "HeaderClass", Properties["MudBlazor.MudNavGroup.HeaderClass"] },
                    { "TitleContent", Properties["MudBlazor.MudNavGroup.TitleContent"] },
                    { "Title", Properties["MudBlazor.MudNavGroup.Title"] },
                    { "Icon", Properties["MudBlazor.MudNavGroup.Icon"] },
                    { "IconColor", Properties["MudBlazor.MudNavGroup.IconColor"] },
                    { "Disabled", Properties["MudBlazor.MudNavGroup.Disabled"] },
                    { "Ripple", Properties["MudBlazor.MudNavGroup.Ripple"] },
                    { "Expanded", Properties["MudBlazor.MudNavGroup.Expanded"] },
                    { "HideExpandIcon", Properties["MudBlazor.MudNavGroup.HideExpandIcon"] },
                    { "MaxHeight", Properties["MudBlazor.MudNavGroup.MaxHeight"] },
                    { "ExpandIcon", Properties["MudBlazor.MudNavGroup.ExpandIcon"] },
                    { "ChildContent", Properties["MudBlazor.MudNavGroup.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudNavGroup.Classname"] },
                    { "ButtonClassname", Properties["MudBlazor.MudNavGroup.ButtonClassname"] },
                    { "IconClassname", Properties["MudBlazor.MudNavGroup.IconClassname"] },
                    { "ExpandIconClassname", Properties["MudBlazor.MudNavGroup.ExpandIconClassname"] },
                    { "ButtonTabIndex", Properties["MudBlazor.MudNavGroup.ButtonTabIndex"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "ExpandedChanged", Events["MudBlazor.MudNavGroup.ExpandedChanged"] },
                },
            }},
            { "MudBlazor.MudNavLink", new() {
                Name = "MudNavLink", 
                NameFriendly = "MudNavLink", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A navigation link as part of a <see cref=""T:MudBlazor.MudNavMenu"" />.", 
                Properties = { 
                    { "Icon", Properties["MudBlazor.MudNavLink.Icon"] },
                    { "IconColor", Properties["MudBlazor.MudNavLink.IconColor"] },
                    { "Match", Properties["MudBlazor.MudNavLink.Match"] },
                    { "Target", Properties["MudBlazor.MudNavLink.Target"] },
                    { "ActiveClass", Properties["MudBlazor.MudNavLink.ActiveClass"] },
                    { "Disabled", Properties["MudBlazor.MudNavLink.Disabled"] },
                    { "Ripple", Properties["MudBlazor.MudNavLink.Ripple"] },
                    { "Href", Properties["MudBlazor.MudNavLink.Href"] },
                    { "ForceLoad", Properties["MudBlazor.MudNavLink.ForceLoad"] },
                    { "ChildContent", Properties["MudBlazor.MudNavLink.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudNavLink.Classname"] },
                    { "LinkClassname", Properties["MudBlazor.MudNavLink.LinkClassname"] },
                    { "IconClassname", Properties["MudBlazor.MudNavLink.IconClassname"] },
                    { "Attributes", Properties["MudBlazor.MudNavLink.Attributes"] },
                    { "TabIndex", Properties["MudBlazor.MudNavLink.TabIndex"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "HandleNavigation", Methods["MudBlazor.MudNavLink.HandleNavigation"] },
                    { "OnClickHandler", Methods["MudBlazor.MudNavLink.OnClickHandler"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudNavLink.OnClick"] },
                },
            }},
            { "MudBlazor.MudNavMenu", new() {
                Name = "MudNavMenu", 
                NameFriendly = "MudNavMenu", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A list of navigation links with support for groups.", 
                Properties = { 
                    { "Color", Properties["MudBlazor.MudNavMenu.Color"] },
                    { "Bordered", Properties["MudBlazor.MudNavMenu.Bordered"] },
                    { "Rounded", Properties["MudBlazor.MudNavMenu.Rounded"] },
                    { "Margin", Properties["MudBlazor.MudNavMenu.Margin"] },
                    { "Dense", Properties["MudBlazor.MudNavMenu.Dense"] },
                    { "ChildContent", Properties["MudBlazor.MudNavMenu.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudNavMenu.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudNumericField`1", new() {
                Name = "MudNumericField`1", 
                NameFriendly = "MudNumericField<T>", 
                BaseTypeName = "MudDebouncedInput`1", 
                IsComponent = true, 
                Summary = @"A field for numeric values from users.", 
                Properties = { 
                    { "Clearable", Properties["MudBlazor.MudNumericField`1.Clearable"] },
                    { "ClearIcon", Properties["MudBlazor.MudNumericField`1.ClearIcon"] },
                    { "InvertMouseWheel", Properties["MudBlazor.MudNumericField`1.InvertMouseWheel"] },
                    { "Min", Properties["MudBlazor.MudNumericField`1.Min"] },
                    { "Max", Properties["MudBlazor.MudNumericField`1.Max"] },
                    { "Step", Properties["MudBlazor.MudNumericField`1.Step"] },
                    { "HideSpinButtons", Properties["MudBlazor.MudNumericField`1.HideSpinButtons"] },
                    { "InputMode", Properties["MudBlazor.MudNumericField`1.InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudNumericField`1.Pattern"] },
                    { "DebounceInterval", Properties["MudBlazor.MudDebouncedInput`1.DebounceInterval"] },
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1.ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1.FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1.Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1.Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1.HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1.HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1.HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1.AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1.AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1.Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1.OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1.AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1.AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1.IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1.Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1.Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1.Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1.Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1.Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1.MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1.Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1.AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1.Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1.Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1.TextUpdateSuppression"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1.ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1.Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1.Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1.InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudNumericField`1.Classname"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1.InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudNumericField`1.FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudNumericField`1.BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudNumericField`1.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudNumericField`1.SelectRangeAsync"] },
                    { "Increment", Methods["MudBlazor.MudNumericField`1.Increment"] },
                    { "Decrement", Methods["MudBlazor.MudNumericField`1.Decrement"] },
                    { "ForceUpdate", Methods["MudBlazor.MudBaseInput`1.ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1.ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "SetValueAsync", Methods["MudBlazor.MudNumericField`1.SetValueAsync"] },
                    { "ValidateInput", Methods["MudBlazor.MudNumericField`1.ValidateInput"] },
                    { "ConstrainBoundaries", Methods["MudBlazor.MudNumericField`1.ConstrainBoundaries"] },
                    { "HandleKeyDownAsync", Methods["MudBlazor.MudNumericField`1.HandleKeyDownAsync"] },
                    { "HandleKeyUpAsync", Methods["MudBlazor.MudNumericField`1.HandleKeyUpAsync"] },
                    { "OnMouseWheelAsync", Methods["MudBlazor.MudNumericField`1.OnMouseWheelAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudNumericField`1.DisposeAsyncCore"] },
                    { "OnChange", Methods["MudBlazor.MudDebouncedInput`1.OnChange"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudDebouncedInput`1.UpdateTextPropertyAsync"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudDebouncedInput`1.UpdateValuePropertyAsync"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1.GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudBaseInput`1.SetTextAsync"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyUpAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1.SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1.SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1.ValidateValue"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudBaseInput`1.ResetValueAsync"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1.GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1.GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "OnDebounceIntervalElapsed", Events["MudBlazor.MudDebouncedInput`1.OnDebounceIntervalElapsed"] },
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1.OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1.TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1.OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1.OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1.OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1.OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudOverlay", new() {
                Name = "MudOverlay", 
                NameFriendly = "MudOverlay", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A layer which darkens a window, often as part of showing a <see cref=""T:MudBlazor.MudDialog"" />.", 
                Properties = { 
                    { "ScrollManager", Properties["MudBlazor.MudOverlay.ScrollManager"] },
                    { "ChildContent", Properties["MudBlazor.MudOverlay.ChildContent"] },
                    { "Visible", Properties["MudBlazor.MudOverlay.Visible"] },
                    { "AutoClose", Properties["MudBlazor.MudOverlay.AutoClose"] },
                    { "LockScroll", Properties["MudBlazor.MudOverlay.LockScroll"] },
                    { "LockScrollClass", Properties["MudBlazor.MudOverlay.LockScrollClass"] },
                    { "DarkBackground", Properties["MudBlazor.MudOverlay.DarkBackground"] },
                    { "LightBackground", Properties["MudBlazor.MudOverlay.LightBackground"] },
                    { "Absolute", Properties["MudBlazor.MudOverlay.Absolute"] },
                    { "ZIndex", Properties["MudBlazor.MudOverlay.ZIndex"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudOverlay.Classname"] },
                    { "ScrimClassname", Properties["MudBlazor.MudOverlay.ScrimClassname"] },
                    { "Styles", Properties["MudBlazor.MudOverlay.Styles"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "VisibleChanged", Events["MudBlazor.MudOverlay.VisibleChanged"] },
                    { "OnClick", Events["MudBlazor.MudOverlay.OnClick"] },
                    { "OnClosed", Events["MudBlazor.MudOverlay.OnClosed"] },
                },
            }},
            { "MudBlazor.MudPageContentNavigation", new() {
                Name = "MudPageContentNavigation", 
                NameFriendly = "MudPageContentNavigation", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A drawer used to navigate sections on a page.", 
                Properties = { 
                    { "Sections", Properties["MudBlazor.MudPageContentNavigation.Sections"] },
                    { "ActiveSection", Properties["MudBlazor.MudPageContentNavigation.ActiveSection"] },
                    { "Headline", Properties["MudBlazor.MudPageContentNavigation.Headline"] },
                    { "ScrollContainerSelector", Properties["MudBlazor.MudPageContentNavigation.ScrollContainerSelector"] },
                    { "SectionClassSelector", Properties["MudBlazor.MudPageContentNavigation.SectionClassSelector"] },
                    { "HierarchyMapper", Properties["MudBlazor.MudPageContentNavigation.HierarchyMapper"] },
                    { "ExpandBehaviour", Properties["MudBlazor.MudPageContentNavigation.ExpandBehaviour"] },
                    { "ActivateFirstSectionAsDefault", Properties["MudBlazor.MudPageContentNavigation.ActivateFirstSectionAsDefault"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ScrollToSection", Methods["MudBlazor.MudPageContentNavigation.ScrollToSection"] },
                    { "AddSection", Methods["MudBlazor.MudPageContentNavigation.AddSection"] },
                },
            }},
            { "MudBlazor.MudPageContentSection", new() {
                Name = "MudPageContentSection", 
                NameFriendly = "MudPageContentSection", 
                BaseTypeName = "Object", 
                Summary = @"A section (nav link) inside the MudPageContentNavigation", 
                Properties = { 
                    { "LevelSortingValue", Properties["MudBlazor.MudPageContentSection.LevelSortingValue"] },
                    { "Parent", Properties["MudBlazor.MudPageContentSection.Parent"] },
                    { "Level", Properties["MudBlazor.MudPageContentSection.Level"] },
                    { "Title", Properties["MudBlazor.MudPageContentSection.Title"] },
                    { "Id", Properties["MudBlazor.MudPageContentSection.Id"] },
                    { "Active", Properties["MudBlazor.MudPageContentSection.Active"] },
                },
            }},
            { "MudBlazor.MudPagination", new() {
                Name = "MudPagination", 
                NameFriendly = "MudPagination", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A list of clickable page numbers along with navigation buttons.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudPagination.RightToLeft"] },
                    { "Count", Properties["MudBlazor.MudPagination.Count"] },
                    { "BoundaryCount", Properties["MudBlazor.MudPagination.BoundaryCount"] },
                    { "MiddleCount", Properties["MudBlazor.MudPagination.MiddleCount"] },
                    { "Selected", Properties["MudBlazor.MudPagination.Selected"] },
                    { "Variant", Properties["MudBlazor.MudPagination.Variant"] },
                    { "Color", Properties["MudBlazor.MudPagination.Color"] },
                    { "Rectangular", Properties["MudBlazor.MudPagination.Rectangular"] },
                    { "Size", Properties["MudBlazor.MudPagination.Size"] },
                    { "DropShadow", Properties["MudBlazor.MudPagination.DropShadow"] },
                    { "Disabled", Properties["MudBlazor.MudPagination.Disabled"] },
                    { "ShowFirstButton", Properties["MudBlazor.MudPagination.ShowFirstButton"] },
                    { "ShowLastButton", Properties["MudBlazor.MudPagination.ShowLastButton"] },
                    { "ShowPreviousButton", Properties["MudBlazor.MudPagination.ShowPreviousButton"] },
                    { "ShowNextButton", Properties["MudBlazor.MudPagination.ShowNextButton"] },
                    { "ShowPageButtons", Properties["MudBlazor.MudPagination.ShowPageButtons"] },
                    { "FirstIcon", Properties["MudBlazor.MudPagination.FirstIcon"] },
                    { "BeforeIcon", Properties["MudBlazor.MudPagination.BeforeIcon"] },
                    { "NextIcon", Properties["MudBlazor.MudPagination.NextIcon"] },
                    { "LastIcon", Properties["MudBlazor.MudPagination.LastIcon"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "NavigateToAsync", Methods["MudBlazor.MudPagination.NavigateToAsync"] },
                },
                Events = { 
                    { "ControlButtonClicked", Events["MudBlazor.MudPagination.ControlButtonClicked"] },
                    { "SelectedChanged", Events["MudBlazor.MudPagination.SelectedChanged"] },
                },
            }},
            { "MudBlazor.MudPaper", new() {
                Name = "MudPaper", 
                NameFriendly = "MudPaper", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A surface for grouping other components.", 
                Properties = { 
                    { "Elevation", Properties["MudBlazor.MudPaper.Elevation"] },
                    { "Square", Properties["MudBlazor.MudPaper.Square"] },
                    { "Outlined", Properties["MudBlazor.MudPaper.Outlined"] },
                    { "Height", Properties["MudBlazor.MudPaper.Height"] },
                    { "Width", Properties["MudBlazor.MudPaper.Width"] },
                    { "MaxHeight", Properties["MudBlazor.MudPaper.MaxHeight"] },
                    { "MaxWidth", Properties["MudBlazor.MudPaper.MaxWidth"] },
                    { "MinHeight", Properties["MudBlazor.MudPaper.MinHeight"] },
                    { "MinWidth", Properties["MudBlazor.MudPaper.MinWidth"] },
                    { "ChildContent", Properties["MudBlazor.MudPaper.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudPaper.Classname"] },
                    { "Stylename", Properties["MudBlazor.MudPaper.Stylename"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudPicker`1", new() {
                Name = "MudPicker`1", 
                NameFriendly = "MudPicker<T>", 
                BaseTypeName = "MudFormComponent`2", 
                IsComponent = true, 
                Summary = @"A component for selecting date, time, and color values.", 
                Properties = { 
                    { "AdornmentColor", Properties["MudBlazor.MudPicker`1.AdornmentColor"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudPicker`1.AdornmentIcon"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudPicker`1.AdornmentAriaLabel"] },
                    { "Placeholder", Properties["MudBlazor.MudPicker`1.Placeholder"] },
                    { "Elevation", Properties["MudBlazor.MudPicker`1.Elevation"] },
                    { "Square", Properties["MudBlazor.MudPicker`1.Square"] },
                    { "Rounded", Properties["MudBlazor.MudPicker`1.Rounded"] },
                    { "HelperText", Properties["MudBlazor.MudPicker`1.HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudPicker`1.HelperTextOnFocus"] },
                    { "Label", Properties["MudBlazor.MudPicker`1.Label"] },
                    { "Clearable", Properties["MudBlazor.MudPicker`1.Clearable"] },
                    { "Disabled", Properties["MudBlazor.MudPicker`1.Disabled"] },
                    { "Underline", Properties["MudBlazor.MudPicker`1.Underline"] },
                    { "ReadOnly", Properties["MudBlazor.MudPicker`1.ReadOnly"] },
                    { "Editable", Properties["MudBlazor.MudPicker`1.Editable"] },
                    { "ShowToolbar", Properties["MudBlazor.MudPicker`1.ShowToolbar"] },
                    { "ToolbarClass", Properties["MudBlazor.MudPicker`1.ToolbarClass"] },
                    { "PickerVariant", Properties["MudBlazor.MudPicker`1.PickerVariant"] },
                    { "Variant", Properties["MudBlazor.MudPicker`1.Variant"] },
                    { "Adornment", Properties["MudBlazor.MudPicker`1.Adornment"] },
                    { "Orientation", Properties["MudBlazor.MudPicker`1.Orientation"] },
                    { "IconSize", Properties["MudBlazor.MudPicker`1.IconSize"] },
                    { "Color", Properties["MudBlazor.MudPicker`1.Color"] },
                    { "ImmediateText", Properties["MudBlazor.MudPicker`1.ImmediateText"] },
                    { "Text", Properties["MudBlazor.MudPicker`1.Text"] },
                    { "ActionsClass", Properties["MudBlazor.MudPicker`1.ActionsClass"] },
                    { "PickerActions", Properties["MudBlazor.MudPicker`1.PickerActions"] },
                    { "Margin", Properties["MudBlazor.MudPicker`1.Margin"] },
                    { "Mask", Properties["MudBlazor.MudPicker`1.Mask"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudPicker`1.AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudPicker`1.TransformOrigin"] },
                    { "OverflowBehavior", Properties["MudBlazor.MudPicker`1.OverflowBehavior"] },
                    { "RelativeWidth", Properties["MudBlazor.MudPicker`1.RelativeWidth"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "PickerClassname", Properties["MudBlazor.MudPicker`1.PickerClassname"] },
                    { "PickerPaperClassname", Properties["MudBlazor.MudPicker`1.PickerPaperClassname"] },
                    { "PickerPaperStylename", Properties["MudBlazor.MudPicker`1.PickerPaperStylename"] },
                    { "PickerInlineClassname", Properties["MudBlazor.MudPicker`1.PickerInlineClassname"] },
                    { "PickerContainerClassname", Properties["MudBlazor.MudPicker`1.PickerContainerClassname"] },
                    { "PickerInputClassname", Properties["MudBlazor.MudPicker`1.PickerInputClassname"] },
                    { "PopoverClassname", Properties["MudBlazor.MudPicker`1.PopoverClassname"] },
                    { "ActionsClassname", Properties["MudBlazor.MudPicker`1.ActionsClassname"] },
                    { "Open", Properties["MudBlazor.MudPicker`1.Open"] },
                    { "InputContent", Properties["MudBlazor.MudPicker`1.InputContent"] },
                    { "PickerContent", Properties["MudBlazor.MudPicker`1.PickerContent"] },
                    { "Render", Properties["MudBlazor.MudPicker`1.Render"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ToggleOpenAsync", Methods["MudBlazor.MudPicker`1.ToggleOpenAsync"] },
                    { "CloseAsync", Methods["MudBlazor.MudPicker`1.CloseAsync"] },
                    { "OpenAsync", Methods["MudBlazor.MudPicker`1.OpenAsync"] },
                    { "ClearAsync", Methods["MudBlazor.MudPicker`1.ClearAsync"] },
                    { "FocusAsync", Methods["MudBlazor.MudPicker`1.FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudPicker`1.BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudPicker`1.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudPicker`1.SelectRangeAsync"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "GetDisabledState", Methods["MudBlazor.MudPicker`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudPicker`1.GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudPicker`1.SetTextAsync"] },
                    { "StringValueChangedAsync", Methods["MudBlazor.MudPicker`1.StringValueChangedAsync"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudPicker`1.ResetValueAsync"] },
                    { "OnOpenedAsync", Methods["MudBlazor.MudPicker`1.OnOpenedAsync"] },
                    { "OnClosedAsync", Methods["MudBlazor.MudPicker`1.OnClosedAsync"] },
                    { "OnPickerOpenedAsync", Methods["MudBlazor.MudPicker`1.OnPickerOpenedAsync"] },
                    { "OnPickerClosedAsync", Methods["MudBlazor.MudPicker`1.OnPickerClosedAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudPicker`1.DisposeAsyncCore"] },
                    { "SetConverter", Methods["MudBlazor.MudFormComponent`2.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2.SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2.ValidateValue"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "PickerOpened", Events["MudBlazor.MudPicker`1.PickerOpened"] },
                    { "PickerClosed", Events["MudBlazor.MudPicker`1.PickerClosed"] },
                    { "TextChanged", Events["MudBlazor.MudPicker`1.TextChanged"] },
                    { "OnClick", Events["MudBlazor.MudPicker`1.OnClick"] },
                },
            }},
            { "MudBlazor.MudPickerContent", new() {
                Name = "MudPickerContent", 
                NameFriendly = "MudPickerContent", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"The content within a <see cref=""T:MudBlazor.MudPicker`1"" />.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudPickerContent.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudPickerContent.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudPickerToolbar", new() {
                Name = "MudPickerToolbar", 
                NameFriendly = "MudPickerToolbar", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"The toolbar content of a <see cref=""T:MudBlazor.MudPicker`1"" />.", 
                Properties = { 
                    { "ShowToolbar", Properties["MudBlazor.MudPickerToolbar.ShowToolbar"] },
                    { "Orientation", Properties["MudBlazor.MudPickerToolbar.Orientation"] },
                    { "PickerVariant", Properties["MudBlazor.MudPickerToolbar.PickerVariant"] },
                    { "Color", Properties["MudBlazor.MudPickerToolbar.Color"] },
                    { "ChildContent", Properties["MudBlazor.MudPickerToolbar.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudPickerToolbar.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudPopover", new() {
                Name = "MudPopover", 
                NameFriendly = "MudPopover", 
                BaseTypeName = "MudPopoverBase", 
                IsComponent = true, 
                Summary = @"Displays content as a window over other content.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudPopover.RightToLeft"] },
                    { "MaxHeight", Properties["MudBlazor.MudPopover.MaxHeight"] },
                    { "Paper", Properties["MudBlazor.MudPopover.Paper"] },
                    { "DropShadow", Properties["MudBlazor.MudPopover.DropShadow"] },
                    { "Elevation", Properties["MudBlazor.MudPopover.Elevation"] },
                    { "Square", Properties["MudBlazor.MudPopover.Square"] },
                    { "Fixed", Properties["MudBlazor.MudPopover.Fixed"] },
                    { "Duration", Properties["MudBlazor.MudPopover.Duration"] },
                    { "Delay", Properties["MudBlazor.MudPopover.Delay"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudPopover.AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudPopover.TransformOrigin"] },
                    { "OverflowBehavior", Properties["MudBlazor.MudPopover.OverflowBehavior"] },
                    { "RelativeWidth", Properties["MudBlazor.MudPopover.RelativeWidth"] },
                    { "Id", Properties["MudBlazor.MudPopoverBase.Id"] },
                    { "Open", Properties["MudBlazor.MudPopoverBase.Open"] },
                    { "ChildContent", Properties["MudBlazor.MudPopoverBase.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "PopoverService", Properties["MudBlazor.MudPopoverBase.PopoverService"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                GlobalSettings = { 
                    { "Elevation", Properties["MudBlazor.MudGlobal+PopoverDefaults.Elevation"] },
                },
            }},
            { "MudBlazor.MudPopoverBase", new() {
                Name = "MudPopoverBase", 
                NameFriendly = "MudPopoverBase", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A base class for implementing Popover components.", 
                Remarks = @"This class provides a base implementation for a Popover component. It implements the <see cref=""T:MudBlazor.IPopover"" /> interfaceand utilizes the <see cref=""T:MudBlazor.IPopoverService"" /> to handle the creation, updating, and destruction of the popover.", 
                Properties = { 
                    { "Id", Properties["MudBlazor.MudPopoverBase.Id"] },
                    { "Open", Properties["MudBlazor.MudPopoverBase.Open"] },
                    { "ChildContent", Properties["MudBlazor.MudPopoverBase.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "PopoverService", Properties["MudBlazor.MudPopoverBase.PopoverService"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudPopoverProvider", new() {
                Name = "MudPopoverProvider", 
                NameFriendly = "MudPopoverProvider", 
                BaseTypeName = "ComponentBase", 
                Summary = @"A required component which manages all MudBlazor popovers.", 
                Remarks = @"This component is required for MudBlazor components to display popovers properly.  It is typically added to your main layout page.", 
                Properties = { 
                    { "Enabled", Properties["MudBlazor.MudPopoverProvider.Enabled"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudProgressCircular", new() {
                Name = "MudProgressCircular", 
                NameFriendly = "MudProgressCircular", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A circle-shaped indicator of progress for an ongoing operation.", 
                Properties = { 
                    { "Color", Properties["MudBlazor.MudProgressCircular.Color"] },
                    { "Size", Properties["MudBlazor.MudProgressCircular.Size"] },
                    { "Indeterminate", Properties["MudBlazor.MudProgressCircular.Indeterminate"] },
                    { "Rounded", Properties["MudBlazor.MudProgressCircular.Rounded"] },
                    { "Min", Properties["MudBlazor.MudProgressCircular.Min"] },
                    { "Max", Properties["MudBlazor.MudProgressCircular.Max"] },
                    { "Value", Properties["MudBlazor.MudProgressCircular.Value"] },
                    { "StrokeWidth", Properties["MudBlazor.MudProgressCircular.StrokeWidth"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudProgressCircular.Classname"] },
                    { "SvgClassname", Properties["MudBlazor.MudProgressCircular.SvgClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudProgressLinear", new() {
                Name = "MudProgressLinear", 
                NameFriendly = "MudProgressLinear", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A line-shaped indicator of progress for an ongoing operation.", 
                Properties = { 
                    { "Color", Properties["MudBlazor.MudProgressLinear.Color"] },
                    { "Size", Properties["MudBlazor.MudProgressLinear.Size"] },
                    { "Indeterminate", Properties["MudBlazor.MudProgressLinear.Indeterminate"] },
                    { "Buffer", Properties["MudBlazor.MudProgressLinear.Buffer"] },
                    { "Rounded", Properties["MudBlazor.MudProgressLinear.Rounded"] },
                    { "Striped", Properties["MudBlazor.MudProgressLinear.Striped"] },
                    { "Vertical", Properties["MudBlazor.MudProgressLinear.Vertical"] },
                    { "ChildContent", Properties["MudBlazor.MudProgressLinear.ChildContent"] },
                    { "Min", Properties["MudBlazor.MudProgressLinear.Min"] },
                    { "Max", Properties["MudBlazor.MudProgressLinear.Max"] },
                    { "Value", Properties["MudBlazor.MudProgressLinear.Value"] },
                    { "BufferValue", Properties["MudBlazor.MudProgressLinear.BufferValue"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudProgressLinear.Classname"] },
                    { "ValuePercent", Properties["MudBlazor.MudProgressLinear.ValuePercent"] },
                    { "BufferPercent", Properties["MudBlazor.MudProgressLinear.BufferPercent"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetValuePercent", Methods["MudBlazor.MudProgressLinear.GetValuePercent"] },
                    { "GetBufferPercent", Methods["MudBlazor.MudProgressLinear.GetBufferPercent"] },
                    { "GetStyledBar1Transform", Methods["MudBlazor.MudProgressLinear.GetStyledBar1Transform"] },
                    { "GetStyledBar2Transform", Methods["MudBlazor.MudProgressLinear.GetStyledBar2Transform"] },
                    { "UpdatePercentages", Methods["MudBlazor.MudProgressLinear.UpdatePercentages"] },
                },
            }},
            { "MudBlazor.MudRadio`1", new() {
                Name = "MudRadio`1", 
                NameFriendly = "MudRadio<T>", 
                BaseTypeName = "MudBooleanInput`1", 
                IsComponent = true, 
                Summary = @"An option from a set of mutually exclusive options, often as part of a <see cref=""T:MudBlazor.MudRadioGroup`1"" />.", 
                Properties = { 
                    { "UncheckedColor", Properties["MudBlazor.MudRadio`1.UncheckedColor"] },
                    { "Dense", Properties["MudBlazor.MudRadio`1.Dense"] },
                    { "CheckedIcon", Properties["MudBlazor.MudRadio`1.CheckedIcon"] },
                    { "UncheckedIcon", Properties["MudBlazor.MudRadio`1.UncheckedIcon"] },
                    { "IndeterminateIcon", Properties["MudBlazor.MudRadio`1.IndeterminateIcon"] },
                    { "Disabled", Properties["MudBlazor.MudBooleanInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBooleanInput`1.ReadOnly"] },
                    { "Value", Properties["MudBlazor.MudBooleanInput`1.Value"] },
                    { "StopClickPropagation", Properties["MudBlazor.MudBooleanInput`1.StopClickPropagation"] },
                    { "RightToLeft", Properties["MudBlazor.MudBooleanInput`1.RightToLeft"] },
                    { "LabelPlacement", Properties["MudBlazor.MudBooleanInput`1.LabelPlacement"] },
                    { "Label", Properties["MudBlazor.MudBooleanInput`1.Label"] },
                    { "Ripple", Properties["MudBlazor.MudBooleanInput`1.Ripple"] },
                    { "Size", Properties["MudBlazor.MudBooleanInput`1.Size"] },
                    { "Color", Properties["MudBlazor.MudBooleanInput`1.Color"] },
                    { "ChildContent", Properties["MudBlazor.MudBooleanInput`1.ChildContent"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudRadio`1.Classname"] },
                    { "LabelClassname", Properties["MudBlazor.MudRadio`1.LabelClassname"] },
                    { "IconClassname", Properties["MudBlazor.MudRadio`1.IconClassname"] },
                    { "BoolValue", Properties["MudBlazor.MudBooleanInput`1.BoolValue"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "SelectAsync", Methods["MudBlazor.MudRadio`1.SelectAsync"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudRadio`1.DisposeAsyncCore"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBooleanInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBooleanInput`1.GetReadOnlyState"] },
                    { "OnChange", Methods["MudBlazor.MudBooleanInput`1.OnChange"] },
                    { "SetBoolValueAsync", Methods["MudBlazor.MudBooleanInput`1.SetBoolValueAsync"] },
                    { "SetCheckedAsync", Methods["MudBlazor.MudBooleanInput`1.SetCheckedAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBooleanInput`1.SetConverter"] },
                    { "HasValue", Methods["MudBlazor.MudBooleanInput`1.HasValue"] },
                    { "ConvertPlacement", Methods["MudBlazor.MudBooleanInput`1.ConvertPlacement"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2.SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2.ValidateValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudFormComponent`2.ResetValueAsync"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.MudBooleanInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudRadioGroup`1", new() {
                Name = "MudRadioGroup`1", 
                NameFriendly = "MudRadioGroup<T>", 
                BaseTypeName = "MudFormComponent`2", 
                IsComponent = true, 
                Summary = @"A group of <see cref=""T:MudBlazor.MudRadio`1"" /> components.", 
                Properties = { 
                    { "InputClass", Properties["MudBlazor.MudRadioGroup`1.InputClass"] },
                    { "InputStyle", Properties["MudBlazor.MudRadioGroup`1.InputStyle"] },
                    { "ChildContent", Properties["MudBlazor.MudRadioGroup`1.ChildContent"] },
                    { "Name", Properties["MudBlazor.MudRadioGroup`1.Name"] },
                    { "Disabled", Properties["MudBlazor.MudRadioGroup`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudRadioGroup`1.ReadOnly"] },
                    { "Value", Properties["MudBlazor.MudRadioGroup`1.Value"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudRadioGroup`1.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "CheckGenericTypeMatch", Methods["MudBlazor.MudRadioGroup`1.CheckGenericTypeMatch"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "SetSelectedOptionAsync", Methods["MudBlazor.MudRadioGroup`1.SetSelectedOptionAsync"] },
                    { "SetSelectedRadioAsync", Methods["MudBlazor.MudRadioGroup`1.SetSelectedRadioAsync"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudRadioGroup`1.ResetValueAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudFormComponent`2.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2.SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2.ValidateValue"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudFormComponent`2.DisposeAsyncCore"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.MudRadioGroup`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudRangeInput`1", new() {
                Name = "MudRangeInput`1", 
                NameFriendly = "MudRangeInput<T>", 
                BaseTypeName = "MudBaseInput`1", 
                IsComponent = true, 
                Summary = @"A component for collecting start and end values which define a range.", 
                Properties = { 
                    { "InputType", Properties["MudBlazor.MudRangeInput`1.InputType"] },
                    { "PlaceholderStart", Properties["MudBlazor.MudRangeInput`1.PlaceholderStart"] },
                    { "PlaceholderEnd", Properties["MudBlazor.MudRangeInput`1.PlaceholderEnd"] },
                    { "Clearable", Properties["MudBlazor.MudRangeInput`1.Clearable"] },
                    { "ChildContent", Properties["MudBlazor.MudRangeInput`1.ChildContent"] },
                    { "SeparatorIcon", Properties["MudBlazor.MudRangeInput`1.SeparatorIcon"] },
                    { "TextStart", Properties["MudBlazor.MudRangeInput`1.TextStart"] },
                    { "TextEnd", Properties["MudBlazor.MudRangeInput`1.TextEnd"] },
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1.ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1.FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1.Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1.Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1.HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1.HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1.HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1.AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1.AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1.Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1.OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1.AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1.AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1.IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1.Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1.Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1.Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1.Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1.Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1.MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1.Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1.AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1.Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1.Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1.TextUpdateSuppression"] },
                    { "InputMode", Properties["MudBlazor.MudBaseInput`1.InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudBaseInput`1.Pattern"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1.ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1.Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1.Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1.InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudRangeInput`1.Classname"] },
                    { "InputClassname", Properties["MudBlazor.MudRangeInput`1.InputClassname"] },
                    { "AdornmentClassname", Properties["MudBlazor.MudRangeInput`1.AdornmentClassname"] },
                    { "ClearButtonClassname", Properties["MudBlazor.MudRangeInput`1.ClearButtonClassname"] },
                    { "InputTypeString", Properties["MudBlazor.MudRangeInput`1.InputTypeString"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1.InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusStartAsync", Methods["MudBlazor.MudRangeInput`1.FocusStartAsync"] },
                    { "SelectStartAsync", Methods["MudBlazor.MudRangeInput`1.SelectStartAsync"] },
                    { "SelectRangeStartAsync", Methods["MudBlazor.MudRangeInput`1.SelectRangeStartAsync"] },
                    { "FocusEndAsync", Methods["MudBlazor.MudRangeInput`1.FocusEndAsync"] },
                    { "SelectEndAsync", Methods["MudBlazor.MudRangeInput`1.SelectEndAsync"] },
                    { "SelectRangeEndAsync", Methods["MudBlazor.MudRangeInput`1.SelectRangeEndAsync"] },
                    { "FocusAsync", Methods["MudBlazor.MudBaseInput`1.FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudBaseInput`1.BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudBaseInput`1.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudBaseInput`1.SelectRangeAsync"] },
                    { "ForceUpdate", Methods["MudBlazor.MudBaseInput`1.ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1.ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "IsClearable", Methods["MudBlazor.MudRangeInput`1.IsClearable"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudRangeInput`1.UpdateTextPropertyAsync"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudRangeInput`1.UpdateValuePropertyAsync"] },
                    { "ClearButtonClickHandlerAsync", Methods["MudBlazor.MudRangeInput`1.ClearButtonClickHandlerAsync"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1.GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudBaseInput`1.SetTextAsync"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyUpAsync"] },
                    { "SetValueAsync", Methods["MudBlazor.MudBaseInput`1.SetValueAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1.SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1.SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1.ValidateValue"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudBaseInput`1.ResetValueAsync"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1.GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1.GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudFormComponent`2.DisposeAsyncCore"] },
                },
                Events = { 
                    { "OnClearButtonClick", Events["MudBlazor.MudRangeInput`1.OnClearButtonClick"] },
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1.OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1.TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1.OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1.OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1.OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1.OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudRating", new() {
                Name = "MudRating", 
                NameFriendly = "MudRating", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component for collecting and displaying ratings.", 
                Properties = { 
                    { "RatingItemsClass", Properties["MudBlazor.MudRating.RatingItemsClass"] },
                    { "RatingItemsStyle", Properties["MudBlazor.MudRating.RatingItemsStyle"] },
                    { "Name", Properties["MudBlazor.MudRating.Name"] },
                    { "MaxValue", Properties["MudBlazor.MudRating.MaxValue"] },
                    { "FullIcon", Properties["MudBlazor.MudRating.FullIcon"] },
                    { "EmptyIcon", Properties["MudBlazor.MudRating.EmptyIcon"] },
                    { "FullIconColor", Properties["MudBlazor.MudRating.FullIconColor"] },
                    { "EmptyIconColor", Properties["MudBlazor.MudRating.EmptyIconColor"] },
                    { "Color", Properties["MudBlazor.MudRating.Color"] },
                    { "Size", Properties["MudBlazor.MudRating.Size"] },
                    { "Ripple", Properties["MudBlazor.MudRating.Ripple"] },
                    { "Disabled", Properties["MudBlazor.MudRating.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudRating.ReadOnly"] },
                    { "SelectedValue", Properties["MudBlazor.MudRating.SelectedValue"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "ClassName", Properties["MudBlazor.MudRating.ClassName"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "SelectedValueChanged", Events["MudBlazor.MudRating.SelectedValueChanged"] },
                    { "HoveredValueChanged", Events["MudBlazor.MudRating.HoveredValueChanged"] },
                },
            }},
            { "MudBlazor.MudRatingItem", new() {
                Name = "MudRatingItem", 
                NameFriendly = "MudRatingItem", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A clickable item as part of a <see cref=""T:MudBlazor.MudRating"" />.", 
                Properties = { 
                    { "ItemValue", Properties["MudBlazor.MudRatingItem.ItemValue"] },
                    { "Size", Properties["MudBlazor.MudRatingItem.Size"] },
                    { "Color", Properties["MudBlazor.MudRatingItem.Color"] },
                    { "Ripple", Properties["MudBlazor.MudRatingItem.Ripple"] },
                    { "Disabled", Properties["MudBlazor.MudRatingItem.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudRatingItem.ReadOnly"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "ClassName", Properties["MudBlazor.MudRatingItem.ClassName"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "ItemClicked", Events["MudBlazor.MudRatingItem.ItemClicked"] },
                    { "ItemHovered", Events["MudBlazor.MudRatingItem.ItemHovered"] },
                },
            }},
            { "MudBlazor.MudRender", new() {
                Name = "MudRender", 
                NameFriendly = "MudRender", 
                BaseTypeName = "ComponentBase", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudRender.ChildContent"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudRTLProvider", new() {
                Name = "MudRTLProvider", 
                NameFriendly = "MudRTLProvider", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A language support provider for Right-to-Left (RTL) languages such as Arabic, Hebrew, and Persian.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudRTLProvider.RightToLeft"] },
                    { "ChildContent", Properties["MudBlazor.MudRTLProvider.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudRTLProvider.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudScrollToTop", new() {
                Name = "MudScrollToTop", 
                NameFriendly = "MudScrollToTop", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A button which lets the user jump to the top of the page.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudScrollToTop.ChildContent"] },
                    { "Selector", Properties["MudBlazor.MudScrollToTop.Selector"] },
                    { "Visible", Properties["MudBlazor.MudScrollToTop.Visible"] },
                    { "VisibleCssClass", Properties["MudBlazor.MudScrollToTop.VisibleCssClass"] },
                    { "HiddenCssClass", Properties["MudBlazor.MudScrollToTop.HiddenCssClass"] },
                    { "TopOffset", Properties["MudBlazor.MudScrollToTop.TopOffset"] },
                    { "ScrollBehavior", Properties["MudBlazor.MudScrollToTop.ScrollBehavior"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudScrollToTop.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "OnScroll", Events["MudBlazor.MudScrollToTop.OnScroll"] },
                    { "OnClick", Events["MudBlazor.MudScrollToTop.OnClick"] },
                },
            }},
            { "MudBlazor.MudSelect`1", new() {
                Name = "MudSelect`1", 
                NameFriendly = "MudSelect<T>", 
                BaseTypeName = "MudBaseInput`1", 
                IsComponent = true, 
                Summary = @"A component for choosing an item from a list of options.", 
                Properties = { 
                    { "DropdownSettings", Properties["MudBlazor.MudSelect`1.DropdownSettings"] },
                    { "RelativeWidth", Properties["MudBlazor.MudSelect`1.RelativeWidth"] },
                    { "OuterClass", Properties["MudBlazor.MudSelect`1.OuterClass"] },
                    { "InputClass", Properties["MudBlazor.MudSelect`1.InputClass"] },
                    { "ChildContent", Properties["MudBlazor.MudSelect`1.ChildContent"] },
                    { "PopoverClass", Properties["MudBlazor.MudSelect`1.PopoverClass"] },
                    { "ListClass", Properties["MudBlazor.MudSelect`1.ListClass"] },
                    { "Dense", Properties["MudBlazor.MudSelect`1.Dense"] },
                    { "OpenIcon", Properties["MudBlazor.MudSelect`1.OpenIcon"] },
                    { "CloseIcon", Properties["MudBlazor.MudSelect`1.CloseIcon"] },
                    { "SelectAll", Properties["MudBlazor.MudSelect`1.SelectAll"] },
                    { "SelectAllText", Properties["MudBlazor.MudSelect`1.SelectAllText"] },
                    { "MultiSelectionTextFunc", Properties["MudBlazor.MudSelect`1.MultiSelectionTextFunc"] },
                    { "Delimiter", Properties["MudBlazor.MudSelect`1.Delimiter"] },
                    { "QuickSearchInterval", Properties["MudBlazor.MudSelect`1.QuickSearchInterval"] },
                    { "SelectedValues", Properties["MudBlazor.MudSelect`1.SelectedValues"] },
                    { "Comparer", Properties["MudBlazor.MudSelect`1.Comparer"] },
                    { "ToStringFunc", Properties["MudBlazor.MudSelect`1.ToStringFunc"] },
                    { "MultiSelection", Properties["MudBlazor.MudSelect`1.MultiSelection"] },
                    { "Items", Properties["MudBlazor.MudSelect`1.Items"] },
                    { "MaxHeight", Properties["MudBlazor.MudSelect`1.MaxHeight"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudSelect`1.AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudSelect`1.TransformOrigin"] },
                    { "Strict", Properties["MudBlazor.MudSelect`1.Strict"] },
                    { "Clearable", Properties["MudBlazor.MudSelect`1.Clearable"] },
                    { "ClearIcon", Properties["MudBlazor.MudSelect`1.ClearIcon"] },
                    { "LockScroll", Properties["MudBlazor.MudSelect`1.LockScroll"] },
                    { "CheckedIcon", Properties["MudBlazor.MudSelect`1.CheckedIcon"] },
                    { "UncheckedIcon", Properties["MudBlazor.MudSelect`1.UncheckedIcon"] },
                    { "IndeterminateIcon", Properties["MudBlazor.MudSelect`1.IndeterminateIcon"] },
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1.ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1.FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1.Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1.Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1.HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1.HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1.HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1.AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1.AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1.Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1.OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1.AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1.AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1.IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1.Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1.Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1.Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1.Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1.Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1.MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1.Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1.AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1.Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1.Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1.TextUpdateSuppression"] },
                    { "InputMode", Properties["MudBlazor.MudBaseInput`1.InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudBaseInput`1.Pattern"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1.ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1.Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1.Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1.InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "OuterClassname", Properties["MudBlazor.MudSelect`1.OuterClassname"] },
                    { "Classname", Properties["MudBlazor.MudSelect`1.Classname"] },
                    { "InputClassname", Properties["MudBlazor.MudSelect`1.InputClassname"] },
                    { "CanRenderValue", Properties["MudBlazor.MudSelect`1.CanRenderValue"] },
                    { "IsValueInList", Properties["MudBlazor.MudSelect`1.IsValueInList"] },
                    { "SelectAllCheckBoxIcon", Properties["MudBlazor.MudSelect`1.SelectAllCheckBoxIcon"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1.InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "SelectOption", Methods["MudBlazor.MudSelect`1.SelectOption"] },
                    { "ToggleMenu", Methods["MudBlazor.MudSelect`1.ToggleMenu"] },
                    { "OpenMenu", Methods["MudBlazor.MudSelect`1.OpenMenu"] },
                    { "CloseMenu", Methods["MudBlazor.MudSelect`1.CloseMenu"] },
                    { "CheckGenericTypeMatch", Methods["MudBlazor.MudSelect`1.CheckGenericTypeMatch"] },
                    { "FocusAsync", Methods["MudBlazor.MudSelect`1.FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudSelect`1.BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudSelect`1.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudSelect`1.SelectRangeAsync"] },
                    { "Clear", Methods["MudBlazor.MudSelect`1.Clear"] },
                    { "RegisterShadowItem", Methods["MudBlazor.MudSelect`1.RegisterShadowItem"] },
                    { "UnregisterShadowItem", Methods["MudBlazor.MudSelect`1.UnregisterShadowItem"] },
                    { "ForceUpdate", Methods["MudBlazor.MudSelect`1.ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1.ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "GetSelectedValuePresenter", Methods["MudBlazor.MudSelect`1.GetSelectedValuePresenter"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudSelect`1.UpdateValuePropertyAsync"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudSelect`1.UpdateTextPropertyAsync"] },
                    { "SelectClearButtonClickHandlerAsync", Methods["MudBlazor.MudSelect`1.SelectClearButtonClickHandlerAsync"] },
                    { "SetCustomizedTextAsync", Methods["MudBlazor.MudSelect`1.SetCustomizedTextAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudSelect`1.DisposeAsyncCore"] },
                    { "HasValue", Methods["MudBlazor.MudSelect`1.HasValue"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1.GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudBaseInput`1.SetTextAsync"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyUpAsync"] },
                    { "SetValueAsync", Methods["MudBlazor.MudBaseInput`1.SetValueAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1.SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1.SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1.ValidateValue"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudBaseInput`1.ResetValueAsync"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1.GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1.GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "OnOpen", Events["MudBlazor.MudSelect`1.OnOpen"] },
                    { "OnClose", Events["MudBlazor.MudSelect`1.OnClose"] },
                    { "SelectedValuesChanged", Events["MudBlazor.MudSelect`1.SelectedValuesChanged"] },
                    { "OnClearButtonClick", Events["MudBlazor.MudSelect`1.OnClearButtonClick"] },
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1.OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1.TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1.OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1.OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1.OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1.OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudSelectItem`1", new() {
                Name = "MudSelectItem`1", 
                NameFriendly = "MudSelectItem<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A selectable option displayed within a <see cref=""T:MudBlazor.MudSelect`1"" /> component.", 
                Properties = { 
                    { "Value", Properties["MudBlazor.MudSelectItem`1.Value"] },
                    { "Disabled", Properties["MudBlazor.MudSelectItem`1.Disabled"] },
                    { "ChildContent", Properties["MudBlazor.MudSelectItem`1.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "MultiSelection", Properties["MudBlazor.MudSelectItem`1.MultiSelection"] },
                    { "CheckBoxIcon", Properties["MudBlazor.MudSelectItem`1.CheckBoxIcon"] },
                    { "DisplayString", Properties["MudBlazor.MudSelectItem`1.DisplayString"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudSimpleTable", new() {
                Name = "MudSimpleTable", 
                NameFriendly = "MudSimpleTable", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A table similar to <see cref=""T:MudBlazor.MudTable`1"" /> but with basic styling features.", 
                Properties = { 
                    { "Elevation", Properties["MudBlazor.MudSimpleTable.Elevation"] },
                    { "Hover", Properties["MudBlazor.MudSimpleTable.Hover"] },
                    { "Square", Properties["MudBlazor.MudSimpleTable.Square"] },
                    { "Dense", Properties["MudBlazor.MudSimpleTable.Dense"] },
                    { "Outlined", Properties["MudBlazor.MudSimpleTable.Outlined"] },
                    { "Bordered", Properties["MudBlazor.MudSimpleTable.Bordered"] },
                    { "Striped", Properties["MudBlazor.MudSimpleTable.Striped"] },
                    { "FixedHeader", Properties["MudBlazor.MudSimpleTable.FixedHeader"] },
                    { "ChildContent", Properties["MudBlazor.MudSimpleTable.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudSimpleTable.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudSkeleton", new() {
                Name = "MudSkeleton", 
                NameFriendly = "MudSkeleton", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A temporary placeholder for content while data is loaded.", 
                Properties = { 
                    { "Width", Properties["MudBlazor.MudSkeleton.Width"] },
                    { "Height", Properties["MudBlazor.MudSkeleton.Height"] },
                    { "SkeletonType", Properties["MudBlazor.MudSkeleton.SkeletonType"] },
                    { "Animation", Properties["MudBlazor.MudSkeleton.Animation"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudSkeleton.Classname"] },
                    { "Stylename", Properties["MudBlazor.MudSkeleton.Stylename"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudSlider`1", new() {
                Name = "MudSlider`1", 
                NameFriendly = "MudSlider<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component which allows users to select a value within a specified range.", 
                Properties = { 
                    { "Min", Properties["MudBlazor.MudSlider`1.Min"] },
                    { "Max", Properties["MudBlazor.MudSlider`1.Max"] },
                    { "Step", Properties["MudBlazor.MudSlider`1.Step"] },
                    { "Disabled", Properties["MudBlazor.MudSlider`1.Disabled"] },
                    { "ChildContent", Properties["MudBlazor.MudSlider`1.ChildContent"] },
                    { "Value", Properties["MudBlazor.MudSlider`1.Value"] },
                    { "NullableValue", Properties["MudBlazor.MudSlider`1.NullableValue"] },
                    { "Color", Properties["MudBlazor.MudSlider`1.Color"] },
                    { "Immediate", Properties["MudBlazor.MudSlider`1.Immediate"] },
                    { "Vertical", Properties["MudBlazor.MudSlider`1.Vertical"] },
                    { "TickMarks", Properties["MudBlazor.MudSlider`1.TickMarks"] },
                    { "TickMarkLabels", Properties["MudBlazor.MudSlider`1.TickMarkLabels"] },
                    { "Size", Properties["MudBlazor.MudSlider`1.Size"] },
                    { "Variant", Properties["MudBlazor.MudSlider`1.Variant"] },
                    { "ValueLabel", Properties["MudBlazor.MudSlider`1.ValueLabel"] },
                    { "Culture", Properties["MudBlazor.MudSlider`1.Culture"] },
                    { "ValueLabelFormat", Properties["MudBlazor.MudSlider`1.ValueLabelFormat"] },
                    { "ValueLabelContent", Properties["MudBlazor.MudSlider`1.ValueLabelContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudSlider`1.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.MudSlider`1.ValueChanged"] },
                    { "NullableValueChanged", Events["MudBlazor.MudSlider`1.NullableValueChanged"] },
                },
            }},
            { "MudBlazor.MudSnackbarElement", new() {
                Name = "MudSnackbarElement", 
                NameFriendly = "MudSnackbarElement", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "Snackbar", Properties["MudBlazor.MudSnackbarElement.Snackbar"] },
                    { "CloseIcon", Properties["MudBlazor.MudSnackbarElement.CloseIcon"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "InteractionStartHandler", Methods["MudBlazor.MudSnackbarElement.InteractionStartHandler"] },
                    { "InteractionEndHandler", Methods["MudBlazor.MudSnackbarElement.InteractionEndHandler"] },
                },
            }},
            { "MudBlazor.MudSnackbarProvider", new() {
                Name = "MudSnackbarProvider", 
                NameFriendly = "MudSnackbarProvider", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudSnackbarProvider.RightToLeft"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Snackbar", Properties["MudBlazor.MudSnackbarProvider.Snackbar"] },
                    { "Classname", Properties["MudBlazor.MudSnackbarProvider.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudSpacer", new() {
                Name = "MudSpacer", 
                NameFriendly = "MudSpacer", 
                BaseTypeName = "ComponentBase", 
                Properties = { 
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudStack", new() {
                Name = "MudStack", 
                NameFriendly = "MudStack", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component for aligning child items horizontally or vertically.", 
                Properties = { 
                    { "Row", Properties["MudBlazor.MudStack.Row"] },
                    { "Reverse", Properties["MudBlazor.MudStack.Reverse"] },
                    { "Spacing", Properties["MudBlazor.MudStack.Spacing"] },
                    { "Justify", Properties["MudBlazor.MudStack.Justify"] },
                    { "AlignItems", Properties["MudBlazor.MudStack.AlignItems"] },
                    { "StretchItems", Properties["MudBlazor.MudStack.StretchItems"] },
                    { "Wrap", Properties["MudBlazor.MudStack.Wrap"] },
                    { "ChildContent", Properties["MudBlazor.MudStack.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudStack.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                GlobalSettings = { 
                    { "Spacing", Properties["MudBlazor.MudGlobal+StackDefaults.Spacing"] },
                },
            }},
            { "MudBlazor.MudStep", new() {
                Name = "MudStep", 
                NameFriendly = "MudStep", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A individual step as part of a <see cref=""T:MudBlazor.MudStepper"" />.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudStep.ChildContent"] },
                    { "Title", Properties["MudBlazor.MudStep.Title"] },
                    { "SecondaryText", Properties["MudBlazor.MudStep.SecondaryText"] },
                    { "IsActive", Properties["MudBlazor.MudStep.IsActive"] },
                    { "CompletedStepColor", Properties["MudBlazor.MudStep.CompletedStepColor"] },
                    { "ErrorStepColor", Properties["MudBlazor.MudStep.ErrorStepColor"] },
                    { "Skippable", Properties["MudBlazor.MudStep.Skippable"] },
                    { "Completed", Properties["MudBlazor.MudStep.Completed"] },
                    { "Disabled", Properties["MudBlazor.MudStep.Disabled"] },
                    { "HasError", Properties["MudBlazor.MudStep.HasError"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "SetHasErrorAsync", Methods["MudBlazor.MudStep.SetHasErrorAsync"] },
                    { "SetCompletedAsync", Methods["MudBlazor.MudStep.SetCompletedAsync"] },
                    { "SetDisabledAsync", Methods["MudBlazor.MudStep.SetDisabledAsync"] },
                },
                Events = { 
                    { "CompletedChanged", Events["MudBlazor.MudStep.CompletedChanged"] },
                    { "DisabledChanged", Events["MudBlazor.MudStep.DisabledChanged"] },
                    { "HasErrorChanged", Events["MudBlazor.MudStep.HasErrorChanged"] },
                    { "OnClick", Events["MudBlazor.MudStep.OnClick"] },
                },
            }},
            { "MudBlazor.MudStepper", new() {
                Name = "MudStepper", 
                NameFriendly = "MudStepper", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A wizard that guides the user through a series of steps to complete a transaction.", 
                Properties = { 
                    { "Steps", Properties["MudBlazor.MudStepper.Steps"] },
                    { "ActiveStep", Properties["MudBlazor.MudStepper.ActiveStep"] },
                    { "ActiveIndex", Properties["MudBlazor.MudStepper.ActiveIndex"] },
                    { "CompletedStepColor", Properties["MudBlazor.MudStepper.CompletedStepColor"] },
                    { "CurrentStepColor", Properties["MudBlazor.MudStepper.CurrentStepColor"] },
                    { "ErrorStepColor", Properties["MudBlazor.MudStepper.ErrorStepColor"] },
                    { "StepCompleteIcon", Properties["MudBlazor.MudStepper.StepCompleteIcon"] },
                    { "StepErrorIcon", Properties["MudBlazor.MudStepper.StepErrorIcon"] },
                    { "ResetButtonIcon", Properties["MudBlazor.MudStepper.ResetButtonIcon"] },
                    { "PreviousButtonIcon", Properties["MudBlazor.MudStepper.PreviousButtonIcon"] },
                    { "SkipButtonIcon", Properties["MudBlazor.MudStepper.SkipButtonIcon"] },
                    { "NextButtonIcon", Properties["MudBlazor.MudStepper.NextButtonIcon"] },
                    { "CompleteButtonIcon", Properties["MudBlazor.MudStepper.CompleteButtonIcon"] },
                    { "NavClass", Properties["MudBlazor.MudStepper.NavClass"] },
                    { "NonLinear", Properties["MudBlazor.MudStepper.NonLinear"] },
                    { "ShowResetButton", Properties["MudBlazor.MudStepper.ShowResetButton"] },
                    { "Vertical", Properties["MudBlazor.MudStepper.Vertical"] },
                    { "StepClass", Properties["MudBlazor.MudStepper.StepClass"] },
                    { "StepStyle", Properties["MudBlazor.MudStepper.StepStyle"] },
                    { "CenterLabels", Properties["MudBlazor.MudStepper.CenterLabels"] },
                    { "Ripple", Properties["MudBlazor.MudStepper.Ripple"] },
                    { "ScrollableNavigation", Properties["MudBlazor.MudStepper.ScrollableNavigation"] },
                    { "OnPreviewInteraction", Properties["MudBlazor.MudStepper.OnPreviewInteraction"] },
                    { "IsCurrentStepSkippable", Properties["MudBlazor.MudStepper.IsCurrentStepSkippable"] },
                    { "CanGoToNextStep", Properties["MudBlazor.MudStepper.CanGoToNextStep"] },
                    { "PreviousStepEnabled", Properties["MudBlazor.MudStepper.PreviousStepEnabled"] },
                    { "IsCompleted", Properties["MudBlazor.MudStepper.IsCompleted"] },
                    { "ShowCompleteInsteadOfNext", Properties["MudBlazor.MudStepper.ShowCompleteInsteadOfNext"] },
                    { "ChildContent", Properties["MudBlazor.MudStepper.ChildContent"] },
                    { "TitleTemplate", Properties["MudBlazor.MudStepper.TitleTemplate"] },
                    { "LabelTemplate", Properties["MudBlazor.MudStepper.LabelTemplate"] },
                    { "ConnectorTemplate", Properties["MudBlazor.MudStepper.ConnectorTemplate"] },
                    { "CompletedContent", Properties["MudBlazor.MudStepper.CompletedContent"] },
                    { "ActionContent", Properties["MudBlazor.MudStepper.ActionContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudStepper.Classname"] },
                    { "NavClassname", Properties["MudBlazor.MudStepper.NavClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "PreviousStepAsync", Methods["MudBlazor.MudStepper.PreviousStepAsync"] },
                    { "NextStepAsync", Methods["MudBlazor.MudStepper.NextStepAsync"] },
                    { "SkipCurrentStepAsync", Methods["MudBlazor.MudStepper.SkipCurrentStepAsync"] },
                    { "ResetAsync", Methods["MudBlazor.MudStepper.ResetAsync"] },
                },
                Events = { 
                    { "ActiveIndexChanged", Events["MudBlazor.MudStepper.ActiveIndexChanged"] },
                },
            }},
            { "MudBlazor.MudSwipeArea", new() {
                Name = "MudSwipeArea", 
                NameFriendly = "MudSwipeArea", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudSwipeArea.ChildContent"] },
                    { "Sensitivity", Properties["MudBlazor.MudSwipeArea.Sensitivity"] },
                    { "PreventDefault", Properties["MudBlazor.MudSwipeArea.PreventDefault"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudSwipeArea.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "OnSwipeEnd", Events["MudBlazor.MudSwipeArea.OnSwipeEnd"] },
                },
            }},
            { "MudBlazor.MudSwitch`1", new() {
                Name = "MudSwitch`1", 
                NameFriendly = "MudSwitch<T>", 
                BaseTypeName = "MudBooleanInput`1", 
                IsComponent = true, 
                Properties = { 
                    { "UncheckedColor", Properties["MudBlazor.MudSwitch`1.UncheckedColor"] },
                    { "ThumbIcon", Properties["MudBlazor.MudSwitch`1.ThumbIcon"] },
                    { "ThumbIconColor", Properties["MudBlazor.MudSwitch`1.ThumbIconColor"] },
                    { "Disabled", Properties["MudBlazor.MudBooleanInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBooleanInput`1.ReadOnly"] },
                    { "Value", Properties["MudBlazor.MudBooleanInput`1.Value"] },
                    { "StopClickPropagation", Properties["MudBlazor.MudBooleanInput`1.StopClickPropagation"] },
                    { "RightToLeft", Properties["MudBlazor.MudBooleanInput`1.RightToLeft"] },
                    { "LabelPlacement", Properties["MudBlazor.MudBooleanInput`1.LabelPlacement"] },
                    { "Label", Properties["MudBlazor.MudBooleanInput`1.Label"] },
                    { "Ripple", Properties["MudBlazor.MudBooleanInput`1.Ripple"] },
                    { "Size", Properties["MudBlazor.MudBooleanInput`1.Size"] },
                    { "Color", Properties["MudBlazor.MudBooleanInput`1.Color"] },
                    { "ChildContent", Properties["MudBlazor.MudBooleanInput`1.ChildContent"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudSwitch`1.Classname"] },
                    { "LabelClassname", Properties["MudBlazor.MudSwitch`1.LabelClassname"] },
                    { "SwitchClassname", Properties["MudBlazor.MudSwitch`1.SwitchClassname"] },
                    { "TrackClassname", Properties["MudBlazor.MudSwitch`1.TrackClassname"] },
                    { "ThumbClassname", Properties["MudBlazor.MudSwitch`1.ThumbClassname"] },
                    { "SpanClassname", Properties["MudBlazor.MudSwitch`1.SpanClassname"] },
                    { "IconClassname", Properties["MudBlazor.MudBooleanInput`1.IconClassname"] },
                    { "BoolValue", Properties["MudBlazor.MudBooleanInput`1.BoolValue"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudSwitch`1.DisposeAsyncCore"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBooleanInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBooleanInput`1.GetReadOnlyState"] },
                    { "OnChange", Methods["MudBlazor.MudBooleanInput`1.OnChange"] },
                    { "SetBoolValueAsync", Methods["MudBlazor.MudBooleanInput`1.SetBoolValueAsync"] },
                    { "SetCheckedAsync", Methods["MudBlazor.MudBooleanInput`1.SetCheckedAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBooleanInput`1.SetConverter"] },
                    { "HasValue", Methods["MudBlazor.MudBooleanInput`1.HasValue"] },
                    { "ConvertPlacement", Methods["MudBlazor.MudBooleanInput`1.ConvertPlacement"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2.SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2.ValidateValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudFormComponent`2.ResetValueAsync"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.MudBooleanInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudTable`1", new() {
                Name = "MudTable`1", 
                NameFriendly = "MudTable<T>", 
                BaseTypeName = "MudTableBase", 
                IsComponent = true, 
                Summary = @"A sortable, filterable table with multiselection and pagination.", 
                Properties = { 
                    { "RowTemplate", Properties["MudBlazor.MudTable`1.RowTemplate"] },
                    { "ChildRowContent", Properties["MudBlazor.MudTable`1.ChildRowContent"] },
                    { "RowEditingTemplate", Properties["MudBlazor.MudTable`1.RowEditingTemplate"] },
                    { "RowEditableFunc", Properties["MudBlazor.MudTable`1.RowEditableFunc"] },
                    { "Columns", Properties["MudBlazor.MudTable`1.Columns"] },
                    { "NoRecordsContent", Properties["MudBlazor.MudTable`1.NoRecordsContent"] },
                    { "LoadingContent", Properties["MudBlazor.MudTable`1.LoadingContent"] },
                    { "HorizontalScrollbar", Properties["MudBlazor.MudTable`1.HorizontalScrollbar"] },
                    { "Items", Properties["MudBlazor.MudTable`1.Items"] },
                    { "Filter", Properties["MudBlazor.MudTable`1.Filter"] },
                    { "RowClassFunc", Properties["MudBlazor.MudTable`1.RowClassFunc"] },
                    { "RowStyleFunc", Properties["MudBlazor.MudTable`1.RowStyleFunc"] },
                    { "SelectedItem", Properties["MudBlazor.MudTable`1.SelectedItem"] },
                    { "SelectedItems", Properties["MudBlazor.MudTable`1.SelectedItems"] },
                    { "Comparer", Properties["MudBlazor.MudTable`1.Comparer"] },
                    { "GroupBy", Properties["MudBlazor.MudTable`1.GroupBy"] },
                    { "GroupHeaderTemplate", Properties["MudBlazor.MudTable`1.GroupHeaderTemplate"] },
                    { "GroupHeaderClass", Properties["MudBlazor.MudTable`1.GroupHeaderClass"] },
                    { "GroupHeaderStyle", Properties["MudBlazor.MudTable`1.GroupHeaderStyle"] },
                    { "GroupFooterClass", Properties["MudBlazor.MudTable`1.GroupFooterClass"] },
                    { "GroupFooterStyle", Properties["MudBlazor.MudTable`1.GroupFooterStyle"] },
                    { "GroupFooterTemplate", Properties["MudBlazor.MudTable`1.GroupFooterTemplate"] },
                    { "FilteredItems", Properties["MudBlazor.MudTable`1.FilteredItems"] },
                    { "TableContext", Properties["MudBlazor.MudTable`1.TableContext"] },
                    { "Context", Properties["MudBlazor.MudTable`1.Context"] },
                    { "ServerData", Properties["MudBlazor.MudTable`1.ServerData"] },
                    { "IsEditRowSwitchingBlocked", Properties["MudBlazor.MudTableBase.IsEditRowSwitchingBlocked"] },
                    { "Elevation", Properties["MudBlazor.MudTableBase.Elevation"] },
                    { "Square", Properties["MudBlazor.MudTableBase.Square"] },
                    { "Outlined", Properties["MudBlazor.MudTableBase.Outlined"] },
                    { "Bordered", Properties["MudBlazor.MudTableBase.Bordered"] },
                    { "Dense", Properties["MudBlazor.MudTableBase.Dense"] },
                    { "Hover", Properties["MudBlazor.MudTableBase.Hover"] },
                    { "Striped", Properties["MudBlazor.MudTableBase.Striped"] },
                    { "Breakpoint", Properties["MudBlazor.MudTableBase.Breakpoint"] },
                    { "FixedHeader", Properties["MudBlazor.MudTableBase.FixedHeader"] },
                    { "FixedFooter", Properties["MudBlazor.MudTableBase.FixedFooter"] },
                    { "Height", Properties["MudBlazor.MudTableBase.Height"] },
                    { "SortLabel", Properties["MudBlazor.MudTableBase.SortLabel"] },
                    { "AllowUnsorted", Properties["MudBlazor.MudTableBase.AllowUnsorted"] },
                    { "RowsPerPage", Properties["MudBlazor.MudTableBase.RowsPerPage"] },
                    { "CurrentPage", Properties["MudBlazor.MudTableBase.CurrentPage"] },
                    { "MultiSelection", Properties["MudBlazor.MudTableBase.MultiSelection"] },
                    { "SelectionChangeable", Properties["MudBlazor.MudTableBase.SelectionChangeable"] },
                    { "SelectOnRowClick", Properties["MudBlazor.MudTableBase.SelectOnRowClick"] },
                    { "ToolBarContent", Properties["MudBlazor.MudTableBase.ToolBarContent"] },
                    { "Loading", Properties["MudBlazor.MudTableBase.Loading"] },
                    { "LoadingProgressColor", Properties["MudBlazor.MudTableBase.LoadingProgressColor"] },
                    { "HeaderContent", Properties["MudBlazor.MudTableBase.HeaderContent"] },
                    { "CustomHeader", Properties["MudBlazor.MudTableBase.CustomHeader"] },
                    { "HeaderClass", Properties["MudBlazor.MudTableBase.HeaderClass"] },
                    { "ContainerStyle", Properties["MudBlazor.MudTableBase.ContainerStyle"] },
                    { "ContainerClass", Properties["MudBlazor.MudTableBase.ContainerClass"] },
                    { "FooterContent", Properties["MudBlazor.MudTableBase.FooterContent"] },
                    { "CustomFooter", Properties["MudBlazor.MudTableBase.CustomFooter"] },
                    { "FooterClass", Properties["MudBlazor.MudTableBase.FooterClass"] },
                    { "ColGroup", Properties["MudBlazor.MudTableBase.ColGroup"] },
                    { "PagerContent", Properties["MudBlazor.MudTableBase.PagerContent"] },
                    { "ReadOnly", Properties["MudBlazor.MudTableBase.ReadOnly"] },
                    { "CommitEditTooltip", Properties["MudBlazor.MudTableBase.CommitEditTooltip"] },
                    { "CancelEditTooltip", Properties["MudBlazor.MudTableBase.CancelEditTooltip"] },
                    { "CommitEditIcon", Properties["MudBlazor.MudTableBase.CommitEditIcon"] },
                    { "CancelEditIcon", Properties["MudBlazor.MudTableBase.CancelEditIcon"] },
                    { "CanCancelEdit", Properties["MudBlazor.MudTableBase.CanCancelEdit"] },
                    { "ApplyButtonPosition", Properties["MudBlazor.MudTableBase.ApplyButtonPosition"] },
                    { "EditButtonPosition", Properties["MudBlazor.MudTableBase.EditButtonPosition"] },
                    { "EditTrigger", Properties["MudBlazor.MudTableBase.EditTrigger"] },
                    { "EditButtonContent", Properties["MudBlazor.MudTableBase.EditButtonContent"] },
                    { "RowEditPreview", Properties["MudBlazor.MudTableBase.RowEditPreview"] },
                    { "RowEditCommit", Properties["MudBlazor.MudTableBase.RowEditCommit"] },
                    { "RowEditCancel", Properties["MudBlazor.MudTableBase.RowEditCancel"] },
                    { "TotalItems", Properties["MudBlazor.MudTableBase.TotalItems"] },
                    { "RowClass", Properties["MudBlazor.MudTableBase.RowClass"] },
                    { "RowStyle", Properties["MudBlazor.MudTableBase.RowStyle"] },
                    { "Virtualize", Properties["MudBlazor.MudTableBase.Virtualize"] },
                    { "OverscanCount", Properties["MudBlazor.MudTableBase.OverscanCount"] },
                    { "ItemSize", Properties["MudBlazor.MudTableBase.ItemSize"] },
                    { "Validator", Properties["MudBlazor.MudTableBase.Validator"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Def", Properties["MudBlazor.MudTable`1.Def"] },
                    { "CurrentPageItems", Properties["MudBlazor.MudTable`1.CurrentPageItems"] },
                    { "NumPages", Properties["MudBlazor.MudTable`1.NumPages"] },
                    { "Classname", Properties["MudBlazor.MudTableBase.Classname"] },
                    { "HeadClassname", Properties["MudBlazor.MudTableBase.HeadClassname"] },
                    { "FootClassname", Properties["MudBlazor.MudTableBase.FootClassname"] },
                    { "TableContainerStyle", Properties["MudBlazor.MudTableBase.TableContainerStyle"] },
                    { "TableContainerClass", Properties["MudBlazor.MudTableBase.TableContainerClass"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetFilteredItemsCount", Methods["MudBlazor.MudTable`1.GetFilteredItemsCount"] },
                    { "SetSelectedItem", Methods["MudBlazor.MudTable`1.SetSelectedItem"] },
                    { "SetEditingItem", Methods["MudBlazor.MudTable`1.SetEditingItem"] },
                    { "ContainsItem", Methods["MudBlazor.MudTable`1.ContainsItem"] },
                    { "UpdateSelection", Methods["MudBlazor.MudTable`1.UpdateSelection"] },
                    { "ReloadServerData", Methods["MudBlazor.MudTable`1.ReloadServerData"] },
                    { "ExpandAllGroups", Methods["MudBlazor.MudTable`1.ExpandAllGroups"] },
                    { "CollapseAllGroups", Methods["MudBlazor.MudTable`1.CollapseAllGroups"] },
                    { "NavigateTo", Methods["MudBlazor.MudTableBase.NavigateTo"] },
                    { "SetRowsPerPage", Methods["MudBlazor.MudTableBase.SetRowsPerPage"] },
                    { "IsCheckedRow", Methods["MudBlazor.MudTable`1.IsCheckedRow"] },
                    { "GetItemsOfPage", Methods["MudBlazor.MudTable`1.GetItemsOfPage"] },
                },
                Events = { 
                    { "OnRowClick", Events["MudBlazor.MudTable`1.OnRowClick"] },
                    { "OnRowMouseEnter", Events["MudBlazor.MudTable`1.OnRowMouseEnter"] },
                    { "OnRowMouseLeave", Events["MudBlazor.MudTable`1.OnRowMouseLeave"] },
                    { "SelectedItemChanged", Events["MudBlazor.MudTable`1.SelectedItemChanged"] },
                    { "SelectedItemsChanged", Events["MudBlazor.MudTable`1.SelectedItemsChanged"] },
                    { "RowsPerPageChanged", Events["MudBlazor.MudTableBase.RowsPerPageChanged"] },
                    { "CurrentPageChanged", Events["MudBlazor.MudTableBase.CurrentPageChanged"] },
                    { "OnCommitEditClick", Events["MudBlazor.MudTableBase.OnCommitEditClick"] },
                    { "OnCancelEditClick", Events["MudBlazor.MudTableBase.OnCancelEditClick"] },
                    { "OnPreviewEditClick", Events["MudBlazor.MudTableBase.OnPreviewEditClick"] },
                },
            }},
            { "MudBlazor.MudTableBase", new() {
                Name = "MudTableBase", 
                NameFriendly = "MudTableBase", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A base class for designing table components.", 
                Properties = { 
                    { "IsEditRowSwitchingBlocked", Properties["MudBlazor.MudTableBase.IsEditRowSwitchingBlocked"] },
                    { "Elevation", Properties["MudBlazor.MudTableBase.Elevation"] },
                    { "Square", Properties["MudBlazor.MudTableBase.Square"] },
                    { "Outlined", Properties["MudBlazor.MudTableBase.Outlined"] },
                    { "Bordered", Properties["MudBlazor.MudTableBase.Bordered"] },
                    { "Dense", Properties["MudBlazor.MudTableBase.Dense"] },
                    { "Hover", Properties["MudBlazor.MudTableBase.Hover"] },
                    { "Striped", Properties["MudBlazor.MudTableBase.Striped"] },
                    { "Breakpoint", Properties["MudBlazor.MudTableBase.Breakpoint"] },
                    { "FixedHeader", Properties["MudBlazor.MudTableBase.FixedHeader"] },
                    { "FixedFooter", Properties["MudBlazor.MudTableBase.FixedFooter"] },
                    { "Height", Properties["MudBlazor.MudTableBase.Height"] },
                    { "SortLabel", Properties["MudBlazor.MudTableBase.SortLabel"] },
                    { "AllowUnsorted", Properties["MudBlazor.MudTableBase.AllowUnsorted"] },
                    { "RowsPerPage", Properties["MudBlazor.MudTableBase.RowsPerPage"] },
                    { "CurrentPage", Properties["MudBlazor.MudTableBase.CurrentPage"] },
                    { "MultiSelection", Properties["MudBlazor.MudTableBase.MultiSelection"] },
                    { "SelectionChangeable", Properties["MudBlazor.MudTableBase.SelectionChangeable"] },
                    { "SelectOnRowClick", Properties["MudBlazor.MudTableBase.SelectOnRowClick"] },
                    { "ToolBarContent", Properties["MudBlazor.MudTableBase.ToolBarContent"] },
                    { "Loading", Properties["MudBlazor.MudTableBase.Loading"] },
                    { "LoadingProgressColor", Properties["MudBlazor.MudTableBase.LoadingProgressColor"] },
                    { "HeaderContent", Properties["MudBlazor.MudTableBase.HeaderContent"] },
                    { "CustomHeader", Properties["MudBlazor.MudTableBase.CustomHeader"] },
                    { "HeaderClass", Properties["MudBlazor.MudTableBase.HeaderClass"] },
                    { "ContainerStyle", Properties["MudBlazor.MudTableBase.ContainerStyle"] },
                    { "ContainerClass", Properties["MudBlazor.MudTableBase.ContainerClass"] },
                    { "FooterContent", Properties["MudBlazor.MudTableBase.FooterContent"] },
                    { "CustomFooter", Properties["MudBlazor.MudTableBase.CustomFooter"] },
                    { "FooterClass", Properties["MudBlazor.MudTableBase.FooterClass"] },
                    { "ColGroup", Properties["MudBlazor.MudTableBase.ColGroup"] },
                    { "PagerContent", Properties["MudBlazor.MudTableBase.PagerContent"] },
                    { "ReadOnly", Properties["MudBlazor.MudTableBase.ReadOnly"] },
                    { "CommitEditTooltip", Properties["MudBlazor.MudTableBase.CommitEditTooltip"] },
                    { "CancelEditTooltip", Properties["MudBlazor.MudTableBase.CancelEditTooltip"] },
                    { "CommitEditIcon", Properties["MudBlazor.MudTableBase.CommitEditIcon"] },
                    { "CancelEditIcon", Properties["MudBlazor.MudTableBase.CancelEditIcon"] },
                    { "CanCancelEdit", Properties["MudBlazor.MudTableBase.CanCancelEdit"] },
                    { "ApplyButtonPosition", Properties["MudBlazor.MudTableBase.ApplyButtonPosition"] },
                    { "EditButtonPosition", Properties["MudBlazor.MudTableBase.EditButtonPosition"] },
                    { "EditTrigger", Properties["MudBlazor.MudTableBase.EditTrigger"] },
                    { "EditButtonContent", Properties["MudBlazor.MudTableBase.EditButtonContent"] },
                    { "RowEditPreview", Properties["MudBlazor.MudTableBase.RowEditPreview"] },
                    { "RowEditCommit", Properties["MudBlazor.MudTableBase.RowEditCommit"] },
                    { "RowEditCancel", Properties["MudBlazor.MudTableBase.RowEditCancel"] },
                    { "TotalItems", Properties["MudBlazor.MudTableBase.TotalItems"] },
                    { "RowClass", Properties["MudBlazor.MudTableBase.RowClass"] },
                    { "RowStyle", Properties["MudBlazor.MudTableBase.RowStyle"] },
                    { "Virtualize", Properties["MudBlazor.MudTableBase.Virtualize"] },
                    { "OverscanCount", Properties["MudBlazor.MudTableBase.OverscanCount"] },
                    { "ItemSize", Properties["MudBlazor.MudTableBase.ItemSize"] },
                    { "TableContext", Properties["MudBlazor.MudTableBase.TableContext"] },
                    { "Validator", Properties["MudBlazor.MudTableBase.Validator"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTableBase.Classname"] },
                    { "HeadClassname", Properties["MudBlazor.MudTableBase.HeadClassname"] },
                    { "FootClassname", Properties["MudBlazor.MudTableBase.FootClassname"] },
                    { "NumPages", Properties["MudBlazor.MudTableBase.NumPages"] },
                    { "TableContainerStyle", Properties["MudBlazor.MudTableBase.TableContainerStyle"] },
                    { "TableContainerClass", Properties["MudBlazor.MudTableBase.TableContainerClass"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "NavigateTo", Methods["MudBlazor.MudTableBase.NavigateTo"] },
                    { "SetRowsPerPage", Methods["MudBlazor.MudTableBase.SetRowsPerPage"] },
                    { "GetFilteredItemsCount", Methods["MudBlazor.MudTableBase.GetFilteredItemsCount"] },
                    { "SetSelectedItem", Methods["MudBlazor.MudTableBase.SetSelectedItem"] },
                    { "SetEditingItem", Methods["MudBlazor.MudTableBase.SetEditingItem"] },
                    { "ContainsItem", Methods["MudBlazor.MudTableBase.ContainsItem"] },
                    { "UpdateSelection", Methods["MudBlazor.MudTableBase.UpdateSelection"] },
                },
                Events = { 
                    { "RowsPerPageChanged", Events["MudBlazor.MudTableBase.RowsPerPageChanged"] },
                    { "CurrentPageChanged", Events["MudBlazor.MudTableBase.CurrentPageChanged"] },
                    { "OnCommitEditClick", Events["MudBlazor.MudTableBase.OnCommitEditClick"] },
                    { "OnCancelEditClick", Events["MudBlazor.MudTableBase.OnCancelEditClick"] },
                    { "OnPreviewEditClick", Events["MudBlazor.MudTableBase.OnPreviewEditClick"] },
                },
            }},
            { "MudBlazor.MudTableGroupRow`1", new() {
                Name = "MudTableGroupRow`1", 
                NameFriendly = "MudTableGroupRow<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A grouping of values for a column in a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Properties = { 
                    { "Context", Properties["MudBlazor.MudTableGroupRow`1.Context"] },
                    { "GroupDefinition", Properties["MudBlazor.MudTableGroupRow`1.GroupDefinition"] },
                    { "Items", Properties["MudBlazor.MudTableGroupRow`1.Items"] },
                    { "HeaderTemplate", Properties["MudBlazor.MudTableGroupRow`1.HeaderTemplate"] },
                    { "FooterTemplate", Properties["MudBlazor.MudTableGroupRow`1.FooterTemplate"] },
                    { "Checkable", Properties["MudBlazor.MudTableGroupRow`1.Checkable"] },
                    { "SelectionChangeable", Properties["MudBlazor.MudTableGroupRow`1.SelectionChangeable"] },
                    { "HeaderClass", Properties["MudBlazor.MudTableGroupRow`1.HeaderClass"] },
                    { "FooterClass", Properties["MudBlazor.MudTableGroupRow`1.FooterClass"] },
                    { "HeaderStyle", Properties["MudBlazor.MudTableGroupRow`1.HeaderStyle"] },
                    { "FooterStyle", Properties["MudBlazor.MudTableGroupRow`1.FooterStyle"] },
                    { "ExpandIcon", Properties["MudBlazor.MudTableGroupRow`1.ExpandIcon"] },
                    { "CollapseIcon", Properties["MudBlazor.MudTableGroupRow`1.CollapseIcon"] },
                    { "Checked", Properties["MudBlazor.MudTableGroupRow`1.Checked"] },
                    { "Expanded", Properties["MudBlazor.MudTableGroupRow`1.Expanded"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "HeaderClassname", Properties["MudBlazor.MudTableGroupRow`1.HeaderClassname"] },
                    { "FooterClassname", Properties["MudBlazor.MudTableGroupRow`1.FooterClassname"] },
                    { "ActionsStylename", Properties["MudBlazor.MudTableGroupRow`1.ActionsStylename"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "SetChecked", Methods["MudBlazor.MudTableGroupRow`1.SetChecked"] },
                },
                Events = { 
                    { "OnRowClick", Events["MudBlazor.MudTableGroupRow`1.OnRowClick"] },
                },
            }},
            { "MudBlazor.MudTablePager", new() {
                Name = "MudTablePager", 
                NameFriendly = "MudTablePager", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A component which changes pages and page size for a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudTablePager.RightToLeft"] },
                    { "Context", Properties["MudBlazor.MudTablePager.Context"] },
                    { "HideRowsPerPage", Properties["MudBlazor.MudTablePager.HideRowsPerPage"] },
                    { "HidePageNumber", Properties["MudBlazor.MudTablePager.HidePageNumber"] },
                    { "HidePagination", Properties["MudBlazor.MudTablePager.HidePagination"] },
                    { "HorizontalAlignment", Properties["MudBlazor.MudTablePager.HorizontalAlignment"] },
                    { "PageSizeOptions", Properties["MudBlazor.MudTablePager.PageSizeOptions"] },
                    { "InfoFormat", Properties["MudBlazor.MudTablePager.InfoFormat"] },
                    { "AllItemsText", Properties["MudBlazor.MudTablePager.AllItemsText"] },
                    { "RowsPerPageString", Properties["MudBlazor.MudTablePager.RowsPerPageString"] },
                    { "FirstIcon", Properties["MudBlazor.MudTablePager.FirstIcon"] },
                    { "BeforeIcon", Properties["MudBlazor.MudTablePager.BeforeIcon"] },
                    { "NextIcon", Properties["MudBlazor.MudTablePager.NextIcon"] },
                    { "LastIcon", Properties["MudBlazor.MudTablePager.LastIcon"] },
                    { "Table", Properties["MudBlazor.MudTablePager.Table"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTablePager.Classname"] },
                    { "PaginationClassname", Properties["MudBlazor.MudTablePager.PaginationClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudTableSortLabel`1", new() {
                Name = "MudTableSortLabel`1", 
                NameFriendly = "MudTableSortLabel<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A clickable column which toggles the sort column and direction for a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Properties = { 
                    { "TableContext", Properties["MudBlazor.MudTableSortLabel`1.TableContext"] },
                    { "Table", Properties["MudBlazor.MudTableSortLabel`1.Table"] },
                    { "Context", Properties["MudBlazor.MudTableSortLabel`1.Context"] },
                    { "ChildContent", Properties["MudBlazor.MudTableSortLabel`1.ChildContent"] },
                    { "InitialDirection", Properties["MudBlazor.MudTableSortLabel`1.InitialDirection"] },
                    { "Enabled", Properties["MudBlazor.MudTableSortLabel`1.Enabled"] },
                    { "SortIcon", Properties["MudBlazor.MudTableSortLabel`1.SortIcon"] },
                    { "AppendIcon", Properties["MudBlazor.MudTableSortLabel`1.AppendIcon"] },
                    { "SortDirection", Properties["MudBlazor.MudTableSortLabel`1.SortDirection"] },
                    { "SortBy", Properties["MudBlazor.MudTableSortLabel`1.SortBy"] },
                    { "SortLabel", Properties["MudBlazor.MudTableSortLabel`1.SortLabel"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTableSortLabel`1.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ToggleSortDirection", Methods["MudBlazor.MudTableSortLabel`1.ToggleSortDirection"] },
                },
                Events = { 
                    { "SortDirectionChanged", Events["MudBlazor.MudTableSortLabel`1.SortDirectionChanged"] },
                },
            }},
            { "MudBlazor.MudTabPanel", new() {
                Name = "MudTabPanel", 
                NameFriendly = "MudTabPanel", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "Text", Properties["MudBlazor.MudTabPanel.Text"] },
                    { "Icon", Properties["MudBlazor.MudTabPanel.Icon"] },
                    { "IconColor", Properties["MudBlazor.MudTabPanel.IconColor"] },
                    { "Disabled", Properties["MudBlazor.MudTabPanel.Disabled"] },
                    { "ShowCloseIcon", Properties["MudBlazor.MudTabPanel.ShowCloseIcon"] },
                    { "BadgeData", Properties["MudBlazor.MudTabPanel.BadgeData"] },
                    { "BadgeDot", Properties["MudBlazor.MudTabPanel.BadgeDot"] },
                    { "BadgeColor", Properties["MudBlazor.MudTabPanel.BadgeColor"] },
                    { "ID", Properties["MudBlazor.MudTabPanel.ID"] },
                    { "ChildContent", Properties["MudBlazor.MudTabPanel.ChildContent"] },
                    { "TabContent", Properties["MudBlazor.MudTabPanel.TabContent"] },
                    { "TabWrapperContent", Properties["MudBlazor.MudTabPanel.TabWrapperContent"] },
                    { "ToolTip", Properties["MudBlazor.MudTabPanel.ToolTip"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Fields = { 
                    { "PanelRef", Fields["MudBlazor.MudTabPanel.PanelRef"] },
                },
                Events = { 
                    { "OnClick", Events["MudBlazor.MudTabPanel.OnClick"] },
                },
            }},
            { "MudBlazor.MudTabs", new() {
                Name = "MudTabs", 
                NameFriendly = "MudTabs", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudTabs.RightToLeft"] },
                    { "KeepPanelsAlive", Properties["MudBlazor.MudTabs.KeepPanelsAlive"] },
                    { "Rounded", Properties["MudBlazor.MudTabs.Rounded"] },
                    { "Border", Properties["MudBlazor.MudTabs.Border"] },
                    { "Outlined", Properties["MudBlazor.MudTabs.Outlined"] },
                    { "Centered", Properties["MudBlazor.MudTabs.Centered"] },
                    { "HideSlider", Properties["MudBlazor.MudTabs.HideSlider"] },
                    { "PrevIcon", Properties["MudBlazor.MudTabs.PrevIcon"] },
                    { "NextIcon", Properties["MudBlazor.MudTabs.NextIcon"] },
                    { "AlwaysShowScrollButtons", Properties["MudBlazor.MudTabs.AlwaysShowScrollButtons"] },
                    { "MaxHeight", Properties["MudBlazor.MudTabs.MaxHeight"] },
                    { "MinimumTabWidth", Properties["MudBlazor.MudTabs.MinimumTabWidth"] },
                    { "Position", Properties["MudBlazor.MudTabs.Position"] },
                    { "Color", Properties["MudBlazor.MudTabs.Color"] },
                    { "SliderColor", Properties["MudBlazor.MudTabs.SliderColor"] },
                    { "IconColor", Properties["MudBlazor.MudTabs.IconColor"] },
                    { "ScrollIconColor", Properties["MudBlazor.MudTabs.ScrollIconColor"] },
                    { "Elevation", Properties["MudBlazor.MudTabs.Elevation"] },
                    { "ApplyEffectsToContainer", Properties["MudBlazor.MudTabs.ApplyEffectsToContainer"] },
                    { "Ripple", Properties["MudBlazor.MudTabs.Ripple"] },
                    { "SliderAnimation", Properties["MudBlazor.MudTabs.SliderAnimation"] },
                    { "ChildContent", Properties["MudBlazor.MudTabs.ChildContent"] },
                    { "PrePanelContent", Properties["MudBlazor.MudTabs.PrePanelContent"] },
                    { "TabPanelClass", Properties["MudBlazor.MudTabs.TabPanelClass"] },
                    { "TabHeaderClass", Properties["MudBlazor.MudTabs.TabHeaderClass"] },
                    { "ActiveTabClass", Properties["MudBlazor.MudTabs.ActiveTabClass"] },
                    { "PanelClass", Properties["MudBlazor.MudTabs.PanelClass"] },
                    { "ActivePanel", Properties["MudBlazor.MudTabs.ActivePanel"] },
                    { "ActivePanelIndex", Properties["MudBlazor.MudTabs.ActivePanelIndex"] },
                    { "Panels", Properties["MudBlazor.MudTabs.Panels"] },
                    { "Header", Properties["MudBlazor.MudTabs.Header"] },
                    { "HeaderPosition", Properties["MudBlazor.MudTabs.HeaderPosition"] },
                    { "TabPanelHeader", Properties["MudBlazor.MudTabs.TabPanelHeader"] },
                    { "TabPanelHeaderPosition", Properties["MudBlazor.MudTabs.TabPanelHeaderPosition"] },
                    { "OnPreviewInteraction", Properties["MudBlazor.MudTabs.OnPreviewInteraction"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "InternalClassName", Properties["MudBlazor.MudTabs.InternalClassName"] },
                    { "TabsClassnames", Properties["MudBlazor.MudTabs.TabsClassnames"] },
                    { "TabBarClassnames", Properties["MudBlazor.MudTabs.TabBarClassnames"] },
                    { "WrapperClassnames", Properties["MudBlazor.MudTabs.WrapperClassnames"] },
                    { "WrapperScrollStyle", Properties["MudBlazor.MudTabs.WrapperScrollStyle"] },
                    { "PanelsClassnames", Properties["MudBlazor.MudTabs.PanelsClassnames"] },
                    { "SliderClass", Properties["MudBlazor.MudTabs.SliderClass"] },
                    { "MaxHeightStyles", Properties["MudBlazor.MudTabs.MaxHeightStyles"] },
                    { "SliderStyle", Properties["MudBlazor.MudTabs.SliderStyle"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ActivatePanel", Methods["MudBlazor.MudTabs.ActivatePanel"] },
                },
                Events = { 
                    { "ActivePanelIndexChanged", Events["MudBlazor.MudTabs.ActivePanelIndexChanged"] },
                },
            }},
            { "MudBlazor.MudTd", new() {
                Name = "MudTd", 
                NameFriendly = "MudTd", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A cell within a <see cref=""T:MudBlazor.MudTr"" />, <see cref=""T:MudBlazor.MudTHeadRow"" />, or <see cref=""T:MudBlazor.MudTFootRow"" /> row component.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudTd.ChildContent"] },
                    { "DataLabel", Properties["MudBlazor.MudTd.DataLabel"] },
                    { "HideSmall", Properties["MudBlazor.MudTd.HideSmall"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTd.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudText", new() {
                Name = "MudText", 
                NameFriendly = "MudText", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudText.RightToLeft"] },
                    { "Typo", Properties["MudBlazor.MudText.Typo"] },
                    { "Align", Properties["MudBlazor.MudText.Align"] },
                    { "Color", Properties["MudBlazor.MudText.Color"] },
                    { "GutterBottom", Properties["MudBlazor.MudText.GutterBottom"] },
                    { "Inline", Properties["MudBlazor.MudText.Inline"] },
                    { "ChildContent", Properties["MudBlazor.MudText.ChildContent"] },
                    { "HtmlTag", Properties["MudBlazor.MudText.HtmlTag"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudText.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudTextField`1", new() {
                Name = "MudTextField`1", 
                NameFriendly = "MudTextField<T>", 
                BaseTypeName = "MudDebouncedInput`1", 
                IsComponent = true, 
                Summary = @"An input for collecting text values.", 
                Properties = { 
                    { "InputReference", Properties["MudBlazor.MudTextField`1.InputReference"] },
                    { "InputType", Properties["MudBlazor.MudTextField`1.InputType"] },
                    { "Clearable", Properties["MudBlazor.MudTextField`1.Clearable"] },
                    { "ClearIcon", Properties["MudBlazor.MudTextField`1.ClearIcon"] },
                    { "Mask", Properties["MudBlazor.MudTextField`1.Mask"] },
                    { "AutoGrow", Properties["MudBlazor.MudTextField`1.AutoGrow"] },
                    { "MaxLines", Properties["MudBlazor.MudTextField`1.MaxLines"] },
                    { "DebounceInterval", Properties["MudBlazor.MudDebouncedInput`1.DebounceInterval"] },
                    { "Disabled", Properties["MudBlazor.MudBaseInput`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudBaseInput`1.ReadOnly"] },
                    { "FullWidth", Properties["MudBlazor.MudBaseInput`1.FullWidth"] },
                    { "Immediate", Properties["MudBlazor.MudBaseInput`1.Immediate"] },
                    { "Underline", Properties["MudBlazor.MudBaseInput`1.Underline"] },
                    { "HelperId", Properties["MudBlazor.MudBaseInput`1.HelperId"] },
                    { "HelperText", Properties["MudBlazor.MudBaseInput`1.HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudBaseInput`1.HelperTextOnFocus"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudBaseInput`1.AdornmentIcon"] },
                    { "AdornmentText", Properties["MudBlazor.MudBaseInput`1.AdornmentText"] },
                    { "Adornment", Properties["MudBlazor.MudBaseInput`1.Adornment"] },
                    { "OnlyValidateIfDirty", Properties["MudBlazor.MudBaseInput`1.OnlyValidateIfDirty"] },
                    { "AdornmentColor", Properties["MudBlazor.MudBaseInput`1.AdornmentColor"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudBaseInput`1.AdornmentAriaLabel"] },
                    { "IconSize", Properties["MudBlazor.MudBaseInput`1.IconSize"] },
                    { "Variant", Properties["MudBlazor.MudBaseInput`1.Variant"] },
                    { "Margin", Properties["MudBlazor.MudBaseInput`1.Margin"] },
                    { "Typo", Properties["MudBlazor.MudBaseInput`1.Typo"] },
                    { "Placeholder", Properties["MudBlazor.MudBaseInput`1.Placeholder"] },
                    { "Counter", Properties["MudBlazor.MudBaseInput`1.Counter"] },
                    { "MaxLength", Properties["MudBlazor.MudBaseInput`1.MaxLength"] },
                    { "Label", Properties["MudBlazor.MudBaseInput`1.Label"] },
                    { "AutoFocus", Properties["MudBlazor.MudBaseInput`1.AutoFocus"] },
                    { "Lines", Properties["MudBlazor.MudBaseInput`1.Lines"] },
                    { "Text", Properties["MudBlazor.MudBaseInput`1.Text"] },
                    { "TextUpdateSuppression", Properties["MudBlazor.MudBaseInput`1.TextUpdateSuppression"] },
                    { "InputMode", Properties["MudBlazor.MudBaseInput`1.InputMode"] },
                    { "Pattern", Properties["MudBlazor.MudBaseInput`1.Pattern"] },
                    { "ShrinkLabel", Properties["MudBlazor.MudBaseInput`1.ShrinkLabel"] },
                    { "KeyDownPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyDownPreventDefault"] },
                    { "KeyUpPreventDefault", Properties["MudBlazor.MudBaseInput`1.KeyUpPreventDefault"] },
                    { "Value", Properties["MudBlazor.MudBaseInput`1.Value"] },
                    { "Format", Properties["MudBlazor.MudBaseInput`1.Format"] },
                    { "InputId", Properties["MudBlazor.MudBaseInput`1.InputId"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2.Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2.RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2.ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2.Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2.ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2.Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2.Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2.ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2.HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2.Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2.ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2.Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2.For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2.IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTextField`1.Classname"] },
                    { "InputElementId", Properties["MudBlazor.MudBaseInput`1.InputElementId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FocusAsync", Methods["MudBlazor.MudTextField`1.FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudTextField`1.BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudTextField`1.SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudTextField`1.SelectRangeAsync"] },
                    { "Clear", Methods["MudBlazor.MudTextField`1.Clear"] },
                    { "SetText", Methods["MudBlazor.MudTextField`1.SetText"] },
                    { "ForceUpdate", Methods["MudBlazor.MudBaseInput`1.ForceUpdate"] },
                    { "ForceRender", Methods["MudBlazor.MudBaseInput`1.ForceRender"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2.GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2.Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2.ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2.ResetValidation"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudTextField`1.ResetValueAsync"] },
                    { "SetValueAsync", Methods["MudBlazor.MudTextField`1.SetValueAsync"] },
                    { "SetTextAsync", Methods["MudBlazor.MudTextField`1.SetTextAsync"] },
                    { "OnChange", Methods["MudBlazor.MudDebouncedInput`1.OnChange"] },
                    { "UpdateTextPropertyAsync", Methods["MudBlazor.MudDebouncedInput`1.UpdateTextPropertyAsync"] },
                    { "UpdateValuePropertyAsync", Methods["MudBlazor.MudDebouncedInput`1.UpdateValuePropertyAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudDebouncedInput`1.DisposeAsyncCore"] },
                    { "GetDisabledState", Methods["MudBlazor.MudBaseInput`1.GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudBaseInput`1.GetReadOnlyState"] },
                    { "InvokeKeyDownAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyDownAsync"] },
                    { "InvokeKeyUpAsync", Methods["MudBlazor.MudBaseInput`1.InvokeKeyUpAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudBaseInput`1.SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudBaseInput`1.SetCulture"] },
                    { "SetFormat", Methods["MudBlazor.MudBaseInput`1.SetFormat"] },
                    { "ValidateValue", Methods["MudBlazor.MudBaseInput`1.ValidateValue"] },
                    { "GetHelperId", Methods["MudBlazor.MudBaseInput`1.GetHelperId"] },
                    { "GetAriaDescribedByString", Methods["MudBlazor.MudBaseInput`1.GetAriaDescribedByString"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2.HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2.FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2.ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"] },
                },
                Events = { 
                    { "OnClearButtonClick", Events["MudBlazor.MudTextField`1.OnClearButtonClick"] },
                    { "OnDebounceIntervalElapsed", Events["MudBlazor.MudDebouncedInput`1.OnDebounceIntervalElapsed"] },
                    { "OnAdornmentClick", Events["MudBlazor.MudBaseInput`1.OnAdornmentClick"] },
                    { "TextChanged", Events["MudBlazor.MudBaseInput`1.TextChanged"] },
                    { "OnBlur", Events["MudBlazor.MudBaseInput`1.OnBlur"] },
                    { "OnInternalInputChanged", Events["MudBlazor.MudBaseInput`1.OnInternalInputChanged"] },
                    { "OnKeyDown", Events["MudBlazor.MudBaseInput`1.OnKeyDown"] },
                    { "OnKeyUp", Events["MudBlazor.MudBaseInput`1.OnKeyUp"] },
                    { "ValueChanged", Events["MudBlazor.MudBaseInput`1.ValueChanged"] },
                },
            }},
            { "MudBlazor.MudTFootRow", new() {
                Name = "MudTFootRow", 
                NameFriendly = "MudTFootRow", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A footer row displayed at the bottom of a <see cref=""T:MudBlazor.MudTable`1"" /> and each group.", 
                Properties = { 
                    { "Context", Properties["MudBlazor.MudTFootRow.Context"] },
                    { "ChildContent", Properties["MudBlazor.MudTFootRow.ChildContent"] },
                    { "Checkable", Properties["MudBlazor.MudTFootRow.Checkable"] },
                    { "SelectionChangeable", Properties["MudBlazor.MudTFootRow.SelectionChangeable"] },
                    { "IgnoreCheckbox", Properties["MudBlazor.MudTFootRow.IgnoreCheckbox"] },
                    { "IgnoreEditable", Properties["MudBlazor.MudTFootRow.IgnoreEditable"] },
                    { "Expandable", Properties["MudBlazor.MudTFootRow.Expandable"] },
                    { "Checked", Properties["MudBlazor.MudTFootRow.Checked"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTFootRow.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "SetChecked", Methods["MudBlazor.MudTFootRow.SetChecked"] },
                },
                Events = { 
                    { "OnRowClick", Events["MudBlazor.MudTFootRow.OnRowClick"] },
                },
            }},
            { "MudBlazor.MudTh", new() {
                Name = "MudTh", 
                NameFriendly = "MudTh", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A header cell which labels a column of data for a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Properties = { 
                    { "ChildContent", Properties["MudBlazor.MudTh.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTh.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudTHeadRow", new() {
                Name = "MudTHeadRow", 
                NameFriendly = "MudTHeadRow", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A header row displayed at the top of a <see cref=""T:MudBlazor.MudTable`1"" /> and each group.", 
                Properties = { 
                    { "Context", Properties["MudBlazor.MudTHeadRow.Context"] },
                    { "ChildContent", Properties["MudBlazor.MudTHeadRow.ChildContent"] },
                    { "Checkable", Properties["MudBlazor.MudTHeadRow.Checkable"] },
                    { "SelectionChangeable", Properties["MudBlazor.MudTHeadRow.SelectionChangeable"] },
                    { "IgnoreCheckbox", Properties["MudBlazor.MudTHeadRow.IgnoreCheckbox"] },
                    { "IgnoreEditable", Properties["MudBlazor.MudTHeadRow.IgnoreEditable"] },
                    { "Expandable", Properties["MudBlazor.MudTHeadRow.Expandable"] },
                    { "Checked", Properties["MudBlazor.MudTHeadRow.Checked"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTHeadRow.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "SetChecked", Methods["MudBlazor.MudTHeadRow.SetChecked"] },
                },
                Events = { 
                    { "OnRowClick", Events["MudBlazor.MudTHeadRow.OnRowClick"] },
                },
            }},
            { "MudBlazor.MudTheme", new() {
                Name = "MudTheme", 
                NameFriendly = "MudTheme", 
                BaseTypeName = "Object", 
                Summary = @"Represents the theme settings for the MudBlazor user interface.", 
                Properties = { 
                    { "PaletteLight", Properties["MudBlazor.MudTheme.PaletteLight"] },
                    { "PaletteDark", Properties["MudBlazor.MudTheme.PaletteDark"] },
                    { "Shadows", Properties["MudBlazor.MudTheme.Shadows"] },
                    { "Typography", Properties["MudBlazor.MudTheme.Typography"] },
                    { "LayoutProperties", Properties["MudBlazor.MudTheme.LayoutProperties"] },
                    { "ZIndex", Properties["MudBlazor.MudTheme.ZIndex"] },
                    { "PseudoCss", Properties["MudBlazor.MudTheme.PseudoCss"] },
                },
            }},
            { "MudBlazor.MudThemeProvider", new() {
                Name = "MudThemeProvider", 
                NameFriendly = "MudThemeProvider", 
                BaseTypeName = "ComponentBaseWithState", 
                Properties = { 
                    { "Theme", Properties["MudBlazor.MudThemeProvider.Theme"] },
                    { "DefaultScrollbar", Properties["MudBlazor.MudThemeProvider.DefaultScrollbar"] },
                    { "ObserveSystemThemeChange", Properties["MudBlazor.MudThemeProvider.ObserveSystemThemeChange"] },
                    { "IsDarkMode", Properties["MudBlazor.MudThemeProvider.IsDarkMode"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "GetSystemPreference", Methods["MudBlazor.MudThemeProvider.GetSystemPreference"] },
                    { "WatchSystemPreference", Methods["MudBlazor.MudThemeProvider.WatchSystemPreference"] },
                    { "BuildTheme", Methods["MudBlazor.MudThemeProvider.BuildTheme"] },
                    { "GenerateTheme", Methods["MudBlazor.MudThemeProvider.GenerateTheme"] },
                },
                Events = { 
                    { "IsDarkModeChanged", Events["MudBlazor.MudThemeProvider.IsDarkModeChanged"] },
                },
            }},
            { "MudBlazor.MudTimeline", new() {
                Name = "MudTimeline", 
                NameFriendly = "MudTimeline", 
                BaseTypeName = "MudBaseItemsControl`1", 
                IsComponent = true, 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudTimeline.RightToLeft"] },
                    { "TimelineOrientation", Properties["MudBlazor.MudTimeline.TimelineOrientation"] },
                    { "TimelinePosition", Properties["MudBlazor.MudTimeline.TimelinePosition"] },
                    { "TimelineAlign", Properties["MudBlazor.MudTimeline.TimelineAlign"] },
                    { "Reverse", Properties["MudBlazor.MudTimeline.Reverse"] },
                    { "Modifiers", Properties["MudBlazor.MudTimeline.Modifiers"] },
                    { "ChildContent", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ChildContent"] },
                    { "SelectedIndex", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex"] },
                    { "LastContainer", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].LastContainer"] },
                    { "Items", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Items"] },
                    { "SelectedContainer", Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedContainer"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classnames", Properties["MudBlazor.MudTimeline.Classnames"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "Previous", Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Previous"] },
                    { "Next", Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Next"] },
                    { "MoveTo", Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].MoveTo"] },
                    { "AddItem", Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AddItem"] },
                    { "SelectionChanged", Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectionChanged"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.MudTimelineItem", new() {
                Name = "MudTimelineItem", 
                NameFriendly = "MudTimelineItem", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "Icon", Properties["MudBlazor.MudTimelineItem.Icon"] },
                    { "Variant", Properties["MudBlazor.MudTimelineItem.Variant"] },
                    { "DotStyle", Properties["MudBlazor.MudTimelineItem.DotStyle"] },
                    { "Color", Properties["MudBlazor.MudTimelineItem.Color"] },
                    { "Size", Properties["MudBlazor.MudTimelineItem.Size"] },
                    { "Elevation", Properties["MudBlazor.MudTimelineItem.Elevation"] },
                    { "TimelineAlign", Properties["MudBlazor.MudTimelineItem.TimelineAlign"] },
                    { "HideDot", Properties["MudBlazor.MudTimelineItem.HideDot"] },
                    { "ItemOpposite", Properties["MudBlazor.MudTimelineItem.ItemOpposite"] },
                    { "ItemContent", Properties["MudBlazor.MudTimelineItem.ItemContent"] },
                    { "ItemDot", Properties["MudBlazor.MudTimelineItem.ItemDot"] },
                    { "ChildContent", Properties["MudBlazor.MudTimelineItem.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classnames", Properties["MudBlazor.MudTimelineItem.Classnames"] },
                    { "DotClassnames", Properties["MudBlazor.MudTimelineItem.DotClassnames"] },
                    { "DotInnerClassnames", Properties["MudBlazor.MudTimelineItem.DotInnerClassnames"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudTimePicker", new() {
                Name = "MudTimePicker", 
                NameFriendly = "MudTimePicker", 
                BaseTypeName = "MudPicker`1", 
                IsComponent = true, 
                Properties = { 
                    { "OpenTo", Properties["MudBlazor.MudTimePicker.OpenTo"] },
                    { "TimeEditMode", Properties["MudBlazor.MudTimePicker.TimeEditMode"] },
                    { "ClosingDelay", Properties["MudBlazor.MudTimePicker.ClosingDelay"] },
                    { "AutoClose", Properties["MudBlazor.MudTimePicker.AutoClose"] },
                    { "MinuteSelectionStep", Properties["MudBlazor.MudTimePicker.MinuteSelectionStep"] },
                    { "AmPm", Properties["MudBlazor.MudTimePicker.AmPm"] },
                    { "TimeFormat", Properties["MudBlazor.MudTimePicker.TimeFormat"] },
                    { "Time", Properties["MudBlazor.MudTimePicker.Time"] },
                    { "PointerMoving", Properties["MudBlazor.MudTimePicker.PointerMoving"] },
                    { "AdornmentColor", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor"] },
                    { "AdornmentIcon", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon"] },
                    { "AdornmentAriaLabel", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel"] },
                    { "Placeholder", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder"] },
                    { "Elevation", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Elevation"] },
                    { "Square", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Square"] },
                    { "Rounded", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rounded"] },
                    { "HelperText", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText"] },
                    { "HelperTextOnFocus", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus"] },
                    { "Label", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label"] },
                    { "Clearable", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable"] },
                    { "Disabled", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled"] },
                    { "Underline", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline"] },
                    { "ReadOnly", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly"] },
                    { "Editable", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Editable"] },
                    { "ShowToolbar", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShowToolbar"] },
                    { "ToolbarClass", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToolbarClass"] },
                    { "PickerVariant", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerVariant"] },
                    { "Variant", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant"] },
                    { "Adornment", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment"] },
                    { "Orientation", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Orientation"] },
                    { "IconSize", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize"] },
                    { "Color", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Color"] },
                    { "ImmediateText", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ImmediateText"] },
                    { "Text", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"] },
                    { "ActionsClass", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClass"] },
                    { "PickerActions", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerActions"] },
                    { "Margin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin"] },
                    { "Mask", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Mask"] },
                    { "AnchorOrigin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AnchorOrigin"] },
                    { "TransformOrigin", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TransformOrigin"] },
                    { "OverflowBehavior", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OverflowBehavior"] },
                    { "RelativeWidth", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RelativeWidth"] },
                    { "Required", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"] },
                    { "RequiredError", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"] },
                    { "ErrorText", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"] },
                    { "Error", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"] },
                    { "ErrorId", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"] },
                    { "Converter", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"] },
                    { "Culture", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"] },
                    { "ConversionError", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"] },
                    { "ConversionErrorMessage", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"] },
                    { "HasErrors", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"] },
                    { "Touched", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"] },
                    { "ValidationErrors", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"] },
                    { "Validation", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"] },
                    { "For", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"] },
                    { "IsForNull", Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "ToolbarClassname", Properties["MudBlazor.MudTimePicker.ToolbarClassname"] },
                    { "HoursButtonClassname", Properties["MudBlazor.MudTimePicker.HoursButtonClassname"] },
                    { "MinuteButtonClassname", Properties["MudBlazor.MudTimePicker.MinuteButtonClassname"] },
                    { "AmButtonClassname", Properties["MudBlazor.MudTimePicker.AmButtonClassname"] },
                    { "PmButtonClassname", Properties["MudBlazor.MudTimePicker.PmButtonClassname"] },
                    { "ClockElementReference", Properties["MudBlazor.MudTimePicker.ClockElementReference"] },
                    { "PickerContent", Properties["MudBlazor.MudTimePicker.PickerContent"] },
                    { "PickerClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClassname"] },
                    { "PickerPaperClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperClassname"] },
                    { "PickerPaperStylename", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperStylename"] },
                    { "PickerInlineClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInlineClassname"] },
                    { "PickerContainerClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerContainerClassname"] },
                    { "PickerInputClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInputClassname"] },
                    { "PopoverClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PopoverClassname"] },
                    { "ActionsClassname", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClassname"] },
                    { "Open", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Open"] },
                    { "InputContent", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputContent"] },
                    { "Render", Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Render"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ClearAsync", Methods["MudBlazor.MudTimePicker.ClearAsync"] },
                    { "SelectTimeFromStick", Methods["MudBlazor.MudTimePicker.SelectTimeFromStick"] },
                    { "OnStickClick", Methods["MudBlazor.MudTimePicker.OnStickClick"] },
                    { "ToggleOpenAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToggleOpenAsync"] },
                    { "CloseAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CloseAsync"] },
                    { "OpenAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OpenAsync"] },
                    { "FocusAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync"] },
                    { "BlurAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"] },
                    { "SelectAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync"] },
                    { "SelectRangeAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync"] },
                    { "GetErrorText", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"] },
                    { "Validate", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"] },
                    { "ResetAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"] },
                    { "ResetValidation", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"] },
                    { "SetTimeAsync", Methods["MudBlazor.MudTimePicker.SetTimeAsync"] },
                    { "StringValueChangedAsync", Methods["MudBlazor.MudTimePicker.StringValueChangedAsync"] },
                    { "OnPickerOpenedAsync", Methods["MudBlazor.MudTimePicker.OnPickerOpenedAsync"] },
                    { "DisposeAsyncCore", Methods["MudBlazor.MudTimePicker.DisposeAsyncCore"] },
                    { "SubmitAndCloseAsync", Methods["MudBlazor.MudTimePicker.SubmitAndCloseAsync"] },
                    { "ChangeMinuteAsync", Methods["MudBlazor.MudTimePicker.ChangeMinuteAsync"] },
                    { "ChangeHourAsync", Methods["MudBlazor.MudTimePicker.ChangeHourAsync"] },
                    { "ReturnTimeBackUpAsync", Methods["MudBlazor.MudTimePicker.ReturnTimeBackUpAsync"] },
                    { "GetDisabledState", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState"] },
                    { "GetReadOnlyState", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState"] },
                    { "SetTextAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync"] },
                    { "ResetValueAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync"] },
                    { "OnOpenedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnOpenedAsync"] },
                    { "OnClosedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClosedAsync"] },
                    { "OnPickerClosedAsync", Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPickerClosedAsync"] },
                    { "SetConverter", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"] },
                    { "SetCulture", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture"] },
                    { "OnConversionErrorOccurred", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"] },
                    { "BeginValidationAfterAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"] },
                    { "BeginValidateAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"] },
                    { "ValidateValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"] },
                    { "HasValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"] },
                    { "ValidateWithAttribute", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"] },
                    { "ValidateWithFunc", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"] },
                    { "ValidateModelWithFullPathOfMember", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"] },
                    { "FieldChanged", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"] },
                    { "RegisterAsFormComponent", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"] },
                    { "ReadValue", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"] },
                    { "WriteValueAsync", Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"] },
                },
                Events = { 
                    { "TimeChanged", Events["MudBlazor.MudTimePicker.TimeChanged"] },
                    { "PickerOpened", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerOpened"] },
                    { "PickerClosed", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClosed"] },
                    { "TextChanged", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"] },
                    { "OnClick", Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClick"] },
                },
            }},
            { "MudBlazor.MudTimeSeriesChart", new() {
                Name = "MudTimeSeriesChart", 
                NameFriendly = "MudTimeSeriesChart", 
                BaseTypeName = "MudTimeSeriesChartBase", 
                IsComponent = true, 
                Properties = { 
                    { "ChartSeries", Properties["MudBlazor.MudTimeSeriesChartBase.ChartSeries"] },
                    { "TimeLabelSpacing", Properties["MudBlazor.MudTimeSeriesChartBase.TimeLabelSpacing"] },
                    { "TimeLabelFormat", Properties["MudBlazor.MudTimeSeriesChartBase.TimeLabelFormat"] },
                    { "XAxisTitle", Properties["MudBlazor.MudTimeSeriesChartBase.XAxisTitle"] },
                    { "YAxisTitle", Properties["MudBlazor.MudTimeSeriesChartBase.YAxisTitle"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.MudTimeSeriesChartBase", new() {
                Name = "MudTimeSeriesChartBase", 
                NameFriendly = "MudTimeSeriesChartBase", 
                BaseTypeName = "MudChartBase", 
                IsComponent = true, 
                Properties = { 
                    { "ChartSeries", Properties["MudBlazor.MudTimeSeriesChartBase.ChartSeries"] },
                    { "TimeLabelSpacing", Properties["MudBlazor.MudTimeSeriesChartBase.TimeLabelSpacing"] },
                    { "TimeLabelFormat", Properties["MudBlazor.MudTimeSeriesChartBase.TimeLabelFormat"] },
                    { "XAxisTitle", Properties["MudBlazor.MudTimeSeriesChartBase.XAxisTitle"] },
                    { "YAxisTitle", Properties["MudBlazor.MudTimeSeriesChartBase.YAxisTitle"] },
                    { "ChartOptions", Properties["MudBlazor.MudChartBase.ChartOptions"] },
                    { "CustomGraphics", Properties["MudBlazor.MudChartBase.CustomGraphics"] },
                    { "ChildContent", Properties["MudBlazor.MudChartBase.ChildContent"] },
                    { "RightToLeft", Properties["MudBlazor.MudChartBase.RightToLeft"] },
                    { "ChartType", Properties["MudBlazor.MudChartBase.ChartType"] },
                    { "Width", Properties["MudBlazor.MudChartBase.Width"] },
                    { "Height", Properties["MudBlazor.MudChartBase.Height"] },
                    { "LegendPosition", Properties["MudBlazor.MudChartBase.LegendPosition"] },
                    { "SelectedIndex", Properties["MudBlazor.MudChartBase.SelectedIndex"] },
                    { "CanHideSeries", Properties["MudBlazor.MudChartBase.CanHideSeries"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudChartBase.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ToS", Methods["MudBlazor.MudChartBase.ToS"] },
                },
                Events = { 
                    { "SelectedIndexChanged", Events["MudBlazor.MudChartBase.SelectedIndexChanged"] },
                },
            }},
            { "MudBlazor.MudToggleGroup`1", new() {
                Name = "MudToggleGroup`1", 
                NameFriendly = "MudToggleGroup<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "Disabled", Properties["MudBlazor.MudToggleGroup`1.Disabled"] },
                    { "Value", Properties["MudBlazor.MudToggleGroup`1.Value"] },
                    { "Values", Properties["MudBlazor.MudToggleGroup`1.Values"] },
                    { "SelectedClass", Properties["MudBlazor.MudToggleGroup`1.SelectedClass"] },
                    { "CheckMarkClass", Properties["MudBlazor.MudToggleGroup`1.CheckMarkClass"] },
                    { "Vertical", Properties["MudBlazor.MudToggleGroup`1.Vertical"] },
                    { "RightToLeft", Properties["MudBlazor.MudToggleGroup`1.RightToLeft"] },
                    { "Outlined", Properties["MudBlazor.MudToggleGroup`1.Outlined"] },
                    { "Delimiters", Properties["MudBlazor.MudToggleGroup`1.Delimiters"] },
                    { "Ripple", Properties["MudBlazor.MudToggleGroup`1.Ripple"] },
                    { "Size", Properties["MudBlazor.MudToggleGroup`1.Size"] },
                    { "SelectionMode", Properties["MudBlazor.MudToggleGroup`1.SelectionMode"] },
                    { "Color", Properties["MudBlazor.MudToggleGroup`1.Color"] },
                    { "CheckMark", Properties["MudBlazor.MudToggleGroup`1.CheckMark"] },
                    { "FixedContent", Properties["MudBlazor.MudToggleGroup`1.FixedContent"] },
                    { "ChildContent", Properties["MudBlazor.MudToggleGroup`1.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudToggleGroup`1.Classname"] },
                    { "Stylename", Properties["MudBlazor.MudToggleGroup`1.Stylename"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "DeselectAllItems", Methods["MudBlazor.MudToggleGroup`1.DeselectAllItems"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.MudToggleGroup`1.ValueChanged"] },
                    { "ValuesChanged", Events["MudBlazor.MudToggleGroup`1.ValuesChanged"] },
                },
            }},
            { "MudBlazor.MudToggleIconButton", new() {
                Name = "MudToggleIconButton", 
                NameFriendly = "MudToggleIconButton", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"Represents a button consisting of an icon that can be toggled between two distinct states.", 
                Remarks = @"Creates a <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/Button"">button</see> element,or <see href=""https://developer.mozilla.org/docs/Web/HTML/Element/a"">anchor</see> if <c>Href</c> is set.<br />You can directly add attributes like <c>title</c> or <c>aria-label</c>.", 
                Properties = { 
                    { "Toggled", Properties["MudBlazor.MudToggleIconButton.Toggled"] },
                    { "Icon", Properties["MudBlazor.MudToggleIconButton.Icon"] },
                    { "ToggledIcon", Properties["MudBlazor.MudToggleIconButton.ToggledIcon"] },
                    { "Color", Properties["MudBlazor.MudToggleIconButton.Color"] },
                    { "ToggledColor", Properties["MudBlazor.MudToggleIconButton.ToggledColor"] },
                    { "Size", Properties["MudBlazor.MudToggleIconButton.Size"] },
                    { "ToggledSize", Properties["MudBlazor.MudToggleIconButton.ToggledSize"] },
                    { "Variant", Properties["MudBlazor.MudToggleIconButton.Variant"] },
                    { "ToggledVariant", Properties["MudBlazor.MudToggleIconButton.ToggledVariant"] },
                    { "Edge", Properties["MudBlazor.MudToggleIconButton.Edge"] },
                    { "Ripple", Properties["MudBlazor.MudToggleIconButton.Ripple"] },
                    { "DropShadow", Properties["MudBlazor.MudToggleIconButton.DropShadow"] },
                    { "Disabled", Properties["MudBlazor.MudToggleIconButton.Disabled"] },
                    { "ClickPropagation", Properties["MudBlazor.MudToggleIconButton.ClickPropagation"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "Toggle", Methods["MudBlazor.MudToggleIconButton.Toggle"] },
                },
                Events = { 
                    { "ToggledChanged", Events["MudBlazor.MudToggleIconButton.ToggledChanged"] },
                },
            }},
            { "MudBlazor.MudToggleItem`1", new() {
                Name = "MudToggleItem`1", 
                NameFriendly = "MudToggleItem<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "Parent", Properties["MudBlazor.MudToggleItem`1.Parent"] },
                    { "Disabled", Properties["MudBlazor.MudToggleItem`1.Disabled"] },
                    { "Value", Properties["MudBlazor.MudToggleItem`1.Value"] },
                    { "UnselectedIcon", Properties["MudBlazor.MudToggleItem`1.UnselectedIcon"] },
                    { "SelectedIcon", Properties["MudBlazor.MudToggleItem`1.SelectedIcon"] },
                    { "Text", Properties["MudBlazor.MudToggleItem`1.Text"] },
                    { "ChildContent", Properties["MudBlazor.MudToggleItem`1.ChildContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudToggleItem`1.Classname"] },
                    { "CheckMarkClassname", Properties["MudBlazor.MudToggleItem`1.CheckMarkClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "SetSelected", Methods["MudBlazor.MudToggleItem`1.SetSelected"] },
                    { "HandleOnClickAsync", Methods["MudBlazor.MudToggleItem`1.HandleOnClickAsync"] },
                },
            }},
            { "MudBlazor.MudToolBar", new() {
                Name = "MudToolBar", 
                NameFriendly = "MudToolBar", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "Dense", Properties["MudBlazor.MudToolBar.Dense"] },
                    { "Gutters", Properties["MudBlazor.MudToolBar.Gutters"] },
                    { "ChildContent", Properties["MudBlazor.MudToolBar.ChildContent"] },
                    { "WrapContent", Properties["MudBlazor.MudToolBar.WrapContent"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudToolBar.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
            }},
            { "MudBlazor.MudTooltip", new() {
                Name = "MudTooltip", 
                NameFriendly = "MudTooltip", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "RightToLeft", Properties["MudBlazor.MudTooltip.RightToLeft"] },
                    { "Color", Properties["MudBlazor.MudTooltip.Color"] },
                    { "Text", Properties["MudBlazor.MudTooltip.Text"] },
                    { "Arrow", Properties["MudBlazor.MudTooltip.Arrow"] },
                    { "Duration", Properties["MudBlazor.MudTooltip.Duration"] },
                    { "Delay", Properties["MudBlazor.MudTooltip.Delay"] },
                    { "Placement", Properties["MudBlazor.MudTooltip.Placement"] },
                    { "ChildContent", Properties["MudBlazor.MudTooltip.ChildContent"] },
                    { "TooltipContent", Properties["MudBlazor.MudTooltip.TooltipContent"] },
                    { "Inline", Properties["MudBlazor.MudTooltip.Inline"] },
                    { "RootStyle", Properties["MudBlazor.MudTooltip.RootStyle"] },
                    { "RootClass", Properties["MudBlazor.MudTooltip.RootClass"] },
                    { "ShowOnHover", Properties["MudBlazor.MudTooltip.ShowOnHover"] },
                    { "ShowOnFocus", Properties["MudBlazor.MudTooltip.ShowOnFocus"] },
                    { "ShowOnClick", Properties["MudBlazor.MudTooltip.ShowOnClick"] },
                    { "Visible", Properties["MudBlazor.MudTooltip.Visible"] },
                    { "Disabled", Properties["MudBlazor.MudTooltip.Disabled"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "ContainerClass", Properties["MudBlazor.MudTooltip.ContainerClass"] },
                    { "Classname", Properties["MudBlazor.MudTooltip.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                GlobalSettings = { 
                    { "Delay", Properties["MudBlazor.MudGlobal+TooltipDefaults.Delay"] },
                    { "Duration", Properties["MudBlazor.MudGlobal+TooltipDefaults.Duration"] },
                },
                Events = { 
                    { "VisibleChanged", Events["MudBlazor.MudTooltip.VisibleChanged"] },
                },
            }},
            { "MudBlazor.MudTr", new() {
                Name = "MudTr", 
                NameFriendly = "MudTr", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Summary = @"A row of data within a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Properties = { 
                    { "Context", Properties["MudBlazor.MudTr.Context"] },
                    { "ChildContent", Properties["MudBlazor.MudTr.ChildContent"] },
                    { "Item", Properties["MudBlazor.MudTr.Item"] },
                    { "Checkable", Properties["MudBlazor.MudTr.Checkable"] },
                    { "SelectionChangeable", Properties["MudBlazor.MudTr.SelectionChangeable"] },
                    { "Editable", Properties["MudBlazor.MudTr.Editable"] },
                    { "Expandable", Properties["MudBlazor.MudTr.Expandable"] },
                    { "Checked", Properties["MudBlazor.MudTr.Checked"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTr.Classname"] },
                    { "ActionsStylename", Properties["MudBlazor.MudTr.ActionsStylename"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "OnRowClickedAsync", Methods["MudBlazor.MudTr.OnRowClickedAsync"] },
                    { "OnRowMouseEnterAsync", Methods["MudBlazor.MudTr.OnRowMouseEnterAsync"] },
                    { "OnRowMouseLeaveAsync", Methods["MudBlazor.MudTr.OnRowMouseLeaveAsync"] },
                    { "SetChecked", Methods["MudBlazor.MudTr.SetChecked"] },
                    { "ManagePreviousEdition", Methods["MudBlazor.MudTr.ManagePreviousEdition"] },
                },
                Events = { 
                    { "CheckedChanged", Events["MudBlazor.MudTr.CheckedChanged"] },
                },
            }},
            { "MudBlazor.MudTreeView`1", new() {
                Name = "MudTreeView`1", 
                NameFriendly = "MudTreeView<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "Color", Properties["MudBlazor.MudTreeView`1.Color"] },
                    { "CheckBoxColor", Properties["MudBlazor.MudTreeView`1.CheckBoxColor"] },
                    { "SelectionMode", Properties["MudBlazor.MudTreeView`1.SelectionMode"] },
                    { "TriState", Properties["MudBlazor.MudTreeView`1.TriState"] },
                    { "AutoSelectParent", Properties["MudBlazor.MudTreeView`1.AutoSelectParent"] },
                    { "ExpandOnClick", Properties["MudBlazor.MudTreeView`1.ExpandOnClick"] },
                    { "ExpandOnDoubleClick", Properties["MudBlazor.MudTreeView`1.ExpandOnDoubleClick"] },
                    { "AutoExpand", Properties["MudBlazor.MudTreeView`1.AutoExpand"] },
                    { "Hover", Properties["MudBlazor.MudTreeView`1.Hover"] },
                    { "Dense", Properties["MudBlazor.MudTreeView`1.Dense"] },
                    { "Height", Properties["MudBlazor.MudTreeView`1.Height"] },
                    { "MaxHeight", Properties["MudBlazor.MudTreeView`1.MaxHeight"] },
                    { "Width", Properties["MudBlazor.MudTreeView`1.Width"] },
                    { "Disabled", Properties["MudBlazor.MudTreeView`1.Disabled"] },
                    { "FilterFunc", Properties["MudBlazor.MudTreeView`1.FilterFunc"] },
                    { "Ripple", Properties["MudBlazor.MudTreeView`1.Ripple"] },
                    { "Items", Properties["MudBlazor.MudTreeView`1.Items"] },
                    { "SelectedValue", Properties["MudBlazor.MudTreeView`1.SelectedValue"] },
                    { "SelectedValues", Properties["MudBlazor.MudTreeView`1.SelectedValues"] },
                    { "ChildContent", Properties["MudBlazor.MudTreeView`1.ChildContent"] },
                    { "ItemTemplate", Properties["MudBlazor.MudTreeView`1.ItemTemplate"] },
                    { "Comparer", Properties["MudBlazor.MudTreeView`1.Comparer"] },
                    { "ServerData", Properties["MudBlazor.MudTreeView`1.ServerData"] },
                    { "ReadOnly", Properties["MudBlazor.MudTreeView`1.ReadOnly"] },
                    { "CheckedIcon", Properties["MudBlazor.MudTreeView`1.CheckedIcon"] },
                    { "UncheckedIcon", Properties["MudBlazor.MudTreeView`1.UncheckedIcon"] },
                    { "IndeterminateIcon", Properties["MudBlazor.MudTreeView`1.IndeterminateIcon"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTreeView`1.Classname"] },
                    { "Stylename", Properties["MudBlazor.MudTreeView`1.Stylename"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "FilterAsync", Methods["MudBlazor.MudTreeView`1.FilterAsync"] },
                    { "ExpandAllAsync", Methods["MudBlazor.MudTreeView`1.ExpandAllAsync"] },
                    { "CollapseAllAsync", Methods["MudBlazor.MudTreeView`1.CollapseAllAsync"] },
                },
                Events = { 
                    { "SelectedValueChanged", Events["MudBlazor.MudTreeView`1.SelectedValueChanged"] },
                    { "SelectedValuesChanged", Events["MudBlazor.MudTreeView`1.SelectedValuesChanged"] },
                },
            }},
            { "MudBlazor.MudTreeViewItem`1", new() {
                Name = "MudTreeViewItem`1", 
                NameFriendly = "MudTreeViewItem<T>", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "TextClassname", Properties["MudBlazor.MudTreeViewItem`1.TextClassname"] },
                    { "Value", Properties["MudBlazor.MudTreeViewItem`1.Value"] },
                    { "Text", Properties["MudBlazor.MudTreeViewItem`1.Text"] },
                    { "TextTypo", Properties["MudBlazor.MudTreeViewItem`1.TextTypo"] },
                    { "TextClass", Properties["MudBlazor.MudTreeViewItem`1.TextClass"] },
                    { "EndText", Properties["MudBlazor.MudTreeViewItem`1.EndText"] },
                    { "EndTextTypo", Properties["MudBlazor.MudTreeViewItem`1.EndTextTypo"] },
                    { "EndTextClass", Properties["MudBlazor.MudTreeViewItem`1.EndTextClass"] },
                    { "Visible", Properties["MudBlazor.MudTreeViewItem`1.Visible"] },
                    { "Disabled", Properties["MudBlazor.MudTreeViewItem`1.Disabled"] },
                    { "ReadOnly", Properties["MudBlazor.MudTreeViewItem`1.ReadOnly"] },
                    { "CanExpand", Properties["MudBlazor.MudTreeViewItem`1.CanExpand"] },
                    { "ChildContent", Properties["MudBlazor.MudTreeViewItem`1.ChildContent"] },
                    { "Content", Properties["MudBlazor.MudTreeViewItem`1.Content"] },
                    { "BodyContent", Properties["MudBlazor.MudTreeViewItem`1.BodyContent"] },
                    { "Items", Properties["MudBlazor.MudTreeViewItem`1.Items"] },
                    { "Expanded", Properties["MudBlazor.MudTreeViewItem`1.Expanded"] },
                    { "Selected", Properties["MudBlazor.MudTreeViewItem`1.Selected"] },
                    { "Icon", Properties["MudBlazor.MudTreeViewItem`1.Icon"] },
                    { "IconExpanded", Properties["MudBlazor.MudTreeViewItem`1.IconExpanded"] },
                    { "IconColor", Properties["MudBlazor.MudTreeViewItem`1.IconColor"] },
                    { "EndIcon", Properties["MudBlazor.MudTreeViewItem`1.EndIcon"] },
                    { "EndIconColor", Properties["MudBlazor.MudTreeViewItem`1.EndIconColor"] },
                    { "ExpandButtonIcon", Properties["MudBlazor.MudTreeViewItem`1.ExpandButtonIcon"] },
                    { "ExpandButtonIconColor", Properties["MudBlazor.MudTreeViewItem`1.ExpandButtonIconColor"] },
                    { "LoadingIcon", Properties["MudBlazor.MudTreeViewItem`1.LoadingIcon"] },
                    { "LoadingIconColor", Properties["MudBlazor.MudTreeViewItem`1.LoadingIconColor"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTreeViewItem`1.Classname"] },
                    { "ContentClassname", Properties["MudBlazor.MudTreeViewItem`1.ContentClassname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "ExpandAllAsync", Methods["MudBlazor.MudTreeViewItem`1.ExpandAllAsync"] },
                    { "CollapseAllAsync", Methods["MudBlazor.MudTreeViewItem`1.CollapseAllAsync"] },
                    { "ReloadAsync", Methods["MudBlazor.MudTreeViewItem`1.ReloadAsync"] },
                },
                Events = { 
                    { "ExpandedChanged", Events["MudBlazor.MudTreeViewItem`1.ExpandedChanged"] },
                    { "SelectedChanged", Events["MudBlazor.MudTreeViewItem`1.SelectedChanged"] },
                    { "OnClick", Events["MudBlazor.MudTreeViewItem`1.OnClick"] },
                    { "OnDoubleClick", Events["MudBlazor.MudTreeViewItem`1.OnDoubleClick"] },
                },
            }},
            { "MudBlazor.MudTreeViewItemToggleButton", new() {
                Name = "MudTreeViewItemToggleButton", 
                NameFriendly = "MudTreeViewItemToggleButton", 
                BaseTypeName = "MudComponentBase", 
                IsComponent = true, 
                Properties = { 
                    { "Visible", Properties["MudBlazor.MudTreeViewItemToggleButton.Visible"] },
                    { "Disabled", Properties["MudBlazor.MudTreeViewItemToggleButton.Disabled"] },
                    { "Expanded", Properties["MudBlazor.MudTreeViewItemToggleButton.Expanded"] },
                    { "Loading", Properties["MudBlazor.MudTreeViewItemToggleButton.Loading"] },
                    { "LoadingIcon", Properties["MudBlazor.MudTreeViewItemToggleButton.LoadingIcon"] },
                    { "LoadingIconColor", Properties["MudBlazor.MudTreeViewItemToggleButton.LoadingIconColor"] },
                    { "ExpandedIcon", Properties["MudBlazor.MudTreeViewItemToggleButton.ExpandedIcon"] },
                    { "ExpandedIconColor", Properties["MudBlazor.MudTreeViewItemToggleButton.ExpandedIconColor"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Classname", Properties["MudBlazor.MudTreeViewItemToggleButton.Classname"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "ExpandedChanged", Events["MudBlazor.MudTreeViewItemToggleButton.ExpandedChanged"] },
                },
            }},
            { "MudBlazor.MudVirtualize`1", new() {
                Name = "MudVirtualize`1", 
                NameFriendly = "MudVirtualize<T>", 
                BaseTypeName = "ComponentBase", 
                Properties = { 
                    { "Enabled", Properties["MudBlazor.MudVirtualize`1.Enabled"] },
                    { "ChildContent", Properties["MudBlazor.MudVirtualize`1.ChildContent"] },
                    { "Placeholder", Properties["MudBlazor.MudVirtualize`1.Placeholder"] },
                    { "NoRecordsContent", Properties["MudBlazor.MudVirtualize`1.NoRecordsContent"] },
                    { "Items", Properties["MudBlazor.MudVirtualize`1.Items"] },
                    { "ItemsProvider", Properties["MudBlazor.MudVirtualize`1.ItemsProvider"] },
                    { "OverscanCount", Properties["MudBlazor.MudVirtualize`1.OverscanCount"] },
                    { "ItemSize", Properties["MudBlazor.MudVirtualize`1.ItemSize"] },
                    { "SpacerElement", Properties["MudBlazor.MudVirtualize`1.SpacerElement"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "RefreshDataAsync", Methods["MudBlazor.MudVirtualize`1.RefreshDataAsync"] },
                },
            }},
            { "MudBlazor.MultiMask", new() {
                Name = "MultiMask", 
                NameFriendly = "MultiMask", 
                BaseTypeName = "PatternMask", 
                Summary = @"A mask which can change its pattern based on partial input.", 
                Remarks = @"A multi-mask consists of multiple <see cref=""T:MudBlazor.MaskOption"" /> values which define when a particular mask is used.<br />For example: a credit card number can be from any card provider, yet each provider has their own numbering rules.  A multi-mask would allow each provider's rules to be used together in a single mask.", 
                Properties = { 
                    { "OptionDetected", Properties["MudBlazor.MultiMask.OptionDetected"] },
                    { "DetectedOption", Properties["MudBlazor.MultiMask.DetectedOption"] },
                    { "Placeholder", Properties["MudBlazor.PatternMask.Placeholder"] },
                    { "Transformation", Properties["MudBlazor.PatternMask.Transformation"] },
                    { "CleanDelimiters", Properties["MudBlazor.PatternMask.CleanDelimiters"] },
                    { "Mask", Properties["MudBlazor.BaseMask.Mask"] },
                    { "Text", Properties["MudBlazor.BaseMask.Text"] },
                    { "CaretPos", Properties["MudBlazor.BaseMask.CaretPos"] },
                    { "Selection", Properties["MudBlazor.BaseMask.Selection"] },
                    { "AllowOnlyDelimiters", Properties["MudBlazor.BaseMask.AllowOnlyDelimiters"] },
                    { "MaskChars", Properties["MudBlazor.BaseMask.MaskChars"] },
                },
                Methods = { 
                    { "Insert", Methods["MudBlazor.MultiMask.Insert"] },
                    { "Delete", Methods["MudBlazor.MultiMask.Delete"] },
                    { "Backspace", Methods["MudBlazor.MultiMask.Backspace"] },
                    { "UpdateFrom", Methods["MudBlazor.MultiMask.UpdateFrom"] },
                    { "GetCleanText", Methods["MudBlazor.PatternMask.GetCleanText"] },
                    { "Clear", Methods["MudBlazor.BaseMask.Clear"] },
                    { "SetText", Methods["MudBlazor.BaseMask.SetText"] },
                    { "DoCheckAndRedo", Methods["MudBlazor.MultiMask.DoCheckAndRedo"] },
                    { "CheckOption", Methods["MudBlazor.MultiMask.CheckOption"] },
                    { "DeleteSelection", Methods["MudBlazor.PatternMask.DeleteSelection"] },
                    { "FillWithPlaceholder", Methods["MudBlazor.PatternMask.FillWithPlaceholder"] },
                    { "AlignAgainstMask", Methods["MudBlazor.PatternMask.AlignAgainstMask"] },
                    { "ModifyPartiallyAlignedMask", Methods["MudBlazor.PatternMask.ModifyPartiallyAlignedMask"] },
                    { "IsMatch", Methods["MudBlazor.PatternMask.IsMatch"] },
                    { "InitInternals", Methods["MudBlazor.PatternMask.InitInternals"] },
                    { "UpdateText", Methods["MudBlazor.PatternMask.UpdateText"] },
                    { "ModifyFinalText", Methods["MudBlazor.PatternMask.ModifyFinalText"] },
                    { "Init", Methods["MudBlazor.BaseMask.Init"] },
                    { "IsDelimiter", Methods["MudBlazor.BaseMask.IsDelimiter"] },
                    { "Refresh", Methods["MudBlazor.BaseMask.Refresh"] },
                    { "ConsolidateSelection", Methods["MudBlazor.BaseMask.ConsolidateSelection"] },
                },
            }},
            { "MudBlazor.NavigationContext", new() {
                Name = "NavigationContext", 
                NameFriendly = "NavigationContext", 
                BaseTypeName = "Object", 
                Summary = @"The state of a navigation component based on the state of its parent.", 
                Properties = { 
                    { "Disabled", Properties["MudBlazor.NavigationContext.Disabled"] },
                    { "Expanded", Properties["MudBlazor.NavigationContext.Expanded"] },
                    { "MenuId", Properties["MudBlazor.NavigationContext.MenuId"] },
                    { "EqualityContract", Properties["MudBlazor.NavigationContext.EqualityContract"] },
                },
                Methods = { 
                    { "<Clone>$", Methods["MudBlazor.NavigationContext.<Clone>$"] },
                    { "Deconstruct", Methods["MudBlazor.NavigationContext.Deconstruct"] },
                    { "PrintMembers", Methods["MudBlazor.NavigationContext.PrintMembers"] },
                },
            }},
            { "MudBlazor.NullableDateConverter", new() {
                Name = "NullableDateConverter", 
                NameFriendly = "NullableDateConverter", 
                BaseTypeName = "Converter`1", 
                Summary = @"A ready made DateTime? to string binding converter with configurable date format and culture", 
                Properties = { 
                    { "DateFormat", Properties["MudBlazor.NullableDateConverter.DateFormat"] },
                    { "Format", Properties["MudBlazor.Converter`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format"] },
                    { "SetFunc", Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFunc"] },
                    { "GetFunc", Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetFunc"] },
                    { "Culture", Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"] },
                    { "OnError", Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnError"] },
                    { "SetError", Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetError"] },
                    { "GetError", Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetError"] },
                    { "SetErrorMessage", Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetErrorMessage"] },
                    { "GetErrorMessage", Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorMessage"] },
                },
                Methods = { 
                    { "Set", Methods["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Set"] },
                    { "Get", Methods["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Get"] },
                    { "UpdateSetError", Methods["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateSetError"] },
                    { "UpdateGetError", Methods["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateGetError"] },
                },
            }},
            { "MudBlazor.NumericConverter`1", new() {
                Name = "NumericConverter`1", 
                NameFriendly = "NumericConverter<T>", 
                BaseTypeName = "Converter`2", 
                Summary = @"<para>A universal T to double binding converter</para><para>Note: currently not in use. Should we ever use it, removethe  [ExcludeFromCodeCoverage] attribute</para>", 
                Properties = { 
                    { "SetFunc", Properties["MudBlazor.Converter`2.SetFunc"] },
                    { "GetFunc", Properties["MudBlazor.Converter`2.GetFunc"] },
                    { "Culture", Properties["MudBlazor.Converter`2.Culture"] },
                    { "OnError", Properties["MudBlazor.Converter`2.OnError"] },
                    { "SetError", Properties["MudBlazor.Converter`2.SetError"] },
                    { "GetError", Properties["MudBlazor.Converter`2.GetError"] },
                    { "SetErrorMessage", Properties["MudBlazor.Converter`2.SetErrorMessage"] },
                    { "GetErrorMessage", Properties["MudBlazor.Converter`2.GetErrorMessage"] },
                },
                Methods = { 
                    { "Set", Methods["MudBlazor.Converter`2.Set"] },
                    { "Get", Methods["MudBlazor.Converter`2.Get"] },
                    { "UpdateSetError", Methods["MudBlazor.Converter`2.UpdateSetError"] },
                    { "UpdateGetError", Methods["MudBlazor.Converter`2.UpdateGetError"] },
                },
            }},
            { "MudBlazor.ObjectFit", new() {
                Name = "ObjectFit", 
                NameFriendly = "ObjectFit", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates how an object is sized relative to its container.", 
                Fields = { 
                    { "None", Fields["MudBlazor.ObjectFit.None"] },
                    { "Cover", Fields["MudBlazor.ObjectFit.Cover"] },
                    { "Contain", Fields["MudBlazor.ObjectFit.Contain"] },
                    { "Fill", Fields["MudBlazor.ObjectFit.Fill"] },
                    { "ScaleDown", Fields["MudBlazor.ObjectFit.ScaleDown"] },
                },
            }},
            { "MudBlazor.ObjectPosition", new() {
                Name = "ObjectPosition", 
                NameFriendly = "ObjectPosition", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the position of an object relative to its container.", 
                Fields = { 
                    { "Center", Fields["MudBlazor.ObjectPosition.Center"] },
                    { "Top", Fields["MudBlazor.ObjectPosition.Top"] },
                    { "Bottom", Fields["MudBlazor.ObjectPosition.Bottom"] },
                    { "Left", Fields["MudBlazor.ObjectPosition.Left"] },
                    { "LeftTop", Fields["MudBlazor.ObjectPosition.LeftTop"] },
                    { "LeftBottom", Fields["MudBlazor.ObjectPosition.LeftBottom"] },
                    { "Right", Fields["MudBlazor.ObjectPosition.Right"] },
                    { "RightTop", Fields["MudBlazor.ObjectPosition.RightTop"] },
                    { "RightBottom", Fields["MudBlazor.ObjectPosition.RightBottom"] },
                },
            }},
            { "MudBlazor.OpenTo", new() {
                Name = "OpenTo", 
                NameFriendly = "OpenTo", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the initial view of a date or time picker component.", 
                Fields = { 
                    { "None", Fields["MudBlazor.OpenTo.None"] },
                    { "Date", Fields["MudBlazor.OpenTo.Date"] },
                    { "Year", Fields["MudBlazor.OpenTo.Year"] },
                    { "Month", Fields["MudBlazor.OpenTo.Month"] },
                    { "Hours", Fields["MudBlazor.OpenTo.Hours"] },
                    { "Minutes", Fields["MudBlazor.OpenTo.Minutes"] },
                },
            }},
            { "MudBlazor.Orientation", new() {
                Name = "Orientation", 
                NameFriendly = "Orientation", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the display orientation of a <see cref=""T:MudBlazor.MudPicker`1"" />.", 
                Fields = { 
                    { "Portrait", Fields["MudBlazor.Orientation.Portrait"] },
                    { "Landscape", Fields["MudBlazor.Orientation.Landscape"] },
                },
            }},
            { "MudBlazor.Origin", new() {
                Name = "Origin", 
                NameFriendly = "Origin", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the position or direction a component is displayed relative to its parent container.", 
                Fields = { 
                    { "TopLeft", Fields["MudBlazor.Origin.TopLeft"] },
                    { "TopCenter", Fields["MudBlazor.Origin.TopCenter"] },
                    { "TopRight", Fields["MudBlazor.Origin.TopRight"] },
                    { "CenterLeft", Fields["MudBlazor.Origin.CenterLeft"] },
                    { "CenterCenter", Fields["MudBlazor.Origin.CenterCenter"] },
                    { "CenterRight", Fields["MudBlazor.Origin.CenterRight"] },
                    { "BottomLeft", Fields["MudBlazor.Origin.BottomLeft"] },
                    { "BottomCenter", Fields["MudBlazor.Origin.BottomCenter"] },
                    { "BottomRight", Fields["MudBlazor.Origin.BottomRight"] },
                },
            }},
            { "MudBlazor.OverflowBehavior", new() {
                Name = "OverflowBehavior", 
                NameFriendly = "OverflowBehavior", 
                BaseTypeName = "Enum", 
                Summary = @"Controls how a component behaves when the browser is scrolled.", 
                Fields = { 
                    { "FlipNever", Fields["MudBlazor.OverflowBehavior.FlipNever"] },
                    { "FlipOnOpen", Fields["MudBlazor.OverflowBehavior.FlipOnOpen"] },
                    { "FlipAlways", Fields["MudBlazor.OverflowBehavior.FlipAlways"] },
                },
            }},
            { "MudBlazor.OverlineTypography", new() {
                Name = "OverlineTypography", 
                NameFriendly = "OverlineTypography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the Overline typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.Page", new() {
                Name = "Page", 
                NameFriendly = "Page", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates a pagination behavior.", 
                Fields = { 
                    { "First", Fields["MudBlazor.Page.First"] },
                    { "Previous", Fields["MudBlazor.Page.Previous"] },
                    { "Next", Fields["MudBlazor.Page.Next"] },
                    { "Last", Fields["MudBlazor.Page.Last"] },
                },
            }},
            { "MudBlazor.Palette", new() {
                Name = "Palette", 
                NameFriendly = "Palette", 
                BaseTypeName = "Object", 
                Summary = @"Represents a palette of colors used throughout the application.", 
                Properties = { 
                    { "Black", Properties["MudBlazor.Palette.Black"] },
                    { "White", Properties["MudBlazor.Palette.White"] },
                    { "Primary", Properties["MudBlazor.Palette.Primary"] },
                    { "PrimaryContrastText", Properties["MudBlazor.Palette.PrimaryContrastText"] },
                    { "Secondary", Properties["MudBlazor.Palette.Secondary"] },
                    { "SecondaryContrastText", Properties["MudBlazor.Palette.SecondaryContrastText"] },
                    { "Tertiary", Properties["MudBlazor.Palette.Tertiary"] },
                    { "TertiaryContrastText", Properties["MudBlazor.Palette.TertiaryContrastText"] },
                    { "Info", Properties["MudBlazor.Palette.Info"] },
                    { "InfoContrastText", Properties["MudBlazor.Palette.InfoContrastText"] },
                    { "Success", Properties["MudBlazor.Palette.Success"] },
                    { "SuccessContrastText", Properties["MudBlazor.Palette.SuccessContrastText"] },
                    { "Warning", Properties["MudBlazor.Palette.Warning"] },
                    { "WarningContrastText", Properties["MudBlazor.Palette.WarningContrastText"] },
                    { "Error", Properties["MudBlazor.Palette.Error"] },
                    { "ErrorContrastText", Properties["MudBlazor.Palette.ErrorContrastText"] },
                    { "Dark", Properties["MudBlazor.Palette.Dark"] },
                    { "DarkContrastText", Properties["MudBlazor.Palette.DarkContrastText"] },
                    { "TextPrimary", Properties["MudBlazor.Palette.TextPrimary"] },
                    { "TextSecondary", Properties["MudBlazor.Palette.TextSecondary"] },
                    { "TextDisabled", Properties["MudBlazor.Palette.TextDisabled"] },
                    { "ActionDefault", Properties["MudBlazor.Palette.ActionDefault"] },
                    { "ActionDisabled", Properties["MudBlazor.Palette.ActionDisabled"] },
                    { "ActionDisabledBackground", Properties["MudBlazor.Palette.ActionDisabledBackground"] },
                    { "Background", Properties["MudBlazor.Palette.Background"] },
                    { "BackgroundGray", Properties["MudBlazor.Palette.BackgroundGray"] },
                    { "Surface", Properties["MudBlazor.Palette.Surface"] },
                    { "DrawerBackground", Properties["MudBlazor.Palette.DrawerBackground"] },
                    { "DrawerText", Properties["MudBlazor.Palette.DrawerText"] },
                    { "DrawerIcon", Properties["MudBlazor.Palette.DrawerIcon"] },
                    { "AppbarBackground", Properties["MudBlazor.Palette.AppbarBackground"] },
                    { "AppbarText", Properties["MudBlazor.Palette.AppbarText"] },
                    { "LinesDefault", Properties["MudBlazor.Palette.LinesDefault"] },
                    { "LinesInputs", Properties["MudBlazor.Palette.LinesInputs"] },
                    { "TableLines", Properties["MudBlazor.Palette.TableLines"] },
                    { "TableStriped", Properties["MudBlazor.Palette.TableStriped"] },
                    { "TableHover", Properties["MudBlazor.Palette.TableHover"] },
                    { "Divider", Properties["MudBlazor.Palette.Divider"] },
                    { "DividerLight", Properties["MudBlazor.Palette.DividerLight"] },
                    { "Skeleton", Properties["MudBlazor.Palette.Skeleton"] },
                    { "PrimaryDarken", Properties["MudBlazor.Palette.PrimaryDarken"] },
                    { "PrimaryLighten", Properties["MudBlazor.Palette.PrimaryLighten"] },
                    { "SecondaryDarken", Properties["MudBlazor.Palette.SecondaryDarken"] },
                    { "SecondaryLighten", Properties["MudBlazor.Palette.SecondaryLighten"] },
                    { "TertiaryDarken", Properties["MudBlazor.Palette.TertiaryDarken"] },
                    { "TertiaryLighten", Properties["MudBlazor.Palette.TertiaryLighten"] },
                    { "InfoDarken", Properties["MudBlazor.Palette.InfoDarken"] },
                    { "InfoLighten", Properties["MudBlazor.Palette.InfoLighten"] },
                    { "SuccessDarken", Properties["MudBlazor.Palette.SuccessDarken"] },
                    { "SuccessLighten", Properties["MudBlazor.Palette.SuccessLighten"] },
                    { "WarningDarken", Properties["MudBlazor.Palette.WarningDarken"] },
                    { "WarningLighten", Properties["MudBlazor.Palette.WarningLighten"] },
                    { "ErrorDarken", Properties["MudBlazor.Palette.ErrorDarken"] },
                    { "ErrorLighten", Properties["MudBlazor.Palette.ErrorLighten"] },
                    { "DarkDarken", Properties["MudBlazor.Palette.DarkDarken"] },
                    { "DarkLighten", Properties["MudBlazor.Palette.DarkLighten"] },
                    { "HoverOpacity", Properties["MudBlazor.Palette.HoverOpacity"] },
                    { "RippleOpacity", Properties["MudBlazor.Palette.RippleOpacity"] },
                    { "RippleOpacitySecondary", Properties["MudBlazor.Palette.RippleOpacitySecondary"] },
                    { "GrayDefault", Properties["MudBlazor.Palette.GrayDefault"] },
                    { "GrayLight", Properties["MudBlazor.Palette.GrayLight"] },
                    { "GrayLighter", Properties["MudBlazor.Palette.GrayLighter"] },
                    { "GrayDark", Properties["MudBlazor.Palette.GrayDark"] },
                    { "GrayDarker", Properties["MudBlazor.Palette.GrayDarker"] },
                    { "OverlayDark", Properties["MudBlazor.Palette.OverlayDark"] },
                    { "OverlayLight", Properties["MudBlazor.Palette.OverlayLight"] },
                },
            }},
            { "MudBlazor.PaletteDark", new() {
                Name = "PaletteDark", 
                NameFriendly = "PaletteDark", 
                BaseTypeName = "Palette", 
                Summary = @"Represents a dark color palette.", 
                Properties = { 
                    { "Black", Properties["MudBlazor.PaletteDark.Black"] },
                    { "Primary", Properties["MudBlazor.PaletteDark.Primary"] },
                    { "Info", Properties["MudBlazor.PaletteDark.Info"] },
                    { "Success", Properties["MudBlazor.PaletteDark.Success"] },
                    { "Warning", Properties["MudBlazor.PaletteDark.Warning"] },
                    { "Error", Properties["MudBlazor.PaletteDark.Error"] },
                    { "Dark", Properties["MudBlazor.PaletteDark.Dark"] },
                    { "TextPrimary", Properties["MudBlazor.PaletteDark.TextPrimary"] },
                    { "TextSecondary", Properties["MudBlazor.PaletteDark.TextSecondary"] },
                    { "TextDisabled", Properties["MudBlazor.PaletteDark.TextDisabled"] },
                    { "ActionDefault", Properties["MudBlazor.PaletteDark.ActionDefault"] },
                    { "ActionDisabled", Properties["MudBlazor.PaletteDark.ActionDisabled"] },
                    { "ActionDisabledBackground", Properties["MudBlazor.PaletteDark.ActionDisabledBackground"] },
                    { "Background", Properties["MudBlazor.PaletteDark.Background"] },
                    { "BackgroundGray", Properties["MudBlazor.PaletteDark.BackgroundGray"] },
                    { "Surface", Properties["MudBlazor.PaletteDark.Surface"] },
                    { "DrawerBackground", Properties["MudBlazor.PaletteDark.DrawerBackground"] },
                    { "DrawerText", Properties["MudBlazor.PaletteDark.DrawerText"] },
                    { "DrawerIcon", Properties["MudBlazor.PaletteDark.DrawerIcon"] },
                    { "AppbarBackground", Properties["MudBlazor.PaletteDark.AppbarBackground"] },
                    { "AppbarText", Properties["MudBlazor.PaletteDark.AppbarText"] },
                    { "LinesDefault", Properties["MudBlazor.PaletteDark.LinesDefault"] },
                    { "LinesInputs", Properties["MudBlazor.PaletteDark.LinesInputs"] },
                    { "TableLines", Properties["MudBlazor.PaletteDark.TableLines"] },
                    { "TableStriped", Properties["MudBlazor.PaletteDark.TableStriped"] },
                    { "Divider", Properties["MudBlazor.PaletteDark.Divider"] },
                    { "DividerLight", Properties["MudBlazor.PaletteDark.DividerLight"] },
                    { "Skeleton", Properties["MudBlazor.PaletteDark.Skeleton"] },
                    { "White", Properties["MudBlazor.Palette.White"] },
                    { "PrimaryContrastText", Properties["MudBlazor.Palette.PrimaryContrastText"] },
                    { "Secondary", Properties["MudBlazor.Palette.Secondary"] },
                    { "SecondaryContrastText", Properties["MudBlazor.Palette.SecondaryContrastText"] },
                    { "Tertiary", Properties["MudBlazor.Palette.Tertiary"] },
                    { "TertiaryContrastText", Properties["MudBlazor.Palette.TertiaryContrastText"] },
                    { "InfoContrastText", Properties["MudBlazor.Palette.InfoContrastText"] },
                    { "SuccessContrastText", Properties["MudBlazor.Palette.SuccessContrastText"] },
                    { "WarningContrastText", Properties["MudBlazor.Palette.WarningContrastText"] },
                    { "ErrorContrastText", Properties["MudBlazor.Palette.ErrorContrastText"] },
                    { "DarkContrastText", Properties["MudBlazor.Palette.DarkContrastText"] },
                    { "TableHover", Properties["MudBlazor.Palette.TableHover"] },
                    { "PrimaryDarken", Properties["MudBlazor.Palette.PrimaryDarken"] },
                    { "PrimaryLighten", Properties["MudBlazor.Palette.PrimaryLighten"] },
                    { "SecondaryDarken", Properties["MudBlazor.Palette.SecondaryDarken"] },
                    { "SecondaryLighten", Properties["MudBlazor.Palette.SecondaryLighten"] },
                    { "TertiaryDarken", Properties["MudBlazor.Palette.TertiaryDarken"] },
                    { "TertiaryLighten", Properties["MudBlazor.Palette.TertiaryLighten"] },
                    { "InfoDarken", Properties["MudBlazor.Palette.InfoDarken"] },
                    { "InfoLighten", Properties["MudBlazor.Palette.InfoLighten"] },
                    { "SuccessDarken", Properties["MudBlazor.Palette.SuccessDarken"] },
                    { "SuccessLighten", Properties["MudBlazor.Palette.SuccessLighten"] },
                    { "WarningDarken", Properties["MudBlazor.Palette.WarningDarken"] },
                    { "WarningLighten", Properties["MudBlazor.Palette.WarningLighten"] },
                    { "ErrorDarken", Properties["MudBlazor.Palette.ErrorDarken"] },
                    { "ErrorLighten", Properties["MudBlazor.Palette.ErrorLighten"] },
                    { "DarkDarken", Properties["MudBlazor.Palette.DarkDarken"] },
                    { "DarkLighten", Properties["MudBlazor.Palette.DarkLighten"] },
                    { "HoverOpacity", Properties["MudBlazor.Palette.HoverOpacity"] },
                    { "RippleOpacity", Properties["MudBlazor.Palette.RippleOpacity"] },
                    { "RippleOpacitySecondary", Properties["MudBlazor.Palette.RippleOpacitySecondary"] },
                    { "GrayDefault", Properties["MudBlazor.Palette.GrayDefault"] },
                    { "GrayLight", Properties["MudBlazor.Palette.GrayLight"] },
                    { "GrayLighter", Properties["MudBlazor.Palette.GrayLighter"] },
                    { "GrayDark", Properties["MudBlazor.Palette.GrayDark"] },
                    { "GrayDarker", Properties["MudBlazor.Palette.GrayDarker"] },
                    { "OverlayDark", Properties["MudBlazor.Palette.OverlayDark"] },
                    { "OverlayLight", Properties["MudBlazor.Palette.OverlayLight"] },
                },
            }},
            { "MudBlazor.PaletteLight", new() {
                Name = "PaletteLight", 
                NameFriendly = "PaletteLight", 
                BaseTypeName = "Palette", 
                Summary = @"Represents a light color palette.", 
                Properties = { 
                    { "Black", Properties["MudBlazor.Palette.Black"] },
                    { "White", Properties["MudBlazor.Palette.White"] },
                    { "Primary", Properties["MudBlazor.Palette.Primary"] },
                    { "PrimaryContrastText", Properties["MudBlazor.Palette.PrimaryContrastText"] },
                    { "Secondary", Properties["MudBlazor.Palette.Secondary"] },
                    { "SecondaryContrastText", Properties["MudBlazor.Palette.SecondaryContrastText"] },
                    { "Tertiary", Properties["MudBlazor.Palette.Tertiary"] },
                    { "TertiaryContrastText", Properties["MudBlazor.Palette.TertiaryContrastText"] },
                    { "Info", Properties["MudBlazor.Palette.Info"] },
                    { "InfoContrastText", Properties["MudBlazor.Palette.InfoContrastText"] },
                    { "Success", Properties["MudBlazor.Palette.Success"] },
                    { "SuccessContrastText", Properties["MudBlazor.Palette.SuccessContrastText"] },
                    { "Warning", Properties["MudBlazor.Palette.Warning"] },
                    { "WarningContrastText", Properties["MudBlazor.Palette.WarningContrastText"] },
                    { "Error", Properties["MudBlazor.Palette.Error"] },
                    { "ErrorContrastText", Properties["MudBlazor.Palette.ErrorContrastText"] },
                    { "Dark", Properties["MudBlazor.Palette.Dark"] },
                    { "DarkContrastText", Properties["MudBlazor.Palette.DarkContrastText"] },
                    { "TextPrimary", Properties["MudBlazor.Palette.TextPrimary"] },
                    { "TextSecondary", Properties["MudBlazor.Palette.TextSecondary"] },
                    { "TextDisabled", Properties["MudBlazor.Palette.TextDisabled"] },
                    { "ActionDefault", Properties["MudBlazor.Palette.ActionDefault"] },
                    { "ActionDisabled", Properties["MudBlazor.Palette.ActionDisabled"] },
                    { "ActionDisabledBackground", Properties["MudBlazor.Palette.ActionDisabledBackground"] },
                    { "Background", Properties["MudBlazor.Palette.Background"] },
                    { "BackgroundGray", Properties["MudBlazor.Palette.BackgroundGray"] },
                    { "Surface", Properties["MudBlazor.Palette.Surface"] },
                    { "DrawerBackground", Properties["MudBlazor.Palette.DrawerBackground"] },
                    { "DrawerText", Properties["MudBlazor.Palette.DrawerText"] },
                    { "DrawerIcon", Properties["MudBlazor.Palette.DrawerIcon"] },
                    { "AppbarBackground", Properties["MudBlazor.Palette.AppbarBackground"] },
                    { "AppbarText", Properties["MudBlazor.Palette.AppbarText"] },
                    { "LinesDefault", Properties["MudBlazor.Palette.LinesDefault"] },
                    { "LinesInputs", Properties["MudBlazor.Palette.LinesInputs"] },
                    { "TableLines", Properties["MudBlazor.Palette.TableLines"] },
                    { "TableStriped", Properties["MudBlazor.Palette.TableStriped"] },
                    { "TableHover", Properties["MudBlazor.Palette.TableHover"] },
                    { "Divider", Properties["MudBlazor.Palette.Divider"] },
                    { "DividerLight", Properties["MudBlazor.Palette.DividerLight"] },
                    { "Skeleton", Properties["MudBlazor.Palette.Skeleton"] },
                    { "PrimaryDarken", Properties["MudBlazor.Palette.PrimaryDarken"] },
                    { "PrimaryLighten", Properties["MudBlazor.Palette.PrimaryLighten"] },
                    { "SecondaryDarken", Properties["MudBlazor.Palette.SecondaryDarken"] },
                    { "SecondaryLighten", Properties["MudBlazor.Palette.SecondaryLighten"] },
                    { "TertiaryDarken", Properties["MudBlazor.Palette.TertiaryDarken"] },
                    { "TertiaryLighten", Properties["MudBlazor.Palette.TertiaryLighten"] },
                    { "InfoDarken", Properties["MudBlazor.Palette.InfoDarken"] },
                    { "InfoLighten", Properties["MudBlazor.Palette.InfoLighten"] },
                    { "SuccessDarken", Properties["MudBlazor.Palette.SuccessDarken"] },
                    { "SuccessLighten", Properties["MudBlazor.Palette.SuccessLighten"] },
                    { "WarningDarken", Properties["MudBlazor.Palette.WarningDarken"] },
                    { "WarningLighten", Properties["MudBlazor.Palette.WarningLighten"] },
                    { "ErrorDarken", Properties["MudBlazor.Palette.ErrorDarken"] },
                    { "ErrorLighten", Properties["MudBlazor.Palette.ErrorLighten"] },
                    { "DarkDarken", Properties["MudBlazor.Palette.DarkDarken"] },
                    { "DarkLighten", Properties["MudBlazor.Palette.DarkLighten"] },
                    { "HoverOpacity", Properties["MudBlazor.Palette.HoverOpacity"] },
                    { "RippleOpacity", Properties["MudBlazor.Palette.RippleOpacity"] },
                    { "RippleOpacitySecondary", Properties["MudBlazor.Palette.RippleOpacitySecondary"] },
                    { "GrayDefault", Properties["MudBlazor.Palette.GrayDefault"] },
                    { "GrayLight", Properties["MudBlazor.Palette.GrayLight"] },
                    { "GrayLighter", Properties["MudBlazor.Palette.GrayLighter"] },
                    { "GrayDark", Properties["MudBlazor.Palette.GrayDark"] },
                    { "GrayDarker", Properties["MudBlazor.Palette.GrayDarker"] },
                    { "OverlayDark", Properties["MudBlazor.Palette.OverlayDark"] },
                    { "OverlayLight", Properties["MudBlazor.Palette.OverlayLight"] },
                },
            }},
            { "MudBlazor.PatternMask", new() {
                Name = "PatternMask", 
                NameFriendly = "PatternMask", 
                BaseTypeName = "BaseMask", 
                Summary = @"A simple input mask consisting of characters.", 
                Remarks = @"By default, the mask characters are: <c>a</c> (letter), <c>0</c> (digit), and <c>*</c> (letter or digit)", 
                Properties = { 
                    { "Placeholder", Properties["MudBlazor.PatternMask.Placeholder"] },
                    { "Transformation", Properties["MudBlazor.PatternMask.Transformation"] },
                    { "CleanDelimiters", Properties["MudBlazor.PatternMask.CleanDelimiters"] },
                    { "Mask", Properties["MudBlazor.BaseMask.Mask"] },
                    { "Text", Properties["MudBlazor.BaseMask.Text"] },
                    { "CaretPos", Properties["MudBlazor.BaseMask.CaretPos"] },
                    { "Selection", Properties["MudBlazor.BaseMask.Selection"] },
                    { "AllowOnlyDelimiters", Properties["MudBlazor.BaseMask.AllowOnlyDelimiters"] },
                    { "MaskChars", Properties["MudBlazor.BaseMask.MaskChars"] },
                },
                Methods = { 
                    { "Insert", Methods["MudBlazor.PatternMask.Insert"] },
                    { "Delete", Methods["MudBlazor.PatternMask.Delete"] },
                    { "Backspace", Methods["MudBlazor.PatternMask.Backspace"] },
                    { "GetCleanText", Methods["MudBlazor.PatternMask.GetCleanText"] },
                    { "UpdateFrom", Methods["MudBlazor.PatternMask.UpdateFrom"] },
                    { "Clear", Methods["MudBlazor.BaseMask.Clear"] },
                    { "SetText", Methods["MudBlazor.BaseMask.SetText"] },
                    { "DeleteSelection", Methods["MudBlazor.PatternMask.DeleteSelection"] },
                    { "FillWithPlaceholder", Methods["MudBlazor.PatternMask.FillWithPlaceholder"] },
                    { "AlignAgainstMask", Methods["MudBlazor.PatternMask.AlignAgainstMask"] },
                    { "ModifyPartiallyAlignedMask", Methods["MudBlazor.PatternMask.ModifyPartiallyAlignedMask"] },
                    { "IsMatch", Methods["MudBlazor.PatternMask.IsMatch"] },
                    { "InitInternals", Methods["MudBlazor.PatternMask.InitInternals"] },
                    { "UpdateText", Methods["MudBlazor.PatternMask.UpdateText"] },
                    { "ModifyFinalText", Methods["MudBlazor.PatternMask.ModifyFinalText"] },
                    { "Init", Methods["MudBlazor.BaseMask.Init"] },
                    { "IsDelimiter", Methods["MudBlazor.BaseMask.IsDelimiter"] },
                    { "Refresh", Methods["MudBlazor.BaseMask.Refresh"] },
                    { "ConsolidateSelection", Methods["MudBlazor.BaseMask.ConsolidateSelection"] },
                },
            }},
            { "MudBlazor.PickerVariant", new() {
                Name = "PickerVariant", 
                NameFriendly = "PickerVariant", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the display behavior of a <see cref=""T:MudBlazor.MudPicker`1"" /> component.", 
                Fields = { 
                    { "Inline", Fields["MudBlazor.PickerVariant.Inline"] },
                    { "Dialog", Fields["MudBlazor.PickerVariant.Dialog"] },
                    { "Static", Fields["MudBlazor.PickerVariant.Static"] },
                },
            }},
            { "MudBlazor.Placement", new() {
                Name = "Placement", 
                NameFriendly = "Placement", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Left", Fields["MudBlazor.Placement.Left"] },
                    { "Right", Fields["MudBlazor.Placement.Right"] },
                    { "End", Fields["MudBlazor.Placement.End"] },
                    { "Start", Fields["MudBlazor.Placement.Start"] },
                    { "Top", Fields["MudBlazor.Placement.Top"] },
                    { "Bottom", Fields["MudBlazor.Placement.Bottom"] },
                },
            }},
            { "MudBlazor.PopoverHolderContainer", new() {
                Name = "PopoverHolderContainer", 
                NameFriendly = "PopoverHolderContainer", 
                BaseTypeName = "Object", 
                Summary = @"Represents a container for <see cref=""T:MudBlazor.IMudPopoverHolder"" />, along with the associated <see cref=""T:MudBlazor.PopoverHolderOperation"" />.", 
                Properties = { 
                    { "Operation", Properties["MudBlazor.PopoverHolderContainer.Operation"] },
                    { "Holders", Properties["MudBlazor.PopoverHolderContainer.Holders"] },
                },
            }},
            { "MudBlazor.PopoverHolderOperation", new() {
                Name = "PopoverHolderOperation", 
                NameFriendly = "PopoverHolderOperation", 
                BaseTypeName = "Enum", 
                Summary = @"Represents the operation types for <see cref=""T:MudBlazor.IMudPopoverHolder"" />.", 
                Fields = { 
                    { "Create", Fields["MudBlazor.PopoverHolderOperation.Create"] },
                    { "Remove", Fields["MudBlazor.PopoverHolderOperation.Remove"] },
                    { "Update", Fields["MudBlazor.PopoverHolderOperation.Update"] },
                },
            }},
            { "MudBlazor.PopoverMode", new() {
                Name = "PopoverMode", 
                NameFriendly = "PopoverMode", 
                BaseTypeName = "Enum", 
                Summary = @"Specifies the mode for displaying popovers.", 
                Fields = { 
                    { "Default", Fields["MudBlazor.PopoverMode.Default"] },
                },
            }},
            { "MudBlazor.PopoverOptions", new() {
                Name = "PopoverOptions", 
                NameFriendly = "PopoverOptions", 
                BaseTypeName = "Object", 
                Summary = @"Represents the options for <see cref=""T:MudBlazor.IPopoverService"" />.", 
                Properties = { 
                    { "CheckForPopoverProvider", Properties["MudBlazor.PopoverOptions.CheckForPopoverProvider"] },
                    { "ContainerClass", Properties["MudBlazor.PopoverOptions.ContainerClass"] },
                    { "FlipMargin", Properties["MudBlazor.PopoverOptions.FlipMargin"] },
                    { "QueueDelay", Properties["MudBlazor.PopoverOptions.QueueDelay"] },
                    { "ThrowOnDuplicateProvider", Properties["MudBlazor.PopoverOptions.ThrowOnDuplicateProvider"] },
                    { "Mode", Properties["MudBlazor.PopoverOptions.Mode"] },
                },
            }},
            { "MudBlazor.Position", new() {
                Name = "Position", 
                NameFriendly = "Position", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Bottom", Fields["MudBlazor.Position.Bottom"] },
                    { "Center", Fields["MudBlazor.Position.Center"] },
                    { "Top", Fields["MudBlazor.Position.Top"] },
                    { "Left", Fields["MudBlazor.Position.Left"] },
                    { "Right", Fields["MudBlazor.Position.Right"] },
                    { "Start", Fields["MudBlazor.Position.Start"] },
                    { "End", Fields["MudBlazor.Position.End"] },
                },
            }},
            { "MudBlazor.PropertyColumn`2", new() {
                Name = "PropertyColumn`2", 
                NameFriendly = "PropertyColumn<T, TProperty>", 
                BaseTypeName = "Column`1", 
                IsComponent = true, 
                Summary = @"Represents a column in a <see cref=""T:MudBlazor.MudDataGrid`1"" /> associated with an object's property.", 
                Properties = { 
                    { "Property", Properties["MudBlazor.PropertyColumn`2.Property"] },
                    { "Format", Properties["MudBlazor.PropertyColumn`2.Format"] },
                    { "PropertyName", Properties["MudBlazor.PropertyColumn`2.PropertyName"] },
                    { "DataGrid", Properties["MudBlazor.Column`1.DataGrid"] },
                    { "Value", Properties["MudBlazor.Column`1.Value"] },
                    { "Title", Properties["MudBlazor.Column`1.Title"] },
                    { "HideSmall", Properties["MudBlazor.Column`1.HideSmall"] },
                    { "FooterColSpan", Properties["MudBlazor.Column`1.FooterColSpan"] },
                    { "HeaderColSpan", Properties["MudBlazor.Column`1.HeaderColSpan"] },
                    { "HeaderTemplate", Properties["MudBlazor.Column`1.HeaderTemplate"] },
                    { "CellTemplate", Properties["MudBlazor.Column`1.CellTemplate"] },
                    { "FooterTemplate", Properties["MudBlazor.Column`1.FooterTemplate"] },
                    { "GroupTemplate", Properties["MudBlazor.Column`1.GroupTemplate"] },
                    { "AggregateTemplate", Properties["MudBlazor.Column`1.AggregateTemplate"] },
                    { "GroupBy", Properties["MudBlazor.Column`1.GroupBy"] },
                    { "Required", Properties["MudBlazor.Column`1.Required"] },
                    { "HeaderClass", Properties["MudBlazor.Column`1.HeaderClass"] },
                    { "HeaderClassFunc", Properties["MudBlazor.Column`1.HeaderClassFunc"] },
                    { "HeaderStyle", Properties["MudBlazor.Column`1.HeaderStyle"] },
                    { "HeaderStyleFunc", Properties["MudBlazor.Column`1.HeaderStyleFunc"] },
                    { "Sortable", Properties["MudBlazor.Column`1.Sortable"] },
                    { "Resizable", Properties["MudBlazor.Column`1.Resizable"] },
                    { "DragAndDropEnabled", Properties["MudBlazor.Column`1.DragAndDropEnabled"] },
                    { "Filterable", Properties["MudBlazor.Column`1.Filterable"] },
                    { "ShowFilterIcon", Properties["MudBlazor.Column`1.ShowFilterIcon"] },
                    { "Hideable", Properties["MudBlazor.Column`1.Hideable"] },
                    { "Hidden", Properties["MudBlazor.Column`1.Hidden"] },
                    { "ShowColumnOptions", Properties["MudBlazor.Column`1.ShowColumnOptions"] },
                    { "Comparer", Properties["MudBlazor.Column`1.Comparer"] },
                    { "SortBy", Properties["MudBlazor.Column`1.SortBy"] },
                    { "InitialDirection", Properties["MudBlazor.Column`1.InitialDirection"] },
                    { "SortIcon", Properties["MudBlazor.Column`1.SortIcon"] },
                    { "Groupable", Properties["MudBlazor.Column`1.Groupable"] },
                    { "Grouping", Properties["MudBlazor.Column`1.Grouping"] },
                    { "StickyLeft", Properties["MudBlazor.Column`1.StickyLeft"] },
                    { "StickyRight", Properties["MudBlazor.Column`1.StickyRight"] },
                    { "FilterTemplate", Properties["MudBlazor.Column`1.FilterTemplate"] },
                    { "FilterOperators", Properties["MudBlazor.Column`1.FilterOperators"] },
                    { "Identifier", Properties["MudBlazor.Column`1.Identifier"] },
                    { "Culture", Properties["MudBlazor.Column`1.Culture"] },
                    { "CellClass", Properties["MudBlazor.Column`1.CellClass"] },
                    { "CellClassFunc", Properties["MudBlazor.Column`1.CellClassFunc"] },
                    { "CellStyle", Properties["MudBlazor.Column`1.CellStyle"] },
                    { "CellStyleFunc", Properties["MudBlazor.Column`1.CellStyleFunc"] },
                    { "Editable", Properties["MudBlazor.Column`1.Editable"] },
                    { "EditTemplate", Properties["MudBlazor.Column`1.EditTemplate"] },
                    { "FooterClass", Properties["MudBlazor.Column`1.FooterClass"] },
                    { "FooterClassFunc", Properties["MudBlazor.Column`1.FooterClassFunc"] },
                    { "FooterStyle", Properties["MudBlazor.Column`1.FooterStyle"] },
                    { "FooterStyleFunc", Properties["MudBlazor.Column`1.FooterStyleFunc"] },
                    { "EnableFooterSelection", Properties["MudBlazor.Column`1.EnableFooterSelection"] },
                    { "AggregateDefinition", Properties["MudBlazor.Column`1.AggregateDefinition"] },
                    { "FilterContext", Properties["MudBlazor.Column`1.FilterContext"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "HideAsync", Methods["MudBlazor.Column`1.HideAsync"] },
                    { "ShowAsync", Methods["MudBlazor.Column`1.ShowAsync"] },
                    { "ToggleAsync", Methods["MudBlazor.Column`1.ToggleAsync"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.Column`1.ValueChanged"] },
                    { "HiddenChanged", Events["MudBlazor.Column`1.HiddenChanged"] },
                    { "GroupingChanged", Events["MudBlazor.Column`1.GroupingChanged"] },
                },
            }},
            { "MudBlazor.PseudoCss", new() {
                Name = "PseudoCss", 
                NameFriendly = "PseudoCss", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Scope", Properties["MudBlazor.PseudoCss.Scope"] },
                },
            }},
            { "MudBlazor.Range`1", new() {
                Name = "Range`1", 
                NameFriendly = "Range<T>", 
                BaseTypeName = "Object", 
                Summary = @"A range of values.", 
                Properties = { 
                    { "Start", Properties["MudBlazor.Range`1.Start"] },
                    { "End", Properties["MudBlazor.Range`1.End"] },
                },
            }},
            { "MudBlazor.RangeConverter`1", new() {
                Name = "RangeConverter`1", 
                NameFriendly = "RangeConverter<T>", 
                BaseTypeName = "Converter`1", 
                Properties = { 
                    { "Format", Properties["MudBlazor.Converter`1.Format"] },
                    { "SetFunc", Properties["MudBlazor.Converter`2.SetFunc"] },
                    { "GetFunc", Properties["MudBlazor.Converter`2.GetFunc"] },
                    { "Culture", Properties["MudBlazor.Converter`2.Culture"] },
                    { "OnError", Properties["MudBlazor.Converter`2.OnError"] },
                    { "SetError", Properties["MudBlazor.Converter`2.SetError"] },
                    { "GetError", Properties["MudBlazor.Converter`2.GetError"] },
                    { "SetErrorMessage", Properties["MudBlazor.Converter`2.SetErrorMessage"] },
                    { "GetErrorMessage", Properties["MudBlazor.Converter`2.GetErrorMessage"] },
                },
                Methods = { 
                    { "Join", Methods["MudBlazor.RangeConverter`1.Join"] },
                    { "Split", Methods["MudBlazor.RangeConverter`1.Split"] },
                    { "Set", Methods["MudBlazor.Converter`2.Set"] },
                    { "Get", Methods["MudBlazor.Converter`2.Get"] },
                    { "UpdateSetError", Methods["MudBlazor.Converter`2.UpdateSetError"] },
                    { "UpdateGetError", Methods["MudBlazor.Converter`2.UpdateGetError"] },
                },
            }},
            { "MudBlazor.RegexMask", new() {
                Name = "RegexMask", 
                NameFriendly = "RegexMask", 
                BaseTypeName = "BaseMask", 
                Summary = @"An input mask consisting of a regular expression.", 
                Properties = { 
                    { "Delimiters", Properties["MudBlazor.RegexMask.Delimiters"] },
                    { "Mask", Properties["MudBlazor.BaseMask.Mask"] },
                    { "Text", Properties["MudBlazor.BaseMask.Text"] },
                    { "CaretPos", Properties["MudBlazor.BaseMask.CaretPos"] },
                    { "Selection", Properties["MudBlazor.BaseMask.Selection"] },
                    { "AllowOnlyDelimiters", Properties["MudBlazor.BaseMask.AllowOnlyDelimiters"] },
                    { "MaskChars", Properties["MudBlazor.BaseMask.MaskChars"] },
                },
                Methods = { 
                    { "Insert", Methods["MudBlazor.RegexMask.Insert"] },
                    { "Delete", Methods["MudBlazor.RegexMask.Delete"] },
                    { "Backspace", Methods["MudBlazor.RegexMask.Backspace"] },
                    { "UpdateFrom", Methods["MudBlazor.RegexMask.UpdateFrom"] },
                    { "IPv4", Methods["MudBlazor.RegexMask.IPv4"] },
                    { "IPv6", Methods["MudBlazor.RegexMask.IPv6"] },
                    { "Email", Methods["MudBlazor.RegexMask.Email"] },
                    { "GetCleanText", Methods["MudBlazor.BaseMask.GetCleanText"] },
                    { "Clear", Methods["MudBlazor.BaseMask.Clear"] },
                    { "SetText", Methods["MudBlazor.BaseMask.SetText"] },
                    { "InitInternals", Methods["MudBlazor.RegexMask.InitInternals"] },
                    { "InitRegex", Methods["MudBlazor.RegexMask.InitRegex"] },
                    { "DeleteSelection", Methods["MudBlazor.RegexMask.DeleteSelection"] },
                    { "AlignAgainstMask", Methods["MudBlazor.RegexMask.AlignAgainstMask"] },
                    { "Init", Methods["MudBlazor.BaseMask.Init"] },
                    { "UpdateText", Methods["MudBlazor.BaseMask.UpdateText"] },
                    { "IsDelimiter", Methods["MudBlazor.BaseMask.IsDelimiter"] },
                    { "Refresh", Methods["MudBlazor.BaseMask.Refresh"] },
                    { "ConsolidateSelection", Methods["MudBlazor.BaseMask.ConsolidateSelection"] },
                },
            }},
            { "MudBlazor.ResizeMode", new() {
                Name = "ResizeMode", 
                NameFriendly = "ResizeMode", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the column resizing behavior for a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Fields = { 
                    { "None", Fields["MudBlazor.ResizeMode.None"] },
                    { "Column", Fields["MudBlazor.ResizeMode.Column"] },
                    { "Container", Fields["MudBlazor.ResizeMode.Container"] },
                },
            }},
            { "MudBlazor.ScrollBehavior", new() {
                Name = "ScrollBehavior", 
                NameFriendly = "ScrollBehavior", 
                BaseTypeName = "Enum", 
                Summary = @"Specifies the scroll behavior for scrolling operations.", 
                Fields = { 
                    { "Smooth", Fields["MudBlazor.ScrollBehavior.Smooth"] },
                    { "Auto", Fields["MudBlazor.ScrollBehavior.Auto"] },
                },
            }},
            { "MudBlazor.ScrollEventArgs", new() {
                Name = "ScrollEventArgs", 
                NameFriendly = "ScrollEventArgs", 
                BaseTypeName = "EventArgs", 
                Properties = { 
                    { "FirstChildBoundingClientRect", Properties["MudBlazor.ScrollEventArgs.FirstChildBoundingClientRect"] },
                    { "ScrollTop", Properties["MudBlazor.ScrollEventArgs.ScrollTop"] },
                    { "ScrollLeft", Properties["MudBlazor.ScrollEventArgs.ScrollLeft"] },
                    { "ScrollHeight", Properties["MudBlazor.ScrollEventArgs.ScrollHeight"] },
                    { "ScrollWidth", Properties["MudBlazor.ScrollEventArgs.ScrollWidth"] },
                    { "NodeName", Properties["MudBlazor.ScrollEventArgs.NodeName"] },
                },
            }},
            { "MudBlazor.ScrollSectionCenteredEventArgs", new() {
                Name = "ScrollSectionCenteredEventArgs", 
                NameFriendly = "ScrollSectionCenteredEventArgs", 
                BaseTypeName = "Object", 
                Summary = @"Provides data for the <see cref=""E:MudBlazor.IScrollSpy.ScrollSectionSectionCentered"" /> event.", 
                Properties = { 
                    { "Id", Properties["MudBlazor.ScrollSectionCenteredEventArgs.Id"] },
                },
            }},
            { "MudBlazor.SelectColumn`1", new() {
                Name = "SelectColumn`1", 
                NameFriendly = "SelectColumn<T>", 
                BaseTypeName = "ComponentBase", 
                Summary = @"Represents a checkbox column used to select rows in a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "ShowInHeader", Properties["MudBlazor.SelectColumn`1.ShowInHeader"] },
                    { "ShowInFooter", Properties["MudBlazor.SelectColumn`1.ShowInFooter"] },
                    { "Size", Properties["MudBlazor.SelectColumn`1.Size"] },
                    { "DragAndDropEnabled", Properties["MudBlazor.SelectColumn`1.DragAndDropEnabled"] },
                    { "Hideable", Properties["MudBlazor.SelectColumn`1.Hideable"] },
                    { "Hidden", Properties["MudBlazor.SelectColumn`1.Hidden"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Events = { 
                    { "HiddenChanged", Events["MudBlazor.SelectColumn`1.HiddenChanged"] },
                },
            }},
            { "MudBlazor.SelectionMode", new() {
                Name = "SelectionMode", 
                NameFriendly = "SelectionMode", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the types of selections allowed.", 
                Fields = { 
                    { "SingleSelection", Fields["MudBlazor.SelectionMode.SingleSelection"] },
                    { "MultiSelection", Fields["MudBlazor.SelectionMode.MultiSelection"] },
                    { "ToggleSelection", Fields["MudBlazor.SelectionMode.ToggleSelection"] },
                },
            }},
            { "MudBlazor.Services.BrowserWindowSize", new() {
                Name = "BrowserWindowSize", 
                NameFriendly = "BrowserWindowSize", 
                BaseTypeName = "EventArgs", 
                Summary = @"Represents the size of a browser window.", 
                Properties = { 
                    { "Height", Properties["MudBlazor.Services.BrowserWindowSize.Height"] },
                    { "Width", Properties["MudBlazor.Services.BrowserWindowSize.Width"] },
                },
            }},
            { "MudBlazor.Services.JsEventOptions", new() {
                Name = "JsEventOptions", 
                NameFriendly = "JsEventOptions", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "TargetClass", Properties["MudBlazor.Services.JsEventOptions.TargetClass"] },
                    { "TagName", Properties["MudBlazor.Services.JsEventOptions.TagName"] },
                    { "EnableLogging", Properties["MudBlazor.Services.JsEventOptions.EnableLogging"] },
                },
            }},
            { "MudBlazor.Services.KeyboardEvent", new() {
                Name = "KeyboardEvent", 
                NameFriendly = "KeyboardEvent", 
                BaseTypeName = "MulticastDelegate", 
                Summary = @"Represents a method that will handle keyboard events.", 
                Properties = { 
                    { "Target", Properties["System.Delegate.Target"] },
                    { "Method", Properties["System.Delegate.Method"] },
                },
                Methods = { 
                    { "Invoke", Methods["MudBlazor.Services.KeyboardEvent.Invoke"] },
                    { "BeginInvoke", Methods["MudBlazor.Services.KeyboardEvent.BeginInvoke"] },
                    { "EndInvoke", Methods["MudBlazor.Services.KeyboardEvent.EndInvoke"] },
                    { "GetObjectData", Methods["System.MulticastDelegate.GetObjectData"] },
                    { "GetInvocationList", Methods["System.MulticastDelegate.GetInvocationList"] },
                    { "Clone", Methods["System.Delegate.Clone"] },
                    { "DynamicInvoke", Methods["System.Delegate.DynamicInvoke"] },
                    { "CombineImpl", Methods["System.MulticastDelegate.CombineImpl"] },
                    { "RemoveImpl", Methods["System.MulticastDelegate.RemoveImpl"] },
                    { "GetMethodImpl", Methods["System.MulticastDelegate.GetMethodImpl"] },
                    { "DynamicInvokeImpl", Methods["System.Delegate.DynamicInvokeImpl"] },
                },
            }},
            { "MudBlazor.Services.KeyInterceptorOptions", new() {
                Name = "KeyInterceptorOptions", 
                NameFriendly = "KeyInterceptorOptions", 
                BaseTypeName = "Object", 
                Summary = @"Configuration options for key interception.", 
                Properties = { 
                    { "TargetClass", Properties["MudBlazor.Services.KeyInterceptorOptions.TargetClass"] },
                    { "EnableLogging", Properties["MudBlazor.Services.KeyInterceptorOptions.EnableLogging"] },
                    { "Keys", Properties["MudBlazor.Services.KeyInterceptorOptions.Keys"] },
                },
            }},
            { "MudBlazor.Services.KeyOptions", new() {
                Name = "KeyOptions", 
                NameFriendly = "KeyOptions", 
                BaseTypeName = "Object", 
                Summary = @"<para>Configuration for preventDefault() and stopPropagation() control</para><para>For PreventDown, PreventUp, StopDown and StopUp the configuration which key combinations should matchis a JavaScript boolean expression.</para><para>Examples:For the examples, let's assume the Tab key was pressed.Note: for combinations of more than one modifier the following order of modifiers must be followed strictly: shift+ctrl+alt+meta</para><para> * Don't prevent key down:         PreventDown=null or PreventDown=""none"" * Prevent key down of unmodified keystrokes such as ""Tab"":         PreventDown=""key+none"" * Prevent key down of Tab and Ctrl+Tab         PreventDown=""key+none|key+ctrl"" * Prevent key down of just Ctrl+Tab         PreventDown=""key+ctrl"" * Prevent key down of Ctrl+Tab and Shift+Tab but not Shift+Ctrl+Tab:         PreventDown=""key+shift|key+ctrl"" * Prevent key down of Shift+Ctrl+Tab and Ctrl+Tab but not Shift+Tab:         PreventDown=""key+shift+ctrl|key+ctrl"" * Prevent any combination of key and modifiers, but not the unmodified key:         PreventDown=""key+any"" * Prevent any combination of key and modifiers, even the unmodified key:         PreventDown=""any""</para>", 
                Properties = { 
                    { "Key", Properties["MudBlazor.Services.KeyOptions.Key"] },
                    { "SubscribeDown", Properties["MudBlazor.Services.KeyOptions.SubscribeDown"] },
                    { "SubscribeUp", Properties["MudBlazor.Services.KeyOptions.SubscribeUp"] },
                    { "PreventDown", Properties["MudBlazor.Services.KeyOptions.PreventDown"] },
                    { "PreventUp", Properties["MudBlazor.Services.KeyOptions.PreventUp"] },
                    { "StopDown", Properties["MudBlazor.Services.KeyOptions.StopDown"] },
                    { "StopUp", Properties["MudBlazor.Services.KeyOptions.StopUp"] },
                },
            }},
            { "MudBlazor.Services.MudServicesConfiguration", new() {
                Name = "MudServicesConfiguration", 
                NameFriendly = "MudServicesConfiguration", 
                BaseTypeName = "Object", 
                Summary = @"Common services configuration required by MudBlazor components", 
                Properties = { 
                    { "SnackbarConfiguration", Properties["MudBlazor.Services.MudServicesConfiguration.SnackbarConfiguration"] },
                    { "ResizeOptions", Properties["MudBlazor.Services.MudServicesConfiguration.ResizeOptions"] },
                    { "ResizeObserverOptions", Properties["MudBlazor.Services.MudServicesConfiguration.ResizeObserverOptions"] },
                    { "PopoverOptions", Properties["MudBlazor.Services.MudServicesConfiguration.PopoverOptions"] },
                },
            }},
            { "MudBlazor.Services.ResizeObserverOptions", new() {
                Name = "ResizeObserverOptions", 
                NameFriendly = "ResizeObserverOptions", 
                BaseTypeName = "Object", 
                Summary = @"Options for configuring the <see cref=""T:MudBlazor.Services.IResizeObserver"" />.", 
                Properties = { 
                    { "ReportRate", Properties["MudBlazor.Services.ResizeObserverOptions.ReportRate"] },
                    { "EnableLogging", Properties["MudBlazor.Services.ResizeObserverOptions.EnableLogging"] },
                },
            }},
            { "MudBlazor.Services.ResizeOptions", new() {
                Name = "ResizeOptions", 
                NameFriendly = "ResizeOptions", 
                BaseTypeName = "Object", 
                Summary = @"Represents options for <see cref=""T:MudBlazor.IBrowserViewportService"" />.", 
                Properties = { 
                    { "ReportRate", Properties["MudBlazor.Services.ResizeOptions.ReportRate"] },
                    { "EnableLogging", Properties["MudBlazor.Services.ResizeOptions.EnableLogging"] },
                    { "SuppressInitEvent", Properties["MudBlazor.Services.ResizeOptions.SuppressInitEvent"] },
                    { "NotifyOnBreakpointOnly", Properties["MudBlazor.Services.ResizeOptions.NotifyOnBreakpointOnly"] },
                    { "BreakpointDefinitions", Properties["MudBlazor.Services.ResizeOptions.BreakpointDefinitions"] },
                },
            }},
            { "MudBlazor.Services.SizeChanged", new() {
                Name = "SizeChanged", 
                NameFriendly = "SizeChanged", 
                BaseTypeName = "MulticastDelegate", 
                Summary = @"Delegate for handling size change events.", 
                Properties = { 
                    { "Target", Properties["System.Delegate.Target"] },
                    { "Method", Properties["System.Delegate.Method"] },
                },
                Methods = { 
                    { "Invoke", Methods["MudBlazor.Services.SizeChanged.Invoke"] },
                    { "BeginInvoke", Methods["MudBlazor.Services.SizeChanged.BeginInvoke"] },
                    { "EndInvoke", Methods["MudBlazor.Services.SizeChanged.EndInvoke"] },
                    { "GetObjectData", Methods["System.MulticastDelegate.GetObjectData"] },
                    { "GetInvocationList", Methods["System.MulticastDelegate.GetInvocationList"] },
                    { "Clone", Methods["System.Delegate.Clone"] },
                    { "DynamicInvoke", Methods["System.Delegate.DynamicInvoke"] },
                    { "CombineImpl", Methods["System.MulticastDelegate.CombineImpl"] },
                    { "RemoveImpl", Methods["System.MulticastDelegate.RemoveImpl"] },
                    { "GetMethodImpl", Methods["System.MulticastDelegate.GetMethodImpl"] },
                    { "DynamicInvokeImpl", Methods["System.Delegate.DynamicInvokeImpl"] },
                },
            }},
            { "MudBlazor.Severity", new() {
                Name = "Severity", 
                NameFriendly = "Severity", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Normal", Fields["MudBlazor.Severity.Normal"] },
                    { "Info", Fields["MudBlazor.Severity.Info"] },
                    { "Success", Fields["MudBlazor.Severity.Success"] },
                    { "Warning", Fields["MudBlazor.Severity.Warning"] },
                    { "Error", Fields["MudBlazor.Severity.Error"] },
                },
            }},
            { "MudBlazor.Shadow", new() {
                Name = "Shadow", 
                NameFriendly = "Shadow", 
                BaseTypeName = "Object", 
                Summary = @"Represents the typography settings for Shadow.", 
                Properties = { 
                    { "Elevation", Properties["MudBlazor.Shadow.Elevation"] },
                },
            }},
            { "MudBlazor.Size", new() {
                Name = "Size", 
                NameFriendly = "Size", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the size of a component.", 
                Fields = { 
                    { "Small", Fields["MudBlazor.Size.Small"] },
                    { "Medium", Fields["MudBlazor.Size.Medium"] },
                    { "Large", Fields["MudBlazor.Size.Large"] },
                },
            }},
            { "MudBlazor.SkeletonType", new() {
                Name = "SkeletonType", 
                NameFriendly = "SkeletonType", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the shape of a <see cref=""T:MudBlazor.MudSkeleton"" /> component.", 
                Fields = { 
                    { "Text", Fields["MudBlazor.SkeletonType.Text"] },
                    { "Circle", Fields["MudBlazor.SkeletonType.Circle"] },
                    { "Rectangle", Fields["MudBlazor.SkeletonType.Rectangle"] },
                },
            }},
            { "MudBlazor.SliderContext`1", new() {
                Name = "SliderContext`1", 
                NameFriendly = "SliderContext<T>", 
                BaseTypeName = "Object", 
                Summary = @"The current state of a <see cref=""T:MudBlazor.MudSlider`1"" /> component, containing both the value and nullable value.", 
                Remarks = @"This state is a cascading parameter for <see cref=""T:MudBlazor.MudSlider`1"" /> components.", 
                Properties = { 
                    { "Value", Properties["MudBlazor.SliderContext`1.Value"] },
                    { "NullableValue", Properties["MudBlazor.SliderContext`1.NullableValue"] },
                },
            }},
            { "MudBlazor.Snackbar", new() {
                Name = "Snackbar", 
                NameFriendly = "Snackbar", 
                BaseTypeName = "Object", 
                Summary = @"The service used to display snackbar messages.", 
                Properties = { 
                    { "Message", Properties["MudBlazor.Snackbar.Message"] },
                    { "Severity", Properties["MudBlazor.Snackbar.Severity"] },
                },
                Methods = { 
                    { "ForceClose", Methods["MudBlazor.Snackbar.ForceClose"] },
                    { "PauseTransitions", Methods["MudBlazor.Snackbar.PauseTransitions"] },
                },
                Events = { 
                    { "OnClose", Events["MudBlazor.Snackbar.OnClose"] },
                    { "OnUpdate", Events["MudBlazor.Snackbar.OnUpdate"] },
                },
            }},
            { "MudBlazor.SnackbarConfiguration", new() {
                Name = "SnackbarConfiguration", 
                NameFriendly = "SnackbarConfiguration", 
                BaseTypeName = "CommonSnackbarOptions", 
                Properties = { 
                    { "NewestOnTop", Properties["MudBlazor.SnackbarConfiguration.NewestOnTop"] },
                    { "PreventDuplicates", Properties["MudBlazor.SnackbarConfiguration.PreventDuplicates"] },
                    { "MaxDisplayedSnackbars", Properties["MudBlazor.SnackbarConfiguration.MaxDisplayedSnackbars"] },
                    { "PositionClass", Properties["MudBlazor.SnackbarConfiguration.PositionClass"] },
                    { "ClearAfterNavigation", Properties["MudBlazor.SnackbarConfiguration.ClearAfterNavigation"] },
                    { "MaximumOpacity", Properties["MudBlazor.CommonSnackbarOptions.MaximumOpacity"] },
                    { "ShowTransitionDuration", Properties["MudBlazor.CommonSnackbarOptions.ShowTransitionDuration"] },
                    { "VisibleStateDuration", Properties["MudBlazor.CommonSnackbarOptions.VisibleStateDuration"] },
                    { "HideTransitionDuration", Properties["MudBlazor.CommonSnackbarOptions.HideTransitionDuration"] },
                    { "ShowCloseIcon", Properties["MudBlazor.CommonSnackbarOptions.ShowCloseIcon"] },
                    { "RequireInteraction", Properties["MudBlazor.CommonSnackbarOptions.RequireInteraction"] },
                    { "BackgroundBlurred", Properties["MudBlazor.CommonSnackbarOptions.BackgroundBlurred"] },
                    { "SnackbarVariant", Properties["MudBlazor.CommonSnackbarOptions.SnackbarVariant"] },
                    { "IconSize", Properties["MudBlazor.CommonSnackbarOptions.IconSize"] },
                    { "NormalIcon", Properties["MudBlazor.CommonSnackbarOptions.NormalIcon"] },
                    { "InfoIcon", Properties["MudBlazor.CommonSnackbarOptions.InfoIcon"] },
                    { "SuccessIcon", Properties["MudBlazor.CommonSnackbarOptions.SuccessIcon"] },
                    { "WarningIcon", Properties["MudBlazor.CommonSnackbarOptions.WarningIcon"] },
                    { "ErrorIcon", Properties["MudBlazor.CommonSnackbarOptions.ErrorIcon"] },
                },
            }},
            { "MudBlazor.SnackbarDuplicatesBehavior", new() {
                Name = "SnackbarDuplicatesBehavior", 
                NameFriendly = "SnackbarDuplicatesBehavior", 
                BaseTypeName = "Enum", 
                Summary = @"Controls what happens when duplicate snackbars are detected.", 
                Fields = { 
                    { "Allow", Fields["MudBlazor.SnackbarDuplicatesBehavior.Allow"] },
                    { "Prevent", Fields["MudBlazor.SnackbarDuplicatesBehavior.Prevent"] },
                    { "GlobalDefault", Fields["MudBlazor.SnackbarDuplicatesBehavior.GlobalDefault"] },
                },
            }},
            { "MudBlazor.SnackbarOptions", new() {
                Name = "SnackbarOptions", 
                NameFriendly = "SnackbarOptions", 
                BaseTypeName = "CommonSnackbarOptions", 
                Summary = @"The options applied to an individual snackbar.", 
                Properties = { 
                    { "OnClick", Properties["MudBlazor.SnackbarOptions.OnClick"] },
                    { "CloseButtonClickFunc", Properties["MudBlazor.SnackbarOptions.CloseButtonClickFunc"] },
                    { "Action", Properties["MudBlazor.SnackbarOptions.Action"] },
                    { "ActionVariant", Properties["MudBlazor.SnackbarOptions.ActionVariant"] },
                    { "ActionColor", Properties["MudBlazor.SnackbarOptions.ActionColor"] },
                    { "Severity", Properties["MudBlazor.SnackbarOptions.Severity"] },
                    { "SnackbarTypeClass", Properties["MudBlazor.SnackbarOptions.SnackbarTypeClass"] },
                    { "CloseAfterNavigation", Properties["MudBlazor.SnackbarOptions.CloseAfterNavigation"] },
                    { "HideIcon", Properties["MudBlazor.SnackbarOptions.HideIcon"] },
                    { "Icon", Properties["MudBlazor.SnackbarOptions.Icon"] },
                    { "IconColor", Properties["MudBlazor.SnackbarOptions.IconColor"] },
                    { "DuplicatesBehavior", Properties["MudBlazor.SnackbarOptions.DuplicatesBehavior"] },
                    { "MaximumOpacity", Properties["MudBlazor.CommonSnackbarOptions.MaximumOpacity"] },
                    { "ShowTransitionDuration", Properties["MudBlazor.CommonSnackbarOptions.ShowTransitionDuration"] },
                    { "VisibleStateDuration", Properties["MudBlazor.CommonSnackbarOptions.VisibleStateDuration"] },
                    { "HideTransitionDuration", Properties["MudBlazor.CommonSnackbarOptions.HideTransitionDuration"] },
                    { "ShowCloseIcon", Properties["MudBlazor.CommonSnackbarOptions.ShowCloseIcon"] },
                    { "RequireInteraction", Properties["MudBlazor.CommonSnackbarOptions.RequireInteraction"] },
                    { "BackgroundBlurred", Properties["MudBlazor.CommonSnackbarOptions.BackgroundBlurred"] },
                    { "SnackbarVariant", Properties["MudBlazor.CommonSnackbarOptions.SnackbarVariant"] },
                    { "IconSize", Properties["MudBlazor.CommonSnackbarOptions.IconSize"] },
                    { "NormalIcon", Properties["MudBlazor.CommonSnackbarOptions.NormalIcon"] },
                    { "InfoIcon", Properties["MudBlazor.CommonSnackbarOptions.InfoIcon"] },
                    { "SuccessIcon", Properties["MudBlazor.CommonSnackbarOptions.SuccessIcon"] },
                    { "WarningIcon", Properties["MudBlazor.CommonSnackbarOptions.WarningIcon"] },
                    { "ErrorIcon", Properties["MudBlazor.CommonSnackbarOptions.ErrorIcon"] },
                },
            }},
            { "MudBlazor.SnackbarService", new() {
                Name = "SnackbarService", 
                NameFriendly = "SnackbarService", 
                BaseTypeName = "Object", 
                Summary = @"A service for managing snackbars.", 
                Properties = { 
                    { "Configuration", Properties["MudBlazor.SnackbarService.Configuration"] },
                    { "ShownSnackbars", Properties["MudBlazor.SnackbarService.ShownSnackbars"] },
                },
                Methods = { 
                    { "Add", Methods["MudBlazor.SnackbarService.Add"] },
                    { "Clear", Methods["MudBlazor.SnackbarService.Clear"] },
                    { "Remove", Methods["MudBlazor.SnackbarService.Remove"] },
                    { "RemoveByKey", Methods["MudBlazor.SnackbarService.RemoveByKey"] },
                },
                Events = { 
                    { "OnSnackbarsUpdated", Events["MudBlazor.SnackbarService.OnSnackbarsUpdated"] },
                },
            }},
            { "MudBlazor.SortDefinition`1", new() {
                Name = "SortDefinition`1", 
                NameFriendly = "SortDefinition<T>", 
                BaseTypeName = "Object", 
                Summary = @"Represents information about sorting in a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Properties = { 
                    { "SortBy", Properties["MudBlazor.SortDefinition`1.SortBy"] },
                    { "Descending", Properties["MudBlazor.SortDefinition`1.Descending"] },
                    { "Index", Properties["MudBlazor.SortDefinition`1.Index"] },
                    { "SortFunc", Properties["MudBlazor.SortDefinition`1.SortFunc"] },
                    { "Comparer", Properties["MudBlazor.SortDefinition`1.Comparer"] },
                },
                Methods = { 
                    { "<Clone>$", Methods["MudBlazor.SortDefinition`1.<Clone>$"] },
                    { "Deconstruct", Methods["MudBlazor.SortDefinition`1.Deconstruct"] },
                },
            }},
            { "MudBlazor.SortDirection", new() {
                Name = "SortDirection", 
                NameFriendly = "SortDirection", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the direction that search results are sorted by.", 
                Fields = { 
                    { "None", Fields["MudBlazor.SortDirection.None"] },
                    { "Ascending", Fields["MudBlazor.SortDirection.Ascending"] },
                    { "Descending", Fields["MudBlazor.SortDirection.Descending"] },
                },
            }},
            { "MudBlazor.SortMode", new() {
                Name = "SortMode", 
                NameFriendly = "SortMode", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the sorting mode for a <see cref=""T:MudBlazor.MudDataGrid`1"" />.", 
                Fields = { 
                    { "None", Fields["MudBlazor.SortMode.None"] },
                    { "Single", Fields["MudBlazor.SortMode.Single"] },
                    { "Multiple", Fields["MudBlazor.SortMode.Multiple"] },
                },
            }},
            { "MudBlazor.State.Builder.RegisterParameterBuilder`1", new() {
                Name = "RegisterParameterBuilder`1", 
                NameFriendly = "RegisterParameterBuilder<T>", 
                BaseTypeName = "Object", 
                Summary = @"Builder class for constructing instances of <see cref=""T:MudBlazor.State.ParameterState`1"" />.", 
                Methods = { 
                    { "WithName", Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithName"] },
                    { "WithParameter", Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithParameter"] },
                    { "WithEventCallback", Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithEventCallback"] },
                    { "WithChangeHandler", Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithChangeHandler"] },
                    { "WithComparer", Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithComparer"] },
                },
            }},
            { "MudBlazor.State.ParameterChangedEventArgs`1", new() {
                Name = "ParameterChangedEventArgs`1", 
                NameFriendly = "ParameterChangedEventArgs<T>", 
                BaseTypeName = "EventArgs", 
                Summary = @"Represents event arguments containing the last and current values of a parameter.", 
                Properties = { 
                    { "ParameterName", Properties["MudBlazor.State.ParameterChangedEventArgs`1.ParameterName"] },
                    { "LastValue", Properties["MudBlazor.State.ParameterChangedEventArgs`1.LastValue"] },
                    { "Value", Properties["MudBlazor.State.ParameterChangedEventArgs`1.Value"] },
                    { "IsChildOriginatedChange", Properties["MudBlazor.State.ParameterChangedEventArgs`1.IsChildOriginatedChange"] },
                },
            }},
            { "MudBlazor.State.ParameterState`1", new() {
                Name = "ParameterState`1", 
                NameFriendly = "ParameterState<T>", 
                BaseTypeName = "Object", 
                Summary = @"The <see cref=""T:MudBlazor.State.ParameterState`1"" /> automatically manages parameter value changes for <see cref=""T:Microsoft.AspNetCore.Components.ParameterAttribute"" /> as part ofMudBlazor's ParameterState framework. For details and usage please read CONTRIBUTING.md", 
                Remarks = @"You don't need to create this object directly.Instead, use the ""MudComponentBase.RegisterParameter"" method from within the component's constructor.", 
                Properties = { 
                    { "Value", Properties["MudBlazor.State.ParameterState`1.Value"] },
                },
                Methods = { 
                    { "SetValueAsync", Methods["MudBlazor.State.ParameterState`1.SetValueAsync"] },
                },
            }},
            { "MudBlazor.StepAction", new() {
                Name = "StepAction", 
                NameFriendly = "StepAction", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the requested behavior of a button in a <see cref=""T:MudBlazor.MudStepper"" /> component.", 
                Remarks = @"Typically called during <see cref=""P:MudBlazor.MudStepper.OnPreviewInteraction"" /> to ask whether step change should be allowed.", 
                Fields = { 
                    { "Activate", Fields["MudBlazor.StepAction.Activate"] },
                    { "Complete", Fields["MudBlazor.StepAction.Complete"] },
                    { "Skip", Fields["MudBlazor.StepAction.Skip"] },
                    { "Reset", Fields["MudBlazor.StepAction.Reset"] },
                },
            }},
            { "MudBlazor.StepperInteractionEventArgs", new() {
                Name = "StepperInteractionEventArgs", 
                NameFriendly = "StepperInteractionEventArgs", 
                BaseTypeName = "Object", 
                Summary = @"Information about a requested step change when <see cref=""P:MudBlazor.MudStepper.OnPreviewInteraction"" /> occurs.", 
                Properties = { 
                    { "StepIndex", Properties["MudBlazor.StepperInteractionEventArgs.StepIndex"] },
                    { "Action", Properties["MudBlazor.StepperInteractionEventArgs.Action"] },
                    { "Cancel", Properties["MudBlazor.StepperInteractionEventArgs.Cancel"] },
                },
            }},
            { "MudBlazor.StretchItems", new() {
                Name = "StretchItems", 
                NameFriendly = "StretchItems", 
                BaseTypeName = "Enum", 
                Summary = @"Specifies how items in a flex container are stretched along the main axis.", 
                Fields = { 
                    { "None", Fields["MudBlazor.StretchItems.None"] },
                    { "Start", Fields["MudBlazor.StretchItems.Start"] },
                    { "End", Fields["MudBlazor.StretchItems.End"] },
                    { "StartAndEnd", Fields["MudBlazor.StretchItems.StartAndEnd"] },
                    { "Middle", Fields["MudBlazor.StretchItems.Middle"] },
                    { "All", Fields["MudBlazor.StretchItems.All"] },
                },
            }},
            { "MudBlazor.Subtitle1Typography", new() {
                Name = "Subtitle1Typography", 
                NameFriendly = "Subtitle1Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the Subtitle1 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.Subtitle2Typography", new() {
                Name = "Subtitle2Typography", 
                NameFriendly = "Subtitle2Typography", 
                BaseTypeName = "BaseTypography", 
                Summary = @"Represents the Subtitle2 typography settings.", 
                Properties = { 
                    { "FontFamily", Properties["MudBlazor.BaseTypography.FontFamily"] },
                    { "FontWeight", Properties["MudBlazor.BaseTypography.FontWeight"] },
                    { "FontSize", Properties["MudBlazor.BaseTypography.FontSize"] },
                    { "LineHeight", Properties["MudBlazor.BaseTypography.LineHeight"] },
                    { "LetterSpacing", Properties["MudBlazor.BaseTypography.LetterSpacing"] },
                    { "TextTransform", Properties["MudBlazor.BaseTypography.TextTransform"] },
                },
            }},
            { "MudBlazor.SvgLegend", new() {
                Name = "SvgLegend", 
                NameFriendly = "SvgLegend", 
                BaseTypeName = "Object", 
                Summary = @"Represents a series of series labels as an SVG path.", 
                Properties = { 
                    { "Index", Properties["MudBlazor.SvgLegend.Index"] },
                    { "Labels", Properties["MudBlazor.SvgLegend.Labels"] },
                    { "Data", Properties["MudBlazor.SvgLegend.Data"] },
                    { "Visible", Properties["MudBlazor.SvgLegend.Visible"] },
                },
                Methods = { 
                    { "HandleCheckboxChangeAsync", Methods["MudBlazor.SvgLegend.HandleCheckboxChangeAsync"] },
                },
                Events = { 
                    { "OnVisibilityChanged", Events["MudBlazor.SvgLegend.OnVisibilityChanged"] },
                },
            }},
            { "MudBlazor.SwipeDirection", new() {
                Name = "SwipeDirection", 
                NameFriendly = "SwipeDirection", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "None", Fields["MudBlazor.SwipeDirection.None"] },
                    { "LeftToRight", Fields["MudBlazor.SwipeDirection.LeftToRight"] },
                    { "RightToLeft", Fields["MudBlazor.SwipeDirection.RightToLeft"] },
                    { "TopToBottom", Fields["MudBlazor.SwipeDirection.TopToBottom"] },
                    { "BottomToTop", Fields["MudBlazor.SwipeDirection.BottomToTop"] },
                },
            }},
            { "MudBlazor.SwipeEventArgs", new() {
                Name = "SwipeEventArgs", 
                NameFriendly = "SwipeEventArgs", 
                BaseTypeName = "Object", 
                Summary = @"Provides event data for the swipe event.", 
                Properties = { 
                    { "TouchEventArgs", Properties["MudBlazor.SwipeEventArgs.TouchEventArgs"] },
                    { "SwipeDelta", Properties["MudBlazor.SwipeEventArgs.SwipeDelta"] },
                    { "Sender", Properties["MudBlazor.SwipeEventArgs.Sender"] },
                    { "SwipeDirection", Properties["MudBlazor.SwipeEventArgs.SwipeDirection"] },
                },
            }},
            { "MudBlazor.TabHeaderPosition", new() {
                Name = "TabHeaderPosition", 
                NameFriendly = "TabHeaderPosition", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "After", Fields["MudBlazor.TabHeaderPosition.After"] },
                    { "Before", Fields["MudBlazor.TabHeaderPosition.Before"] },
                    { "None", Fields["MudBlazor.TabHeaderPosition.None"] },
                },
            }},
            { "MudBlazor.TabInteractionEventArgs", new() {
                Name = "TabInteractionEventArgs", 
                NameFriendly = "TabInteractionEventArgs", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "PanelIndex", Properties["MudBlazor.TabInteractionEventArgs.PanelIndex"] },
                    { "InteractionType", Properties["MudBlazor.TabInteractionEventArgs.InteractionType"] },
                    { "Cancel", Properties["MudBlazor.TabInteractionEventArgs.Cancel"] },
                },
            }},
            { "MudBlazor.TabInteractionType", new() {
                Name = "TabInteractionType", 
                NameFriendly = "TabInteractionType", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Activate", Fields["MudBlazor.TabInteractionType.Activate"] },
                },
            }},
            { "MudBlazor.TableApplyButtonPosition", new() {
                Name = "TableApplyButtonPosition", 
                NameFriendly = "TableApplyButtonPosition", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the position of the commit button during inline edits to a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Fields = { 
                    { "Start", Fields["MudBlazor.TableApplyButtonPosition.Start"] },
                    { "End", Fields["MudBlazor.TableApplyButtonPosition.End"] },
                    { "StartAndEnd", Fields["MudBlazor.TableApplyButtonPosition.StartAndEnd"] },
                },
            }},
            { "MudBlazor.TableContext", new() {
                Name = "TableContext", 
                NameFriendly = "TableContext", 
                BaseTypeName = "Object", 
                Summary = @"The current state of a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Remarks = @"Typically used to share functionality across a table's related components.", 
                Properties = { 
                    { "Table", Properties["MudBlazor.TableContext.Table"] },
                    { "TableStateHasChanged", Properties["MudBlazor.TableContext.TableStateHasChanged"] },
                    { "PagerStateHasChanged", Properties["MudBlazor.TableContext.PagerStateHasChanged"] },
                    { "HasPager", Properties["MudBlazor.TableContext.HasPager"] },
                    { "HeaderRows", Properties["MudBlazor.TableContext.HeaderRows"] },
                    { "FooterRows", Properties["MudBlazor.TableContext.FooterRows"] },
                    { "SortDirection", Properties["MudBlazor.TableContext.SortDirection"] },
                },
                Methods = { 
                    { "Add", Methods["MudBlazor.TableContext.Add"] },
                    { "Remove", Methods["MudBlazor.TableContext.Remove"] },
                    { "UpdateRowCheckBoxes", Methods["MudBlazor.TableContext.UpdateRowCheckBoxes"] },
                    { "InitializeSorting", Methods["MudBlazor.TableContext.InitializeSorting"] },
                    { "ManagePreviousEditedRow", Methods["MudBlazor.TableContext.ManagePreviousEditedRow"] },
                },
            }},
            { "MudBlazor.TableContext`1", new() {
                Name = "TableContext`1", 
                NameFriendly = "TableContext<T>", 
                BaseTypeName = "TableContext", 
                Summary = @"The current state of a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Remarks = @"Typically used to share functionality across a table's related components.", 
                Properties = { 
                    { "Comparer", Properties["MudBlazor.TableContext`1.Comparer"] },
                    { "Selection", Properties["MudBlazor.TableContext`1.Selection"] },
                    { "Rows", Properties["MudBlazor.TableContext`1.Rows"] },
                    { "GroupRows", Properties["MudBlazor.TableContext`1.GroupRows"] },
                    { "SortLabels", Properties["MudBlazor.TableContext`1.SortLabels"] },
                    { "SortDirection", Properties["MudBlazor.TableContext`1.SortDirection"] },
                    { "SortBy", Properties["MudBlazor.TableContext`1.SortBy"] },
                    { "CurrentSortLabel", Properties["MudBlazor.TableContext`1.CurrentSortLabel"] },
                    { "Table", Properties["MudBlazor.TableContext.Table"] },
                    { "TableStateHasChanged", Properties["MudBlazor.TableContext.TableStateHasChanged"] },
                    { "PagerStateHasChanged", Properties["MudBlazor.TableContext.PagerStateHasChanged"] },
                    { "HasPager", Properties["MudBlazor.TableContext.HasPager"] },
                    { "HeaderRows", Properties["MudBlazor.TableContext.HeaderRows"] },
                    { "FooterRows", Properties["MudBlazor.TableContext.FooterRows"] },
                },
                Methods = { 
                    { "UpdateRowCheckBoxes", Methods["MudBlazor.TableContext`1.UpdateRowCheckBoxes"] },
                    { "ManagePreviousEditedRow", Methods["MudBlazor.TableContext`1.ManagePreviousEditedRow"] },
                    { "Add", Methods["MudBlazor.TableContext`1.Add"] },
                    { "Remove", Methods["MudBlazor.TableContext`1.Remove"] },
                    { "SetSortFunc", Methods["MudBlazor.TableContext`1.SetSortFunc"] },
                    { "Sort", Methods["MudBlazor.TableContext`1.Sort"] },
                    { "InitializeSorting", Methods["MudBlazor.TableContext`1.InitializeSorting"] },
                },
            }},
            { "MudBlazor.TableData`1", new() {
                Name = "TableData`1", 
                NameFriendly = "TableData<T>", 
                BaseTypeName = "Object", 
                Summary = @"The result of a call to <see cref=""P:MudBlazor.MudTable`1.ServerData"" />.", 
                Properties = { 
                    { "Items", Properties["MudBlazor.TableData`1.Items"] },
                    { "TotalItems", Properties["MudBlazor.TableData`1.TotalItems"] },
                },
            }},
            { "MudBlazor.TableEditButtonPosition", new() {
                Name = "TableEditButtonPosition", 
                NameFriendly = "TableEditButtonPosition", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the position of the edit button which starts inline edits for a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Fields = { 
                    { "Start", Fields["MudBlazor.TableEditButtonPosition.Start"] },
                    { "End", Fields["MudBlazor.TableEditButtonPosition.End"] },
                    { "StartAndEnd", Fields["MudBlazor.TableEditButtonPosition.StartAndEnd"] },
                },
            }},
            { "MudBlazor.TableEditTrigger", new() {
                Name = "TableEditTrigger", 
                NameFriendly = "TableEditTrigger", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the behavior which begins inline editing for a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Fields = { 
                    { "RowClick", Fields["MudBlazor.TableEditTrigger.RowClick"] },
                    { "EditButton", Fields["MudBlazor.TableEditTrigger.EditButton"] },
                },
            }},
            { "MudBlazor.TableGroupData`2", new() {
                Name = "TableGroupData`2", 
                NameFriendly = "TableGroupData<TKey, TElement>", 
                BaseTypeName = "Object", 
                Summary = @"The data within a <see cref=""T:MudBlazor.MudTable`1"" /> group when grouping is enabled.", 
                Properties = { 
                    { "GroupName", Properties["MudBlazor.TableGroupData`2.GroupName"] },
                    { "Key", Properties["MudBlazor.TableGroupData`2.Key"] },
                    { "Items", Properties["MudBlazor.TableGroupData`2.Items"] },
                },
            }},
            { "MudBlazor.TableGroupDefinition`1", new() {
                Name = "TableGroupDefinition`1", 
                NameFriendly = "TableGroupDefinition<T>", 
                BaseTypeName = "Object", 
                Summary = @"A definition of a group within a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Properties = { 
                    { "GroupName", Properties["MudBlazor.TableGroupDefinition`1.GroupName"] },
                    { "Selector", Properties["MudBlazor.TableGroupDefinition`1.Selector"] },
                    { "InnerGroup", Properties["MudBlazor.TableGroupDefinition`1.InnerGroup"] },
                    { "Indentation", Properties["MudBlazor.TableGroupDefinition`1.Indentation"] },
                    { "Expandable", Properties["MudBlazor.TableGroupDefinition`1.Expandable"] },
                    { "IsInitiallyExpanded", Properties["MudBlazor.TableGroupDefinition`1.IsInitiallyExpanded"] },
                },
            }},
            { "MudBlazor.TableRowClickEventArgs`1", new() {
                Name = "TableRowClickEventArgs`1", 
                NameFriendly = "TableRowClickEventArgs<T>", 
                BaseTypeName = "EventArgs", 
                Summary = @"The information passed during a <see cref=""T:MudBlazor.MudTable`1"" /> row click event.", 
                Properties = { 
                    { "MouseEventArgs", Properties["MudBlazor.TableRowClickEventArgs`1.MouseEventArgs"] },
                    { "Row", Properties["MudBlazor.TableRowClickEventArgs`1.Row"] },
                    { "Item", Properties["MudBlazor.TableRowClickEventArgs`1.Item"] },
                },
            }},
            { "MudBlazor.TableRowHoverEventArgs`1", new() {
                Name = "TableRowHoverEventArgs`1", 
                NameFriendly = "TableRowHoverEventArgs<T>", 
                BaseTypeName = "EventArgs", 
                Summary = @"The information passed when entering a row for a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Properties = { 
                    { "PointerEventArgs", Properties["MudBlazor.TableRowHoverEventArgs`1.PointerEventArgs"] },
                    { "Row", Properties["MudBlazor.TableRowHoverEventArgs`1.Row"] },
                    { "Item", Properties["MudBlazor.TableRowHoverEventArgs`1.Item"] },
                },
            }},
            { "MudBlazor.TableRowValidator", new() {
                Name = "TableRowValidator", 
                NameFriendly = "TableRowValidator", 
                BaseTypeName = "Object", 
                Summary = @"A validator for rows within a <see cref=""T:MudBlazor.MudTable`1"" />.", 
                Properties = { 
                    { "IsValid", Properties["MudBlazor.TableRowValidator.IsValid"] },
                    { "Errors", Properties["MudBlazor.TableRowValidator.Errors"] },
                    { "Model", Properties["MudBlazor.TableRowValidator.Model"] },
                },
                Methods = { 
                    { "Validate", Methods["MudBlazor.TableRowValidator.Validate"] },
                },
            }},
            { "MudBlazor.TableState", new() {
                Name = "TableState", 
                NameFriendly = "TableState", 
                BaseTypeName = "Object", 
                Summary = @"The state of a <see cref=""T:MudBlazor.MudTable`1"" /> when requesting data via <see cref=""P:MudBlazor.MudTable`1.ServerData"" />.", 
                Properties = { 
                    { "Page", Properties["MudBlazor.TableState.Page"] },
                    { "PageSize", Properties["MudBlazor.TableState.PageSize"] },
                    { "SortLabel", Properties["MudBlazor.TableState.SortLabel"] },
                    { "SortDirection", Properties["MudBlazor.TableState.SortDirection"] },
                },
            }},
            { "MudBlazor.TemplateColumn`1", new() {
                Name = "TemplateColumn`1", 
                NameFriendly = "TemplateColumn<T>", 
                BaseTypeName = "Column`1", 
                IsComponent = true, 
                Summary = @"Represents an additional column for a <see cref=""T:MudBlazor.MudDataGrid`1"" /> which isn't tied to data.", 
                Properties = { 
                    { "PropertyName", Properties["MudBlazor.TemplateColumn`1.PropertyName"] },
                    { "Filterable", Properties["MudBlazor.TemplateColumn`1.Filterable"] },
                    { "Sortable", Properties["MudBlazor.TemplateColumn`1.Sortable"] },
                    { "DragAndDropEnabled", Properties["MudBlazor.TemplateColumn`1.DragAndDropEnabled"] },
                    { "Resizable", Properties["MudBlazor.TemplateColumn`1.Resizable"] },
                    { "ShowColumnOptions", Properties["MudBlazor.TemplateColumn`1.ShowColumnOptions"] },
                    { "DataGrid", Properties["MudBlazor.Column`1.DataGrid"] },
                    { "Value", Properties["MudBlazor.Column`1.Value"] },
                    { "Title", Properties["MudBlazor.Column`1.Title"] },
                    { "HideSmall", Properties["MudBlazor.Column`1.HideSmall"] },
                    { "FooterColSpan", Properties["MudBlazor.Column`1.FooterColSpan"] },
                    { "HeaderColSpan", Properties["MudBlazor.Column`1.HeaderColSpan"] },
                    { "HeaderTemplate", Properties["MudBlazor.Column`1.HeaderTemplate"] },
                    { "CellTemplate", Properties["MudBlazor.Column`1.CellTemplate"] },
                    { "FooterTemplate", Properties["MudBlazor.Column`1.FooterTemplate"] },
                    { "GroupTemplate", Properties["MudBlazor.Column`1.GroupTemplate"] },
                    { "AggregateTemplate", Properties["MudBlazor.Column`1.AggregateTemplate"] },
                    { "GroupBy", Properties["MudBlazor.Column`1.GroupBy"] },
                    { "Required", Properties["MudBlazor.Column`1.Required"] },
                    { "HeaderClass", Properties["MudBlazor.Column`1.HeaderClass"] },
                    { "HeaderClassFunc", Properties["MudBlazor.Column`1.HeaderClassFunc"] },
                    { "HeaderStyle", Properties["MudBlazor.Column`1.HeaderStyle"] },
                    { "HeaderStyleFunc", Properties["MudBlazor.Column`1.HeaderStyleFunc"] },
                    { "ShowFilterIcon", Properties["MudBlazor.Column`1.ShowFilterIcon"] },
                    { "Hideable", Properties["MudBlazor.Column`1.Hideable"] },
                    { "Hidden", Properties["MudBlazor.Column`1.Hidden"] },
                    { "Comparer", Properties["MudBlazor.Column`1.Comparer"] },
                    { "SortBy", Properties["MudBlazor.Column`1.SortBy"] },
                    { "InitialDirection", Properties["MudBlazor.Column`1.InitialDirection"] },
                    { "SortIcon", Properties["MudBlazor.Column`1.SortIcon"] },
                    { "Groupable", Properties["MudBlazor.Column`1.Groupable"] },
                    { "Grouping", Properties["MudBlazor.Column`1.Grouping"] },
                    { "StickyLeft", Properties["MudBlazor.Column`1.StickyLeft"] },
                    { "StickyRight", Properties["MudBlazor.Column`1.StickyRight"] },
                    { "FilterTemplate", Properties["MudBlazor.Column`1.FilterTemplate"] },
                    { "FilterOperators", Properties["MudBlazor.Column`1.FilterOperators"] },
                    { "Identifier", Properties["MudBlazor.Column`1.Identifier"] },
                    { "Culture", Properties["MudBlazor.Column`1.Culture"] },
                    { "CellClass", Properties["MudBlazor.Column`1.CellClass"] },
                    { "CellClassFunc", Properties["MudBlazor.Column`1.CellClassFunc"] },
                    { "CellStyle", Properties["MudBlazor.Column`1.CellStyle"] },
                    { "CellStyleFunc", Properties["MudBlazor.Column`1.CellStyleFunc"] },
                    { "Editable", Properties["MudBlazor.Column`1.Editable"] },
                    { "EditTemplate", Properties["MudBlazor.Column`1.EditTemplate"] },
                    { "FooterClass", Properties["MudBlazor.Column`1.FooterClass"] },
                    { "FooterClassFunc", Properties["MudBlazor.Column`1.FooterClassFunc"] },
                    { "FooterStyle", Properties["MudBlazor.Column`1.FooterStyle"] },
                    { "FooterStyleFunc", Properties["MudBlazor.Column`1.FooterStyleFunc"] },
                    { "EnableFooterSelection", Properties["MudBlazor.Column`1.EnableFooterSelection"] },
                    { "AggregateDefinition", Properties["MudBlazor.Column`1.AggregateDefinition"] },
                    { "FilterContext", Properties["MudBlazor.Column`1.FilterContext"] },
                    { "Class", Properties["MudBlazor.MudComponentBase.Class"] },
                    { "Style", Properties["MudBlazor.MudComponentBase.Style"] },
                    { "Tag", Properties["MudBlazor.MudComponentBase.Tag"] },
                    { "UserAttributes", Properties["MudBlazor.MudComponentBase.UserAttributes"] },
                    { "FieldId", Properties["MudBlazor.MudComponentBase.FieldId"] },
                    { "Logger", Properties["MudBlazor.MudComponentBase.Logger"] },
                    { "IsJSRuntimeAvailable", Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"] },
                    { "RendererInfo", Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"] },
                    { "Assets", Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"] },
                    { "AssignedRenderMode", Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"] },
                },
                Methods = { 
                    { "HideAsync", Methods["MudBlazor.Column`1.HideAsync"] },
                    { "ShowAsync", Methods["MudBlazor.Column`1.ShowAsync"] },
                    { "ToggleAsync", Methods["MudBlazor.Column`1.ToggleAsync"] },
                },
                Events = { 
                    { "ValueChanged", Events["MudBlazor.Column`1.ValueChanged"] },
                    { "HiddenChanged", Events["MudBlazor.Column`1.HiddenChanged"] },
                    { "GroupingChanged", Events["MudBlazor.Column`1.GroupingChanged"] },
                },
            }},
            { "MudBlazor.TimeEditMode", new() {
                Name = "TimeEditMode", 
                NameFriendly = "TimeEditMode", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Normal", Fields["MudBlazor.TimeEditMode.Normal"] },
                    { "OnlyMinutes", Fields["MudBlazor.TimeEditMode.OnlyMinutes"] },
                    { "OnlyHours", Fields["MudBlazor.TimeEditMode.OnlyHours"] },
                },
            }},
            { "MudBlazor.TimelineAlign", new() {
                Name = "TimelineAlign", 
                NameFriendly = "TimelineAlign", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Default", Fields["MudBlazor.TimelineAlign.Default"] },
                    { "Start", Fields["MudBlazor.TimelineAlign.Start"] },
                    { "End", Fields["MudBlazor.TimelineAlign.End"] },
                },
            }},
            { "MudBlazor.TimelineOrientation", new() {
                Name = "TimelineOrientation", 
                NameFriendly = "TimelineOrientation", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Vertical", Fields["MudBlazor.TimelineOrientation.Vertical"] },
                    { "Horizontal", Fields["MudBlazor.TimelineOrientation.Horizontal"] },
                },
            }},
            { "MudBlazor.TimelinePosition", new() {
                Name = "TimelinePosition", 
                NameFriendly = "TimelinePosition", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Alternate", Fields["MudBlazor.TimelinePosition.Alternate"] },
                    { "Top", Fields["MudBlazor.TimelinePosition.Top"] },
                    { "Bottom", Fields["MudBlazor.TimelinePosition.Bottom"] },
                    { "Left", Fields["MudBlazor.TimelinePosition.Left"] },
                    { "Right", Fields["MudBlazor.TimelinePosition.Right"] },
                    { "Start", Fields["MudBlazor.TimelinePosition.Start"] },
                    { "End", Fields["MudBlazor.TimelinePosition.End"] },
                },
            }},
            { "MudBlazor.TimeSeriesChartSeries", new() {
                Name = "TimeSeriesChartSeries", 
                NameFriendly = "TimeSeriesChartSeries", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Name", Properties["MudBlazor.TimeSeriesChartSeries.Name"] },
                    { "Data", Properties["MudBlazor.TimeSeriesChartSeries.Data"] },
                    { "IsVisible", Properties["MudBlazor.TimeSeriesChartSeries.IsVisible"] },
                    { "Index", Properties["MudBlazor.TimeSeriesChartSeries.Index"] },
                    { "Type", Properties["MudBlazor.TimeSeriesChartSeries.Type"] },
                    { "FillOpacity", Properties["MudBlazor.TimeSeriesChartSeries.FillOpacity"] },
                    { "StrokeOpacity", Properties["MudBlazor.TimeSeriesChartSeries.StrokeOpacity"] },
                },
            }},
            { "MudBlazor.TimeSeriesChartSeries+TimeValue", new() {
                Name = "TimeValue", 
                NameFriendly = "TimeValue", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "DateTime", Properties["MudBlazor.TimeSeriesChartSeries+TimeValue.DateTime"] },
                    { "Value", Properties["MudBlazor.TimeSeriesChartSeries+TimeValue.Value"] },
                    { "EqualityContract", Properties["MudBlazor.TimeSeriesChartSeries+TimeValue.EqualityContract"] },
                },
                Methods = { 
                    { "<Clone>$", Methods["MudBlazor.TimeSeriesChartSeries+TimeValue.<Clone>$"] },
                    { "Deconstruct", Methods["MudBlazor.TimeSeriesChartSeries+TimeValue.Deconstruct"] },
                    { "PrintMembers", Methods["MudBlazor.TimeSeriesChartSeries+TimeValue.PrintMembers"] },
                },
            }},
            { "MudBlazor.TimeSeriesDisplayType", new() {
                Name = "TimeSeriesDisplayType", 
                NameFriendly = "TimeSeriesDisplayType", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "Line", Fields["MudBlazor.TimeSeriesDisplayType.Line"] },
                    { "Area", Fields["MudBlazor.TimeSeriesDisplayType.Area"] },
                },
            }},
            { "MudBlazor.Transition", new() {
                Name = "Transition", 
                NameFriendly = "Transition", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "None", Fields["MudBlazor.Transition.None"] },
                    { "Fade", Fields["MudBlazor.Transition.Fade"] },
                    { "Slide", Fields["MudBlazor.Transition.Slide"] },
                    { "Custom", Fields["MudBlazor.Transition.Custom"] },
                },
            }},
            { "MudBlazor.TreeItemData`1", new() {
                Name = "TreeItemData`1", 
                NameFriendly = "TreeItemData<T>", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Text", Properties["MudBlazor.TreeItemData`1.Text"] },
                    { "Icon", Properties["MudBlazor.TreeItemData`1.Icon"] },
                    { "Value", Properties["MudBlazor.TreeItemData`1.Value"] },
                    { "Expanded", Properties["MudBlazor.TreeItemData`1.Expanded"] },
                    { "Expandable", Properties["MudBlazor.TreeItemData`1.Expandable"] },
                    { "Selected", Properties["MudBlazor.TreeItemData`1.Selected"] },
                    { "Visible", Properties["MudBlazor.TreeItemData`1.Visible"] },
                    { "Children", Properties["MudBlazor.TreeItemData`1.Children"] },
                    { "HasChildren", Properties["MudBlazor.TreeItemData`1.HasChildren"] },
                },
            }},
            { "MudBlazor.Typo", new() {
                Name = "Typo", 
                NameFriendly = "Typo", 
                BaseTypeName = "Enum", 
                Summary = @"Typography controls the text throughout the theme, like font-family, size, and other settings.", 
                Fields = { 
                    { "inherit", Fields["MudBlazor.Typo.inherit"] },
                    { "h1", Fields["MudBlazor.Typo.h1"] },
                    { "h2", Fields["MudBlazor.Typo.h2"] },
                    { "h3", Fields["MudBlazor.Typo.h3"] },
                    { "h4", Fields["MudBlazor.Typo.h4"] },
                    { "h5", Fields["MudBlazor.Typo.h5"] },
                    { "h6", Fields["MudBlazor.Typo.h6"] },
                    { "subtitle1", Fields["MudBlazor.Typo.subtitle1"] },
                    { "subtitle2", Fields["MudBlazor.Typo.subtitle2"] },
                    { "body1", Fields["MudBlazor.Typo.body1"] },
                    { "body2", Fields["MudBlazor.Typo.body2"] },
                    { "button", Fields["MudBlazor.Typo.button"] },
                    { "caption", Fields["MudBlazor.Typo.caption"] },
                    { "overline", Fields["MudBlazor.Typo.overline"] },
                },
            }},
            { "MudBlazor.Typography", new() {
                Name = "Typography", 
                NameFriendly = "Typography", 
                BaseTypeName = "Object", 
                Summary = @"Typography settings for <see cref=""T:MudBlazor.Typo"" /> types used throughout the theme.", 
                Properties = { 
                    { "Default", Properties["MudBlazor.Typography.Default"] },
                    { "H1", Properties["MudBlazor.Typography.H1"] },
                    { "H2", Properties["MudBlazor.Typography.H2"] },
                    { "H3", Properties["MudBlazor.Typography.H3"] },
                    { "H4", Properties["MudBlazor.Typography.H4"] },
                    { "H5", Properties["MudBlazor.Typography.H5"] },
                    { "H6", Properties["MudBlazor.Typography.H6"] },
                    { "Subtitle1", Properties["MudBlazor.Typography.Subtitle1"] },
                    { "Subtitle2", Properties["MudBlazor.Typography.Subtitle2"] },
                    { "Body1", Properties["MudBlazor.Typography.Body1"] },
                    { "Body2", Properties["MudBlazor.Typography.Body2"] },
                    { "Button", Properties["MudBlazor.Typography.Button"] },
                    { "Caption", Properties["MudBlazor.Typography.Caption"] },
                    { "Overline", Properties["MudBlazor.Typography.Overline"] },
                },
            }},
            { "MudBlazor.Underline", new() {
                Name = "Underline", 
                NameFriendly = "Underline", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates how a <see cref=""T:MudBlazor.MudLink"" /> is decorated.", 
                Fields = { 
                    { "None", Fields["MudBlazor.Underline.None"] },
                    { "Hover", Fields["MudBlazor.Underline.Hover"] },
                    { "Always", Fields["MudBlazor.Underline.Always"] },
                },
            }},
            { "MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1", new() {
                Name = "SystemTextJsonDeepCloneStrategy`1", 
                NameFriendly = "SystemTextJsonDeepCloneStrategy<T>", 
                BaseTypeName = "Object", 
                Summary = @"Provides a deep copy implementation using System.Text.Json.", 
                Remarks = @"This implementation is <b>not</b> trim safe.Use different strategy or use System Text Json with <see href=""https://learn.microsoft.com/dotnet/standard/serialization/system-text-json/source-generation?pivots=dotnet-7-0"">source generator</see> and pass <see cref=""T:System.Text.Json.Serialization.JsonSerializerContext"" /> of your object.", 
                Fields = { 
                    { "Instance", Fields["MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1.Instance"] },
                },
                Methods = { 
                    { "CloneObject", Methods["MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1.CloneObject"] },
                },
            }},
            { "MudBlazor.Utilities.Exceptions.GenericTypeMismatchException", new() {
                Name = "GenericTypeMismatchException", 
                NameFriendly = "GenericTypeMismatchException", 
                BaseTypeName = "Exception", 
                Properties = { 
                    { "TargetSite", Properties["System.Exception.TargetSite"] },
                    { "Message", Properties["System.Exception.Message"] },
                    { "Data", Properties["System.Exception.Data"] },
                    { "InnerException", Properties["System.Exception.InnerException"] },
                    { "HelpLink", Properties["System.Exception.HelpLink"] },
                    { "Source", Properties["System.Exception.Source"] },
                    { "HResult", Properties["System.Exception.HResult"] },
                    { "StackTrace", Properties["System.Exception.StackTrace"] },
                },
                Methods = { 
                    { "GetBaseException", Methods["System.Exception.GetBaseException"] },
                    { "GetObjectData", Methods["System.Exception.GetObjectData"] },
                },
                Events = { 
                    { "SerializeObjectState", Events["System.Exception.SerializeObjectState"] },
                },
            }},
            { "MudBlazor.Utilities.FormFieldChangedEventArgs", new() {
                Name = "FormFieldChangedEventArgs", 
                NameFriendly = "FormFieldChangedEventArgs", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "Field", Properties["MudBlazor.Utilities.FormFieldChangedEventArgs.Field"] },
                    { "NewValue", Properties["MudBlazor.Utilities.FormFieldChangedEventArgs.NewValue"] },
                },
            }},
            { "MudBlazor.Utilities.MudColor", new() {
                Name = "MudColor", 
                NameFriendly = "MudColor", 
                BaseTypeName = "Object", 
                Summary = @"Represents a color with methods to manipulate color values.", 
                Properties = { 
                    { "Value", Properties["MudBlazor.Utilities.MudColor.Value"] },
                    { "UInt32", Properties["MudBlazor.Utilities.MudColor.UInt32"] },
                    { "R", Properties["MudBlazor.Utilities.MudColor.R"] },
                    { "G", Properties["MudBlazor.Utilities.MudColor.G"] },
                    { "B", Properties["MudBlazor.Utilities.MudColor.B"] },
                    { "A", Properties["MudBlazor.Utilities.MudColor.A"] },
                    { "APercentage", Properties["MudBlazor.Utilities.MudColor.APercentage"] },
                    { "H", Properties["MudBlazor.Utilities.MudColor.H"] },
                    { "L", Properties["MudBlazor.Utilities.MudColor.L"] },
                    { "S", Properties["MudBlazor.Utilities.MudColor.S"] },
                },
                Methods = { 
                    { "Lerp", Methods["MudBlazor.Utilities.MudColor.Lerp"] },
                    { "GenerateGradientPalette", Methods["MudBlazor.Utilities.MudColor.GenerateGradientPalette"] },
                    { "GenerateMultiGradientPalette", Methods["MudBlazor.Utilities.MudColor.GenerateMultiGradientPalette"] },
                    { "GenerateAnalogousPalette", Methods["MudBlazor.Utilities.MudColor.GenerateAnalogousPalette"] },
                    { "GenerateTintShadePalette", Methods["MudBlazor.Utilities.MudColor.GenerateTintShadePalette"] },
                    { "SetH", Methods["MudBlazor.Utilities.MudColor.SetH"] },
                    { "SetS", Methods["MudBlazor.Utilities.MudColor.SetS"] },
                    { "SetL", Methods["MudBlazor.Utilities.MudColor.SetL"] },
                    { "SetR", Methods["MudBlazor.Utilities.MudColor.SetR"] },
                    { "SetG", Methods["MudBlazor.Utilities.MudColor.SetG"] },
                    { "SetB", Methods["MudBlazor.Utilities.MudColor.SetB"] },
                    { "SetAlpha", Methods["MudBlazor.Utilities.MudColor.SetAlpha"] },
                    { "ChangeLightness", Methods["MudBlazor.Utilities.MudColor.ChangeLightness"] },
                    { "ColorLighten", Methods["MudBlazor.Utilities.MudColor.ColorLighten"] },
                    { "ColorDarken", Methods["MudBlazor.Utilities.MudColor.ColorDarken"] },
                    { "ColorRgbLighten", Methods["MudBlazor.Utilities.MudColor.ColorRgbLighten"] },
                    { "ColorRgbDarken", Methods["MudBlazor.Utilities.MudColor.ColorRgbDarken"] },
                    { "HslEquals", Methods["MudBlazor.Utilities.MudColor.HslEquals"] },
                    { "RgbaEquals", Methods["MudBlazor.Utilities.MudColor.RgbaEquals"] },
                    { "Deconstruct", Methods["MudBlazor.Utilities.MudColor.Deconstruct"] },
                    { "Parse", Methods["MudBlazor.Utilities.MudColor.Parse"] },
                    { "TryParse", Methods["MudBlazor.Utilities.MudColor.TryParse"] },
                },
            }},
            { "MudBlazor.Utilities.MudColorOutputFormats", new() {
                Name = "MudColorOutputFormats", 
                NameFriendly = "MudColorOutputFormats", 
                BaseTypeName = "Enum", 
                Summary = @"Specifies different output formats for <seealso cref=""T:MudBlazor.Utilities.MudColor"" />.", 
                Fields = { 
                    { "Hex", Fields["MudBlazor.Utilities.MudColorOutputFormats.Hex"] },
                    { "HexA", Fields["MudBlazor.Utilities.MudColorOutputFormats.HexA"] },
                    { "RGB", Fields["MudBlazor.Utilities.MudColorOutputFormats.RGB"] },
                    { "RGBA", Fields["MudBlazor.Utilities.MudColorOutputFormats.RGBA"] },
                    { "ColorElements", Fields["MudBlazor.Utilities.MudColorOutputFormats.ColorElements"] },
                },
            }},
            { "MudBlazor.Utilities.NaturalComparer", new() {
                Name = "NaturalComparer", 
                NameFriendly = "NaturalComparer", 
                BaseTypeName = "Object", 
                Methods = { 
                    { "Compare", Methods["MudBlazor.Utilities.NaturalComparer.Compare"] },
                    { "CompareNatural", Methods["MudBlazor.Utilities.NaturalComparer.CompareNatural"] },
                },
            }},
            { "MudBlazor.Utilities.NullableObject`1", new() {
                Name = "NullableObject`1", 
                NameFriendly = "NullableObject<T>", 
                BaseTypeName = "ValueType", 
                Summary = @"Represents a wrapper for an object that can be null.", 
                Properties = { 
                    { "Item", Properties["MudBlazor.Utilities.NullableObject`1.Item"] },
                    { "IsNull", Properties["MudBlazor.Utilities.NullableObject`1.IsNull"] },
                    { "Null", Properties["MudBlazor.Utilities.NullableObject`1.Null"] },
                },
            }},
            { "MudBlazor.Utilities.RuntimeLocation", new() {
                Name = "RuntimeLocation", 
                NameFriendly = "RuntimeLocation", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "IsClientSide", Properties["MudBlazor.Utilities.RuntimeLocation.IsClientSide"] },
                    { "IsServerSide", Properties["MudBlazor.Utilities.RuntimeLocation.IsServerSide"] },
                },
            }},
            { "MudBlazor.Utilities.SortingAssistant", new() {
                Name = "SortingAssistant", 
                NameFriendly = "SortingAssistant", 
                BaseTypeName = "Object", 
                Methods = { 
                    { "UpdateOrder", Methods["MudBlazor.Utilities.SortingAssistant.UpdateOrder"] },
                },
            }},
            { "MudBlazor.Utilities.StyleBuilder", new() {
                Name = "StyleBuilder", 
                NameFriendly = "StyleBuilder", 
                BaseTypeName = "ValueType", 
                Summary = @"Represents a builder for creating in-line styles used in a component.", 
                Methods = { 
                    { "Default", Methods["MudBlazor.Utilities.StyleBuilder.Default"] },
                    { "Empty", Methods["MudBlazor.Utilities.StyleBuilder.Empty"] },
                    { "AddStyle", Methods["MudBlazor.Utilities.StyleBuilder.AddStyle"] },
                    { "AddStyleFromAttributes", Methods["MudBlazor.Utilities.StyleBuilder.AddStyleFromAttributes"] },
                    { "Build", Methods["MudBlazor.Utilities.StyleBuilder.Build"] },
                },
            }},
            { "MudBlazor.Utilities.ValueBuilder", new() {
                Name = "ValueBuilder", 
                NameFriendly = "ValueBuilder", 
                BaseTypeName = "Object", 
                Properties = { 
                    { "HasValue", Properties["MudBlazor.Utilities.ValueBuilder.HasValue"] },
                },
                Methods = { 
                    { "AddValue", Methods["MudBlazor.Utilities.ValueBuilder.AddValue"] },
                },
            }},
            { "MudBlazor.Variant", new() {
                Name = "Variant", 
                NameFriendly = "Variant", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the display variation applied to a component.", 
                Fields = { 
                    { "Text", Fields["MudBlazor.Variant.Text"] },
                    { "Filled", Fields["MudBlazor.Variant.Filled"] },
                    { "Outlined", Fields["MudBlazor.Variant.Outlined"] },
                },
            }},
            { "MudBlazor.Width", new() {
                Name = "Width", 
                NameFriendly = "Width", 
                BaseTypeName = "Enum", 
                Fields = { 
                    { "xs", Fields["MudBlazor.Width.xs"] },
                    { "sm", Fields["MudBlazor.Width.sm"] },
                    { "md", Fields["MudBlazor.Width.md"] },
                    { "lg", Fields["MudBlazor.Width.lg"] },
                    { "xl", Fields["MudBlazor.Width.xl"] },
                    { "xxl", Fields["MudBlazor.Width.xxl"] },
                    { "False", Fields["MudBlazor.Width.False"] },
                },
            }},
            { "MudBlazor.Wrap", new() {
                Name = "Wrap", 
                NameFriendly = "Wrap", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates how items in a <see cref=""T:MudBlazor.MudStack"" /> are wrapped.", 
                Fields = { 
                    { "NoWrap", Fields["MudBlazor.Wrap.NoWrap"] },
                    { "Wrap", Fields["MudBlazor.Wrap.Wrap"] },
                    { "WrapReverse", Fields["MudBlazor.Wrap.WrapReverse"] },
                },
            }},
            { "MudBlazor.XAxisLabelPosition", new() {
                Name = "XAxisLabelPosition", 
                NameFriendly = "XAxisLabelPosition", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the position of the X axis labels as either top or bottom in a <see cref=""F:MudBlazor.ChartType.HeatMap"" />", 
                Fields = { 
                    { "Top", Fields["MudBlazor.XAxisLabelPosition.Top"] },
                    { "Bottom", Fields["MudBlazor.XAxisLabelPosition.Bottom"] },
                    { "None", Fields["MudBlazor.XAxisLabelPosition.None"] },
                },
            }},
            { "MudBlazor.YAxisLabelPosition", new() {
                Name = "YAxisLabelPosition", 
                NameFriendly = "YAxisLabelPosition", 
                BaseTypeName = "Enum", 
                Summary = @"Indicates the position of the Y axis labels as either left or right in a <see cref=""F:MudBlazor.ChartType.HeatMap"" />", 
                Fields = { 
                    { "Left", Fields["MudBlazor.YAxisLabelPosition.Left"] },
                    { "Right", Fields["MudBlazor.YAxisLabelPosition.Right"] },
                    { "None", Fields["MudBlazor.YAxisLabelPosition.None"] },
                },
            }},
            { "MudBlazor.ZIndex", new() {
                Name = "ZIndex", 
                NameFriendly = "ZIndex", 
                BaseTypeName = "Object", 
                Summary = @"Represents the Z-index values for different components.", 
                Properties = { 
                    { "Drawer", Properties["MudBlazor.ZIndex.Drawer"] },
                    { "Popover", Properties["MudBlazor.ZIndex.Popover"] },
                    { "AppBar", Properties["MudBlazor.ZIndex.AppBar"] },
                    { "Dialog", Properties["MudBlazor.ZIndex.Dialog"] },
                    { "Snackbar", Properties["MudBlazor.ZIndex.Snackbar"] },
                    { "Tooltip", Properties["MudBlazor.ZIndex.Tooltip"] },
                },
            }},
        };

        // Link properties to their declaring types
        Properties["Microsoft.AspNetCore.Components.ComponentBase.Assets"].DeclaringTypeName = "ComponentBase";
        Properties["Microsoft.AspNetCore.Components.ComponentBase.AssignedRenderMode"].DeclaringTypeName = "ComponentBase";
        Properties["Microsoft.AspNetCore.Components.ComponentBase.RendererInfo"].DeclaringTypeName = "ComponentBase";
        Properties["MudBlazor.AggregateDefinition`1.Culture"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Properties["MudBlazor.AggregateDefinition`1.CustomAggregate"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Properties["MudBlazor.AggregateDefinition`1.DisplayFormat"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Properties["MudBlazor.AggregateDefinition`1.NumberFormat"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Properties["MudBlazor.AggregateDefinition`1.Type"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Properties["MudBlazor.BaseMask.AllowOnlyDelimiters"].DeclaringType = Types["MudBlazor.BaseMask"];
        Properties["MudBlazor.BaseMask.CaretPos"].DeclaringType = Types["MudBlazor.BaseMask"];
        Properties["MudBlazor.BaseMask.Mask"].DeclaringType = Types["MudBlazor.BaseMask"];
        Properties["MudBlazor.BaseMask.MaskChars"].DeclaringType = Types["MudBlazor.BaseMask"];
        Properties["MudBlazor.BaseMask.Selection"].DeclaringType = Types["MudBlazor.BaseMask"];
        Properties["MudBlazor.BaseMask.Text"].DeclaringType = Types["MudBlazor.BaseMask"];
        Properties["MudBlazor.BaseTypography.FontFamily"].DeclaringType = Types["MudBlazor.BaseTypography"];
        Properties["MudBlazor.BaseTypography.FontSize"].DeclaringType = Types["MudBlazor.BaseTypography"];
        Properties["MudBlazor.BaseTypography.FontWeight"].DeclaringType = Types["MudBlazor.BaseTypography"];
        Properties["MudBlazor.BaseTypography.LetterSpacing"].DeclaringType = Types["MudBlazor.BaseTypography"];
        Properties["MudBlazor.BaseTypography.LineHeight"].DeclaringType = Types["MudBlazor.BaseTypography"];
        Properties["MudBlazor.BaseTypography.TextTransform"].DeclaringType = Types["MudBlazor.BaseTypography"];
        Properties["MudBlazor.Block.MaskChar"].DeclaringType = Types["MudBlazor.Block"];
        Properties["MudBlazor.Block.Max"].DeclaringType = Types["MudBlazor.Block"];
        Properties["MudBlazor.Block.Min"].DeclaringType = Types["MudBlazor.Block"];
        Properties["MudBlazor.BlockMask.Blocks"].DeclaringType = Types["MudBlazor.BlockMask"];
        Properties["MudBlazor.BreadcrumbItem.Disabled"].DeclaringType = Types["MudBlazor.BreadcrumbItem"];
        Properties["MudBlazor.BreadcrumbItem.EqualityContract"].DeclaringType = Types["MudBlazor.BreadcrumbItem"];
        Properties["MudBlazor.BreadcrumbItem.Href"].DeclaringType = Types["MudBlazor.BreadcrumbItem"];
        Properties["MudBlazor.BreadcrumbItem.Icon"].DeclaringType = Types["MudBlazor.BreadcrumbItem"];
        Properties["MudBlazor.BreadcrumbItem.Text"].DeclaringType = Types["MudBlazor.BreadcrumbItem"];
        Properties["MudBlazor.BreadcrumbLink.Item"].DeclaringType = Types["MudBlazor.BreadcrumbLink"];
        Properties["MudBlazor.BreadcrumbLink.Parent"].DeclaringType = Types["MudBlazor.BreadcrumbLink"];
        Properties["MudBlazor.BreadcrumbSeparator.Parent"].DeclaringType = Types["MudBlazor.BreadcrumbSeparator"];
        Properties["MudBlazor.Breakpoints.lg"].DeclaringType = Types["MudBlazor.Breakpoints"];
        Properties["MudBlazor.Breakpoints.md"].DeclaringType = Types["MudBlazor.Breakpoints"];
        Properties["MudBlazor.Breakpoints.sm"].DeclaringType = Types["MudBlazor.Breakpoints"];
        Properties["MudBlazor.Breakpoints.xl"].DeclaringType = Types["MudBlazor.Breakpoints"];
        Properties["MudBlazor.Breakpoints.xs"].DeclaringType = Types["MudBlazor.Breakpoints"];
        Properties["MudBlazor.Breakpoints.xxl"].DeclaringType = Types["MudBlazor.Breakpoints"];
        Properties["MudBlazor.BrowserViewportEventArgs.Breakpoint"].DeclaringType = Types["MudBlazor.BrowserViewportEventArgs"];
        Properties["MudBlazor.BrowserViewportEventArgs.BrowserWindowSize"].DeclaringType = Types["MudBlazor.BrowserViewportEventArgs"];
        Properties["MudBlazor.BrowserViewportEventArgs.IsImmediate"].DeclaringType = Types["MudBlazor.BrowserViewportEventArgs"];
        Properties["MudBlazor.BrowserViewportEventArgs.JavaScriptListenerId"].DeclaringType = Types["MudBlazor.BrowserViewportEventArgs"];
        Properties["MudBlazor.CellContext`1.Actions"].DeclaringType = Types["MudBlazor.CellContext`1"];
        Properties["MudBlazor.CellContext`1.Item"].DeclaringType = Types["MudBlazor.CellContext`1"];
        Properties["MudBlazor.CellContext`1.Open"].DeclaringType = Types["MudBlazor.CellContext`1"];
        Properties["MudBlazor.CellContext`1.Selected"].DeclaringType = Types["MudBlazor.CellContext`1"];
        Properties["MudBlazor.CellContext`1+CellActions.CancelEditingItemAsync"].DeclaringType = Types["MudBlazor.CellContext`1+CellActions"];
        Properties["MudBlazor.CellContext`1+CellActions.SetSelectedItemAsync"].DeclaringType = Types["MudBlazor.CellContext`1+CellActions"];
        Properties["MudBlazor.CellContext`1+CellActions.StartEditingItemAsync"].DeclaringType = Types["MudBlazor.CellContext`1+CellActions"];
        Properties["MudBlazor.CellContext`1+CellActions.ToggleHierarchyVisibilityForItemAsync"].DeclaringType = Types["MudBlazor.CellContext`1+CellActions"];
        Properties["MudBlazor.ChartOptions.ChartPalette"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.EnableSmoothGradient"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.InterpolationOption"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.LineStrokeWidth"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.MaxNumYAxisTicks"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.ShowLabels"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.ShowLegend"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.ShowLegendLabels"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.ShowToolTips"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.ValueFormatString"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.XAxisLabelPosition"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.XAxisLines"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.YAxisFormat"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.YAxisLabelPosition"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.YAxisLines"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.YAxisRequireZeroPoint"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.ChartOptions.YAxisTicks"].DeclaringType = Types["MudBlazor.ChartOptions"];
        Properties["MudBlazor.Charts.Bar.MudChartParent"].DeclaringType = Types["MudBlazor.Charts.Bar"];
        Properties["MudBlazor.Charts.Donut.MudChartParent"].DeclaringType = Types["MudBlazor.Charts.Donut"];
        Properties["MudBlazor.Charts.Donut.ParentHeight"].DeclaringType = Types["MudBlazor.Charts.Donut"];
        Properties["MudBlazor.Charts.Donut.ParentWidth"].DeclaringType = Types["MudBlazor.Charts.Donut"];
        Properties["MudBlazor.Charts.HeatMap.MudChartParent"].DeclaringType = Types["MudBlazor.Charts.HeatMap"];
        Properties["MudBlazor.Charts.HeatMapCell.Column"].DeclaringType = Types["MudBlazor.Charts.HeatMapCell"];
        Properties["MudBlazor.Charts.HeatMapCell.CustomFragment"].DeclaringType = Types["MudBlazor.Charts.HeatMapCell"];
        Properties["MudBlazor.Charts.HeatMapCell.Height"].DeclaringType = Types["MudBlazor.Charts.HeatMapCell"];
        Properties["MudBlazor.Charts.HeatMapCell.MudColor"].DeclaringType = Types["MudBlazor.Charts.HeatMapCell"];
        Properties["MudBlazor.Charts.HeatMapCell.Row"].DeclaringType = Types["MudBlazor.Charts.HeatMapCell"];
        Properties["MudBlazor.Charts.HeatMapCell.Value"].DeclaringType = Types["MudBlazor.Charts.HeatMapCell"];
        Properties["MudBlazor.Charts.HeatMapCell.Width"].DeclaringType = Types["MudBlazor.Charts.HeatMapCell"];
        Properties["MudBlazor.Charts.Legend.Data"].DeclaringType = Types["MudBlazor.Charts.Legend"];
        Properties["MudBlazor.Charts.Legend.MudChartParent"].DeclaringType = Types["MudBlazor.Charts.Legend"];
        Properties["MudBlazor.Charts.Line.MudChartParent"].DeclaringType = Types["MudBlazor.Charts.Line"];
        Properties["MudBlazor.Charts.Pie.MudChartParent"].DeclaringType = Types["MudBlazor.Charts.Pie"];
        Properties["MudBlazor.Charts.StackedBar.MudChartParent"].DeclaringType = Types["MudBlazor.Charts.StackedBar"];
        Properties["MudBlazor.Charts.TimeSeries.MudChartParent"].DeclaringType = Types["MudBlazor.Charts.TimeSeries"];
        Properties["MudBlazor.ChartSeries.Data"].DeclaringType = Types["MudBlazor.ChartSeries"];
        Properties["MudBlazor.ChartSeries.Index"].DeclaringType = Types["MudBlazor.ChartSeries"];
        Properties["MudBlazor.ChartSeries.Name"].DeclaringType = Types["MudBlazor.ChartSeries"];
        Properties["MudBlazor.ChartSeries.Visible"].DeclaringType = Types["MudBlazor.ChartSeries"];
        Properties["MudBlazor.Column`1.AggregateDefinition"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.AggregateTemplate"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.CellClass"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.CellClassFunc"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.CellStyle"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.CellStyleFunc"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.CellTemplate"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Comparer"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Culture"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.DataGrid"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.DragAndDropEnabled"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Editable"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.EditTemplate"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.EnableFooterSelection"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Filterable"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.FilterContext"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.FilterOperators"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.FilterTemplate"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.FooterClass"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.FooterClassFunc"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.FooterColSpan"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.FooterStyle"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.FooterStyleFunc"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.FooterTemplate"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Groupable"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.GroupBy"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Grouping"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Grouping"].ChangeEvent = Events["MudBlazor.Column`1.GroupingChanged"];
        Properties["MudBlazor.Column`1.GroupTemplate"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.HeaderClass"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.HeaderClassFunc"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.HeaderColSpan"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.HeaderStyle"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.HeaderStyleFunc"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.HeaderTemplate"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Hidden"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Hidden"].ChangeEvent = Events["MudBlazor.Column`1.HiddenChanged"];
        Properties["MudBlazor.Column`1.Hideable"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.HideSmall"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Identifier"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.InitialDirection"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.PropertyName"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Required"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Resizable"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.ShowColumnOptions"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.ShowFilterIcon"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Sortable"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.SortBy"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.SortIcon"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.StickyLeft"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.StickyRight"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Title"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Value"].DeclaringType = Types["MudBlazor.Column`1"];
        Properties["MudBlazor.Column`1.Value"].ChangeEvent = Events["MudBlazor.Column`1.ValueChanged"];
        Properties["MudBlazor.CommonSnackbarOptions.BackgroundBlurred"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.ErrorIcon"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.HideTransitionDuration"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.IconSize"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.InfoIcon"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.MaximumOpacity"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.NormalIcon"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.RequireInteraction"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.ShowCloseIcon"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.ShowTransitionDuration"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.SnackbarVariant"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.SuccessIcon"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.VisibleStateDuration"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.CommonSnackbarOptions.WarningIcon"].DeclaringType = Types["MudBlazor.CommonSnackbarOptions"];
        Properties["MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageMarkupString.Message"].DeclaringType = Types["MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageMarkupString"];
        Properties["MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageRenderFragment.Message"].DeclaringType = Types["MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageRenderFragment"];
        Properties["MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageText.Message"].DeclaringType = Types["MudBlazor.Components.Snackbar.InternalComponents.SnackbarMessageText"];
        Properties["MudBlazor.Converter`1.Format"].DeclaringType = Types["MudBlazor.Converter`1"];
        Properties["MudBlazor.Converter`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format"].DeclaringTypeName = "Converter`1";
        Properties["MudBlazor.Converter`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format"].DeclaringTypeName = "Converter`1";
        Properties["MudBlazor.Converter`2.Culture"].DeclaringType = Types["MudBlazor.Converter`2"];
        Properties["MudBlazor.Converter`2.GetError"].DeclaringType = Types["MudBlazor.Converter`2"];
        Properties["MudBlazor.Converter`2.GetErrorMessage"].DeclaringType = Types["MudBlazor.Converter`2"];
        Properties["MudBlazor.Converter`2.GetFunc"].DeclaringType = Types["MudBlazor.Converter`2"];
        Properties["MudBlazor.Converter`2.OnError"].DeclaringType = Types["MudBlazor.Converter`2"];
        Properties["MudBlazor.Converter`2.SetError"].DeclaringType = Types["MudBlazor.Converter`2"];
        Properties["MudBlazor.Converter`2.SetErrorMessage"].DeclaringType = Types["MudBlazor.Converter`2"];
        Properties["MudBlazor.Converter`2.SetFunc"].DeclaringType = Types["MudBlazor.Converter`2"];
        Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetError"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorMessage"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetFunc"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnError"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetError"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetErrorMessage"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFunc"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetError"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorMessage"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetFunc"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnError"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetError"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetErrorMessage"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFunc"].DeclaringTypeName = "Converter`2";
        Properties["MudBlazor.Converters.DefaultCulture"].DeclaringType = Types["MudBlazor.Converters"];
        Properties["MudBlazor.Converters.IsoDate"].DeclaringType = Types["MudBlazor.Converters"];
        Properties["MudBlazor.Converters.NullableIsoDate"].DeclaringType = Types["MudBlazor.Converters"];
        Properties["MudBlazor.DataGridRowClickEventArgs`1.Item"].DeclaringType = Types["MudBlazor.DataGridRowClickEventArgs`1"];
        Properties["MudBlazor.DataGridRowClickEventArgs`1.MouseEventArgs"].DeclaringType = Types["MudBlazor.DataGridRowClickEventArgs`1"];
        Properties["MudBlazor.DataGridRowClickEventArgs`1.RowIndex"].DeclaringType = Types["MudBlazor.DataGridRowClickEventArgs`1"];
        Properties["MudBlazor.DataGridRowValidator.Errors"].DeclaringType = Types["MudBlazor.DataGridRowValidator"];
        Properties["MudBlazor.DataGridRowValidator.IsValid"].DeclaringType = Types["MudBlazor.DataGridRowValidator"];
        Properties["MudBlazor.DataGridRowValidator.Model"].DeclaringType = Types["MudBlazor.DataGridRowValidator"];
        Properties["MudBlazor.DateConverter.DateFormat"].DeclaringType = Types["MudBlazor.DateConverter"];
        Properties["MudBlazor.DefaultConverter`1.DefaultTimeSpanFormat"].DeclaringType = Types["MudBlazor.DefaultConverter`1"];
        Properties["MudBlazor.DefaultLocalizationInterceptor.IgnoreDefaultEnglish"].DeclaringType = Types["MudBlazor.DefaultLocalizationInterceptor"];
        Properties["MudBlazor.DialogOptions.BackdropClick"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogOptions.BackgroundClass"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogOptions.CloseButton"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogOptions.CloseOnEscapeKey"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogOptions.EqualityContract"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogOptions.FullScreen"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogOptions.FullWidth"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogOptions.MaxWidth"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogOptions.NoHeader"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogOptions.Position"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Properties["MudBlazor.DialogParameters.Count"].DeclaringType = Types["MudBlazor.DialogParameters"];
        Properties["MudBlazor.DialogParameters.Item"].DeclaringType = Types["MudBlazor.DialogParameters"];
        Properties["MudBlazor.DialogReference.Dialog"].DeclaringType = Types["MudBlazor.DialogReference"];
        Properties["MudBlazor.DialogReference.Id"].DeclaringType = Types["MudBlazor.DialogReference"];
        Properties["MudBlazor.DialogReference.RenderFragment"].DeclaringType = Types["MudBlazor.DialogReference"];
        Properties["MudBlazor.DialogReference.Result"].DeclaringType = Types["MudBlazor.DialogReference"];
        Properties["MudBlazor.DialogResult.Canceled"].DeclaringType = Types["MudBlazor.DialogResult"];
        Properties["MudBlazor.DialogResult.Data"].DeclaringType = Types["MudBlazor.DialogResult"];
        Properties["MudBlazor.DialogResult.DataType"].DeclaringType = Types["MudBlazor.DialogResult"];
        Properties["MudBlazor.DropdownSettings.Fixed"].DeclaringType = Types["MudBlazor.DropdownSettings"];
        Properties["MudBlazor.DropdownSettings.OverflowBehavior"].DeclaringType = Types["MudBlazor.DropdownSettings"];
        Properties["MudBlazor.EditButtonContext.ButtonAction"].DeclaringType = Types["MudBlazor.EditButtonContext"];
        Properties["MudBlazor.EditButtonContext.ButtonDisabled"].DeclaringType = Types["MudBlazor.EditButtonContext"];
        Properties["MudBlazor.EditButtonContext.Item"].DeclaringType = Types["MudBlazor.EditButtonContext"];
        Properties["MudBlazor.FieldType.InnerType"].DeclaringType = Types["MudBlazor.FieldType"];
        Properties["MudBlazor.FieldType.IsBoolean"].DeclaringType = Types["MudBlazor.FieldType"];
        Properties["MudBlazor.FieldType.IsDateTime"].DeclaringType = Types["MudBlazor.FieldType"];
        Properties["MudBlazor.FieldType.IsEnum"].DeclaringType = Types["MudBlazor.FieldType"];
        Properties["MudBlazor.FieldType.IsGuid"].DeclaringType = Types["MudBlazor.FieldType"];
        Properties["MudBlazor.FieldType.IsNumber"].DeclaringType = Types["MudBlazor.FieldType"];
        Properties["MudBlazor.FieldType.IsString"].DeclaringType = Types["MudBlazor.FieldType"];
        Properties["MudBlazor.FilterContext`1.Actions"].DeclaringType = Types["MudBlazor.FilterContext`1"];
        Properties["MudBlazor.FilterContext`1.FilterDefinition"].DeclaringType = Types["MudBlazor.FilterContext`1"];
        Properties["MudBlazor.FilterContext`1.FilterDefinitions"].DeclaringType = Types["MudBlazor.FilterContext`1"];
        Properties["MudBlazor.FilterContext`1.Items"].DeclaringType = Types["MudBlazor.FilterContext`1"];
        Properties["MudBlazor.FilterContext`1+FilterActions.ApplyFilterAsync"].DeclaringType = Types["MudBlazor.FilterContext`1+FilterActions"];
        Properties["MudBlazor.FilterContext`1+FilterActions.ApplyFiltersAsync"].DeclaringType = Types["MudBlazor.FilterContext`1+FilterActions"];
        Properties["MudBlazor.FilterContext`1+FilterActions.ClearFilterAsync"].DeclaringType = Types["MudBlazor.FilterContext`1+FilterActions"];
        Properties["MudBlazor.FilterContext`1+FilterActions.ClearFiltersAsync"].DeclaringType = Types["MudBlazor.FilterContext`1+FilterActions"];
        Properties["MudBlazor.FilterDefinition`1.Column"].DeclaringType = Types["MudBlazor.FilterDefinition`1"];
        Properties["MudBlazor.FilterDefinition`1.FieldType"].DeclaringType = Types["MudBlazor.FilterDefinition`1"];
        Properties["MudBlazor.FilterDefinition`1.FilterFunction"].DeclaringType = Types["MudBlazor.FilterDefinition`1"];
        Properties["MudBlazor.FilterDefinition`1.Id"].DeclaringType = Types["MudBlazor.FilterDefinition`1"];
        Properties["MudBlazor.FilterDefinition`1.Operator"].DeclaringType = Types["MudBlazor.FilterDefinition`1"];
        Properties["MudBlazor.FilterDefinition`1.Title"].DeclaringType = Types["MudBlazor.FilterDefinition`1"];
        Properties["MudBlazor.FilterDefinition`1.Value"].DeclaringType = Types["MudBlazor.FilterDefinition`1"];
        Properties["MudBlazor.FilterHeaderCell`1.ChildContent"].DeclaringType = Types["MudBlazor.FilterHeaderCell`1"];
        Properties["MudBlazor.FilterHeaderCell`1.Column"].DeclaringType = Types["MudBlazor.FilterHeaderCell`1"];
        Properties["MudBlazor.FilterHeaderCell`1.DataGrid"].DeclaringType = Types["MudBlazor.FilterHeaderCell`1"];
        Properties["MudBlazor.FilterOptions.Default"].DeclaringType = Types["MudBlazor.FilterOptions"];
        Properties["MudBlazor.FilterOptions.FilterCaseSensitivity"].DeclaringType = Types["MudBlazor.FilterOptions"];
        Properties["MudBlazor.FooterCell`1.ChildContent"].DeclaringType = Types["MudBlazor.FooterCell`1"];
        Properties["MudBlazor.FooterCell`1.Column"].DeclaringType = Types["MudBlazor.FooterCell`1"];
        Properties["MudBlazor.FooterCell`1.CurrentItems"].DeclaringType = Types["MudBlazor.FooterCell`1"];
        Properties["MudBlazor.FooterCell`1.DataGrid"].DeclaringType = Types["MudBlazor.FooterCell`1"];
        Properties["MudBlazor.FooterContext`1.Actions"].DeclaringType = Types["MudBlazor.FooterContext`1"];
        Properties["MudBlazor.FooterContext`1.IsAllSelected"].DeclaringType = Types["MudBlazor.FooterContext`1"];
        Properties["MudBlazor.FooterContext`1.Items"].DeclaringType = Types["MudBlazor.FooterContext`1"];
        Properties["MudBlazor.FooterContext`1+FooterActions.SetSelectAllAsync"].DeclaringType = Types["MudBlazor.FooterContext`1+FooterActions"];
        Properties["MudBlazor.GridData`1.Items"].DeclaringType = Types["MudBlazor.GridData`1"];
        Properties["MudBlazor.GridData`1.TotalItems"].DeclaringType = Types["MudBlazor.GridData`1"];
        Properties["MudBlazor.GridState`1.FilterDefinitions"].DeclaringType = Types["MudBlazor.GridState`1"];
        Properties["MudBlazor.GridState`1.Page"].DeclaringType = Types["MudBlazor.GridState`1"];
        Properties["MudBlazor.GridState`1.PageSize"].DeclaringType = Types["MudBlazor.GridState`1"];
        Properties["MudBlazor.GridState`1.SortDefinitions"].DeclaringType = Types["MudBlazor.GridState`1"];
        Properties["MudBlazor.GridStateVirtualize`1.Count"].DeclaringType = Types["MudBlazor.GridStateVirtualize`1"];
        Properties["MudBlazor.GridStateVirtualize`1.FilterDefinitions"].DeclaringType = Types["MudBlazor.GridStateVirtualize`1"];
        Properties["MudBlazor.GridStateVirtualize`1.SortDefinitions"].DeclaringType = Types["MudBlazor.GridStateVirtualize`1"];
        Properties["MudBlazor.GridStateVirtualize`1.StartIndex"].DeclaringType = Types["MudBlazor.GridStateVirtualize`1"];
        Properties["MudBlazor.GroupDefinition`1.Expanded"].DeclaringType = Types["MudBlazor.GroupDefinition`1"];
        Properties["MudBlazor.GroupDefinition`1.Grouping"].DeclaringType = Types["MudBlazor.GroupDefinition`1"];
        Properties["MudBlazor.HeaderCell`1.ChildContent"].DeclaringType = Types["MudBlazor.HeaderCell`1"];
        Properties["MudBlazor.HeaderCell`1.Column"].DeclaringType = Types["MudBlazor.HeaderCell`1"];
        Properties["MudBlazor.HeaderCell`1.DataGrid"].DeclaringType = Types["MudBlazor.HeaderCell`1"];
        Properties["MudBlazor.HeaderCell`1.IsOnlyHeader"].DeclaringType = Types["MudBlazor.HeaderCell`1"];
        Properties["MudBlazor.HeaderCell`1.SortDirection"].DeclaringType = Types["MudBlazor.HeaderCell`1"];
        Properties["MudBlazor.HeaderCell`1.Width"].DeclaringType = Types["MudBlazor.HeaderCell`1"];
        Properties["MudBlazor.HeaderContext`1.Actions"].DeclaringType = Types["MudBlazor.HeaderContext`1"];
        Properties["MudBlazor.HeaderContext`1.IsAllSelected"].DeclaringType = Types["MudBlazor.HeaderContext`1"];
        Properties["MudBlazor.HeaderContext`1.Items"].DeclaringType = Types["MudBlazor.HeaderContext`1"];
        Properties["MudBlazor.HeaderContext`1+HeaderActions.SetSelectAllAsync"].DeclaringType = Types["MudBlazor.HeaderContext`1+HeaderActions"];
        Properties["MudBlazor.HierarchyColumn`1.ButtonDisabledFunc"].DeclaringType = Types["MudBlazor.HierarchyColumn`1"];
        Properties["MudBlazor.HierarchyColumn`1.ClosedIcon"].DeclaringType = Types["MudBlazor.HierarchyColumn`1"];
        Properties["MudBlazor.HierarchyColumn`1.DragAndDropEnabled"].DeclaringType = Types["MudBlazor.HierarchyColumn`1"];
        Properties["MudBlazor.HierarchyColumn`1.Hidden"].DeclaringType = Types["MudBlazor.HierarchyColumn`1"];
        Properties["MudBlazor.HierarchyColumn`1.Hidden"].ChangeEvent = Events["MudBlazor.HierarchyColumn`1.HiddenChanged"];
        Properties["MudBlazor.HierarchyColumn`1.Hideable"].DeclaringType = Types["MudBlazor.HierarchyColumn`1"];
        Properties["MudBlazor.HierarchyColumn`1.IconSize"].DeclaringType = Types["MudBlazor.HierarchyColumn`1"];
        Properties["MudBlazor.HierarchyColumn`1.InitiallyExpandedFunc"].DeclaringType = Types["MudBlazor.HierarchyColumn`1"];
        Properties["MudBlazor.HierarchyColumn`1.OpenIcon"].DeclaringType = Types["MudBlazor.HierarchyColumn`1"];
        Properties["MudBlazor.Internal.MudInputAdornment.AriaLabel"].DeclaringType = Types["MudBlazor.Internal.MudInputAdornment"];
        Properties["MudBlazor.Internal.MudInputAdornment.Class"].DeclaringType = Types["MudBlazor.Internal.MudInputAdornment"];
        Properties["MudBlazor.Internal.MudInputAdornment.Classname"].DeclaringType = Types["MudBlazor.Internal.MudInputAdornment"];
        Properties["MudBlazor.Internal.MudInputAdornment.Color"].DeclaringType = Types["MudBlazor.Internal.MudInputAdornment"];
        Properties["MudBlazor.Internal.MudInputAdornment.Icon"].DeclaringType = Types["MudBlazor.Internal.MudInputAdornment"];
        Properties["MudBlazor.Internal.MudInputAdornment.Placement"].DeclaringType = Types["MudBlazor.Internal.MudInputAdornment"];
        Properties["MudBlazor.Internal.MudInputAdornment.Size"].DeclaringType = Types["MudBlazor.Internal.MudInputAdornment"];
        Properties["MudBlazor.Internal.MudInputAdornment.Text"].DeclaringType = Types["MudBlazor.Internal.MudInputAdornment"];
        Properties["MudBlazor.Interop.BoundingClientRect.AbsoluteBottom"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.AbsoluteLeft"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.AbsoluteRight"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.AbsoluteTop"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.Bottom"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.Height"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.IsOutsideBottom"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.IsOutsideLeft"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.IsOutsideRight"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.IsOutsideTop"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.Left"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.Right"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.ScrollX"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.ScrollY"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.Top"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.Width"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.WindowHeight"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.WindowWidth"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.X"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.Interop.BoundingClientRect.Y"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Properties["MudBlazor.LayoutProperties.AppbarHeight"].DeclaringType = Types["MudBlazor.LayoutProperties"];
        Properties["MudBlazor.LayoutProperties.DefaultBorderRadius"].DeclaringType = Types["MudBlazor.LayoutProperties"];
        Properties["MudBlazor.LayoutProperties.DrawerMiniWidthLeft"].DeclaringType = Types["MudBlazor.LayoutProperties"];
        Properties["MudBlazor.LayoutProperties.DrawerMiniWidthRight"].DeclaringType = Types["MudBlazor.LayoutProperties"];
        Properties["MudBlazor.LayoutProperties.DrawerWidthLeft"].DeclaringType = Types["MudBlazor.LayoutProperties"];
        Properties["MudBlazor.LayoutProperties.DrawerWidthRight"].DeclaringType = Types["MudBlazor.LayoutProperties"];
        Properties["MudBlazor.MaskChar.Char"].DeclaringType = Types["MudBlazor.MaskChar"];
        Properties["MudBlazor.MaskChar.Regex"].DeclaringType = Types["MudBlazor.MaskChar"];
        Properties["MudBlazor.MaskOption.Id"].DeclaringType = Types["MudBlazor.MaskOption"];
        Properties["MudBlazor.MaskOption.Mask"].DeclaringType = Types["MudBlazor.MaskOption"];
        Properties["MudBlazor.MaskOption.Regex"].DeclaringType = Types["MudBlazor.MaskOption"];
        Properties["MudBlazor.MessageBoxOptions.CancelText"].DeclaringType = Types["MudBlazor.MessageBoxOptions"];
        Properties["MudBlazor.MessageBoxOptions.MarkupMessage"].DeclaringType = Types["MudBlazor.MessageBoxOptions"];
        Properties["MudBlazor.MessageBoxOptions.Message"].DeclaringType = Types["MudBlazor.MessageBoxOptions"];
        Properties["MudBlazor.MessageBoxOptions.NoText"].DeclaringType = Types["MudBlazor.MessageBoxOptions"];
        Properties["MudBlazor.MessageBoxOptions.Title"].DeclaringType = Types["MudBlazor.MessageBoxOptions"];
        Properties["MudBlazor.MessageBoxOptions.YesText"].DeclaringType = Types["MudBlazor.MessageBoxOptions"];
        Properties["MudBlazor.MudAlert.ChildContent"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.Classname"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.ClassPosition"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.CloseIcon"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.ContentAlignment"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.Dense"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.Elevation"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.Icon"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.NoIcon"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.RightToLeft"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.Severity"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.ShowCloseIcon"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.Square"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAlert.Variant"].DeclaringType = Types["MudBlazor.MudAlert"];
        Properties["MudBlazor.MudAppBar.Bottom"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.ChildContent"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.Classname"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.Color"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.Contextual"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.Dense"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.Elevation"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.Fixed"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.Gutters"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.ToolBarClass"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.ToolBarClassname"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAppBar.WrapContent"].DeclaringType = Types["MudBlazor.MudAppBar"];
        Properties["MudBlazor.MudAutocomplete`1.AfterItemsTemplate"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.AnchorOrigin"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.AutocompleteClassname"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.BeforeItemsTemplate"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.CircularProgressClassname"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.Classname"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.Clearable"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ClearIcon"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.CloseIcon"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.CoerceText"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.CoerceValue"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.DebounceInterval"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.Dense"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.DropdownSettings"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.InputClass"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.InputClassname"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ItemDisabledFunc"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ItemDisabledTemplate"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ItemSelectedTemplate"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ItemTemplate"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ListClass"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ListItemClass"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.MaxHeight"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.MaxItems"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.MinCharacters"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.MoreItemsTemplate"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.NoItemsTemplate"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.Open"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.Open"].ChangeEvent = Events["MudBlazor.MudAutocomplete`1.OpenChanged"];
        Properties["MudBlazor.MudAutocomplete`1.OpenIcon"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.OpenOnFocus"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.PopoverClass"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ProgressIndicatorColor"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ProgressIndicatorInPopoverTemplate"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ProgressIndicatorTemplate"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.RelativeWidth"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ResetValueOnEmptyText"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.SearchFunc"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.SelectOnActivation"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.SelectValueOnTab"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ShowProgressIndicator"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.Strict"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.ToStringFunc"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAutocomplete`1.TransformOrigin"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Properties["MudBlazor.MudAvatar.AvatarGroup"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatar.ChildContent"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatar.Classname"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatar.Color"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatar.Elevation"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatar.Rounded"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatar.Size"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatar.Square"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatar.Stylesname"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatar.Variant"].DeclaringType = Types["MudBlazor.MudAvatar"];
        Properties["MudBlazor.MudAvatarGroup.ChildContent"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.Classname"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.Max"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.MaxAvatarClass"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.MaxAvatarClassname"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.MaxAvatarsTemplate"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.MaxColor"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.MaxElevation"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.MaxRounded"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.MaxSize"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.MaxSquare"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.MaxVariant"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.OutlineColor"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.Outlined"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudAvatarGroup.Spacing"].DeclaringType = Types["MudBlazor.MudAvatarGroup"];
        Properties["MudBlazor.MudBadge.BadgeAriaLabel"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.BadgeClass"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.BadgeClassname"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Bordered"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.ChildContent"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Classname"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Color"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Content"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Dot"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Elevation"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Icon"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Max"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Origin"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Overlap"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.Visible"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBadge.WrapperClass"].DeclaringType = Types["MudBlazor.MudBadge"];
        Properties["MudBlazor.MudBaseBindableItemsControl`2.ItemsSource"].DeclaringType = Types["MudBlazor.MudBaseBindableItemsControl`2"];
        Properties["MudBlazor.MudBaseBindableItemsControl`2.ItemTemplate"].DeclaringType = Types["MudBlazor.MudBaseBindableItemsControl`2"];
        Properties["MudBlazor.MudBaseBindableItemsControl`2.SelectedItem"].DeclaringType = Types["MudBlazor.MudBaseBindableItemsControl`2"];
        Properties["MudBlazor.MudBaseButton.Activatable"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseButton.ButtonType"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseButton.ClickPropagation"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseButton.Disabled"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseButton.DropShadow"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseButton.Href"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseButton.HtmlTag"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseButton.Rel"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseButton.Ripple"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseButton.Target"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Properties["MudBlazor.MudBaseDatePicker.AdditionalDateClassesFunc"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.AutoClose"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.ClosingDelay"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.DateFormat"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.DisplayMonths"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.FirstDayOfWeek"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.FixDay"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.FixMonth"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.FixYear"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.IsDateDisabledFunc"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.IsRange"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.MaxDate"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.MaxMonthColumns"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.MinDate"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.NextIcon"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.OpenTo"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.PickerContent"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.PickerMonth"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.PickerMonth"].ChangeEvent = Events["MudBlazor.MudBaseDatePicker.PickerMonthChanged"];
        Properties["MudBlazor.MudBaseDatePicker.PreviousIcon"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.ScrollManager"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.ShowWeekNumbers"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.StartMonth"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseDatePicker.TitleDateFormat"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Properties["MudBlazor.MudBaseInput`1.Adornment"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.AdornmentAriaLabel"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.AdornmentColor"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.AdornmentIcon"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.AdornmentText"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.AutoFocus"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Counter"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Disabled"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Format"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.FullWidth"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.HelperId"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.HelperText"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.HelperTextOnFocus"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.IconSize"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Immediate"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.InputElementId"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.InputId"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.InputMode"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.KeyDownPreventDefault"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.KeyUpPreventDefault"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Label"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Lines"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Margin"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.MaxLength"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.OnlyValidateIfDirty"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Pattern"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Placeholder"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.ReadOnly"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.ShrinkLabel"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Text"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Text"].ChangeEvent = Events["MudBlazor.MudBaseInput`1.TextChanged"];
        Properties["MudBlazor.MudBaseInput`1.TextUpdateSuppression"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Typo"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Underline"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Value"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1.Value"].ChangeEvent = Events["MudBlazor.MudBaseInput`1.ValueChanged"];
        Properties["MudBlazor.MudBaseInput`1.Variant"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentText"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AutoFocus"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Counter"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Format"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FullWidth"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperId"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Immediate"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputElementId"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputId"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputMode"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].KeyDownPreventDefault"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].KeyUpPreventDefault"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Lines"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MaxLength"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnlyValidateIfDirty"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Pattern"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShrinkLabel"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"].ChangeEvent = Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"];
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextUpdateSuppression"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Typo"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Value"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Value"].ChangeEvent = Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValueChanged"];
        Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant"].DeclaringTypeName = "MudBaseInput`1";
        Properties["MudBlazor.MudBaseItemsControl`1.ChildContent"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Properties["MudBlazor.MudBaseItemsControl`1.Items"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Properties["MudBlazor.MudBaseItemsControl`1.LastContainer"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Properties["MudBlazor.MudBaseItemsControl`1.SelectedContainer"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Properties["MudBlazor.MudBaseItemsControl`1.SelectedIndex"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Properties["MudBlazor.MudBaseItemsControl`1.SelectedIndex"].ChangeEvent = Events["MudBlazor.MudBaseItemsControl`1.SelectedIndexChanged"];
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ChildContent"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Items"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].LastContainer"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedContainer"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex"].ChangeEvent = Events["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged"];
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ChildContent"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Items"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].LastContainer"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedContainer"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex"].DeclaringTypeName = "MudBaseItemsControl`1";
        Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex"].ChangeEvent = Events["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged"];
        Properties["MudBlazor.MudBooleanInput`1.BoolValue"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.ChildContent"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.Classname"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.Color"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.Disabled"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.IconClassname"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.Label"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.LabelClassname"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.LabelPlacement"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.ReadOnly"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.RightToLeft"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.Ripple"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.Size"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.StopClickPropagation"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.Value"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Properties["MudBlazor.MudBooleanInput`1.Value"].ChangeEvent = Events["MudBlazor.MudBooleanInput`1.ValueChanged"];
        Properties["MudBlazor.MudBreadcrumbs.Collapsed"].DeclaringType = Types["MudBlazor.MudBreadcrumbs"];
        Properties["MudBlazor.MudBreadcrumbs.ExpanderIcon"].DeclaringType = Types["MudBlazor.MudBreadcrumbs"];
        Properties["MudBlazor.MudBreadcrumbs.Items"].DeclaringType = Types["MudBlazor.MudBreadcrumbs"];
        Properties["MudBlazor.MudBreadcrumbs.ItemTemplate"].DeclaringType = Types["MudBlazor.MudBreadcrumbs"];
        Properties["MudBlazor.MudBreadcrumbs.MaxItems"].DeclaringType = Types["MudBlazor.MudBreadcrumbs"];
        Properties["MudBlazor.MudBreadcrumbs.Separator"].DeclaringType = Types["MudBlazor.MudBreadcrumbs"];
        Properties["MudBlazor.MudBreadcrumbs.SeparatorTemplate"].DeclaringType = Types["MudBlazor.MudBreadcrumbs"];
        Properties["MudBlazor.MudBreakpointProvider.Breakpoint"].DeclaringType = Types["MudBlazor.MudBreakpointProvider"];
        Properties["MudBlazor.MudBreakpointProvider.BrowserViewportService"].DeclaringType = Types["MudBlazor.MudBreakpointProvider"];
        Properties["MudBlazor.MudBreakpointProvider.ChildContent"].DeclaringType = Types["MudBlazor.MudBreakpointProvider"];
        Properties["MudBlazor.MudButton.ChildContent"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.Classname"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.Color"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.EndIcon"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.EndIconClass"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.FullWidth"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.IconClass"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.IconColor"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.IconSize"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.Size"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.StartIcon"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.StartIconClass"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButton.Variant"].DeclaringType = Types["MudBlazor.MudButton"];
        Properties["MudBlazor.MudButtonGroup.ChildContent"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudButtonGroup.Classname"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudButtonGroup.Color"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudButtonGroup.DropShadow"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudButtonGroup.FullWidth"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudButtonGroup.OverrideStyles"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudButtonGroup.RightToLeft"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudButtonGroup.Size"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudButtonGroup.Variant"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudButtonGroup.Vertical"].DeclaringType = Types["MudBlazor.MudButtonGroup"];
        Properties["MudBlazor.MudCard.ChildContent"].DeclaringType = Types["MudBlazor.MudCard"];
        Properties["MudBlazor.MudCard.Classname"].DeclaringType = Types["MudBlazor.MudCard"];
        Properties["MudBlazor.MudCard.Elevation"].DeclaringType = Types["MudBlazor.MudCard"];
        Properties["MudBlazor.MudCard.Outlined"].DeclaringType = Types["MudBlazor.MudCard"];
        Properties["MudBlazor.MudCard.Square"].DeclaringType = Types["MudBlazor.MudCard"];
        Properties["MudBlazor.MudCardActions.ChildContent"].DeclaringType = Types["MudBlazor.MudCardActions"];
        Properties["MudBlazor.MudCardActions.Classname"].DeclaringType = Types["MudBlazor.MudCardActions"];
        Properties["MudBlazor.MudCardContent.ChildContent"].DeclaringType = Types["MudBlazor.MudCardContent"];
        Properties["MudBlazor.MudCardContent.Classname"].DeclaringType = Types["MudBlazor.MudCardContent"];
        Properties["MudBlazor.MudCardHeader.CardHeaderActions"].DeclaringType = Types["MudBlazor.MudCardHeader"];
        Properties["MudBlazor.MudCardHeader.CardHeaderAvatar"].DeclaringType = Types["MudBlazor.MudCardHeader"];
        Properties["MudBlazor.MudCardHeader.CardHeaderContent"].DeclaringType = Types["MudBlazor.MudCardHeader"];
        Properties["MudBlazor.MudCardHeader.ChildContent"].DeclaringType = Types["MudBlazor.MudCardHeader"];
        Properties["MudBlazor.MudCardHeader.Classname"].DeclaringType = Types["MudBlazor.MudCardHeader"];
        Properties["MudBlazor.MudCardMedia.Classname"].DeclaringType = Types["MudBlazor.MudCardMedia"];
        Properties["MudBlazor.MudCardMedia.Height"].DeclaringType = Types["MudBlazor.MudCardMedia"];
        Properties["MudBlazor.MudCardMedia.Image"].DeclaringType = Types["MudBlazor.MudCardMedia"];
        Properties["MudBlazor.MudCardMedia.StyleString"].DeclaringType = Types["MudBlazor.MudCardMedia"];
        Properties["MudBlazor.MudCardMedia.Title"].DeclaringType = Types["MudBlazor.MudCardMedia"];
        Properties["MudBlazor.MudCarousel`1.ArrowsPosition"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.AutoCycle"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.AutoCycleTime"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.BulletsButtonsClassName"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.BulletsClass"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.BulletsColor"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.BulletsPosition"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.BulletTemplate"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.CheckedIcon"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.Classname"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.EnableSwipeGesture"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.NavigationButtonsClass"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.NavigationButtonsClassName"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.NextButtonTemplate"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.NextIcon"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.PreviousButtonTemplate"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.PreviousIcon"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.RightToLeft"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.ShowArrows"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.ShowBullets"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarousel`1.UncheckedIcon"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Properties["MudBlazor.MudCarouselItem.ChildContent"].DeclaringType = Types["MudBlazor.MudCarouselItem"];
        Properties["MudBlazor.MudCarouselItem.Classname"].DeclaringType = Types["MudBlazor.MudCarouselItem"];
        Properties["MudBlazor.MudCarouselItem.Color"].DeclaringType = Types["MudBlazor.MudCarouselItem"];
        Properties["MudBlazor.MudCarouselItem.CustomTransitionEnter"].DeclaringType = Types["MudBlazor.MudCarouselItem"];
        Properties["MudBlazor.MudCarouselItem.CustomTransitionExit"].DeclaringType = Types["MudBlazor.MudCarouselItem"];
        Properties["MudBlazor.MudCarouselItem.RightToLeft"].DeclaringType = Types["MudBlazor.MudCarouselItem"];
        Properties["MudBlazor.MudCarouselItem.Transition"].DeclaringType = Types["MudBlazor.MudCarouselItem"];
        Properties["MudBlazor.MudCarouselItem.Visible"].DeclaringType = Types["MudBlazor.MudCarouselItem"];
        Properties["MudBlazor.MudCategoryChartBase.ChartSeries"].DeclaringType = Types["MudBlazor.MudCategoryChartBase"];
        Properties["MudBlazor.MudCategoryChartBase.InputData"].DeclaringType = Types["MudBlazor.MudCategoryChartBase"];
        Properties["MudBlazor.MudCategoryChartBase.InputLabels"].DeclaringType = Types["MudBlazor.MudCategoryChartBase"];
        Properties["MudBlazor.MudCategoryChartBase.XAxisLabels"].DeclaringType = Types["MudBlazor.MudCategoryChartBase"];
        Properties["MudBlazor.MudChartBase.CanHideSeries"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.ChartOptions"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.ChartType"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.ChildContent"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.Classname"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.CustomGraphics"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.Height"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.LegendPosition"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.RightToLeft"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.SelectedIndex"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChartBase.SelectedIndex"].ChangeEvent = Events["MudBlazor.MudChartBase.SelectedIndexChanged"];
        Properties["MudBlazor.MudChartBase.Width"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Properties["MudBlazor.MudChat.ArrowPosition"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChat.ChatPosition"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChat.ChildContent"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChat.Classname"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChat.Color"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChat.Dense"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChat.Elevation"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChat.RightToLeft"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChat.Square"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChat.Variant"].DeclaringType = Types["MudBlazor.MudChat"];
        Properties["MudBlazor.MudChatBubble.ChildContent"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Properties["MudBlazor.MudChatBubble.Classname"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Properties["MudBlazor.MudChatBubble.Color"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Properties["MudBlazor.MudChatBubble.ElementReference"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Properties["MudBlazor.MudChatBubble.ParentArrowPosition"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Properties["MudBlazor.MudChatBubble.ParentColor"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Properties["MudBlazor.MudChatBubble.ParentVariant"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Properties["MudBlazor.MudChatBubble.Variant"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Properties["MudBlazor.MudChatFooter.ChildContent"].DeclaringType = Types["MudBlazor.MudChatFooter"];
        Properties["MudBlazor.MudChatFooter.Classname"].DeclaringType = Types["MudBlazor.MudChatFooter"];
        Properties["MudBlazor.MudChatFooter.Text"].DeclaringType = Types["MudBlazor.MudChatFooter"];
        Properties["MudBlazor.MudChatHeader.ChildContent"].DeclaringType = Types["MudBlazor.MudChatHeader"];
        Properties["MudBlazor.MudChatHeader.Classname"].DeclaringType = Types["MudBlazor.MudChatHeader"];
        Properties["MudBlazor.MudChatHeader.Name"].DeclaringType = Types["MudBlazor.MudChatHeader"];
        Properties["MudBlazor.MudChatHeader.Time"].DeclaringType = Types["MudBlazor.MudChatHeader"];
        Properties["MudBlazor.MudCheckBox`1.CheckedIcon"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudCheckBox`1.Classname"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudCheckBox`1.Dense"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudCheckBox`1.IconClassname"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudCheckBox`1.IndeterminateIcon"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudCheckBox`1.KeyboardEnabled"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudCheckBox`1.LabelClassname"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudCheckBox`1.TriState"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudCheckBox`1.UncheckedColor"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudCheckBox`1.UncheckedIcon"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Properties["MudBlazor.MudChip`1.AvatarContent"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.CheckedIcon"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.ChildContent"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Classname"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.CloseIcon"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Color"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Default"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Disabled"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Href"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Icon"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.IconColor"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.JsApiService"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Label"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Rel"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Ripple"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Selected"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Selected"].ChangeEvent = Events["MudBlazor.MudChip`1.SelectedChanged"];
        Properties["MudBlazor.MudChip`1.SelectedColor"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Size"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Target"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Text"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.UriHelper"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Value"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChip`1.Variant"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Properties["MudBlazor.MudChipSet`1.AllClosable"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.CheckedIcon"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.CheckMark"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.ChildContent"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.Classname"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.CloseIcon"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.Color"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.Comparer"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.Disabled"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.IconColor"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.Label"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.ReadOnly"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.Ripple"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.SelectedColor"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.SelectedValue"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.SelectedValue"].ChangeEvent = Events["MudBlazor.MudChipSet`1.SelectedValueChanged"];
        Properties["MudBlazor.MudChipSet`1.SelectedValues"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.SelectedValues"].ChangeEvent = Events["MudBlazor.MudChipSet`1.SelectedValuesChanged"];
        Properties["MudBlazor.MudChipSet`1.SelectionMode"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.Size"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudChipSet`1.Variant"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Properties["MudBlazor.MudCollapse.ChildContent"].DeclaringType = Types["MudBlazor.MudCollapse"];
        Properties["MudBlazor.MudCollapse.Classname"].DeclaringType = Types["MudBlazor.MudCollapse"];
        Properties["MudBlazor.MudCollapse.Expanded"].DeclaringType = Types["MudBlazor.MudCollapse"];
        Properties["MudBlazor.MudCollapse.Expanded"].ChangeEvent = Events["MudBlazor.MudCollapse.ExpandedChanged"];
        Properties["MudBlazor.MudCollapse.MaxHeight"].DeclaringType = Types["MudBlazor.MudCollapse"];
        Properties["MudBlazor.MudCollapse.Stylename"].DeclaringType = Types["MudBlazor.MudCollapse"];
        Properties["MudBlazor.MudColorPicker.CloseIcon"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ColorPickerMode"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ColorPickerView"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.DragEffect"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.GridIcon"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ImportExportIcon"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.Palette"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.PaletteIcon"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.PickerContent"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.RightToLeft"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ShowAlpha"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ShowColorField"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ShowInputs"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ShowModeSwitch"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ShowPreview"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ShowSliders"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.SpectrumIcon"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.ThrottleInterval"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.UpdateBindingIfOnlyHSLChanged"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.Value"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Properties["MudBlazor.MudColorPicker.Value"].ChangeEvent = Events["MudBlazor.MudColorPicker.ValueChanged"];
        Properties["MudBlazor.MudComponentBase.Class"].DeclaringType = Types["MudBlazor.MudComponentBase"];
        Properties["MudBlazor.MudComponentBase.FieldId"].DeclaringType = Types["MudBlazor.MudComponentBase"];
        Properties["MudBlazor.MudComponentBase.IsJSRuntimeAvailable"].DeclaringType = Types["MudBlazor.MudComponentBase"];
        Properties["MudBlazor.MudComponentBase.Logger"].DeclaringType = Types["MudBlazor.MudComponentBase"];
        Properties["MudBlazor.MudComponentBase.Style"].DeclaringType = Types["MudBlazor.MudComponentBase"];
        Properties["MudBlazor.MudComponentBase.Tag"].DeclaringType = Types["MudBlazor.MudComponentBase"];
        Properties["MudBlazor.MudComponentBase.UserAttributes"].DeclaringType = Types["MudBlazor.MudComponentBase"];
        Properties["MudBlazor.MudContainer.ChildContent"].DeclaringType = Types["MudBlazor.MudContainer"];
        Properties["MudBlazor.MudContainer.Classname"].DeclaringType = Types["MudBlazor.MudContainer"];
        Properties["MudBlazor.MudContainer.Fixed"].DeclaringType = Types["MudBlazor.MudContainer"];
        Properties["MudBlazor.MudContainer.Gutters"].DeclaringType = Types["MudBlazor.MudContainer"];
        Properties["MudBlazor.MudContainer.MaxWidth"].DeclaringType = Types["MudBlazor.MudContainer"];
        Properties["MudBlazor.MudContextualActionBar.Visible"].DeclaringType = Types["MudBlazor.MudContextualActionBar"];
        Properties["MudBlazor.MudDataGrid`1.ApplyDropClassesOnDragStarted"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Bordered"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Breakpoint"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.CanCancelEdit"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ChildRowContent"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Classname"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.CloneStrategy"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ColGroup"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ColumnResizeMode"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Columns"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ColumnsPanelReordering"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Comparer"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Culture"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.CurrentPage"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.CurrentPage"].ChangeEvent = Events["MudBlazor.MudDataGrid`1.CurrentPageChanged"];
        Properties["MudBlazor.MudDataGrid`1.Dense"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.DragDropColumnReordering"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.DragIndicatorIcon"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.DragIndicatorSize"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.DropAllowedClass"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.DropNotAllowedClass"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.EditDialogOptions"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.EditMode"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.EditTrigger"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Elevation"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Filterable"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.FilterCaseSensitivity"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.FilterDefinitions"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.FilteredItems"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.FilterMode"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.FilterTemplate"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.FixedFooter"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.FixedHeader"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.FootClassname"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.FooterClass"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Groupable"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.GroupClass"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.GroupClassFunc"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.GroupExpanded"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.GroupStyle"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.GroupStyleFunc"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.HasPager"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.HeadClassname"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Header"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.HeaderClass"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.HeaderFooterStyle"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Height"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Hideable"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.HorizontalScrollbar"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Hover"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Items"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ItemSize"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Loading"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.LoadingContent"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.LoadingProgressColor"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.MultiSelection"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.NoRecordsContent"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.numPages"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Outlined"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.OverscanCount"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.PagerContent"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.PagerStateHasChangedEvent"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.QuickFilter"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ReadOnly"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.RowClass"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.RowClassFunc"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.RowLoadingContent"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.RowsPerPage"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.RowsPerPage"].ChangeEvent = Events["MudBlazor.MudDataGrid`1.RowsPerPageChanged"];
        Properties["MudBlazor.MudDataGrid`1.RowStyle"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.RowStyleFunc"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.SelectedItem"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.SelectedItem"].ChangeEvent = Events["MudBlazor.MudDataGrid`1.SelectedItemChanged"];
        Properties["MudBlazor.MudDataGrid`1.SelectedItems"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.SelectedItems"].ChangeEvent = Events["MudBlazor.MudDataGrid`1.SelectedItemsChanged"];
        Properties["MudBlazor.MudDataGrid`1.Selection"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.SelectOnRowClick"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ServerData"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ServerItems"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ShowColumnOptions"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ShowFilterIcons"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ShowMenuIcon"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.SortDefinitions"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.SortMode"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Square"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Striped"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Stylename"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.TableClass"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.TableStyle"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.ToolBarContent"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Validator"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.Virtualize"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGrid`1.VirtualizeServerData"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Properties["MudBlazor.MudDataGridPager`1.AllItemsText"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDataGridPager`1.Classname"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDataGridPager`1.DataGrid"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDataGridPager`1.Disabled"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDataGridPager`1.InfoFormat"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDataGridPager`1.PageSizeOptions"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDataGridPager`1.PageSizeSelector"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDataGridPager`1.RowsPerPageString"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDataGridPager`1.ShowNavigation"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDataGridPager`1.ShowPageNumber"].DeclaringType = Types["MudBlazor.MudDataGridPager`1"];
        Properties["MudBlazor.MudDatePicker.Date"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Properties["MudBlazor.MudDatePicker.Date"].ChangeEvent = Events["MudBlazor.MudDatePicker.DateChanged"];
        Properties["MudBlazor.MudDatePicker.TimeProvider"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Properties["MudBlazor.MudDateRangePicker.AllowDisabledDatesInRange"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Properties["MudBlazor.MudDateRangePicker.DateRange"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Properties["MudBlazor.MudDateRangePicker.DateRange"].ChangeEvent = Events["MudBlazor.MudDateRangePicker.DateRangeChanged"];
        Properties["MudBlazor.MudDateRangePicker.InputContent"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Properties["MudBlazor.MudDateRangePicker.IsRange"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Properties["MudBlazor.MudDateRangePicker.PlaceholderEnd"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Properties["MudBlazor.MudDateRangePicker.PlaceholderStart"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Properties["MudBlazor.MudDateRangePicker.SeparatorIcon"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Properties["MudBlazor.MudDebouncedInput`1.DebounceInterval"].DeclaringType = Types["MudBlazor.MudDebouncedInput`1"];
        Properties["MudBlazor.MudDialog.ActionsClass"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.ActionsClassname"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.ContentClass"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.ContentClassname"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.ContentStyle"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.DefaultFocus"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.DialogActions"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.DialogContent"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.DialogService"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.Gutters"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.Options"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.TitleClass"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.TitleContent"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.Visible"].DeclaringType = Types["MudBlazor.MudDialog"];
        Properties["MudBlazor.MudDialog.Visible"].ChangeEvent = Events["MudBlazor.MudDialog.VisibleChanged"];
        Properties["MudBlazor.MudDialogContainer.BackgroundClassname"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogContainer.Classname"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogContainer.CloseIcon"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogContainer.Content"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogContainer.Id"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogContainer.Options"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogContainer.RightToLeft"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogContainer.Title"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogContainer.TitleClassname"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogContainer.TitleContent"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Properties["MudBlazor.MudDialogProvider.BackdropClick"].DeclaringType = Types["MudBlazor.MudDialogProvider"];
        Properties["MudBlazor.MudDialogProvider.BackgroundClass"].DeclaringType = Types["MudBlazor.MudDialogProvider"];
        Properties["MudBlazor.MudDialogProvider.CloseButton"].DeclaringType = Types["MudBlazor.MudDialogProvider"];
        Properties["MudBlazor.MudDialogProvider.CloseOnEscapeKey"].DeclaringType = Types["MudBlazor.MudDialogProvider"];
        Properties["MudBlazor.MudDialogProvider.FullWidth"].DeclaringType = Types["MudBlazor.MudDialogProvider"];
        Properties["MudBlazor.MudDialogProvider.MaxWidth"].DeclaringType = Types["MudBlazor.MudDialogProvider"];
        Properties["MudBlazor.MudDialogProvider.NoHeader"].DeclaringType = Types["MudBlazor.MudDialogProvider"];
        Properties["MudBlazor.MudDialogProvider.Position"].DeclaringType = Types["MudBlazor.MudDialogProvider"];
        Properties["MudBlazor.MudDivider.Absolute"].DeclaringType = Types["MudBlazor.MudDivider"];
        Properties["MudBlazor.MudDivider.Classname"].DeclaringType = Types["MudBlazor.MudDivider"];
        Properties["MudBlazor.MudDivider.DividerType"].DeclaringType = Types["MudBlazor.MudDivider"];
        Properties["MudBlazor.MudDivider.FlexItem"].DeclaringType = Types["MudBlazor.MudDivider"];
        Properties["MudBlazor.MudDivider.Light"].DeclaringType = Types["MudBlazor.MudDivider"];
        Properties["MudBlazor.MudDivider.Vertical"].DeclaringType = Types["MudBlazor.MudDivider"];
        Properties["MudBlazor.MudDragAndDropIndexChangedEventArgs.Index"].DeclaringType = Types["MudBlazor.MudDragAndDropIndexChangedEventArgs"];
        Properties["MudBlazor.MudDragAndDropIndexChangedEventArgs.OldZoneIdentifier"].DeclaringType = Types["MudBlazor.MudDragAndDropIndexChangedEventArgs"];
        Properties["MudBlazor.MudDragAndDropIndexChangedEventArgs.ZoneIdentifier"].DeclaringType = Types["MudBlazor.MudDragAndDropIndexChangedEventArgs"];
        Properties["MudBlazor.MudDragAndDropItemTransaction`1.CurrentZone"].DeclaringType = Types["MudBlazor.MudDragAndDropItemTransaction`1"];
        Properties["MudBlazor.MudDragAndDropItemTransaction`1.Index"].DeclaringType = Types["MudBlazor.MudDragAndDropItemTransaction`1"];
        Properties["MudBlazor.MudDragAndDropItemTransaction`1.Item"].DeclaringType = Types["MudBlazor.MudDragAndDropItemTransaction`1"];
        Properties["MudBlazor.MudDragAndDropItemTransaction`1.SourceIndex"].DeclaringType = Types["MudBlazor.MudDragAndDropItemTransaction`1"];
        Properties["MudBlazor.MudDragAndDropItemTransaction`1.SourceZoneIdentifier"].DeclaringType = Types["MudBlazor.MudDragAndDropItemTransaction`1"];
        Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.DestinationDropzoneIdentifier"].DeclaringType = Types["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1"];
        Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.DestinationIndex"].DeclaringType = Types["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1"];
        Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.Item"].DeclaringType = Types["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1"];
        Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.OriginatedDropzoneIdentifier"].DeclaringType = Types["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1"];
        Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.OriginIndex"].DeclaringType = Types["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1"];
        Properties["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1.Success"].DeclaringType = Types["MudBlazor.MudDragAndDropTransactionFinishedEventArgs`1"];
        Properties["MudBlazor.MudDrawer.Anchor"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Breakpoint"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.BrowserViewportService"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.ChildContent"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Classname"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.ClipMode"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Color"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Elevation"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Fixed"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Height"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.MiniWidth"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Open"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Open"].ChangeEvent = Events["MudBlazor.MudDrawer.OpenChanged"];
        Properties["MudBlazor.MudDrawer.OpenMiniOnHover"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Overlay"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.OverlayAutoClose"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.OverlayClass"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Stylename"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Variant"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawer.Width"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Properties["MudBlazor.MudDrawerContainer.ChildContent"].DeclaringType = Types["MudBlazor.MudDrawerContainer"];
        Properties["MudBlazor.MudDrawerContainer.Classname"].DeclaringType = Types["MudBlazor.MudDrawerContainer"];
        Properties["MudBlazor.MudDrawerContainer.Fixed"].DeclaringType = Types["MudBlazor.MudDrawerContainer"];
        Properties["MudBlazor.MudDrawerContainer.RightToLeft"].DeclaringType = Types["MudBlazor.MudDrawerContainer"];
        Properties["MudBlazor.MudDrawerContainer.Stylename"].DeclaringType = Types["MudBlazor.MudDrawerContainer"];
        Properties["MudBlazor.MudDrawerHeader.ChildContent"].DeclaringType = Types["MudBlazor.MudDrawerHeader"];
        Properties["MudBlazor.MudDrawerHeader.Classname"].DeclaringType = Types["MudBlazor.MudDrawerHeader"];
        Properties["MudBlazor.MudDrawerHeader.Dense"].DeclaringType = Types["MudBlazor.MudDrawerHeader"];
        Properties["MudBlazor.MudDrawerHeader.LinkToIndex"].DeclaringType = Types["MudBlazor.MudDrawerHeader"];
        Properties["MudBlazor.MudDropContainer`1.ApplyDropClassesOnDragStarted"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.CanDrop"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.CanDropClass"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.ChildContent"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.Classname"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.DisabledClass"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.DraggingClass"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.ItemDisabled"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.ItemDraggingClass"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.ItemRenderer"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.Items"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.ItemsClassSelector"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.ItemsSelector"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropContainer`1.NoDropClass"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Properties["MudBlazor.MudDropZone`1.AllowReorder"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.ApplyDropClassesOnDragStarted"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.CanDrop"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.CanDropClass"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.ChildContent"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.Classname"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.Container"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.DisabledClass"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.DraggingClass"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.Identifier"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.ItemDisabled"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.ItemDraggingClass"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.ItemRenderer"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.ItemsClassSelector"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.ItemsSelector"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.NoDropClass"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.OnlyZone"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDropZone`1.PlaceholderClassname"].DeclaringType = Types["MudBlazor.MudDropZone`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.ChildContent"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.Classname"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.Container"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.Disabled"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.DisabledClass"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.DraggingClass"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.HideContent"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.Index"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.Item"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicDropItem`1.ZoneIdentifier"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Properties["MudBlazor.MudDynamicTabs.AddIconClass"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudDynamicTabs.AddIconStyle"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudDynamicTabs.AddIconToolTip"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudDynamicTabs.AddTabIcon"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudDynamicTabs.CloseIconClass"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudDynamicTabs.CloseIconStyle"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudDynamicTabs.CloseIconToolTip"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudDynamicTabs.CloseTabIcon"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudDynamicTabs.InternalClassName"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudDynamicTabs.Render"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Properties["MudBlazor.MudElement.ChildContent"].DeclaringType = Types["MudBlazor.MudElement"];
        Properties["MudBlazor.MudElement.ClickPropagation"].DeclaringType = Types["MudBlazor.MudElement"];
        Properties["MudBlazor.MudElement.HtmlTag"].DeclaringType = Types["MudBlazor.MudElement"];
        Properties["MudBlazor.MudElement.PreventDefault"].DeclaringType = Types["MudBlazor.MudElement"];
        Properties["MudBlazor.MudElement.Ref"].DeclaringType = Types["MudBlazor.MudElement"];
        Properties["MudBlazor.MudElement.Ref"].ChangeEvent = Events["MudBlazor.MudElement.RefChanged"];
        Properties["MudBlazor.MudExpansionPanel.ChildContent"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.Classname"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.Dense"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.Disabled"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.Expanded"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.Expanded"].ChangeEvent = Events["MudBlazor.MudExpansionPanel.ExpandedChanged"];
        Properties["MudBlazor.MudExpansionPanel.Gutters"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.HeaderClass"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.HeaderClassname"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.HideIcon"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.Icon"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.MaxHeight"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.NextPanelExpanded"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.PanelContentClassname"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.Text"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanel.TitleContent"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Properties["MudBlazor.MudExpansionPanels.ChildContent"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Properties["MudBlazor.MudExpansionPanels.Classname"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Properties["MudBlazor.MudExpansionPanels.Dense"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Properties["MudBlazor.MudExpansionPanels.Elevation"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Properties["MudBlazor.MudExpansionPanels.Gutters"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Properties["MudBlazor.MudExpansionPanels.MultiExpansion"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Properties["MudBlazor.MudExpansionPanels.Outlined"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Properties["MudBlazor.MudExpansionPanels.Square"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Properties["MudBlazor.MudFab.Classname"].DeclaringType = Types["MudBlazor.MudFab"];
        Properties["MudBlazor.MudFab.Color"].DeclaringType = Types["MudBlazor.MudFab"];
        Properties["MudBlazor.MudFab.EndIcon"].DeclaringType = Types["MudBlazor.MudFab"];
        Properties["MudBlazor.MudFab.IconColor"].DeclaringType = Types["MudBlazor.MudFab"];
        Properties["MudBlazor.MudFab.IconSize"].DeclaringType = Types["MudBlazor.MudFab"];
        Properties["MudBlazor.MudFab.Label"].DeclaringType = Types["MudBlazor.MudFab"];
        Properties["MudBlazor.MudFab.Size"].DeclaringType = Types["MudBlazor.MudFab"];
        Properties["MudBlazor.MudFab.StartIcon"].DeclaringType = Types["MudBlazor.MudFab"];
        Properties["MudBlazor.MudField.Adornment"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.AdornmentClassname"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.AdornmentColor"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.AdornmentIcon"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.AdornmentText"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.ChildContent"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.Classname"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.Disabled"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.Error"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.ErrorText"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.FullWidth"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.HelperText"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.IconSize"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.InnerClassname"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.InnerPadding"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.InputControlClassname"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.Label"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.Margin"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.Typo"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.Underline"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudField.Variant"].DeclaringType = Types["MudBlazor.MudField"];
        Properties["MudBlazor.MudFileUpload`1.Accept"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.ActivatorContent"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.AppendMultipleFiles"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.Classname"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.Disabled"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.Files"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.Files"].ChangeEvent = Events["MudBlazor.MudFileUpload`1.FilesChanged"];
        Properties["MudBlazor.MudFileUpload`1.Hidden"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.InputClass"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.InputStyle"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.MaximumFileCount"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.SelectedTemplate"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFileUpload`1.SuppressOnChangeWhenInvalid"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Properties["MudBlazor.MudFlexBreak.Classname"].DeclaringType = Types["MudBlazor.MudFlexBreak"];
        Properties["MudBlazor.MudFocusTrap.ChildContent"].DeclaringType = Types["MudBlazor.MudFocusTrap"];
        Properties["MudBlazor.MudFocusTrap.Classname"].DeclaringType = Types["MudBlazor.MudFocusTrap"];
        Properties["MudBlazor.MudFocusTrap.DefaultFocus"].DeclaringType = Types["MudBlazor.MudFocusTrap"];
        Properties["MudBlazor.MudFocusTrap.Disabled"].DeclaringType = Types["MudBlazor.MudFocusTrap"];
        Properties["MudBlazor.MudForm.ChildContent"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.ChildForms"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.Classname"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.Disabled"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.Errors"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.Errors"].ChangeEvent = Events["MudBlazor.MudForm.ErrorsChanged"];
        Properties["MudBlazor.MudForm.IsTouched"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.IsTouched"].ChangeEvent = Events["MudBlazor.MudForm.IsTouchedChanged"];
        Properties["MudBlazor.MudForm.IsValid"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.IsValid"].ChangeEvent = Events["MudBlazor.MudForm.IsValidChanged"];
        Properties["MudBlazor.MudForm.Model"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.OverrideFieldValidation"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.ReadOnly"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.Spacing"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.SuppressImplicitSubmission"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.SuppressRenderingOnValidation"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.Validation"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudForm.ValidationDelay"].DeclaringType = Types["MudBlazor.MudForm"];
        Properties["MudBlazor.MudFormComponent`2.ConversionError"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.ConversionErrorMessage"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.Converter"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.Culture"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.Error"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.ErrorId"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.ErrorText"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.For"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.HasErrors"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.IsForNull"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.Required"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.RequiredError"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.Touched"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.Validation"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2.ValidationErrors"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionError"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ConversionErrorMessage"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Converter"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Culture"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Error"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorId"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ErrorText"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].For"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasErrors"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IsForNull"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Required"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RequiredError"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Touched"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validation"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidationErrors"].DeclaringTypeName = "MudFormComponent`2";
        Properties["MudBlazor.MudGlobal.Rounded"].DeclaringType = Types["MudBlazor.MudGlobal"];
        Properties["MudBlazor.MudGlobal.UnhandledExceptionHandler"].DeclaringType = Types["MudBlazor.MudGlobal"];
        Properties["MudBlazor.MudGlobal+ButtonDefaults.Color"].DeclaringType = Types["MudBlazor.MudGlobal+ButtonDefaults"];
        Properties["MudBlazor.MudGlobal+ButtonDefaults.Variant"].DeclaringType = Types["MudBlazor.MudGlobal+ButtonDefaults"];
        Properties["MudBlazor.MudGlobal+DialogDefaults.DefaultFocus"].DeclaringType = Types["MudBlazor.MudGlobal+DialogDefaults"];
        Properties["MudBlazor.MudGlobal+GridDefaults.Spacing"].DeclaringType = Types["MudBlazor.MudGlobal+GridDefaults"];
        Properties["MudBlazor.MudGlobal+InputDefaults.Margin"].DeclaringType = Types["MudBlazor.MudGlobal+InputDefaults"];
        Properties["MudBlazor.MudGlobal+InputDefaults.ShrinkLabel"].DeclaringType = Types["MudBlazor.MudGlobal+InputDefaults"];
        Properties["MudBlazor.MudGlobal+InputDefaults.Variant"].DeclaringType = Types["MudBlazor.MudGlobal+InputDefaults"];
        Properties["MudBlazor.MudGlobal+LinkDefaults.Color"].DeclaringType = Types["MudBlazor.MudGlobal+LinkDefaults"];
        Properties["MudBlazor.MudGlobal+LinkDefaults.Typo"].DeclaringType = Types["MudBlazor.MudGlobal+LinkDefaults"];
        Properties["MudBlazor.MudGlobal+LinkDefaults.Underline"].DeclaringType = Types["MudBlazor.MudGlobal+LinkDefaults"];
        Properties["MudBlazor.MudGlobal+MenuDefaults.HoverDelay"].DeclaringType = Types["MudBlazor.MudGlobal+MenuDefaults"];
        Properties["MudBlazor.MudGlobal+PopoverDefaults.Elevation"].DeclaringType = Types["MudBlazor.MudGlobal+PopoverDefaults"];
        Properties["MudBlazor.MudGlobal+StackDefaults.Spacing"].DeclaringType = Types["MudBlazor.MudGlobal+StackDefaults"];
        Properties["MudBlazor.MudGlobal+TooltipDefaults.Delay"].DeclaringType = Types["MudBlazor.MudGlobal+TooltipDefaults"];
        Properties["MudBlazor.MudGlobal+TooltipDefaults.Duration"].DeclaringType = Types["MudBlazor.MudGlobal+TooltipDefaults"];
        Properties["MudBlazor.MudGlobal+TransitionDefaults.Delay"].DeclaringType = Types["MudBlazor.MudGlobal+TransitionDefaults"];
        Properties["MudBlazor.MudGlobal+TransitionDefaults.Duration"].DeclaringType = Types["MudBlazor.MudGlobal+TransitionDefaults"];
        Properties["MudBlazor.MudGrid.ChildContent"].DeclaringType = Types["MudBlazor.MudGrid"];
        Properties["MudBlazor.MudGrid.Classname"].DeclaringType = Types["MudBlazor.MudGrid"];
        Properties["MudBlazor.MudGrid.Justify"].DeclaringType = Types["MudBlazor.MudGrid"];
        Properties["MudBlazor.MudGrid.Spacing"].DeclaringType = Types["MudBlazor.MudGrid"];
        Properties["MudBlazor.MudHeatMapCell.ChildContent"].DeclaringType = Types["MudBlazor.MudHeatMapCell"];
        Properties["MudBlazor.MudHeatMapCell.Column"].DeclaringType = Types["MudBlazor.MudHeatMapCell"];
        Properties["MudBlazor.MudHeatMapCell.Height"].DeclaringType = Types["MudBlazor.MudHeatMapCell"];
        Properties["MudBlazor.MudHeatMapCell.MudColor"].DeclaringType = Types["MudBlazor.MudHeatMapCell"];
        Properties["MudBlazor.MudHeatMapCell.Row"].DeclaringType = Types["MudBlazor.MudHeatMapCell"];
        Properties["MudBlazor.MudHeatMapCell.Value"].DeclaringType = Types["MudBlazor.MudHeatMapCell"];
        Properties["MudBlazor.MudHeatMapCell.Width"].DeclaringType = Types["MudBlazor.MudHeatMapCell"];
        Properties["MudBlazor.MudHidden.Breakpoint"].DeclaringType = Types["MudBlazor.MudHidden"];
        Properties["MudBlazor.MudHidden.BrowserViewportService"].DeclaringType = Types["MudBlazor.MudHidden"];
        Properties["MudBlazor.MudHidden.ChildContent"].DeclaringType = Types["MudBlazor.MudHidden"];
        Properties["MudBlazor.MudHidden.CurrentBreakpointFromProvider"].DeclaringType = Types["MudBlazor.MudHidden"];
        Properties["MudBlazor.MudHidden.Hidden"].DeclaringType = Types["MudBlazor.MudHidden"];
        Properties["MudBlazor.MudHidden.Hidden"].ChangeEvent = Events["MudBlazor.MudHidden.HiddenChanged"];
        Properties["MudBlazor.MudHidden.Invert"].DeclaringType = Types["MudBlazor.MudHidden"];
        Properties["MudBlazor.MudHighlighter.CaseSensitive"].DeclaringType = Types["MudBlazor.MudHighlighter"];
        Properties["MudBlazor.MudHighlighter.HighlightedText"].DeclaringType = Types["MudBlazor.MudHighlighter"];
        Properties["MudBlazor.MudHighlighter.HighlightedTexts"].DeclaringType = Types["MudBlazor.MudHighlighter"];
        Properties["MudBlazor.MudHighlighter.Markup"].DeclaringType = Types["MudBlazor.MudHighlighter"];
        Properties["MudBlazor.MudHighlighter.Text"].DeclaringType = Types["MudBlazor.MudHighlighter"];
        Properties["MudBlazor.MudHighlighter.UntilNextBoundary"].DeclaringType = Types["MudBlazor.MudHighlighter"];
        Properties["MudBlazor.MudIcon.ChildContent"].DeclaringType = Types["MudBlazor.MudIcon"];
        Properties["MudBlazor.MudIcon.Classname"].DeclaringType = Types["MudBlazor.MudIcon"];
        Properties["MudBlazor.MudIcon.Color"].DeclaringType = Types["MudBlazor.MudIcon"];
        Properties["MudBlazor.MudIcon.Disabled"].DeclaringType = Types["MudBlazor.MudIcon"];
        Properties["MudBlazor.MudIcon.Icon"].DeclaringType = Types["MudBlazor.MudIcon"];
        Properties["MudBlazor.MudIcon.Size"].DeclaringType = Types["MudBlazor.MudIcon"];
        Properties["MudBlazor.MudIcon.Title"].DeclaringType = Types["MudBlazor.MudIcon"];
        Properties["MudBlazor.MudIcon.ViewBox"].DeclaringType = Types["MudBlazor.MudIcon"];
        Properties["MudBlazor.MudIconButton.AsButton"].DeclaringType = Types["MudBlazor.MudIconButton"];
        Properties["MudBlazor.MudIconButton.ChildContent"].DeclaringType = Types["MudBlazor.MudIconButton"];
        Properties["MudBlazor.MudIconButton.Classname"].DeclaringType = Types["MudBlazor.MudIconButton"];
        Properties["MudBlazor.MudIconButton.Color"].DeclaringType = Types["MudBlazor.MudIconButton"];
        Properties["MudBlazor.MudIconButton.Edge"].DeclaringType = Types["MudBlazor.MudIconButton"];
        Properties["MudBlazor.MudIconButton.Icon"].DeclaringType = Types["MudBlazor.MudIconButton"];
        Properties["MudBlazor.MudIconButton.Size"].DeclaringType = Types["MudBlazor.MudIconButton"];
        Properties["MudBlazor.MudIconButton.Variant"].DeclaringType = Types["MudBlazor.MudIconButton"];
        Properties["MudBlazor.MudImage.Alt"].DeclaringType = Types["MudBlazor.MudImage"];
        Properties["MudBlazor.MudImage.Classname"].DeclaringType = Types["MudBlazor.MudImage"];
        Properties["MudBlazor.MudImage.Elevation"].DeclaringType = Types["MudBlazor.MudImage"];
        Properties["MudBlazor.MudImage.Fluid"].DeclaringType = Types["MudBlazor.MudImage"];
        Properties["MudBlazor.MudImage.Height"].DeclaringType = Types["MudBlazor.MudImage"];
        Properties["MudBlazor.MudImage.ObjectFit"].DeclaringType = Types["MudBlazor.MudImage"];
        Properties["MudBlazor.MudImage.ObjectPosition"].DeclaringType = Types["MudBlazor.MudImage"];
        Properties["MudBlazor.MudImage.Src"].DeclaringType = Types["MudBlazor.MudImage"];
        Properties["MudBlazor.MudImage.Width"].DeclaringType = Types["MudBlazor.MudImage"];
        Properties["MudBlazor.MudInput`1.AdornmentClassname"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.AutoGrow"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.ChildContent"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.Classname"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.Clearable"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.ClearButtonClassname"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.ClearIcon"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.ElementReference"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.HideSpinButtons"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.InputClassname"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.InputType"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.InputTypeString"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.MaxLines"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.NumericDownIcon"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1.NumericUpIcon"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentClassname"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AutoGrow"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ChildContent"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Classname"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ClearButtonClassname"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ClearIcon"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ElementReference"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HideSpinButtons"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputClassname"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputType"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputTypeString"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MaxLines"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].NumericDownIcon"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].NumericUpIcon"].DeclaringTypeName = "MudInput`1";
        Properties["MudBlazor.MudInputControl.ChildContent"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.Classname"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.CounterText"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.Disabled"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.Error"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.ErrorId"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.ErrorText"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.ForId"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.FullWidth"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.HelperClass"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.HelperContainer"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.HelperId"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.HelperText"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.HelperTextOnFocus"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.InputContent"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.Label"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.Margin"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.Required"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputControl.Variant"].DeclaringType = Types["MudBlazor.MudInputControl"];
        Properties["MudBlazor.MudInputLabel.ChildContent"].DeclaringType = Types["MudBlazor.MudInputLabel"];
        Properties["MudBlazor.MudInputLabel.Classname"].DeclaringType = Types["MudBlazor.MudInputLabel"];
        Properties["MudBlazor.MudInputLabel.Disabled"].DeclaringType = Types["MudBlazor.MudInputLabel"];
        Properties["MudBlazor.MudInputLabel.Error"].DeclaringType = Types["MudBlazor.MudInputLabel"];
        Properties["MudBlazor.MudInputLabel.ForId"].DeclaringType = Types["MudBlazor.MudInputLabel"];
        Properties["MudBlazor.MudInputLabel.Margin"].DeclaringType = Types["MudBlazor.MudInputLabel"];
        Properties["MudBlazor.MudInputLabel.Variant"].DeclaringType = Types["MudBlazor.MudInputLabel"];
        Properties["MudBlazor.MudItem.ChildContent"].DeclaringType = Types["MudBlazor.MudItem"];
        Properties["MudBlazor.MudItem.Classname"].DeclaringType = Types["MudBlazor.MudItem"];
        Properties["MudBlazor.MudItem.lg"].DeclaringType = Types["MudBlazor.MudItem"];
        Properties["MudBlazor.MudItem.md"].DeclaringType = Types["MudBlazor.MudItem"];
        Properties["MudBlazor.MudItem.sm"].DeclaringType = Types["MudBlazor.MudItem"];
        Properties["MudBlazor.MudItem.xl"].DeclaringType = Types["MudBlazor.MudItem"];
        Properties["MudBlazor.MudItem.xs"].DeclaringType = Types["MudBlazor.MudItem"];
        Properties["MudBlazor.MudItem.xxl"].DeclaringType = Types["MudBlazor.MudItem"];
        Properties["MudBlazor.MudItemDropInfo`1.DropzoneIdentifier"].DeclaringType = Types["MudBlazor.MudItemDropInfo`1"];
        Properties["MudBlazor.MudItemDropInfo`1.EqualityContract"].DeclaringType = Types["MudBlazor.MudItemDropInfo`1"];
        Properties["MudBlazor.MudItemDropInfo`1.IndexInZone"].DeclaringType = Types["MudBlazor.MudItemDropInfo`1"];
        Properties["MudBlazor.MudItemDropInfo`1.Item"].DeclaringType = Types["MudBlazor.MudItemDropInfo`1"];
        Properties["MudBlazor.MudLayout.Classname"].DeclaringType = Types["MudBlazor.MudLayout"];
        Properties["MudBlazor.MudLink.ChildContent"].DeclaringType = Types["MudBlazor.MudLink"];
        Properties["MudBlazor.MudLink.Classname"].DeclaringType = Types["MudBlazor.MudLink"];
        Properties["MudBlazor.MudLink.Color"].DeclaringType = Types["MudBlazor.MudLink"];
        Properties["MudBlazor.MudLink.Disabled"].DeclaringType = Types["MudBlazor.MudLink"];
        Properties["MudBlazor.MudLink.Href"].DeclaringType = Types["MudBlazor.MudLink"];
        Properties["MudBlazor.MudLink.Target"].DeclaringType = Types["MudBlazor.MudLink"];
        Properties["MudBlazor.MudLink.Typo"].DeclaringType = Types["MudBlazor.MudLink"];
        Properties["MudBlazor.MudLink.Underline"].DeclaringType = Types["MudBlazor.MudLink"];
        Properties["MudBlazor.MudList`1.CheckBoxColor"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.CheckedIcon"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.ChildContent"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.Classname"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.Color"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.Comparer"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.Dense"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.Disabled"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.Gutters"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.Padding"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.ParentList"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.ReadOnly"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.SelectedValue"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.SelectedValue"].ChangeEvent = Events["MudBlazor.MudList`1.SelectedValueChanged"];
        Properties["MudBlazor.MudList`1.SelectedValues"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.SelectedValues"].ChangeEvent = Events["MudBlazor.MudList`1.SelectedValuesChanged"];
        Properties["MudBlazor.MudList`1.SelectionMode"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudList`1.UncheckedIcon"].DeclaringType = Types["MudBlazor.MudList`1"];
        Properties["MudBlazor.MudListItem`1.AvatarContent"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.ChildContent"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Classname"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Dense"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Disabled"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Expanded"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Expanded"].ChangeEvent = Events["MudBlazor.MudListItem`1.ExpandedChanged"];
        Properties["MudBlazor.MudListItem`1.ExpandIconColor"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.ExpandLessIcon"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.ExpandMoreIcon"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.ForceLoad"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Gutters"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Href"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Icon"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.IconColor"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.IconSize"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Inset"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.MudList"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.NestedList"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.OnClickPreventDefault"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Ripple"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.SecondaryText"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Target"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Text"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.UriHelper"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListItem`1.Value"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Properties["MudBlazor.MudListSubheader.ChildContent"].DeclaringType = Types["MudBlazor.MudListSubheader"];
        Properties["MudBlazor.MudListSubheader.Classname"].DeclaringType = Types["MudBlazor.MudListSubheader"];
        Properties["MudBlazor.MudListSubheader.Gutters"].DeclaringType = Types["MudBlazor.MudListSubheader"];
        Properties["MudBlazor.MudListSubheader.Inset"].DeclaringType = Types["MudBlazor.MudListSubheader"];
        Properties["MudBlazor.MudLocalizer.Item"].DeclaringType = Types["MudBlazor.MudLocalizer"];
        Properties["MudBlazor.MudMainContent.ChildContent"].DeclaringType = Types["MudBlazor.MudMainContent"];
        Properties["MudBlazor.MudMainContent.Classname"].DeclaringType = Types["MudBlazor.MudMainContent"];
        Properties["MudBlazor.MudMask.AdornmentClassname"].DeclaringType = Types["MudBlazor.MudMask"];
        Properties["MudBlazor.MudMask.ChildContent"].DeclaringType = Types["MudBlazor.MudMask"];
        Properties["MudBlazor.MudMask.Classname"].DeclaringType = Types["MudBlazor.MudMask"];
        Properties["MudBlazor.MudMask.Clearable"].DeclaringType = Types["MudBlazor.MudMask"];
        Properties["MudBlazor.MudMask.ClearButtonClassname"].DeclaringType = Types["MudBlazor.MudMask"];
        Properties["MudBlazor.MudMask.ClearIcon"].DeclaringType = Types["MudBlazor.MudMask"];
        Properties["MudBlazor.MudMask.InputClassname"].DeclaringType = Types["MudBlazor.MudMask"];
        Properties["MudBlazor.MudMask.InputType"].DeclaringType = Types["MudBlazor.MudMask"];
        Properties["MudBlazor.MudMask.Mask"].DeclaringType = Types["MudBlazor.MudMask"];
        Properties["MudBlazor.MudMenu.ActivationEvent"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.ActivatorClassname"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.ActivatorContent"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.AnchorOrigin"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.AriaLabel"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.ChildContent"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Classname"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Color"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Dense"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Disabled"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.DropdownSettings"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.DropShadow"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.EndIcon"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.FullWidth"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Icon"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.IconColor"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Label"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.ListClass"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.ListClassname"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.LockScroll"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.MaxHeight"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Open"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Open"].ChangeEvent = Events["MudBlazor.MudMenu.OpenChanged"];
        Properties["MudBlazor.MudMenu.ParentMenu"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.PopoverClass"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.PopoverClassname"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.PositionAtCursor"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.RelativeWidth"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Ripple"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Size"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.StartIcon"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Stylename"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.TransformOrigin"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenu.Variant"].DeclaringType = Types["MudBlazor.MudMenu"];
        Properties["MudBlazor.MudMenuItem.ActivatesSubMenu"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.AutoClose"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.ChildContent"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.Classname"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.Disabled"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.ForceLoad"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.Href"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.Icon"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.IconColor"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.JsApiService"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.Label"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.ParentMenu"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.Target"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMenuItem.UriHelper"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Properties["MudBlazor.MudMessageBox.CancelButton"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.CancelText"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.Classname"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.MarkupMessage"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.Message"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.MessageContent"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.NoButton"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.NoText"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.Title"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.TitleContent"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.Visible"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.Visible"].ChangeEvent = Events["MudBlazor.MudMessageBox.VisibleChanged"];
        Properties["MudBlazor.MudMessageBox.YesButton"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudMessageBox.YesText"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Properties["MudBlazor.MudNavGroup.ButtonClassname"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.ButtonTabIndex"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.ChildContent"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.Classname"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.Disabled"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.Expanded"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.Expanded"].ChangeEvent = Events["MudBlazor.MudNavGroup.ExpandedChanged"];
        Properties["MudBlazor.MudNavGroup.ExpandIcon"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.ExpandIconClassname"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.HeaderClass"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.HideExpandIcon"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.Icon"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.IconClassname"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.IconColor"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.MaxHeight"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.Ripple"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.Title"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavGroup.TitleContent"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Properties["MudBlazor.MudNavLink.ActiveClass"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.Attributes"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.ChildContent"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.Classname"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.Disabled"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.ForceLoad"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.Href"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.Icon"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.IconClassname"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.IconColor"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.LinkClassname"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.Match"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.Ripple"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.TabIndex"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavLink.Target"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Properties["MudBlazor.MudNavMenu.Bordered"].DeclaringType = Types["MudBlazor.MudNavMenu"];
        Properties["MudBlazor.MudNavMenu.ChildContent"].DeclaringType = Types["MudBlazor.MudNavMenu"];
        Properties["MudBlazor.MudNavMenu.Classname"].DeclaringType = Types["MudBlazor.MudNavMenu"];
        Properties["MudBlazor.MudNavMenu.Color"].DeclaringType = Types["MudBlazor.MudNavMenu"];
        Properties["MudBlazor.MudNavMenu.Dense"].DeclaringType = Types["MudBlazor.MudNavMenu"];
        Properties["MudBlazor.MudNavMenu.Margin"].DeclaringType = Types["MudBlazor.MudNavMenu"];
        Properties["MudBlazor.MudNavMenu.Rounded"].DeclaringType = Types["MudBlazor.MudNavMenu"];
        Properties["MudBlazor.MudNumericField`1.Classname"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudNumericField`1.Clearable"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudNumericField`1.ClearIcon"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudNumericField`1.HideSpinButtons"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudNumericField`1.InputMode"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudNumericField`1.InvertMouseWheel"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudNumericField`1.Max"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudNumericField`1.Min"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudNumericField`1.Pattern"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudNumericField`1.Step"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Properties["MudBlazor.MudOverlay.Absolute"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.AutoClose"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.ChildContent"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.Classname"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.DarkBackground"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.LightBackground"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.LockScroll"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.LockScrollClass"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.ScrimClassname"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.ScrollManager"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.Styles"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.Visible"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudOverlay.Visible"].ChangeEvent = Events["MudBlazor.MudOverlay.VisibleChanged"];
        Properties["MudBlazor.MudOverlay.ZIndex"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Properties["MudBlazor.MudPageContentNavigation.ActivateFirstSectionAsDefault"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Properties["MudBlazor.MudPageContentNavigation.ActiveSection"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Properties["MudBlazor.MudPageContentNavigation.ExpandBehaviour"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Properties["MudBlazor.MudPageContentNavigation.Headline"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Properties["MudBlazor.MudPageContentNavigation.HierarchyMapper"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Properties["MudBlazor.MudPageContentNavigation.ScrollContainerSelector"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Properties["MudBlazor.MudPageContentNavigation.SectionClassSelector"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Properties["MudBlazor.MudPageContentNavigation.Sections"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Properties["MudBlazor.MudPageContentSection.Active"].DeclaringType = Types["MudBlazor.MudPageContentSection"];
        Properties["MudBlazor.MudPageContentSection.Id"].DeclaringType = Types["MudBlazor.MudPageContentSection"];
        Properties["MudBlazor.MudPageContentSection.Level"].DeclaringType = Types["MudBlazor.MudPageContentSection"];
        Properties["MudBlazor.MudPageContentSection.LevelSortingValue"].DeclaringType = Types["MudBlazor.MudPageContentSection"];
        Properties["MudBlazor.MudPageContentSection.Parent"].DeclaringType = Types["MudBlazor.MudPageContentSection"];
        Properties["MudBlazor.MudPageContentSection.Title"].DeclaringType = Types["MudBlazor.MudPageContentSection"];
        Properties["MudBlazor.MudPagination.BeforeIcon"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.BoundaryCount"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.Color"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.Count"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.Disabled"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.DropShadow"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.FirstIcon"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.LastIcon"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.MiddleCount"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.NextIcon"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.Rectangular"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.RightToLeft"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.Selected"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.Selected"].ChangeEvent = Events["MudBlazor.MudPagination.SelectedChanged"];
        Properties["MudBlazor.MudPagination.ShowFirstButton"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.ShowLastButton"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.ShowNextButton"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.ShowPageButtons"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.ShowPreviousButton"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.Size"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPagination.Variant"].DeclaringType = Types["MudBlazor.MudPagination"];
        Properties["MudBlazor.MudPaper.ChildContent"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.Classname"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.Elevation"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.Height"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.MaxHeight"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.MaxWidth"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.MinHeight"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.MinWidth"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.Outlined"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.Square"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.Stylename"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPaper.Width"].DeclaringType = Types["MudBlazor.MudPaper"];
        Properties["MudBlazor.MudPicker`1.ActionsClass"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.ActionsClassname"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Adornment"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.AdornmentAriaLabel"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.AdornmentColor"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.AdornmentIcon"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.AnchorOrigin"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Clearable"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Color"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Disabled"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Editable"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Elevation"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.HelperText"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.HelperTextOnFocus"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.IconSize"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.ImmediateText"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.InputContent"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Label"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Margin"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Mask"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Open"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Orientation"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.OverflowBehavior"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PickerActions"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PickerClassname"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PickerContainerClassname"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PickerContent"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PickerInlineClassname"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PickerInputClassname"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PickerPaperClassname"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PickerPaperStylename"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PickerVariant"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Placeholder"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.PopoverClassname"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.ReadOnly"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.RelativeWidth"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Render"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Rounded"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.ShowToolbar"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Square"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Text"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Text"].ChangeEvent = Events["MudBlazor.MudPicker`1.TextChanged"];
        Properties["MudBlazor.MudPicker`1.ToolbarClass"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.TransformOrigin"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Underline"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1.Variant"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ActionsClass"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ActionsClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Adornment"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AdornmentAriaLabel"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AdornmentColor"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AdornmentIcon"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AnchorOrigin"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Clearable"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Color"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Disabled"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Editable"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Elevation"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].HelperText"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].HelperTextOnFocus"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].IconSize"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ImmediateText"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].InputContent"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Label"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Margin"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Mask"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Open"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Orientation"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OverflowBehavior"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerActions"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerContainerClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerInlineClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerInputClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerPaperClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerPaperStylename"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerVariant"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Placeholder"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PopoverClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ReadOnly"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].RelativeWidth"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Render"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Rounded"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ShowToolbar"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Square"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Text"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Text"].ChangeEvent = Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].TextChanged"];
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ToolbarClass"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].TransformOrigin"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Underline"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Variant"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClass"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AnchorOrigin"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Color"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Editable"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Elevation"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ImmediateText"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputContent"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Mask"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Open"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Orientation"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OverflowBehavior"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerActions"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerContainerClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInlineClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInputClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperStylename"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerVariant"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PopoverClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RelativeWidth"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Render"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rounded"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShowToolbar"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Square"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"].ChangeEvent = Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"];
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToolbarClass"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TransformOrigin"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClass"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ActionsClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Adornment"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentAriaLabel"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentColor"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AdornmentIcon"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].AnchorOrigin"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Clearable"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Color"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Disabled"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Editable"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Elevation"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperText"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HelperTextOnFocus"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].IconSize"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ImmediateText"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InputContent"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Label"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Margin"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Mask"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Open"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Orientation"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OverflowBehavior"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerActions"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerContainerClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInlineClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerInputClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerPaperStylename"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerVariant"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Placeholder"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PopoverClassname"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadOnly"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RelativeWidth"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Render"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rounded"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ShowToolbar"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Square"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"].ChangeEvent = Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"];
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToolbarClass"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TransformOrigin"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Underline"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Variant"].DeclaringTypeName = "MudPicker`1";
        Properties["MudBlazor.MudPickerContent.ChildContent"].DeclaringType = Types["MudBlazor.MudPickerContent"];
        Properties["MudBlazor.MudPickerContent.Classname"].DeclaringType = Types["MudBlazor.MudPickerContent"];
        Properties["MudBlazor.MudPickerToolbar.ChildContent"].DeclaringType = Types["MudBlazor.MudPickerToolbar"];
        Properties["MudBlazor.MudPickerToolbar.Classname"].DeclaringType = Types["MudBlazor.MudPickerToolbar"];
        Properties["MudBlazor.MudPickerToolbar.Color"].DeclaringType = Types["MudBlazor.MudPickerToolbar"];
        Properties["MudBlazor.MudPickerToolbar.Orientation"].DeclaringType = Types["MudBlazor.MudPickerToolbar"];
        Properties["MudBlazor.MudPickerToolbar.PickerVariant"].DeclaringType = Types["MudBlazor.MudPickerToolbar"];
        Properties["MudBlazor.MudPickerToolbar.ShowToolbar"].DeclaringType = Types["MudBlazor.MudPickerToolbar"];
        Properties["MudBlazor.MudPopover.AnchorOrigin"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.Delay"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.DropShadow"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.Duration"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.Elevation"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.Fixed"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.MaxHeight"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.OverflowBehavior"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.Paper"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.RelativeWidth"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.RightToLeft"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.Square"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopover.TransformOrigin"].DeclaringType = Types["MudBlazor.MudPopover"];
        Properties["MudBlazor.MudPopoverBase.ChildContent"].DeclaringType = Types["MudBlazor.MudPopoverBase"];
        Properties["MudBlazor.MudPopoverBase.Id"].DeclaringType = Types["MudBlazor.MudPopoverBase"];
        Properties["MudBlazor.MudPopoverBase.Open"].DeclaringType = Types["MudBlazor.MudPopoverBase"];
        Properties["MudBlazor.MudPopoverBase.PopoverService"].DeclaringType = Types["MudBlazor.MudPopoverBase"];
        Properties["MudBlazor.MudPopoverProvider.Enabled"].DeclaringType = Types["MudBlazor.MudPopoverProvider"];
        Properties["MudBlazor.MudProgressCircular.Classname"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressCircular.Color"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressCircular.Indeterminate"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressCircular.Max"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressCircular.Min"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressCircular.Rounded"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressCircular.Size"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressCircular.StrokeWidth"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressCircular.SvgClassname"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressCircular.Value"].DeclaringType = Types["MudBlazor.MudProgressCircular"];
        Properties["MudBlazor.MudProgressLinear.Buffer"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.BufferPercent"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.BufferValue"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.ChildContent"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Classname"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Color"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Indeterminate"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Max"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Min"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Rounded"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Size"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Striped"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Value"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.ValuePercent"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudProgressLinear.Vertical"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Properties["MudBlazor.MudRadio`1.CheckedIcon"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Properties["MudBlazor.MudRadio`1.Classname"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Properties["MudBlazor.MudRadio`1.Dense"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Properties["MudBlazor.MudRadio`1.IconClassname"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Properties["MudBlazor.MudRadio`1.IndeterminateIcon"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Properties["MudBlazor.MudRadio`1.LabelClassname"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Properties["MudBlazor.MudRadio`1.UncheckedColor"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Properties["MudBlazor.MudRadio`1.UncheckedIcon"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Properties["MudBlazor.MudRadioGroup`1.ChildContent"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Properties["MudBlazor.MudRadioGroup`1.Classname"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Properties["MudBlazor.MudRadioGroup`1.Disabled"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Properties["MudBlazor.MudRadioGroup`1.InputClass"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Properties["MudBlazor.MudRadioGroup`1.InputStyle"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Properties["MudBlazor.MudRadioGroup`1.Name"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Properties["MudBlazor.MudRadioGroup`1.ReadOnly"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Properties["MudBlazor.MudRadioGroup`1.Value"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Properties["MudBlazor.MudRadioGroup`1.Value"].ChangeEvent = Events["MudBlazor.MudRadioGroup`1.ValueChanged"];
        Properties["MudBlazor.MudRangeInput`1.AdornmentClassname"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.ChildContent"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.Classname"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.Clearable"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.ClearButtonClassname"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.InputClassname"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.InputType"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.InputTypeString"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.PlaceholderEnd"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.PlaceholderStart"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.SeparatorIcon"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.TextEnd"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRangeInput`1.TextStart"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Properties["MudBlazor.MudRating.ClassName"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.Color"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.Disabled"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.EmptyIcon"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.EmptyIconColor"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.FullIcon"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.FullIconColor"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.MaxValue"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.Name"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.RatingItemsClass"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.RatingItemsStyle"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.ReadOnly"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.Ripple"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.SelectedValue"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRating.SelectedValue"].ChangeEvent = Events["MudBlazor.MudRating.SelectedValueChanged"];
        Properties["MudBlazor.MudRating.Size"].DeclaringType = Types["MudBlazor.MudRating"];
        Properties["MudBlazor.MudRatingItem.ClassName"].DeclaringType = Types["MudBlazor.MudRatingItem"];
        Properties["MudBlazor.MudRatingItem.Color"].DeclaringType = Types["MudBlazor.MudRatingItem"];
        Properties["MudBlazor.MudRatingItem.Disabled"].DeclaringType = Types["MudBlazor.MudRatingItem"];
        Properties["MudBlazor.MudRatingItem.ItemValue"].DeclaringType = Types["MudBlazor.MudRatingItem"];
        Properties["MudBlazor.MudRatingItem.ReadOnly"].DeclaringType = Types["MudBlazor.MudRatingItem"];
        Properties["MudBlazor.MudRatingItem.Ripple"].DeclaringType = Types["MudBlazor.MudRatingItem"];
        Properties["MudBlazor.MudRatingItem.Size"].DeclaringType = Types["MudBlazor.MudRatingItem"];
        Properties["MudBlazor.MudRender.ChildContent"].DeclaringType = Types["MudBlazor.MudRender"];
        Properties["MudBlazor.MudRTLProvider.ChildContent"].DeclaringType = Types["MudBlazor.MudRTLProvider"];
        Properties["MudBlazor.MudRTLProvider.Classname"].DeclaringType = Types["MudBlazor.MudRTLProvider"];
        Properties["MudBlazor.MudRTLProvider.RightToLeft"].DeclaringType = Types["MudBlazor.MudRTLProvider"];
        Properties["MudBlazor.MudScrollToTop.ChildContent"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Properties["MudBlazor.MudScrollToTop.Classname"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Properties["MudBlazor.MudScrollToTop.HiddenCssClass"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Properties["MudBlazor.MudScrollToTop.ScrollBehavior"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Properties["MudBlazor.MudScrollToTop.Selector"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Properties["MudBlazor.MudScrollToTop.TopOffset"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Properties["MudBlazor.MudScrollToTop.Visible"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Properties["MudBlazor.MudScrollToTop.VisibleCssClass"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Properties["MudBlazor.MudSelect`1.AnchorOrigin"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.CanRenderValue"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.CheckedIcon"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.ChildContent"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.Classname"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.Clearable"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.ClearIcon"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.CloseIcon"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.Comparer"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.Delimiter"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.Dense"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.DropdownSettings"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.IndeterminateIcon"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.InputClass"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.InputClassname"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.IsValueInList"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.Items"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.ListClass"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.LockScroll"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.MaxHeight"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.MultiSelection"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.MultiSelectionTextFunc"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.OpenIcon"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.OuterClass"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.OuterClassname"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.PopoverClass"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.QuickSearchInterval"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.RelativeWidth"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.SelectAll"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.SelectAllCheckBoxIcon"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.SelectAllText"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.SelectedValues"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.SelectedValues"].ChangeEvent = Events["MudBlazor.MudSelect`1.SelectedValuesChanged"];
        Properties["MudBlazor.MudSelect`1.Strict"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.ToStringFunc"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.TransformOrigin"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelect`1.UncheckedIcon"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Properties["MudBlazor.MudSelectItem`1.CheckBoxIcon"].DeclaringType = Types["MudBlazor.MudSelectItem`1"];
        Properties["MudBlazor.MudSelectItem`1.ChildContent"].DeclaringType = Types["MudBlazor.MudSelectItem`1"];
        Properties["MudBlazor.MudSelectItem`1.Disabled"].DeclaringType = Types["MudBlazor.MudSelectItem`1"];
        Properties["MudBlazor.MudSelectItem`1.DisplayString"].DeclaringType = Types["MudBlazor.MudSelectItem`1"];
        Properties["MudBlazor.MudSelectItem`1.MultiSelection"].DeclaringType = Types["MudBlazor.MudSelectItem`1"];
        Properties["MudBlazor.MudSelectItem`1.Value"].DeclaringType = Types["MudBlazor.MudSelectItem`1"];
        Properties["MudBlazor.MudSimpleTable.Bordered"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSimpleTable.ChildContent"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSimpleTable.Classname"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSimpleTable.Dense"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSimpleTable.Elevation"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSimpleTable.FixedHeader"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSimpleTable.Hover"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSimpleTable.Outlined"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSimpleTable.Square"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSimpleTable.Striped"].DeclaringType = Types["MudBlazor.MudSimpleTable"];
        Properties["MudBlazor.MudSkeleton.Animation"].DeclaringType = Types["MudBlazor.MudSkeleton"];
        Properties["MudBlazor.MudSkeleton.Classname"].DeclaringType = Types["MudBlazor.MudSkeleton"];
        Properties["MudBlazor.MudSkeleton.Height"].DeclaringType = Types["MudBlazor.MudSkeleton"];
        Properties["MudBlazor.MudSkeleton.SkeletonType"].DeclaringType = Types["MudBlazor.MudSkeleton"];
        Properties["MudBlazor.MudSkeleton.Stylename"].DeclaringType = Types["MudBlazor.MudSkeleton"];
        Properties["MudBlazor.MudSkeleton.Width"].DeclaringType = Types["MudBlazor.MudSkeleton"];
        Properties["MudBlazor.MudSlider`1.ChildContent"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Classname"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Color"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Culture"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Disabled"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Immediate"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Max"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Min"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.NullableValue"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.NullableValue"].ChangeEvent = Events["MudBlazor.MudSlider`1.NullableValueChanged"];
        Properties["MudBlazor.MudSlider`1.Size"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Step"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.TickMarkLabels"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.TickMarks"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Value"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Value"].ChangeEvent = Events["MudBlazor.MudSlider`1.ValueChanged"];
        Properties["MudBlazor.MudSlider`1.ValueLabel"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.ValueLabelContent"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.ValueLabelFormat"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Variant"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSlider`1.Vertical"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Properties["MudBlazor.MudSnackbarElement.CloseIcon"].DeclaringType = Types["MudBlazor.MudSnackbarElement"];
        Properties["MudBlazor.MudSnackbarElement.Snackbar"].DeclaringType = Types["MudBlazor.MudSnackbarElement"];
        Properties["MudBlazor.MudSnackbarProvider.Classname"].DeclaringType = Types["MudBlazor.MudSnackbarProvider"];
        Properties["MudBlazor.MudSnackbarProvider.RightToLeft"].DeclaringType = Types["MudBlazor.MudSnackbarProvider"];
        Properties["MudBlazor.MudSnackbarProvider.Snackbar"].DeclaringType = Types["MudBlazor.MudSnackbarProvider"];
        Properties["MudBlazor.MudStack.AlignItems"].DeclaringType = Types["MudBlazor.MudStack"];
        Properties["MudBlazor.MudStack.ChildContent"].DeclaringType = Types["MudBlazor.MudStack"];
        Properties["MudBlazor.MudStack.Classname"].DeclaringType = Types["MudBlazor.MudStack"];
        Properties["MudBlazor.MudStack.Justify"].DeclaringType = Types["MudBlazor.MudStack"];
        Properties["MudBlazor.MudStack.Reverse"].DeclaringType = Types["MudBlazor.MudStack"];
        Properties["MudBlazor.MudStack.Row"].DeclaringType = Types["MudBlazor.MudStack"];
        Properties["MudBlazor.MudStack.Spacing"].DeclaringType = Types["MudBlazor.MudStack"];
        Properties["MudBlazor.MudStack.StretchItems"].DeclaringType = Types["MudBlazor.MudStack"];
        Properties["MudBlazor.MudStack.Wrap"].DeclaringType = Types["MudBlazor.MudStack"];
        Properties["MudBlazor.MudStep.ChildContent"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStep.Completed"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStep.Completed"].ChangeEvent = Events["MudBlazor.MudStep.CompletedChanged"];
        Properties["MudBlazor.MudStep.CompletedStepColor"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStep.Disabled"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStep.Disabled"].ChangeEvent = Events["MudBlazor.MudStep.DisabledChanged"];
        Properties["MudBlazor.MudStep.ErrorStepColor"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStep.HasError"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStep.HasError"].ChangeEvent = Events["MudBlazor.MudStep.HasErrorChanged"];
        Properties["MudBlazor.MudStep.IsActive"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStep.SecondaryText"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStep.Skippable"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStep.Title"].DeclaringType = Types["MudBlazor.MudStep"];
        Properties["MudBlazor.MudStepper.ActionContent"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.ActiveIndex"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.ActiveIndex"].ChangeEvent = Events["MudBlazor.MudStepper.ActiveIndexChanged"];
        Properties["MudBlazor.MudStepper.ActiveStep"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.CanGoToNextStep"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.CenterLabels"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.ChildContent"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.Classname"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.CompleteButtonIcon"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.CompletedContent"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.CompletedStepColor"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.ConnectorTemplate"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.CurrentStepColor"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.ErrorStepColor"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.IsCompleted"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.IsCurrentStepSkippable"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.LabelTemplate"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.NavClass"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.NavClassname"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.NextButtonIcon"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.NonLinear"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.OnPreviewInteraction"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.PreviousButtonIcon"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.PreviousStepEnabled"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.ResetButtonIcon"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.Ripple"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.ScrollableNavigation"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.ShowCompleteInsteadOfNext"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.ShowResetButton"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.SkipButtonIcon"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.StepClass"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.StepCompleteIcon"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.StepErrorIcon"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.Steps"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.StepStyle"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.TitleTemplate"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudStepper.Vertical"].DeclaringType = Types["MudBlazor.MudStepper"];
        Properties["MudBlazor.MudSwipeArea.ChildContent"].DeclaringType = Types["MudBlazor.MudSwipeArea"];
        Properties["MudBlazor.MudSwipeArea.Classname"].DeclaringType = Types["MudBlazor.MudSwipeArea"];
        Properties["MudBlazor.MudSwipeArea.PreventDefault"].DeclaringType = Types["MudBlazor.MudSwipeArea"];
        Properties["MudBlazor.MudSwipeArea.Sensitivity"].DeclaringType = Types["MudBlazor.MudSwipeArea"];
        Properties["MudBlazor.MudSwitch`1.Classname"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Properties["MudBlazor.MudSwitch`1.LabelClassname"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Properties["MudBlazor.MudSwitch`1.SpanClassname"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Properties["MudBlazor.MudSwitch`1.SwitchClassname"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Properties["MudBlazor.MudSwitch`1.ThumbClassname"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Properties["MudBlazor.MudSwitch`1.ThumbIcon"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Properties["MudBlazor.MudSwitch`1.ThumbIconColor"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Properties["MudBlazor.MudSwitch`1.TrackClassname"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Properties["MudBlazor.MudSwitch`1.UncheckedColor"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Properties["MudBlazor.MudTable`1.ChildRowContent"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.Columns"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.Comparer"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.Context"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.CurrentPageItems"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.Def"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.Filter"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.FilteredItems"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.GroupBy"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.GroupFooterClass"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.GroupFooterStyle"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.GroupFooterTemplate"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.GroupHeaderClass"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.GroupHeaderStyle"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.GroupHeaderTemplate"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.HorizontalScrollbar"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.Items"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.LoadingContent"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.NoRecordsContent"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.NumPages"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.RowClassFunc"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.RowEditableFunc"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.RowEditingTemplate"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.RowStyleFunc"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.RowTemplate"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.SelectedItem"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.SelectedItem"].ChangeEvent = Events["MudBlazor.MudTable`1.SelectedItemChanged"];
        Properties["MudBlazor.MudTable`1.SelectedItems"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.SelectedItems"].ChangeEvent = Events["MudBlazor.MudTable`1.SelectedItemsChanged"];
        Properties["MudBlazor.MudTable`1.ServerData"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTable`1.TableContext"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Properties["MudBlazor.MudTableBase.AllowUnsorted"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.ApplyButtonPosition"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Bordered"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Breakpoint"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.CanCancelEdit"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.CancelEditIcon"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.CancelEditTooltip"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Classname"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.ColGroup"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.CommitEditIcon"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.CommitEditTooltip"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.ContainerClass"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.ContainerStyle"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.CurrentPage"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.CurrentPage"].ChangeEvent = Events["MudBlazor.MudTableBase.CurrentPageChanged"];
        Properties["MudBlazor.MudTableBase.CustomFooter"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.CustomHeader"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Dense"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.EditButtonContent"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.EditButtonPosition"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.EditTrigger"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Elevation"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.FixedFooter"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.FixedHeader"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.FootClassname"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.FooterClass"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.FooterContent"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.HeadClassname"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.HeaderClass"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.HeaderContent"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Height"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Hover"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.IsEditRowSwitchingBlocked"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.ItemSize"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Loading"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.LoadingProgressColor"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.MultiSelection"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.NumPages"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Outlined"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.OverscanCount"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.PagerContent"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.ReadOnly"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.RowClass"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.RowEditCancel"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.RowEditCommit"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.RowEditPreview"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.RowsPerPage"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.RowsPerPage"].ChangeEvent = Events["MudBlazor.MudTableBase.RowsPerPageChanged"];
        Properties["MudBlazor.MudTableBase.RowStyle"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.SelectionChangeable"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.SelectOnRowClick"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.SortLabel"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Square"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Striped"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.TableContainerClass"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.TableContainerStyle"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.TableContext"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.ToolBarContent"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.TotalItems"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Validator"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableBase.Virtualize"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Properties["MudBlazor.MudTableGroupRow`1.ActionsStylename"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.Checkable"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.Checked"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.CollapseIcon"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.Context"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.Expanded"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.ExpandIcon"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.FooterClass"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.FooterClassname"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.FooterStyle"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.FooterTemplate"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.GroupDefinition"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.HeaderClass"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.HeaderClassname"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.HeaderStyle"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.HeaderTemplate"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.Items"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTableGroupRow`1.SelectionChangeable"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Properties["MudBlazor.MudTablePager.AllItemsText"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.BeforeIcon"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.Classname"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.Context"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.FirstIcon"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.HidePageNumber"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.HidePagination"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.HideRowsPerPage"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.HorizontalAlignment"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.InfoFormat"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.LastIcon"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.NextIcon"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.PageSizeOptions"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.PaginationClassname"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.RightToLeft"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.RowsPerPageString"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTablePager.Table"].DeclaringType = Types["MudBlazor.MudTablePager"];
        Properties["MudBlazor.MudTableSortLabel`1.AppendIcon"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.ChildContent"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.Classname"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.Context"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.Enabled"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.InitialDirection"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.SortBy"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.SortDirection"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.SortDirection"].ChangeEvent = Events["MudBlazor.MudTableSortLabel`1.SortDirectionChanged"];
        Properties["MudBlazor.MudTableSortLabel`1.SortIcon"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.SortLabel"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.Table"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTableSortLabel`1.TableContext"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Properties["MudBlazor.MudTabPanel.BadgeColor"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.BadgeData"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.BadgeDot"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.ChildContent"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.Disabled"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.Icon"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.IconColor"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.ID"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.ShowCloseIcon"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.TabContent"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.TabWrapperContent"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.Text"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabPanel.ToolTip"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Properties["MudBlazor.MudTabs.ActivePanel"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.ActivePanelIndex"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.ActivePanelIndex"].ChangeEvent = Events["MudBlazor.MudTabs.ActivePanelIndexChanged"];
        Properties["MudBlazor.MudTabs.ActiveTabClass"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.AlwaysShowScrollButtons"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.ApplyEffectsToContainer"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Border"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Centered"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.ChildContent"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Color"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Elevation"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Header"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.HeaderPosition"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.HideSlider"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.IconColor"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.InternalClassName"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.KeepPanelsAlive"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.MaxHeight"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.MaxHeightStyles"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.MinimumTabWidth"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.NextIcon"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.OnPreviewInteraction"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Outlined"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.PanelClass"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Panels"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.PanelsClassnames"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Position"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.PrePanelContent"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.PrevIcon"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.RightToLeft"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Ripple"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.Rounded"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.ScrollIconColor"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.SliderAnimation"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.SliderClass"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.SliderColor"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.SliderStyle"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.TabBarClassnames"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.TabHeaderClass"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.TabPanelClass"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.TabPanelHeader"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.TabPanelHeaderPosition"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.TabsClassnames"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.WrapperClassnames"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTabs.WrapperScrollStyle"].DeclaringType = Types["MudBlazor.MudTabs"];
        Properties["MudBlazor.MudTd.ChildContent"].DeclaringType = Types["MudBlazor.MudTd"];
        Properties["MudBlazor.MudTd.Classname"].DeclaringType = Types["MudBlazor.MudTd"];
        Properties["MudBlazor.MudTd.DataLabel"].DeclaringType = Types["MudBlazor.MudTd"];
        Properties["MudBlazor.MudTd.HideSmall"].DeclaringType = Types["MudBlazor.MudTd"];
        Properties["MudBlazor.MudText.Align"].DeclaringType = Types["MudBlazor.MudText"];
        Properties["MudBlazor.MudText.ChildContent"].DeclaringType = Types["MudBlazor.MudText"];
        Properties["MudBlazor.MudText.Classname"].DeclaringType = Types["MudBlazor.MudText"];
        Properties["MudBlazor.MudText.Color"].DeclaringType = Types["MudBlazor.MudText"];
        Properties["MudBlazor.MudText.GutterBottom"].DeclaringType = Types["MudBlazor.MudText"];
        Properties["MudBlazor.MudText.HtmlTag"].DeclaringType = Types["MudBlazor.MudText"];
        Properties["MudBlazor.MudText.Inline"].DeclaringType = Types["MudBlazor.MudText"];
        Properties["MudBlazor.MudText.RightToLeft"].DeclaringType = Types["MudBlazor.MudText"];
        Properties["MudBlazor.MudText.Typo"].DeclaringType = Types["MudBlazor.MudText"];
        Properties["MudBlazor.MudTextField`1.AutoGrow"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Properties["MudBlazor.MudTextField`1.Classname"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Properties["MudBlazor.MudTextField`1.Clearable"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Properties["MudBlazor.MudTextField`1.ClearIcon"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Properties["MudBlazor.MudTextField`1.InputReference"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Properties["MudBlazor.MudTextField`1.InputType"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Properties["MudBlazor.MudTextField`1.Mask"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Properties["MudBlazor.MudTextField`1.MaxLines"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Properties["MudBlazor.MudTFootRow.Checkable"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Properties["MudBlazor.MudTFootRow.Checked"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Properties["MudBlazor.MudTFootRow.ChildContent"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Properties["MudBlazor.MudTFootRow.Classname"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Properties["MudBlazor.MudTFootRow.Context"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Properties["MudBlazor.MudTFootRow.Expandable"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Properties["MudBlazor.MudTFootRow.IgnoreCheckbox"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Properties["MudBlazor.MudTFootRow.IgnoreEditable"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Properties["MudBlazor.MudTFootRow.SelectionChangeable"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Properties["MudBlazor.MudTh.ChildContent"].DeclaringType = Types["MudBlazor.MudTh"];
        Properties["MudBlazor.MudTh.Classname"].DeclaringType = Types["MudBlazor.MudTh"];
        Properties["MudBlazor.MudTHeadRow.Checkable"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Properties["MudBlazor.MudTHeadRow.Checked"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Properties["MudBlazor.MudTHeadRow.ChildContent"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Properties["MudBlazor.MudTHeadRow.Classname"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Properties["MudBlazor.MudTHeadRow.Context"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Properties["MudBlazor.MudTHeadRow.Expandable"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Properties["MudBlazor.MudTHeadRow.IgnoreCheckbox"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Properties["MudBlazor.MudTHeadRow.IgnoreEditable"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Properties["MudBlazor.MudTHeadRow.SelectionChangeable"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Properties["MudBlazor.MudTheme.LayoutProperties"].DeclaringType = Types["MudBlazor.MudTheme"];
        Properties["MudBlazor.MudTheme.PaletteDark"].DeclaringType = Types["MudBlazor.MudTheme"];
        Properties["MudBlazor.MudTheme.PaletteLight"].DeclaringType = Types["MudBlazor.MudTheme"];
        Properties["MudBlazor.MudTheme.PseudoCss"].DeclaringType = Types["MudBlazor.MudTheme"];
        Properties["MudBlazor.MudTheme.Shadows"].DeclaringType = Types["MudBlazor.MudTheme"];
        Properties["MudBlazor.MudTheme.Typography"].DeclaringType = Types["MudBlazor.MudTheme"];
        Properties["MudBlazor.MudTheme.ZIndex"].DeclaringType = Types["MudBlazor.MudTheme"];
        Properties["MudBlazor.MudThemeProvider.DefaultScrollbar"].DeclaringType = Types["MudBlazor.MudThemeProvider"];
        Properties["MudBlazor.MudThemeProvider.IsDarkMode"].DeclaringType = Types["MudBlazor.MudThemeProvider"];
        Properties["MudBlazor.MudThemeProvider.IsDarkMode"].ChangeEvent = Events["MudBlazor.MudThemeProvider.IsDarkModeChanged"];
        Properties["MudBlazor.MudThemeProvider.ObserveSystemThemeChange"].DeclaringType = Types["MudBlazor.MudThemeProvider"];
        Properties["MudBlazor.MudThemeProvider.Theme"].DeclaringType = Types["MudBlazor.MudThemeProvider"];
        Properties["MudBlazor.MudTimeline.Classnames"].DeclaringType = Types["MudBlazor.MudTimeline"];
        Properties["MudBlazor.MudTimeline.Modifiers"].DeclaringType = Types["MudBlazor.MudTimeline"];
        Properties["MudBlazor.MudTimeline.Reverse"].DeclaringType = Types["MudBlazor.MudTimeline"];
        Properties["MudBlazor.MudTimeline.RightToLeft"].DeclaringType = Types["MudBlazor.MudTimeline"];
        Properties["MudBlazor.MudTimeline.TimelineAlign"].DeclaringType = Types["MudBlazor.MudTimeline"];
        Properties["MudBlazor.MudTimeline.TimelineOrientation"].DeclaringType = Types["MudBlazor.MudTimeline"];
        Properties["MudBlazor.MudTimeline.TimelinePosition"].DeclaringType = Types["MudBlazor.MudTimeline"];
        Properties["MudBlazor.MudTimelineItem.ChildContent"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.Classnames"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.Color"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.DotClassnames"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.DotInnerClassnames"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.DotStyle"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.Elevation"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.HideDot"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.Icon"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.ItemContent"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.ItemDot"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.ItemOpposite"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.Size"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.TimelineAlign"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimelineItem.Variant"].DeclaringType = Types["MudBlazor.MudTimelineItem"];
        Properties["MudBlazor.MudTimePicker.AmButtonClassname"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.AmPm"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.AutoClose"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.ClockElementReference"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.ClosingDelay"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.HoursButtonClassname"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.MinuteButtonClassname"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.MinuteSelectionStep"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.OpenTo"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.PickerContent"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.PmButtonClassname"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.PointerMoving"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.Time"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.Time"].ChangeEvent = Events["MudBlazor.MudTimePicker.TimeChanged"];
        Properties["MudBlazor.MudTimePicker.TimeEditMode"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.TimeFormat"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimePicker.ToolbarClassname"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Properties["MudBlazor.MudTimeSeriesChartBase.ChartSeries"].DeclaringType = Types["MudBlazor.MudTimeSeriesChartBase"];
        Properties["MudBlazor.MudTimeSeriesChartBase.TimeLabelFormat"].DeclaringType = Types["MudBlazor.MudTimeSeriesChartBase"];
        Properties["MudBlazor.MudTimeSeriesChartBase.TimeLabelSpacing"].DeclaringType = Types["MudBlazor.MudTimeSeriesChartBase"];
        Properties["MudBlazor.MudTimeSeriesChartBase.XAxisTitle"].DeclaringType = Types["MudBlazor.MudTimeSeriesChartBase"];
        Properties["MudBlazor.MudTimeSeriesChartBase.YAxisTitle"].DeclaringType = Types["MudBlazor.MudTimeSeriesChartBase"];
        Properties["MudBlazor.MudToggleGroup`1.CheckMark"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.CheckMarkClass"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.ChildContent"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Classname"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Color"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Delimiters"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Disabled"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.FixedContent"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Outlined"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.RightToLeft"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Ripple"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.SelectedClass"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.SelectionMode"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Size"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Stylename"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Value"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Value"].ChangeEvent = Events["MudBlazor.MudToggleGroup`1.ValueChanged"];
        Properties["MudBlazor.MudToggleGroup`1.Values"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleGroup`1.Values"].ChangeEvent = Events["MudBlazor.MudToggleGroup`1.ValuesChanged"];
        Properties["MudBlazor.MudToggleGroup`1.Vertical"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Properties["MudBlazor.MudToggleIconButton.ClickPropagation"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.Color"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.Disabled"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.DropShadow"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.Edge"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.Icon"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.Ripple"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.Size"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.Toggled"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.Toggled"].ChangeEvent = Events["MudBlazor.MudToggleIconButton.ToggledChanged"];
        Properties["MudBlazor.MudToggleIconButton.ToggledColor"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.ToggledIcon"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.ToggledSize"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.ToggledVariant"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleIconButton.Variant"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Properties["MudBlazor.MudToggleItem`1.CheckMarkClassname"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Properties["MudBlazor.MudToggleItem`1.ChildContent"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Properties["MudBlazor.MudToggleItem`1.Classname"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Properties["MudBlazor.MudToggleItem`1.Disabled"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Properties["MudBlazor.MudToggleItem`1.Parent"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Properties["MudBlazor.MudToggleItem`1.SelectedIcon"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Properties["MudBlazor.MudToggleItem`1.Text"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Properties["MudBlazor.MudToggleItem`1.UnselectedIcon"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Properties["MudBlazor.MudToggleItem`1.Value"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Properties["MudBlazor.MudToolBar.ChildContent"].DeclaringType = Types["MudBlazor.MudToolBar"];
        Properties["MudBlazor.MudToolBar.Classname"].DeclaringType = Types["MudBlazor.MudToolBar"];
        Properties["MudBlazor.MudToolBar.Dense"].DeclaringType = Types["MudBlazor.MudToolBar"];
        Properties["MudBlazor.MudToolBar.Gutters"].DeclaringType = Types["MudBlazor.MudToolBar"];
        Properties["MudBlazor.MudToolBar.WrapContent"].DeclaringType = Types["MudBlazor.MudToolBar"];
        Properties["MudBlazor.MudTooltip.Arrow"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.ChildContent"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Classname"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Color"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.ContainerClass"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Delay"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Disabled"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Duration"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Inline"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Placement"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.RightToLeft"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.RootClass"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.RootStyle"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.ShowOnClick"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.ShowOnFocus"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.ShowOnHover"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Text"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.TooltipContent"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Visible"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Properties["MudBlazor.MudTooltip.Visible"].ChangeEvent = Events["MudBlazor.MudTooltip.VisibleChanged"];
        Properties["MudBlazor.MudTr.ActionsStylename"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTr.Checkable"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTr.Checked"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTr.Checked"].ChangeEvent = Events["MudBlazor.MudTr.CheckedChanged"];
        Properties["MudBlazor.MudTr.ChildContent"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTr.Classname"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTr.Context"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTr.Editable"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTr.Expandable"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTr.Item"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTr.SelectionChangeable"].DeclaringType = Types["MudBlazor.MudTr"];
        Properties["MudBlazor.MudTreeView`1.AutoExpand"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.AutoSelectParent"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.CheckBoxColor"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.CheckedIcon"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.ChildContent"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Classname"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Color"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Comparer"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Dense"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Disabled"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.ExpandOnClick"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.ExpandOnDoubleClick"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.FilterFunc"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Height"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Hover"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.IndeterminateIcon"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Items"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.ItemTemplate"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.MaxHeight"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.ReadOnly"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Ripple"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.SelectedValue"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.SelectedValue"].ChangeEvent = Events["MudBlazor.MudTreeView`1.SelectedValueChanged"];
        Properties["MudBlazor.MudTreeView`1.SelectedValues"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.SelectedValues"].ChangeEvent = Events["MudBlazor.MudTreeView`1.SelectedValuesChanged"];
        Properties["MudBlazor.MudTreeView`1.SelectionMode"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.ServerData"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Stylename"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.TriState"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.UncheckedIcon"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeView`1.Width"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Properties["MudBlazor.MudTreeViewItem`1.BodyContent"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.CanExpand"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.ChildContent"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Classname"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Content"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.ContentClassname"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Disabled"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.EndIcon"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.EndIconColor"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.EndText"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.EndTextClass"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.EndTextTypo"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.ExpandButtonIcon"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.ExpandButtonIconColor"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Expanded"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Expanded"].ChangeEvent = Events["MudBlazor.MudTreeViewItem`1.ExpandedChanged"];
        Properties["MudBlazor.MudTreeViewItem`1.Icon"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.IconColor"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.IconExpanded"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Items"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.LoadingIcon"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.LoadingIconColor"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.ReadOnly"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Selected"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Selected"].ChangeEvent = Events["MudBlazor.MudTreeViewItem`1.SelectedChanged"];
        Properties["MudBlazor.MudTreeViewItem`1.Text"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.TextClass"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.TextClassname"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.TextTypo"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Value"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItem`1.Visible"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.Classname"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.Disabled"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.Expanded"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.Expanded"].ChangeEvent = Events["MudBlazor.MudTreeViewItemToggleButton.ExpandedChanged"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.ExpandedIcon"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.ExpandedIconColor"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.Loading"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.LoadingIcon"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.LoadingIconColor"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Properties["MudBlazor.MudTreeViewItemToggleButton.Visible"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Properties["MudBlazor.MudVirtualize`1.ChildContent"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Properties["MudBlazor.MudVirtualize`1.Enabled"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Properties["MudBlazor.MudVirtualize`1.Items"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Properties["MudBlazor.MudVirtualize`1.ItemSize"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Properties["MudBlazor.MudVirtualize`1.ItemsProvider"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Properties["MudBlazor.MudVirtualize`1.NoRecordsContent"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Properties["MudBlazor.MudVirtualize`1.OverscanCount"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Properties["MudBlazor.MudVirtualize`1.Placeholder"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Properties["MudBlazor.MudVirtualize`1.SpacerElement"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Properties["MudBlazor.MultiMask.DetectedOption"].DeclaringType = Types["MudBlazor.MultiMask"];
        Properties["MudBlazor.MultiMask.OptionDetected"].DeclaringType = Types["MudBlazor.MultiMask"];
        Properties["MudBlazor.NavigationContext.Disabled"].DeclaringType = Types["MudBlazor.NavigationContext"];
        Properties["MudBlazor.NavigationContext.EqualityContract"].DeclaringType = Types["MudBlazor.NavigationContext"];
        Properties["MudBlazor.NavigationContext.Expanded"].DeclaringType = Types["MudBlazor.NavigationContext"];
        Properties["MudBlazor.NavigationContext.MenuId"].DeclaringType = Types["MudBlazor.NavigationContext"];
        Properties["MudBlazor.NullableDateConverter.DateFormat"].DeclaringType = Types["MudBlazor.NullableDateConverter"];
        Properties["MudBlazor.Palette.ActionDefault"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.ActionDisabled"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.ActionDisabledBackground"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.AppbarBackground"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.AppbarText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Background"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.BackgroundGray"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Black"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Dark"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.DarkContrastText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.DarkDarken"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.DarkLighten"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Divider"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.DividerLight"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.DrawerBackground"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.DrawerIcon"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.DrawerText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Error"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.ErrorContrastText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.ErrorDarken"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.ErrorLighten"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.GrayDark"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.GrayDarker"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.GrayDefault"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.GrayLight"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.GrayLighter"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.HoverOpacity"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Info"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.InfoContrastText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.InfoDarken"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.InfoLighten"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.LinesDefault"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.LinesInputs"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.OverlayDark"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.OverlayLight"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Primary"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.PrimaryContrastText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.PrimaryDarken"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.PrimaryLighten"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.RippleOpacity"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.RippleOpacitySecondary"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Secondary"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.SecondaryContrastText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.SecondaryDarken"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.SecondaryLighten"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Skeleton"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Success"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.SuccessContrastText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.SuccessDarken"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.SuccessLighten"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Surface"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.TableHover"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.TableLines"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.TableStriped"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Tertiary"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.TertiaryContrastText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.TertiaryDarken"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.TertiaryLighten"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.TextDisabled"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.TextPrimary"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.TextSecondary"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.Warning"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.WarningContrastText"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.WarningDarken"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.WarningLighten"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.Palette.White"].DeclaringType = Types["MudBlazor.Palette"];
        Properties["MudBlazor.PaletteDark.ActionDefault"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.ActionDisabled"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.ActionDisabledBackground"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.AppbarBackground"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.AppbarText"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Background"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.BackgroundGray"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Black"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Dark"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Divider"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.DividerLight"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.DrawerBackground"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.DrawerIcon"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.DrawerText"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Error"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Info"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.LinesDefault"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.LinesInputs"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Primary"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Skeleton"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Success"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Surface"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.TableLines"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.TableStriped"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.TextDisabled"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.TextPrimary"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.TextSecondary"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PaletteDark.Warning"].DeclaringType = Types["MudBlazor.PaletteDark"];
        Properties["MudBlazor.PatternMask.CleanDelimiters"].DeclaringType = Types["MudBlazor.PatternMask"];
        Properties["MudBlazor.PatternMask.Placeholder"].DeclaringType = Types["MudBlazor.PatternMask"];
        Properties["MudBlazor.PatternMask.Transformation"].DeclaringType = Types["MudBlazor.PatternMask"];
        Properties["MudBlazor.PopoverHolderContainer.Holders"].DeclaringType = Types["MudBlazor.PopoverHolderContainer"];
        Properties["MudBlazor.PopoverHolderContainer.Operation"].DeclaringType = Types["MudBlazor.PopoverHolderContainer"];
        Properties["MudBlazor.PopoverOptions.CheckForPopoverProvider"].DeclaringType = Types["MudBlazor.PopoverOptions"];
        Properties["MudBlazor.PopoverOptions.ContainerClass"].DeclaringType = Types["MudBlazor.PopoverOptions"];
        Properties["MudBlazor.PopoverOptions.FlipMargin"].DeclaringType = Types["MudBlazor.PopoverOptions"];
        Properties["MudBlazor.PopoverOptions.Mode"].DeclaringType = Types["MudBlazor.PopoverOptions"];
        Properties["MudBlazor.PopoverOptions.QueueDelay"].DeclaringType = Types["MudBlazor.PopoverOptions"];
        Properties["MudBlazor.PopoverOptions.ThrowOnDuplicateProvider"].DeclaringType = Types["MudBlazor.PopoverOptions"];
        Properties["MudBlazor.PropertyColumn`2.Format"].DeclaringType = Types["MudBlazor.PropertyColumn`2"];
        Properties["MudBlazor.PropertyColumn`2.Property"].DeclaringType = Types["MudBlazor.PropertyColumn`2"];
        Properties["MudBlazor.PropertyColumn`2.PropertyName"].DeclaringType = Types["MudBlazor.PropertyColumn`2"];
        Properties["MudBlazor.PseudoCss.Scope"].DeclaringType = Types["MudBlazor.PseudoCss"];
        Properties["MudBlazor.Range`1.End"].DeclaringType = Types["MudBlazor.Range`1"];
        Properties["MudBlazor.Range`1.Start"].DeclaringType = Types["MudBlazor.Range`1"];
        Properties["MudBlazor.Range`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].End"].DeclaringTypeName = "Range`1";
        Properties["MudBlazor.Range`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start"].DeclaringTypeName = "Range`1";
        Properties["MudBlazor.RegexMask.Delimiters"].DeclaringType = Types["MudBlazor.RegexMask"];
        Properties["MudBlazor.ScrollEventArgs.FirstChildBoundingClientRect"].DeclaringType = Types["MudBlazor.ScrollEventArgs"];
        Properties["MudBlazor.ScrollEventArgs.NodeName"].DeclaringType = Types["MudBlazor.ScrollEventArgs"];
        Properties["MudBlazor.ScrollEventArgs.ScrollHeight"].DeclaringType = Types["MudBlazor.ScrollEventArgs"];
        Properties["MudBlazor.ScrollEventArgs.ScrollLeft"].DeclaringType = Types["MudBlazor.ScrollEventArgs"];
        Properties["MudBlazor.ScrollEventArgs.ScrollTop"].DeclaringType = Types["MudBlazor.ScrollEventArgs"];
        Properties["MudBlazor.ScrollEventArgs.ScrollWidth"].DeclaringType = Types["MudBlazor.ScrollEventArgs"];
        Properties["MudBlazor.ScrollSectionCenteredEventArgs.Id"].DeclaringType = Types["MudBlazor.ScrollSectionCenteredEventArgs"];
        Properties["MudBlazor.SelectColumn`1.DragAndDropEnabled"].DeclaringType = Types["MudBlazor.SelectColumn`1"];
        Properties["MudBlazor.SelectColumn`1.Hidden"].DeclaringType = Types["MudBlazor.SelectColumn`1"];
        Properties["MudBlazor.SelectColumn`1.Hidden"].ChangeEvent = Events["MudBlazor.SelectColumn`1.HiddenChanged"];
        Properties["MudBlazor.SelectColumn`1.Hideable"].DeclaringType = Types["MudBlazor.SelectColumn`1"];
        Properties["MudBlazor.SelectColumn`1.ShowInFooter"].DeclaringType = Types["MudBlazor.SelectColumn`1"];
        Properties["MudBlazor.SelectColumn`1.ShowInHeader"].DeclaringType = Types["MudBlazor.SelectColumn`1"];
        Properties["MudBlazor.SelectColumn`1.Size"].DeclaringType = Types["MudBlazor.SelectColumn`1"];
        Properties["MudBlazor.Services.BrowserWindowSize.Height"].DeclaringType = Types["MudBlazor.Services.BrowserWindowSize"];
        Properties["MudBlazor.Services.BrowserWindowSize.Width"].DeclaringType = Types["MudBlazor.Services.BrowserWindowSize"];
        Properties["MudBlazor.Services.JsEventOptions.EnableLogging"].DeclaringType = Types["MudBlazor.Services.JsEventOptions"];
        Properties["MudBlazor.Services.JsEventOptions.TagName"].DeclaringType = Types["MudBlazor.Services.JsEventOptions"];
        Properties["MudBlazor.Services.JsEventOptions.TargetClass"].DeclaringType = Types["MudBlazor.Services.JsEventOptions"];
        Properties["MudBlazor.Services.KeyInterceptorOptions.EnableLogging"].DeclaringType = Types["MudBlazor.Services.KeyInterceptorOptions"];
        Properties["MudBlazor.Services.KeyInterceptorOptions.Keys"].DeclaringType = Types["MudBlazor.Services.KeyInterceptorOptions"];
        Properties["MudBlazor.Services.KeyInterceptorOptions.TargetClass"].DeclaringType = Types["MudBlazor.Services.KeyInterceptorOptions"];
        Properties["MudBlazor.Services.KeyOptions.Key"].DeclaringType = Types["MudBlazor.Services.KeyOptions"];
        Properties["MudBlazor.Services.KeyOptions.PreventDown"].DeclaringType = Types["MudBlazor.Services.KeyOptions"];
        Properties["MudBlazor.Services.KeyOptions.PreventUp"].DeclaringType = Types["MudBlazor.Services.KeyOptions"];
        Properties["MudBlazor.Services.KeyOptions.StopDown"].DeclaringType = Types["MudBlazor.Services.KeyOptions"];
        Properties["MudBlazor.Services.KeyOptions.StopUp"].DeclaringType = Types["MudBlazor.Services.KeyOptions"];
        Properties["MudBlazor.Services.KeyOptions.SubscribeDown"].DeclaringType = Types["MudBlazor.Services.KeyOptions"];
        Properties["MudBlazor.Services.KeyOptions.SubscribeUp"].DeclaringType = Types["MudBlazor.Services.KeyOptions"];
        Properties["MudBlazor.Services.MudServicesConfiguration.PopoverOptions"].DeclaringType = Types["MudBlazor.Services.MudServicesConfiguration"];
        Properties["MudBlazor.Services.MudServicesConfiguration.ResizeObserverOptions"].DeclaringType = Types["MudBlazor.Services.MudServicesConfiguration"];
        Properties["MudBlazor.Services.MudServicesConfiguration.ResizeOptions"].DeclaringType = Types["MudBlazor.Services.MudServicesConfiguration"];
        Properties["MudBlazor.Services.MudServicesConfiguration.SnackbarConfiguration"].DeclaringType = Types["MudBlazor.Services.MudServicesConfiguration"];
        Properties["MudBlazor.Services.ResizeObserverOptions.EnableLogging"].DeclaringType = Types["MudBlazor.Services.ResizeObserverOptions"];
        Properties["MudBlazor.Services.ResizeObserverOptions.ReportRate"].DeclaringType = Types["MudBlazor.Services.ResizeObserverOptions"];
        Properties["MudBlazor.Services.ResizeOptions.BreakpointDefinitions"].DeclaringType = Types["MudBlazor.Services.ResizeOptions"];
        Properties["MudBlazor.Services.ResizeOptions.EnableLogging"].DeclaringType = Types["MudBlazor.Services.ResizeOptions"];
        Properties["MudBlazor.Services.ResizeOptions.NotifyOnBreakpointOnly"].DeclaringType = Types["MudBlazor.Services.ResizeOptions"];
        Properties["MudBlazor.Services.ResizeOptions.ReportRate"].DeclaringType = Types["MudBlazor.Services.ResizeOptions"];
        Properties["MudBlazor.Services.ResizeOptions.SuppressInitEvent"].DeclaringType = Types["MudBlazor.Services.ResizeOptions"];
        Properties["MudBlazor.Shadow.Elevation"].DeclaringType = Types["MudBlazor.Shadow"];
        Properties["MudBlazor.SliderContext`1.NullableValue"].DeclaringType = Types["MudBlazor.SliderContext`1"];
        Properties["MudBlazor.SliderContext`1.Value"].DeclaringType = Types["MudBlazor.SliderContext`1"];
        Properties["MudBlazor.Snackbar.Message"].DeclaringType = Types["MudBlazor.Snackbar"];
        Properties["MudBlazor.Snackbar.Severity"].DeclaringType = Types["MudBlazor.Snackbar"];
        Properties["MudBlazor.SnackbarConfiguration.ClearAfterNavigation"].DeclaringType = Types["MudBlazor.SnackbarConfiguration"];
        Properties["MudBlazor.SnackbarConfiguration.MaxDisplayedSnackbars"].DeclaringType = Types["MudBlazor.SnackbarConfiguration"];
        Properties["MudBlazor.SnackbarConfiguration.NewestOnTop"].DeclaringType = Types["MudBlazor.SnackbarConfiguration"];
        Properties["MudBlazor.SnackbarConfiguration.PositionClass"].DeclaringType = Types["MudBlazor.SnackbarConfiguration"];
        Properties["MudBlazor.SnackbarConfiguration.PreventDuplicates"].DeclaringType = Types["MudBlazor.SnackbarConfiguration"];
        Properties["MudBlazor.SnackbarOptions.Action"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.ActionColor"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.ActionVariant"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.CloseAfterNavigation"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.CloseButtonClickFunc"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.DuplicatesBehavior"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.HideIcon"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.Icon"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.IconColor"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.OnClick"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.Severity"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarOptions.SnackbarTypeClass"].DeclaringType = Types["MudBlazor.SnackbarOptions"];
        Properties["MudBlazor.SnackbarService.Configuration"].DeclaringType = Types["MudBlazor.SnackbarService"];
        Properties["MudBlazor.SnackbarService.ShownSnackbars"].DeclaringType = Types["MudBlazor.SnackbarService"];
        Properties["MudBlazor.SortDefinition`1.Comparer"].DeclaringType = Types["MudBlazor.SortDefinition`1"];
        Properties["MudBlazor.SortDefinition`1.Descending"].DeclaringType = Types["MudBlazor.SortDefinition`1"];
        Properties["MudBlazor.SortDefinition`1.Index"].DeclaringType = Types["MudBlazor.SortDefinition`1"];
        Properties["MudBlazor.SortDefinition`1.SortBy"].DeclaringType = Types["MudBlazor.SortDefinition`1"];
        Properties["MudBlazor.SortDefinition`1.SortFunc"].DeclaringType = Types["MudBlazor.SortDefinition`1"];
        Properties["MudBlazor.State.ParameterChangedEventArgs`1.IsChildOriginatedChange"].DeclaringType = Types["MudBlazor.State.ParameterChangedEventArgs`1"];
        Properties["MudBlazor.State.ParameterChangedEventArgs`1.LastValue"].DeclaringType = Types["MudBlazor.State.ParameterChangedEventArgs`1"];
        Properties["MudBlazor.State.ParameterChangedEventArgs`1.ParameterName"].DeclaringType = Types["MudBlazor.State.ParameterChangedEventArgs`1"];
        Properties["MudBlazor.State.ParameterChangedEventArgs`1.Value"].DeclaringType = Types["MudBlazor.State.ParameterChangedEventArgs`1"];
        Properties["MudBlazor.State.ParameterState`1.Value"].DeclaringType = Types["MudBlazor.State.ParameterState`1"];
        Properties["MudBlazor.StepperInteractionEventArgs.Action"].DeclaringType = Types["MudBlazor.StepperInteractionEventArgs"];
        Properties["MudBlazor.StepperInteractionEventArgs.Cancel"].DeclaringType = Types["MudBlazor.StepperInteractionEventArgs"];
        Properties["MudBlazor.StepperInteractionEventArgs.StepIndex"].DeclaringType = Types["MudBlazor.StepperInteractionEventArgs"];
        Properties["MudBlazor.SvgLegend.Data"].DeclaringType = Types["MudBlazor.SvgLegend"];
        Properties["MudBlazor.SvgLegend.Index"].DeclaringType = Types["MudBlazor.SvgLegend"];
        Properties["MudBlazor.SvgLegend.Labels"].DeclaringType = Types["MudBlazor.SvgLegend"];
        Properties["MudBlazor.SvgLegend.Visible"].DeclaringType = Types["MudBlazor.SvgLegend"];
        Properties["MudBlazor.SwipeEventArgs.Sender"].DeclaringType = Types["MudBlazor.SwipeEventArgs"];
        Properties["MudBlazor.SwipeEventArgs.SwipeDelta"].DeclaringType = Types["MudBlazor.SwipeEventArgs"];
        Properties["MudBlazor.SwipeEventArgs.SwipeDirection"].DeclaringType = Types["MudBlazor.SwipeEventArgs"];
        Properties["MudBlazor.SwipeEventArgs.TouchEventArgs"].DeclaringType = Types["MudBlazor.SwipeEventArgs"];
        Properties["MudBlazor.TabInteractionEventArgs.Cancel"].DeclaringType = Types["MudBlazor.TabInteractionEventArgs"];
        Properties["MudBlazor.TabInteractionEventArgs.InteractionType"].DeclaringType = Types["MudBlazor.TabInteractionEventArgs"];
        Properties["MudBlazor.TabInteractionEventArgs.PanelIndex"].DeclaringType = Types["MudBlazor.TabInteractionEventArgs"];
        Properties["MudBlazor.TableContext.FooterRows"].DeclaringType = Types["MudBlazor.TableContext"];
        Properties["MudBlazor.TableContext.HasPager"].DeclaringType = Types["MudBlazor.TableContext"];
        Properties["MudBlazor.TableContext.HeaderRows"].DeclaringType = Types["MudBlazor.TableContext"];
        Properties["MudBlazor.TableContext.PagerStateHasChanged"].DeclaringType = Types["MudBlazor.TableContext"];
        Properties["MudBlazor.TableContext.SortDirection"].DeclaringType = Types["MudBlazor.TableContext"];
        Properties["MudBlazor.TableContext.Table"].DeclaringType = Types["MudBlazor.TableContext"];
        Properties["MudBlazor.TableContext.TableStateHasChanged"].DeclaringType = Types["MudBlazor.TableContext"];
        Properties["MudBlazor.TableContext`1.Comparer"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Properties["MudBlazor.TableContext`1.CurrentSortLabel"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Properties["MudBlazor.TableContext`1.GroupRows"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Properties["MudBlazor.TableContext`1.Rows"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Properties["MudBlazor.TableContext`1.Selection"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Properties["MudBlazor.TableContext`1.SortBy"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Properties["MudBlazor.TableContext`1.SortDirection"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Properties["MudBlazor.TableContext`1.SortLabels"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Properties["MudBlazor.TableData`1.Items"].DeclaringType = Types["MudBlazor.TableData`1"];
        Properties["MudBlazor.TableData`1.TotalItems"].DeclaringType = Types["MudBlazor.TableData`1"];
        Properties["MudBlazor.TableGroupData`2.GroupName"].DeclaringType = Types["MudBlazor.TableGroupData`2"];
        Properties["MudBlazor.TableGroupData`2.Items"].DeclaringType = Types["MudBlazor.TableGroupData`2"];
        Properties["MudBlazor.TableGroupData`2.Key"].DeclaringType = Types["MudBlazor.TableGroupData`2"];
        Properties["MudBlazor.TableGroupDefinition`1.Expandable"].DeclaringType = Types["MudBlazor.TableGroupDefinition`1"];
        Properties["MudBlazor.TableGroupDefinition`1.GroupName"].DeclaringType = Types["MudBlazor.TableGroupDefinition`1"];
        Properties["MudBlazor.TableGroupDefinition`1.Indentation"].DeclaringType = Types["MudBlazor.TableGroupDefinition`1"];
        Properties["MudBlazor.TableGroupDefinition`1.InnerGroup"].DeclaringType = Types["MudBlazor.TableGroupDefinition`1"];
        Properties["MudBlazor.TableGroupDefinition`1.IsInitiallyExpanded"].DeclaringType = Types["MudBlazor.TableGroupDefinition`1"];
        Properties["MudBlazor.TableGroupDefinition`1.Selector"].DeclaringType = Types["MudBlazor.TableGroupDefinition`1"];
        Properties["MudBlazor.TableRowClickEventArgs`1.Item"].DeclaringType = Types["MudBlazor.TableRowClickEventArgs`1"];
        Properties["MudBlazor.TableRowClickEventArgs`1.MouseEventArgs"].DeclaringType = Types["MudBlazor.TableRowClickEventArgs`1"];
        Properties["MudBlazor.TableRowClickEventArgs`1.Row"].DeclaringType = Types["MudBlazor.TableRowClickEventArgs`1"];
        Properties["MudBlazor.TableRowHoverEventArgs`1.Item"].DeclaringType = Types["MudBlazor.TableRowHoverEventArgs`1"];
        Properties["MudBlazor.TableRowHoverEventArgs`1.PointerEventArgs"].DeclaringType = Types["MudBlazor.TableRowHoverEventArgs`1"];
        Properties["MudBlazor.TableRowHoverEventArgs`1.Row"].DeclaringType = Types["MudBlazor.TableRowHoverEventArgs`1"];
        Properties["MudBlazor.TableRowValidator.Errors"].DeclaringType = Types["MudBlazor.TableRowValidator"];
        Properties["MudBlazor.TableRowValidator.IsValid"].DeclaringType = Types["MudBlazor.TableRowValidator"];
        Properties["MudBlazor.TableRowValidator.Model"].DeclaringType = Types["MudBlazor.TableRowValidator"];
        Properties["MudBlazor.TableState.Page"].DeclaringType = Types["MudBlazor.TableState"];
        Properties["MudBlazor.TableState.PageSize"].DeclaringType = Types["MudBlazor.TableState"];
        Properties["MudBlazor.TableState.SortDirection"].DeclaringType = Types["MudBlazor.TableState"];
        Properties["MudBlazor.TableState.SortLabel"].DeclaringType = Types["MudBlazor.TableState"];
        Properties["MudBlazor.TemplateColumn`1.DragAndDropEnabled"].DeclaringType = Types["MudBlazor.TemplateColumn`1"];
        Properties["MudBlazor.TemplateColumn`1.Filterable"].DeclaringType = Types["MudBlazor.TemplateColumn`1"];
        Properties["MudBlazor.TemplateColumn`1.PropertyName"].DeclaringType = Types["MudBlazor.TemplateColumn`1"];
        Properties["MudBlazor.TemplateColumn`1.Resizable"].DeclaringType = Types["MudBlazor.TemplateColumn`1"];
        Properties["MudBlazor.TemplateColumn`1.ShowColumnOptions"].DeclaringType = Types["MudBlazor.TemplateColumn`1"];
        Properties["MudBlazor.TemplateColumn`1.Sortable"].DeclaringType = Types["MudBlazor.TemplateColumn`1"];
        Properties["MudBlazor.TimeSeriesChartSeries.Data"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries"];
        Properties["MudBlazor.TimeSeriesChartSeries.FillOpacity"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries"];
        Properties["MudBlazor.TimeSeriesChartSeries.Index"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries"];
        Properties["MudBlazor.TimeSeriesChartSeries.IsVisible"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries"];
        Properties["MudBlazor.TimeSeriesChartSeries.Name"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries"];
        Properties["MudBlazor.TimeSeriesChartSeries.StrokeOpacity"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries"];
        Properties["MudBlazor.TimeSeriesChartSeries.Type"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries"];
        Properties["MudBlazor.TimeSeriesChartSeries+TimeValue.DateTime"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries+TimeValue"];
        Properties["MudBlazor.TimeSeriesChartSeries+TimeValue.EqualityContract"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries+TimeValue"];
        Properties["MudBlazor.TimeSeriesChartSeries+TimeValue.Value"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries+TimeValue"];
        Properties["MudBlazor.TreeItemData`1.Children"].DeclaringType = Types["MudBlazor.TreeItemData`1"];
        Properties["MudBlazor.TreeItemData`1.Expandable"].DeclaringType = Types["MudBlazor.TreeItemData`1"];
        Properties["MudBlazor.TreeItemData`1.Expanded"].DeclaringType = Types["MudBlazor.TreeItemData`1"];
        Properties["MudBlazor.TreeItemData`1.HasChildren"].DeclaringType = Types["MudBlazor.TreeItemData`1"];
        Properties["MudBlazor.TreeItemData`1.Icon"].DeclaringType = Types["MudBlazor.TreeItemData`1"];
        Properties["MudBlazor.TreeItemData`1.Selected"].DeclaringType = Types["MudBlazor.TreeItemData`1"];
        Properties["MudBlazor.TreeItemData`1.Text"].DeclaringType = Types["MudBlazor.TreeItemData`1"];
        Properties["MudBlazor.TreeItemData`1.Value"].DeclaringType = Types["MudBlazor.TreeItemData`1"];
        Properties["MudBlazor.TreeItemData`1.Visible"].DeclaringType = Types["MudBlazor.TreeItemData`1"];
        Properties["MudBlazor.Typography.Body1"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.Body2"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.Button"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.Caption"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.Default"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.H1"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.H2"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.H3"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.H4"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.H5"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.H6"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.Overline"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.Subtitle1"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Typography.Subtitle2"].DeclaringType = Types["MudBlazor.Typography"];
        Properties["MudBlazor.Utilities.FormFieldChangedEventArgs.Field"].DeclaringType = Types["MudBlazor.Utilities.FormFieldChangedEventArgs"];
        Properties["MudBlazor.Utilities.FormFieldChangedEventArgs.NewValue"].DeclaringType = Types["MudBlazor.Utilities.FormFieldChangedEventArgs"];
        Properties["MudBlazor.Utilities.MudColor.A"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.MudColor.APercentage"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.MudColor.B"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.MudColor.G"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.MudColor.H"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.MudColor.L"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.MudColor.R"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.MudColor.S"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.MudColor.UInt32"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.MudColor.Value"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Properties["MudBlazor.Utilities.NullableObject`1.IsNull"].DeclaringType = Types["MudBlazor.Utilities.NullableObject`1"];
        Properties["MudBlazor.Utilities.NullableObject`1.Item"].DeclaringType = Types["MudBlazor.Utilities.NullableObject`1"];
        Properties["MudBlazor.Utilities.NullableObject`1.Null"].DeclaringType = Types["MudBlazor.Utilities.NullableObject`1"];
        Properties["MudBlazor.Utilities.RuntimeLocation.IsClientSide"].DeclaringType = Types["MudBlazor.Utilities.RuntimeLocation"];
        Properties["MudBlazor.Utilities.RuntimeLocation.IsServerSide"].DeclaringType = Types["MudBlazor.Utilities.RuntimeLocation"];
        Properties["MudBlazor.Utilities.ValueBuilder.HasValue"].DeclaringType = Types["MudBlazor.Utilities.ValueBuilder"];
        Properties["MudBlazor.ZIndex.AppBar"].DeclaringType = Types["MudBlazor.ZIndex"];
        Properties["MudBlazor.ZIndex.Dialog"].DeclaringType = Types["MudBlazor.ZIndex"];
        Properties["MudBlazor.ZIndex.Drawer"].DeclaringType = Types["MudBlazor.ZIndex"];
        Properties["MudBlazor.ZIndex.Popover"].DeclaringType = Types["MudBlazor.ZIndex"];
        Properties["MudBlazor.ZIndex.Snackbar"].DeclaringType = Types["MudBlazor.ZIndex"];
        Properties["MudBlazor.ZIndex.Tooltip"].DeclaringType = Types["MudBlazor.ZIndex"];
        Properties["System.Delegate.Method"].DeclaringTypeName = "Delegate";
        Properties["System.Delegate.Target"].DeclaringTypeName = "Delegate";
        Properties["System.Exception.Data"].DeclaringTypeName = "Exception";
        Properties["System.Exception.HelpLink"].DeclaringTypeName = "Exception";
        Properties["System.Exception.HResult"].DeclaringTypeName = "Exception";
        Properties["System.Exception.InnerException"].DeclaringTypeName = "Exception";
        Properties["System.Exception.Message"].DeclaringTypeName = "Exception";
        Properties["System.Exception.Source"].DeclaringTypeName = "Exception";
        Properties["System.Exception.StackTrace"].DeclaringTypeName = "Exception";
        Properties["System.Exception.TargetSite"].DeclaringTypeName = "Exception";

        // Link methods to their declaring types
        Methods["MudBlazor.AggregateDefinition`1.SimpleAvg"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Methods["MudBlazor.AggregateDefinition`1.SimpleCount"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Methods["MudBlazor.AggregateDefinition`1.SimpleMax"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Methods["MudBlazor.AggregateDefinition`1.SimpleMin"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Methods["MudBlazor.AggregateDefinition`1.SimpleSum"].DeclaringType = Types["MudBlazor.AggregateDefinition`1"];
        Methods["MudBlazor.BaseMask.Backspace"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.Clear"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.ConsolidateSelection"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.Delete"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.DeleteSelection"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.GetCleanText"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.Init"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.InitInternals"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.Insert"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.IsDelimiter"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.Refresh"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.SetText"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.UpdateFrom"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.BaseMask.UpdateText"].DeclaringType = Types["MudBlazor.BaseMask"];
        Methods["MudBlazor.Block.Deconstruct"].DeclaringType = Types["MudBlazor.Block"];
        Methods["MudBlazor.BlockMask.BuildRegex"].DeclaringType = Types["MudBlazor.BlockMask"];
        Methods["MudBlazor.BlockMask.InitInternals"].DeclaringType = Types["MudBlazor.BlockMask"];
        Methods["MudBlazor.BlockMask.InitRegex"].DeclaringType = Types["MudBlazor.BlockMask"];
        Methods["MudBlazor.BlockMask.UpdateFrom"].DeclaringType = Types["MudBlazor.BlockMask"];
        Methods["MudBlazor.BreadcrumbItem.<Clone>$"].DeclaringType = Types["MudBlazor.BreadcrumbItem"];
        Methods["MudBlazor.BreadcrumbItem.PrintMembers"].DeclaringType = Types["MudBlazor.BreadcrumbItem"];
        Methods["MudBlazor.CollectionComparer`1.CombineHashCodes"].DeclaringType = Types["MudBlazor.CollectionComparer`1"];
        Methods["MudBlazor.Column`1.HideAsync"].DeclaringType = Types["MudBlazor.Column`1"];
        Methods["MudBlazor.Column`1.ShowAsync"].DeclaringType = Types["MudBlazor.Column`1"];
        Methods["MudBlazor.Column`1.ToggleAsync"].DeclaringType = Types["MudBlazor.Column`1"];
        Methods["MudBlazor.Components.Highlighter.Splitter.GetFragments"].DeclaringType = Types["MudBlazor.Components.Highlighter.Splitter"];
        Methods["MudBlazor.Converter`2.Get"].DeclaringType = Types["MudBlazor.Converter`2"];
        Methods["MudBlazor.Converter`2.Set"].DeclaringType = Types["MudBlazor.Converter`2"];
        Methods["MudBlazor.Converter`2.UpdateGetError"].DeclaringType = Types["MudBlazor.Converter`2"];
        Methods["MudBlazor.Converter`2.UpdateSetError"].DeclaringType = Types["MudBlazor.Converter`2"];
        Methods["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Get"].DeclaringTypeName = "Converter`2";
        Methods["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Set"].DeclaringTypeName = "Converter`2";
        Methods["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateGetError"].DeclaringTypeName = "Converter`2";
        Methods["MudBlazor.Converter`2[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateSetError"].DeclaringTypeName = "Converter`2";
        Methods["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Get"].DeclaringTypeName = "Converter`2";
        Methods["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Set"].DeclaringTypeName = "Converter`2";
        Methods["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateGetError"].DeclaringTypeName = "Converter`2";
        Methods["MudBlazor.Converter`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateSetError"].DeclaringTypeName = "Converter`2";
        Methods["MudBlazor.Converters.DateFormat"].DeclaringType = Types["MudBlazor.Converters"];
        Methods["MudBlazor.DataGridRowValidator.Validate"].DeclaringType = Types["MudBlazor.DataGridRowValidator"];
        Methods["MudBlazor.DateMask.ModifyFinalText"].DeclaringType = Types["MudBlazor.DateMask"];
        Methods["MudBlazor.DateMask.ModifyPartiallyAlignedMask"].DeclaringType = Types["MudBlazor.DateMask"];
        Methods["MudBlazor.DateMask.UpdateFrom"].DeclaringType = Types["MudBlazor.DateMask"];
        Methods["MudBlazor.DateRange.ToIsoDateString"].DeclaringType = Types["MudBlazor.DateRange"];
        Methods["MudBlazor.DateRange.TryParse"].DeclaringType = Types["MudBlazor.DateRange"];
        Methods["MudBlazor.DefaultConverter`1.ConvertFromString"].DeclaringType = Types["MudBlazor.DefaultConverter`1"];
        Methods["MudBlazor.DefaultConverter`1.ConvertToString"].DeclaringType = Types["MudBlazor.DefaultConverter`1"];
        Methods["MudBlazor.DefaultConverter`1.IsNullableEnum"].DeclaringType = Types["MudBlazor.DefaultConverter`1"];
        Methods["MudBlazor.DefaultLocalizationInterceptor.Handle"].DeclaringType = Types["MudBlazor.DefaultLocalizationInterceptor"];
        Methods["MudBlazor.DefaultLocalizationInterceptor.TranslationWithFallback"].DeclaringType = Types["MudBlazor.DefaultLocalizationInterceptor"];
        Methods["MudBlazor.DialogOptions.<Clone>$"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Methods["MudBlazor.DialogOptions.PrintMembers"].DeclaringType = Types["MudBlazor.DialogOptions"];
        Methods["MudBlazor.DialogParameters.Add"].DeclaringType = Types["MudBlazor.DialogParameters"];
        Methods["MudBlazor.DialogParameters.Get"].DeclaringType = Types["MudBlazor.DialogParameters"];
        Methods["MudBlazor.DialogParameters.GetEnumerator"].DeclaringType = Types["MudBlazor.DialogParameters"];
        Methods["MudBlazor.DialogParameters.TryGet"].DeclaringType = Types["MudBlazor.DialogParameters"];
        Methods["MudBlazor.DialogParameters`1.Add"].DeclaringType = Types["MudBlazor.DialogParameters`1"];
        Methods["MudBlazor.DialogParameters`1.Get"].DeclaringType = Types["MudBlazor.DialogParameters`1"];
        Methods["MudBlazor.DialogParameters`1.TryGet"].DeclaringType = Types["MudBlazor.DialogParameters`1"];
        Methods["MudBlazor.DialogReference.Close"].DeclaringType = Types["MudBlazor.DialogReference"];
        Methods["MudBlazor.DialogReference.Dismiss"].DeclaringType = Types["MudBlazor.DialogReference"];
        Methods["MudBlazor.DialogReference.GetReturnValueAsync"].DeclaringType = Types["MudBlazor.DialogReference"];
        Methods["MudBlazor.DialogReference.InjectDialog"].DeclaringType = Types["MudBlazor.DialogReference"];
        Methods["MudBlazor.DialogReference.InjectRenderFragment"].DeclaringType = Types["MudBlazor.DialogReference"];
        Methods["MudBlazor.DialogResult.Cancel"].DeclaringType = Types["MudBlazor.DialogResult"];
        Methods["MudBlazor.DialogResult.Ok"].DeclaringType = Types["MudBlazor.DialogResult"];
        Methods["MudBlazor.DialogService.Close"].DeclaringType = Types["MudBlazor.DialogService"];
        Methods["MudBlazor.DialogService.CreateReference"].DeclaringType = Types["MudBlazor.DialogService"];
        Methods["MudBlazor.DialogService.Show"].DeclaringType = Types["MudBlazor.DialogService"];
        Methods["MudBlazor.DialogService.ShowAsync"].DeclaringType = Types["MudBlazor.DialogService"];
        Methods["MudBlazor.DialogService.ShowMessageBox"].DeclaringType = Types["MudBlazor.DialogService"];
        Methods["MudBlazor.EventUtil.AsNonRenderingEventHandler"].DeclaringType = Types["MudBlazor.EventUtil"];
        Methods["MudBlazor.FieldType.Identify"].DeclaringType = Types["MudBlazor.FieldType"];
        Methods["MudBlazor.FilterDefinition`1.Clone"].DeclaringType = Types["MudBlazor.FilterDefinition`1"];
        Methods["MudBlazor.FilterDefinition`1.GenerateFilterFunction"].DeclaringType = Types["MudBlazor.FilterDefinition`1"];
        Methods["MudBlazor.FilterExpressionGenerator.GenerateExpression"].DeclaringType = Types["MudBlazor.FilterExpressionGenerator"];
        Methods["MudBlazor.Interop.BoundingClientRect.Clone"].DeclaringType = Types["MudBlazor.Interop.BoundingClientRect"];
        Methods["MudBlazor.KeyObserver.KeyDown"].DeclaringType = Types["MudBlazor.KeyObserver"];
        Methods["MudBlazor.KeyObserver.KeyDownIgnore"].DeclaringType = Types["MudBlazor.KeyObserver"];
        Methods["MudBlazor.KeyObserver.KeyUp"].DeclaringType = Types["MudBlazor.KeyObserver"];
        Methods["MudBlazor.KeyObserver.KeyUpIgnore"].DeclaringType = Types["MudBlazor.KeyObserver"];
        Methods["MudBlazor.MaskChar.Digit"].DeclaringType = Types["MudBlazor.MaskChar"];
        Methods["MudBlazor.MaskChar.Letter"].DeclaringType = Types["MudBlazor.MaskChar"];
        Methods["MudBlazor.MaskChar.LetterOrDigit"].DeclaringType = Types["MudBlazor.MaskChar"];
        Methods["MudBlazor.MaskOption.Deconstruct"].DeclaringType = Types["MudBlazor.MaskOption"];
        Methods["MudBlazor.MudAutocomplete`1.BlurAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.ClearAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.CloseMenuAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.FocusAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.GetAutocomplete"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.GetListItemClassname"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.OpenMenuAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.ResetValueAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.SelectAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.SelectOptionAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.SelectRangeAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.ToggleMenuAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.UpdateTextPropertyAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudAutocomplete`1.UpdateValuePropertyAsync"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Methods["MudBlazor.MudBaseButton.FocusAsync"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Methods["MudBlazor.MudBaseButton.GetClickPropagation"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Methods["MudBlazor.MudBaseButton.GetDisabledState"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Methods["MudBlazor.MudBaseButton.GetRel"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Methods["MudBlazor.MudBaseButton.OnClickHandler"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Methods["MudBlazor.MudBaseDatePicker.DateFormatChangedAsync"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.FormatTitleDate"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetAbbreviatedDayNames"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetCalendarStartOfMonth"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetCalendarYear"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetDayClasses"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetFirstDayOfWeek"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetFormattedYearString"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetMonthEnd"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetMonthName"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetMonthStart"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetNextView"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetTitleDateString"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.GetWeek"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.OnDayClickedAsync"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.OnMonthClicked"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.OnMonthSelectedAsync"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.OnPickerOpenedAsync"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.OnYearClickedAsync"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.ScrollToYear"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.SetCulture"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseDatePicker.SubmitAndCloseAsync"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Methods["MudBlazor.MudBaseInput`1.BlurAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.FocusAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.ForceRender"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.ForceUpdate"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.GetAriaDescribedByString"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.GetDisabledState"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.GetHelperId"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.GetReadOnlyState"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.InvokeKeyDownAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.InvokeKeyUpAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.ResetValueAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.SelectAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.SelectRangeAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.SetConverter"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.SetCulture"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.SetFormat"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.SetTextAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.SetValueAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.UpdateTextPropertyAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.UpdateValuePropertyAsync"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1.ValidateValue"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ForceRender"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ForceUpdate"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetAriaDescribedByString"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetHelperId"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeKeyDownAsync"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeKeyUpAsync"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetFormat"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetValueAsync"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateTextPropertyAsync"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].UpdateValuePropertyAsync"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"].DeclaringTypeName = "MudBaseInput`1";
        Methods["MudBlazor.MudBaseItemsControl`1.AddItem"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Methods["MudBlazor.MudBaseItemsControl`1.MoveTo"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Methods["MudBlazor.MudBaseItemsControl`1.Next"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Methods["MudBlazor.MudBaseItemsControl`1.Previous"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Methods["MudBlazor.MudBaseItemsControl`1.SelectionChanged"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].MoveTo"].DeclaringTypeName = "MudBaseItemsControl`1";
        Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Next"].DeclaringTypeName = "MudBaseItemsControl`1";
        Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Previous"].DeclaringTypeName = "MudBaseItemsControl`1";
        Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].AddItem"].DeclaringTypeName = "MudBaseItemsControl`1";
        Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].MoveTo"].DeclaringTypeName = "MudBaseItemsControl`1";
        Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Next"].DeclaringTypeName = "MudBaseItemsControl`1";
        Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Previous"].DeclaringTypeName = "MudBaseItemsControl`1";
        Methods["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectionChanged"].DeclaringTypeName = "MudBaseItemsControl`1";
        Methods["MudBlazor.MudBooleanInput`1.ConvertPlacement"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Methods["MudBlazor.MudBooleanInput`1.GetDisabledState"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Methods["MudBlazor.MudBooleanInput`1.GetReadOnlyState"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Methods["MudBlazor.MudBooleanInput`1.HasValue"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Methods["MudBlazor.MudBooleanInput`1.OnChange"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Methods["MudBlazor.MudBooleanInput`1.SetBoolValueAsync"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Methods["MudBlazor.MudBooleanInput`1.SetCheckedAsync"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Methods["MudBlazor.MudBooleanInput`1.SetConverter"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Methods["MudBlazor.MudCarousel`1.AddItem"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Methods["MudBlazor.MudCarousel`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Methods["MudBlazor.MudCarousel`1.SelectionChanged"].DeclaringType = Types["MudBlazor.MudCarousel`1"];
        Methods["MudBlazor.MudCategoryChartBase.GetNormalizedData"].DeclaringType = Types["MudBlazor.MudCategoryChartBase"];
        Methods["MudBlazor.MudChartBase.ToS"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Methods["MudBlazor.MudCheckBox`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Methods["MudBlazor.MudCheckBox`1.HandleKeyDownAsync"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Methods["MudBlazor.MudCheckBox`1.OnChange"].DeclaringType = Types["MudBlazor.MudCheckBox`1"];
        Methods["MudBlazor.MudChip`1.GetAttributes"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Methods["MudBlazor.MudChip`1.GetHtmlTag"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Methods["MudBlazor.MudChip`1.OnCloseAsync"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Methods["MudBlazor.MudColorPicker.ChangeMode"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.ChangeView"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.SetAlpha"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.SetB"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.SetG"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.SetH"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.SetInputString"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.SetL"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.SetR"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.SetS"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudColorPicker.StringValueChangedAsync"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Methods["MudBlazor.MudDataGrid`1.AddFilter"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.AddFilterAsync"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.CancelEditingItemAsync"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.ClearFiltersAsync"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.CollapseAllGroups"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.ExpandAllGroups"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.ExtendSortAsync"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.GetFilteredItemsCount"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.GetItemsOfPage"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.GroupItems"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.HideColumnsPanel"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.NavigateTo"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.OpenFilters"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.ReloadServerData"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.RemoveSortAsync"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.SetDefaultFilterDefinition"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.SetEditingItemAsync"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.SetRowsPerPageAsync"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.SetSelectedItemAsync"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.SetSortAsync"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.ShowColumnsPanel"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDataGrid`1.ToggleFiltersMenu"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Methods["MudBlazor.MudDatePicker.ClearAsync"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.DateFormatChangedAsync"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.GetCalendarStartOfMonth"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.GetCalendarYear"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.GetDayClasses"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.GetTitleDateString"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.GoToDate"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.OnDayClickedAsync"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.OnMonthSelectedAsync"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.OnOpenedAsync"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.OnYearClickedAsync"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.SetDateAsync"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDatePicker.StringValueChangedAsync"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Methods["MudBlazor.MudDateRangePicker.ClearAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.DateFormatChangedAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.FocusEndAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.FocusStartAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.GetCalendarStartOfMonth"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.GetCalendarYear"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.GetDayClasses"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.GetTitleDateString"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.HasValue"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.OnDayClickedAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.OnOpenedAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.OnPickerClosedAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.SelectEndAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.SelectRangeEndAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.SelectRangeStartAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.SelectStartAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.SetDateRangeAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDateRangePicker.StringValueChangedAsync"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Methods["MudBlazor.MudDebouncedInput`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudDebouncedInput`1"];
        Methods["MudBlazor.MudDebouncedInput`1.OnChange"].DeclaringType = Types["MudBlazor.MudDebouncedInput`1"];
        Methods["MudBlazor.MudDebouncedInput`1.UpdateTextPropertyAsync"].DeclaringType = Types["MudBlazor.MudDebouncedInput`1"];
        Methods["MudBlazor.MudDebouncedInput`1.UpdateValuePropertyAsync"].DeclaringType = Types["MudBlazor.MudDebouncedInput`1"];
        Methods["MudBlazor.MudDialog.CloseAsync"].DeclaringType = Types["MudBlazor.MudDialog"];
        Methods["MudBlazor.MudDialog.ShowAsync"].DeclaringType = Types["MudBlazor.MudDialog"];
        Methods["MudBlazor.MudDialogContainer.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudDialogContainer"];
        Methods["MudBlazor.MudDialogProvider.DismissAll"].DeclaringType = Types["MudBlazor.MudDialogProvider"];
        Methods["MudBlazor.MudDragAndDropItemTransaction`1.Cancel"].DeclaringType = Types["MudBlazor.MudDragAndDropItemTransaction`1"];
        Methods["MudBlazor.MudDragAndDropItemTransaction`1.Commit"].DeclaringType = Types["MudBlazor.MudDragAndDropItemTransaction`1"];
        Methods["MudBlazor.MudDropContainer`1.CancelTransaction"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.CommitTransaction"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.GetTransactionCurrentZoneIdentifier"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.GetTransactionIndex"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.GetTransactionItem"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.GetTransactionOriginZoneIdentifier"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.HasTransactionIndexChanged"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.IsItemMovedDownwards"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.IsOrigin"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.IsTransactionOriginatedFromInside"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.Refresh"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.StartTransaction"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.TransactionInProgress"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudDropContainer`1.UpdateTransactionIndex"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Methods["MudBlazor.MudExpansionPanel.CollapseAsync"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Methods["MudBlazor.MudExpansionPanel.ExpandAsync"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Methods["MudBlazor.MudExpansionPanel.ToggleExpansionAsync"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Methods["MudBlazor.MudExpansionPanels.CollapseAllAsync"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Methods["MudBlazor.MudExpansionPanels.CollapseAllExceptAsync"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Methods["MudBlazor.MudExpansionPanels.ExpandAllAsync"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Methods["MudBlazor.MudExpansionPanels.UpdateAllAsync"].DeclaringType = Types["MudBlazor.MudExpansionPanels"];
        Methods["MudBlazor.MudFileUpload`1.Activate"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Methods["MudBlazor.MudFileUpload`1.ClearAsync"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Methods["MudBlazor.MudFileUpload`1.GetDisabledState"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Methods["MudBlazor.MudFileUpload`1.OpenFilePickerAsync"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Methods["MudBlazor.MudFileUpload`1.ReadValue"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Methods["MudBlazor.MudFileUpload`1.WriteValueAsync"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Methods["MudBlazor.MudForm.GetDisabledState"].DeclaringType = Types["MudBlazor.MudForm"];
        Methods["MudBlazor.MudForm.GetReadOnlyState"].DeclaringType = Types["MudBlazor.MudForm"];
        Methods["MudBlazor.MudForm.OnEvaluateForm"].DeclaringType = Types["MudBlazor.MudForm"];
        Methods["MudBlazor.MudForm.ResetAsync"].DeclaringType = Types["MudBlazor.MudForm"];
        Methods["MudBlazor.MudForm.ResetTouched"].DeclaringType = Types["MudBlazor.MudForm"];
        Methods["MudBlazor.MudForm.ResetValidation"].DeclaringType = Types["MudBlazor.MudForm"];
        Methods["MudBlazor.MudForm.Validate"].DeclaringType = Types["MudBlazor.MudForm"];
        Methods["MudBlazor.MudFormComponent`2.BeginValidateAsync"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.BeginValidationAfterAsync"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.FieldChanged"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.GetErrorText"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.HasValue"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.OnConversionErrorOccurred"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.ReadValue"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.RegisterAsFormComponent"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.ResetAsync"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.ResetValidation"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.ResetValueAsync"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.SetConverter"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.SetCulture"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.Validate"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.ValidateModelWithFullPathOfMember"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.ValidateValue"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.ValidateWithAttribute"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.ValidateWithFunc"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2.WriteValueAsync"].DeclaringType = Types["MudBlazor.MudFormComponent`2"];
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetConverter"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetCulture"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidateAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BeginValidationAfterAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FieldChanged"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetErrorText"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HasValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnConversionErrorOccurred"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ReadValue"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RegisterAsFormComponent"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValidation"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Validate"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateModelWithFullPathOfMember"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithAttribute"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValidateWithFunc"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudFormComponent`2[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].WriteValueAsync"].DeclaringTypeName = "MudFormComponent`2";
        Methods["MudBlazor.MudHidden.UpdateAsync"].DeclaringType = Types["MudBlazor.MudHidden"];
        Methods["MudBlazor.MudInput`1.BlurAsync"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1.FocusAsync"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1.HandleClearButtonAsync"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1.OnChange"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1.OnInput"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1.OnPaste"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1.SelectAsync"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1.SelectRangeAsync"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1.SetText"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].DisposeAsyncCore"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].HandleClearButtonAsync"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnChange"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnInput"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPaste"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetText"].DeclaringTypeName = "MudInput`1";
        Methods["MudBlazor.MudItemDropInfo`1.<Clone>$"].DeclaringType = Types["MudBlazor.MudItemDropInfo`1"];
        Methods["MudBlazor.MudItemDropInfo`1.Deconstruct"].DeclaringType = Types["MudBlazor.MudItemDropInfo`1"];
        Methods["MudBlazor.MudItemDropInfo`1.PrintMembers"].DeclaringType = Types["MudBlazor.MudItemDropInfo`1"];
        Methods["MudBlazor.MudLink.OnClickHandler"].DeclaringType = Types["MudBlazor.MudLink"];
        Methods["MudBlazor.MudListItem`1.OnClickHandlerAsync"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Methods["MudBlazor.MudMask.Clear"].DeclaringType = Types["MudBlazor.MudMask"];
        Methods["MudBlazor.MudMask.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudMask"];
        Methods["MudBlazor.MudMask.FocusAsync"].DeclaringType = Types["MudBlazor.MudMask"];
        Methods["MudBlazor.MudMask.OnSelect"].DeclaringType = Types["MudBlazor.MudMask"];
        Methods["MudBlazor.MudMask.SelectAsync"].DeclaringType = Types["MudBlazor.MudMask"];
        Methods["MudBlazor.MudMask.SelectRangeAsync"].DeclaringType = Types["MudBlazor.MudMask"];
        Methods["MudBlazor.MudMask.UpdateTextPropertyAsync"].DeclaringType = Types["MudBlazor.MudMask"];
        Methods["MudBlazor.MudMask.UpdateValuePropertyAsync"].DeclaringType = Types["MudBlazor.MudMask"];
        Methods["MudBlazor.MudMenu.CloseAllMenusAsync"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.CloseMenuAsync"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.GetActivatorHidden"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.GetAnchorOrigin"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.HasPointerOver"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.OnOpenChanged"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.OpenMenuAsync"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.OpenSubMenuAsync"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.RegisterChild"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.ToggleMenuAsync"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenu.UnregisterChild"].DeclaringType = Types["MudBlazor.MudMenu"];
        Methods["MudBlazor.MudMenuItem.GetDense"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Methods["MudBlazor.MudMenuItem.GetDisabled"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Methods["MudBlazor.MudMenuItem.GetHtmlTag"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Methods["MudBlazor.MudMenuItem.GetTypo"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Methods["MudBlazor.MudMenuItem.OnClickHandlerAsync"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Methods["MudBlazor.MudMessageBox.Close"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Methods["MudBlazor.MudMessageBox.ShowAsync"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Methods["MudBlazor.MudNavLink.HandleNavigation"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Methods["MudBlazor.MudNavLink.OnClickHandler"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Methods["MudBlazor.MudNumericField`1.BlurAsync"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.ConstrainBoundaries"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.Decrement"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.FocusAsync"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.HandleKeyDownAsync"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.HandleKeyUpAsync"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.Increment"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.OnMouseWheelAsync"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.SelectAsync"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.SelectRangeAsync"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.SetValueAsync"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudNumericField`1.ValidateInput"].DeclaringType = Types["MudBlazor.MudNumericField`1"];
        Methods["MudBlazor.MudPageContentNavigation.AddSection"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Methods["MudBlazor.MudPageContentNavigation.ScrollToSection"].DeclaringType = Types["MudBlazor.MudPageContentNavigation"];
        Methods["MudBlazor.MudPagination.NavigateToAsync"].DeclaringType = Types["MudBlazor.MudPagination"];
        Methods["MudBlazor.MudPicker`1.BlurAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.ClearAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.CloseAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.FocusAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.GetDisabledState"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.GetReadOnlyState"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.OnClosedAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.OnOpenedAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.OnPickerClosedAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.OnPickerOpenedAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.OpenAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.ResetValueAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.SelectAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.SelectRangeAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.SetTextAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.StringValueChangedAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1.ToggleOpenAsync"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].BlurAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ClearAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].CloseAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].DisposeAsyncCore"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].FocusAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].GetDisabledState"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].GetReadOnlyState"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnClosedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnOpenedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnPickerClosedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnPickerOpenedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OpenAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ResetValueAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectRangeAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SetTextAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ToggleOpenAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ClearAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CloseAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].DisposeAsyncCore"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClosedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnOpenedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPickerClosedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OpenAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].StringValueChangedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToggleOpenAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].BlurAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CloseAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].FocusAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetDisabledState"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].GetReadOnlyState"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClosedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnOpenedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnPickerClosedAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OpenAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ResetValueAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SelectRangeAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetTextAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ToggleOpenAsync"].DeclaringTypeName = "MudPicker`1";
        Methods["MudBlazor.MudProgressLinear.GetBufferPercent"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Methods["MudBlazor.MudProgressLinear.GetStyledBar1Transform"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Methods["MudBlazor.MudProgressLinear.GetStyledBar2Transform"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Methods["MudBlazor.MudProgressLinear.GetValuePercent"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Methods["MudBlazor.MudProgressLinear.UpdatePercentages"].DeclaringType = Types["MudBlazor.MudProgressLinear"];
        Methods["MudBlazor.MudRadio`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Methods["MudBlazor.MudRadio`1.SelectAsync"].DeclaringType = Types["MudBlazor.MudRadio`1"];
        Methods["MudBlazor.MudRadioGroup`1.CheckGenericTypeMatch"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Methods["MudBlazor.MudRadioGroup`1.ResetValueAsync"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Methods["MudBlazor.MudRadioGroup`1.SetSelectedOptionAsync"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Methods["MudBlazor.MudRadioGroup`1.SetSelectedRadioAsync"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Methods["MudBlazor.MudRangeInput`1.ClearButtonClickHandlerAsync"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudRangeInput`1.FocusEndAsync"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudRangeInput`1.FocusStartAsync"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudRangeInput`1.IsClearable"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudRangeInput`1.SelectEndAsync"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudRangeInput`1.SelectRangeEndAsync"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudRangeInput`1.SelectRangeStartAsync"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudRangeInput`1.SelectStartAsync"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudRangeInput`1.UpdateTextPropertyAsync"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudRangeInput`1.UpdateValuePropertyAsync"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Methods["MudBlazor.MudSelect`1.BlurAsync"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.CheckGenericTypeMatch"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.Clear"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.CloseMenu"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.FocusAsync"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.ForceUpdate"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.GetSelectedValuePresenter"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.HasValue"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.OpenMenu"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.RegisterShadowItem"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.SelectAsync"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.SelectClearButtonClickHandlerAsync"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.SelectOption"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.SelectRangeAsync"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.SetCustomizedTextAsync"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.ToggleMenu"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.UnregisterShadowItem"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.UpdateTextPropertyAsync"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSelect`1.UpdateValuePropertyAsync"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Methods["MudBlazor.MudSnackbarElement.InteractionEndHandler"].DeclaringType = Types["MudBlazor.MudSnackbarElement"];
        Methods["MudBlazor.MudSnackbarElement.InteractionStartHandler"].DeclaringType = Types["MudBlazor.MudSnackbarElement"];
        Methods["MudBlazor.MudStep.SetCompletedAsync"].DeclaringType = Types["MudBlazor.MudStep"];
        Methods["MudBlazor.MudStep.SetDisabledAsync"].DeclaringType = Types["MudBlazor.MudStep"];
        Methods["MudBlazor.MudStep.SetHasErrorAsync"].DeclaringType = Types["MudBlazor.MudStep"];
        Methods["MudBlazor.MudStepper.NextStepAsync"].DeclaringType = Types["MudBlazor.MudStepper"];
        Methods["MudBlazor.MudStepper.PreviousStepAsync"].DeclaringType = Types["MudBlazor.MudStepper"];
        Methods["MudBlazor.MudStepper.ResetAsync"].DeclaringType = Types["MudBlazor.MudStepper"];
        Methods["MudBlazor.MudStepper.SkipCurrentStepAsync"].DeclaringType = Types["MudBlazor.MudStepper"];
        Methods["MudBlazor.MudSwitch`1.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudSwitch`1"];
        Methods["MudBlazor.MudTable`1.CollapseAllGroups"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTable`1.ContainsItem"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTable`1.ExpandAllGroups"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTable`1.GetFilteredItemsCount"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTable`1.GetItemsOfPage"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTable`1.IsCheckedRow"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTable`1.ReloadServerData"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTable`1.SetEditingItem"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTable`1.SetSelectedItem"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTable`1.UpdateSelection"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Methods["MudBlazor.MudTableBase.ContainsItem"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Methods["MudBlazor.MudTableBase.GetFilteredItemsCount"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Methods["MudBlazor.MudTableBase.NavigateTo"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Methods["MudBlazor.MudTableBase.SetEditingItem"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Methods["MudBlazor.MudTableBase.SetRowsPerPage"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Methods["MudBlazor.MudTableBase.SetSelectedItem"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Methods["MudBlazor.MudTableBase.UpdateSelection"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Methods["MudBlazor.MudTableGroupRow`1.SetChecked"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Methods["MudBlazor.MudTableSortLabel`1.ToggleSortDirection"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Methods["MudBlazor.MudTabs.ActivatePanel"].DeclaringType = Types["MudBlazor.MudTabs"];
        Methods["MudBlazor.MudTextField`1.BlurAsync"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Methods["MudBlazor.MudTextField`1.Clear"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Methods["MudBlazor.MudTextField`1.FocusAsync"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Methods["MudBlazor.MudTextField`1.ResetValueAsync"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Methods["MudBlazor.MudTextField`1.SelectAsync"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Methods["MudBlazor.MudTextField`1.SelectRangeAsync"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Methods["MudBlazor.MudTextField`1.SetText"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Methods["MudBlazor.MudTextField`1.SetTextAsync"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Methods["MudBlazor.MudTextField`1.SetValueAsync"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Methods["MudBlazor.MudTFootRow.SetChecked"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Methods["MudBlazor.MudTHeadRow.SetChecked"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Methods["MudBlazor.MudThemeProvider.BuildTheme"].DeclaringType = Types["MudBlazor.MudThemeProvider"];
        Methods["MudBlazor.MudThemeProvider.GenerateTheme"].DeclaringType = Types["MudBlazor.MudThemeProvider"];
        Methods["MudBlazor.MudThemeProvider.GetSystemPreference"].DeclaringType = Types["MudBlazor.MudThemeProvider"];
        Methods["MudBlazor.MudThemeProvider.WatchSystemPreference"].DeclaringType = Types["MudBlazor.MudThemeProvider"];
        Methods["MudBlazor.MudTimePicker.ChangeHourAsync"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.ChangeMinuteAsync"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.ClearAsync"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.DisposeAsyncCore"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.OnPickerOpenedAsync"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.OnStickClick"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.ReturnTimeBackUpAsync"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.SelectTimeFromStick"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.SetTimeAsync"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.StringValueChangedAsync"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudTimePicker.SubmitAndCloseAsync"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Methods["MudBlazor.MudToggleGroup`1.DeselectAllItems"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Methods["MudBlazor.MudToggleIconButton.Toggle"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Methods["MudBlazor.MudToggleItem`1.HandleOnClickAsync"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Methods["MudBlazor.MudToggleItem`1.SetSelected"].DeclaringType = Types["MudBlazor.MudToggleItem`1"];
        Methods["MudBlazor.MudTr.ManagePreviousEdition"].DeclaringType = Types["MudBlazor.MudTr"];
        Methods["MudBlazor.MudTr.OnRowClickedAsync"].DeclaringType = Types["MudBlazor.MudTr"];
        Methods["MudBlazor.MudTr.OnRowMouseEnterAsync"].DeclaringType = Types["MudBlazor.MudTr"];
        Methods["MudBlazor.MudTr.OnRowMouseLeaveAsync"].DeclaringType = Types["MudBlazor.MudTr"];
        Methods["MudBlazor.MudTr.SetChecked"].DeclaringType = Types["MudBlazor.MudTr"];
        Methods["MudBlazor.MudTreeView`1.CollapseAllAsync"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Methods["MudBlazor.MudTreeView`1.ExpandAllAsync"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Methods["MudBlazor.MudTreeView`1.FilterAsync"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Methods["MudBlazor.MudTreeViewItem`1.CollapseAllAsync"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Methods["MudBlazor.MudTreeViewItem`1.ExpandAllAsync"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Methods["MudBlazor.MudTreeViewItem`1.ReloadAsync"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Methods["MudBlazor.MudVirtualize`1.RefreshDataAsync"].DeclaringType = Types["MudBlazor.MudVirtualize`1"];
        Methods["MudBlazor.MultiMask.Backspace"].DeclaringType = Types["MudBlazor.MultiMask"];
        Methods["MudBlazor.MultiMask.CheckOption"].DeclaringType = Types["MudBlazor.MultiMask"];
        Methods["MudBlazor.MultiMask.Delete"].DeclaringType = Types["MudBlazor.MultiMask"];
        Methods["MudBlazor.MultiMask.DoCheckAndRedo"].DeclaringType = Types["MudBlazor.MultiMask"];
        Methods["MudBlazor.MultiMask.Insert"].DeclaringType = Types["MudBlazor.MultiMask"];
        Methods["MudBlazor.MultiMask.UpdateFrom"].DeclaringType = Types["MudBlazor.MultiMask"];
        Methods["MudBlazor.NavigationContext.<Clone>$"].DeclaringType = Types["MudBlazor.NavigationContext"];
        Methods["MudBlazor.NavigationContext.Deconstruct"].DeclaringType = Types["MudBlazor.NavigationContext"];
        Methods["MudBlazor.NavigationContext.PrintMembers"].DeclaringType = Types["MudBlazor.NavigationContext"];
        Methods["MudBlazor.PatternMask.AlignAgainstMask"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.Backspace"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.Delete"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.DeleteSelection"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.FillWithPlaceholder"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.GetCleanText"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.InitInternals"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.Insert"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.IsMatch"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.ModifyFinalText"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.ModifyPartiallyAlignedMask"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.UpdateFrom"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.PatternMask.UpdateText"].DeclaringType = Types["MudBlazor.PatternMask"];
        Methods["MudBlazor.RangeConverter`1.Join"].DeclaringType = Types["MudBlazor.RangeConverter`1"];
        Methods["MudBlazor.RangeConverter`1.Split"].DeclaringType = Types["MudBlazor.RangeConverter`1"];
        Methods["MudBlazor.RegexMask.AlignAgainstMask"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.Backspace"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.Delete"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.DeleteSelection"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.Email"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.InitInternals"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.InitRegex"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.Insert"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.IPv4"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.IPv6"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.RegexMask.UpdateFrom"].DeclaringType = Types["MudBlazor.RegexMask"];
        Methods["MudBlazor.Services.KeyboardEvent.BeginInvoke"].DeclaringType = Types["MudBlazor.Services.KeyboardEvent"];
        Methods["MudBlazor.Services.KeyboardEvent.EndInvoke"].DeclaringType = Types["MudBlazor.Services.KeyboardEvent"];
        Methods["MudBlazor.Services.KeyboardEvent.Invoke"].DeclaringType = Types["MudBlazor.Services.KeyboardEvent"];
        Methods["MudBlazor.Services.SizeChanged.BeginInvoke"].DeclaringType = Types["MudBlazor.Services.SizeChanged"];
        Methods["MudBlazor.Services.SizeChanged.EndInvoke"].DeclaringType = Types["MudBlazor.Services.SizeChanged"];
        Methods["MudBlazor.Services.SizeChanged.Invoke"].DeclaringType = Types["MudBlazor.Services.SizeChanged"];
        Methods["MudBlazor.Snackbar.ForceClose"].DeclaringType = Types["MudBlazor.Snackbar"];
        Methods["MudBlazor.Snackbar.PauseTransitions"].DeclaringType = Types["MudBlazor.Snackbar"];
        Methods["MudBlazor.SnackbarService.Add"].DeclaringType = Types["MudBlazor.SnackbarService"];
        Methods["MudBlazor.SnackbarService.Clear"].DeclaringType = Types["MudBlazor.SnackbarService"];
        Methods["MudBlazor.SnackbarService.Remove"].DeclaringType = Types["MudBlazor.SnackbarService"];
        Methods["MudBlazor.SnackbarService.RemoveByKey"].DeclaringType = Types["MudBlazor.SnackbarService"];
        Methods["MudBlazor.SortDefinition`1.<Clone>$"].DeclaringType = Types["MudBlazor.SortDefinition`1"];
        Methods["MudBlazor.SortDefinition`1.Deconstruct"].DeclaringType = Types["MudBlazor.SortDefinition`1"];
        Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithChangeHandler"].DeclaringType = Types["MudBlazor.State.Builder.RegisterParameterBuilder`1"];
        Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithComparer"].DeclaringType = Types["MudBlazor.State.Builder.RegisterParameterBuilder`1"];
        Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithEventCallback"].DeclaringType = Types["MudBlazor.State.Builder.RegisterParameterBuilder`1"];
        Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithName"].DeclaringType = Types["MudBlazor.State.Builder.RegisterParameterBuilder`1"];
        Methods["MudBlazor.State.Builder.RegisterParameterBuilder`1.WithParameter"].DeclaringType = Types["MudBlazor.State.Builder.RegisterParameterBuilder`1"];
        Methods["MudBlazor.State.ParameterState`1.SetValueAsync"].DeclaringType = Types["MudBlazor.State.ParameterState`1"];
        Methods["MudBlazor.SvgLegend.HandleCheckboxChangeAsync"].DeclaringType = Types["MudBlazor.SvgLegend"];
        Methods["MudBlazor.TableContext.Add"].DeclaringType = Types["MudBlazor.TableContext"];
        Methods["MudBlazor.TableContext.InitializeSorting"].DeclaringType = Types["MudBlazor.TableContext"];
        Methods["MudBlazor.TableContext.ManagePreviousEditedRow"].DeclaringType = Types["MudBlazor.TableContext"];
        Methods["MudBlazor.TableContext.Remove"].DeclaringType = Types["MudBlazor.TableContext"];
        Methods["MudBlazor.TableContext.UpdateRowCheckBoxes"].DeclaringType = Types["MudBlazor.TableContext"];
        Methods["MudBlazor.TableContext`1.Add"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Methods["MudBlazor.TableContext`1.InitializeSorting"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Methods["MudBlazor.TableContext`1.ManagePreviousEditedRow"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Methods["MudBlazor.TableContext`1.Remove"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Methods["MudBlazor.TableContext`1.SetSortFunc"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Methods["MudBlazor.TableContext`1.Sort"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Methods["MudBlazor.TableContext`1.UpdateRowCheckBoxes"].DeclaringType = Types["MudBlazor.TableContext`1"];
        Methods["MudBlazor.TableRowValidator.Validate"].DeclaringType = Types["MudBlazor.TableRowValidator"];
        Methods["MudBlazor.TimeSeriesChartSeries+TimeValue.<Clone>$"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries+TimeValue"];
        Methods["MudBlazor.TimeSeriesChartSeries+TimeValue.Deconstruct"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries+TimeValue"];
        Methods["MudBlazor.TimeSeriesChartSeries+TimeValue.PrintMembers"].DeclaringType = Types["MudBlazor.TimeSeriesChartSeries+TimeValue"];
        Methods["MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1.CloneObject"].DeclaringType = Types["MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1"];
        Methods["MudBlazor.Utilities.MudColor.ChangeLightness"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.ColorDarken"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.ColorLighten"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.ColorRgbDarken"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.ColorRgbLighten"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.Deconstruct"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.GenerateAnalogousPalette"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.GenerateGradientPalette"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.GenerateMultiGradientPalette"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.GenerateTintShadePalette"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.HslEquals"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.Lerp"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.Parse"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.RgbaEquals"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.SetAlpha"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.SetB"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.SetG"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.SetH"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.SetL"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.SetR"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.SetS"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.MudColor.TryParse"].DeclaringType = Types["MudBlazor.Utilities.MudColor"];
        Methods["MudBlazor.Utilities.NaturalComparer.Compare"].DeclaringType = Types["MudBlazor.Utilities.NaturalComparer"];
        Methods["MudBlazor.Utilities.NaturalComparer.CompareNatural"].DeclaringType = Types["MudBlazor.Utilities.NaturalComparer"];
        Methods["MudBlazor.Utilities.SortingAssistant.UpdateOrder"].DeclaringType = Types["MudBlazor.Utilities.SortingAssistant"];
        Methods["MudBlazor.Utilities.StyleBuilder.AddStyle"].DeclaringType = Types["MudBlazor.Utilities.StyleBuilder"];
        Methods["MudBlazor.Utilities.StyleBuilder.AddStyleFromAttributes"].DeclaringType = Types["MudBlazor.Utilities.StyleBuilder"];
        Methods["MudBlazor.Utilities.StyleBuilder.Build"].DeclaringType = Types["MudBlazor.Utilities.StyleBuilder"];
        Methods["MudBlazor.Utilities.StyleBuilder.Default"].DeclaringType = Types["MudBlazor.Utilities.StyleBuilder"];
        Methods["MudBlazor.Utilities.StyleBuilder.Empty"].DeclaringType = Types["MudBlazor.Utilities.StyleBuilder"];
        Methods["MudBlazor.Utilities.ValueBuilder.AddValue"].DeclaringType = Types["MudBlazor.Utilities.ValueBuilder"];
        Methods["System.Delegate.Clone"].DeclaringTypeName = "Delegate";
        Methods["System.Delegate.DynamicInvoke"].DeclaringTypeName = "Delegate";
        Methods["System.Delegate.DynamicInvokeImpl"].DeclaringTypeName = "Delegate";
        Methods["System.Exception.GetBaseException"].DeclaringTypeName = "Exception";
        Methods["System.Exception.GetObjectData"].DeclaringTypeName = "Exception";
        Methods["System.MulticastDelegate.CombineImpl"].DeclaringTypeName = "MulticastDelegate";
        Methods["System.MulticastDelegate.GetInvocationList"].DeclaringTypeName = "MulticastDelegate";
        Methods["System.MulticastDelegate.GetMethodImpl"].DeclaringTypeName = "MulticastDelegate";
        Methods["System.MulticastDelegate.GetObjectData"].DeclaringTypeName = "MulticastDelegate";
        Methods["System.MulticastDelegate.RemoveImpl"].DeclaringTypeName = "MulticastDelegate";

        // Link fields to their declaring types
        Fields["MudBlazor.Adornment.End"].DeclaringType = Types["MudBlazor.Adornment"];
        Fields["MudBlazor.Adornment.None"].DeclaringType = Types["MudBlazor.Adornment"];
        Fields["MudBlazor.Adornment.Start"].DeclaringType = Types["MudBlazor.Adornment"];
        Fields["MudBlazor.AggregateType.Avg"].DeclaringType = Types["MudBlazor.AggregateType"];
        Fields["MudBlazor.AggregateType.Count"].DeclaringType = Types["MudBlazor.AggregateType"];
        Fields["MudBlazor.AggregateType.Custom"].DeclaringType = Types["MudBlazor.AggregateType"];
        Fields["MudBlazor.AggregateType.Max"].DeclaringType = Types["MudBlazor.AggregateType"];
        Fields["MudBlazor.AggregateType.Min"].DeclaringType = Types["MudBlazor.AggregateType"];
        Fields["MudBlazor.AggregateType.Sum"].DeclaringType = Types["MudBlazor.AggregateType"];
        Fields["MudBlazor.Align.Center"].DeclaringType = Types["MudBlazor.Align"];
        Fields["MudBlazor.Align.End"].DeclaringType = Types["MudBlazor.Align"];
        Fields["MudBlazor.Align.Inherit"].DeclaringType = Types["MudBlazor.Align"];
        Fields["MudBlazor.Align.Justify"].DeclaringType = Types["MudBlazor.Align"];
        Fields["MudBlazor.Align.Left"].DeclaringType = Types["MudBlazor.Align"];
        Fields["MudBlazor.Align.Right"].DeclaringType = Types["MudBlazor.Align"];
        Fields["MudBlazor.Align.Start"].DeclaringType = Types["MudBlazor.Align"];
        Fields["MudBlazor.AlignItems.Baseline"].DeclaringType = Types["MudBlazor.AlignItems"];
        Fields["MudBlazor.AlignItems.Center"].DeclaringType = Types["MudBlazor.AlignItems"];
        Fields["MudBlazor.AlignItems.End"].DeclaringType = Types["MudBlazor.AlignItems"];
        Fields["MudBlazor.AlignItems.Start"].DeclaringType = Types["MudBlazor.AlignItems"];
        Fields["MudBlazor.AlignItems.Stretch"].DeclaringType = Types["MudBlazor.AlignItems"];
        Fields["MudBlazor.Anchor.Bottom"].DeclaringType = Types["MudBlazor.Anchor"];
        Fields["MudBlazor.Anchor.End"].DeclaringType = Types["MudBlazor.Anchor"];
        Fields["MudBlazor.Anchor.Left"].DeclaringType = Types["MudBlazor.Anchor"];
        Fields["MudBlazor.Anchor.Right"].DeclaringType = Types["MudBlazor.Anchor"];
        Fields["MudBlazor.Anchor.Start"].DeclaringType = Types["MudBlazor.Anchor"];
        Fields["MudBlazor.Anchor.Top"].DeclaringType = Types["MudBlazor.Anchor"];
        Fields["MudBlazor.Animation.False"].DeclaringType = Types["MudBlazor.Animation"];
        Fields["MudBlazor.Animation.Pulse"].DeclaringType = Types["MudBlazor.Animation"];
        Fields["MudBlazor.Animation.Wave"].DeclaringType = Types["MudBlazor.Animation"];
        Fields["MudBlazor.Breakpoint.Always"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.Lg"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.LgAndDown"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.LgAndUp"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.Md"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.MdAndDown"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.MdAndUp"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.None"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.Sm"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.SmAndDown"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.SmAndUp"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.Xl"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.XlAndDown"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.XlAndUp"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.Xs"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.Breakpoint.Xxl"].DeclaringType = Types["MudBlazor.Breakpoint"];
        Fields["MudBlazor.ButtonType.Button"].DeclaringType = Types["MudBlazor.ButtonType"];
        Fields["MudBlazor.ButtonType.Reset"].DeclaringType = Types["MudBlazor.ButtonType"];
        Fields["MudBlazor.ButtonType.Submit"].DeclaringType = Types["MudBlazor.ButtonType"];
        Fields["MudBlazor.ChartType.Bar"].DeclaringType = Types["MudBlazor.ChartType"];
        Fields["MudBlazor.ChartType.Donut"].DeclaringType = Types["MudBlazor.ChartType"];
        Fields["MudBlazor.ChartType.HeatMap"].DeclaringType = Types["MudBlazor.ChartType"];
        Fields["MudBlazor.ChartType.Line"].DeclaringType = Types["MudBlazor.ChartType"];
        Fields["MudBlazor.ChartType.Pie"].DeclaringType = Types["MudBlazor.ChartType"];
        Fields["MudBlazor.ChartType.StackedBar"].DeclaringType = Types["MudBlazor.ChartType"];
        Fields["MudBlazor.ChartType.Timeseries"].DeclaringType = Types["MudBlazor.ChartType"];
        Fields["MudBlazor.ChatArrowPosition.Bottom"].DeclaringType = Types["MudBlazor.ChatArrowPosition"];
        Fields["MudBlazor.ChatArrowPosition.Middle"].DeclaringType = Types["MudBlazor.ChatArrowPosition"];
        Fields["MudBlazor.ChatArrowPosition.None"].DeclaringType = Types["MudBlazor.ChatArrowPosition"];
        Fields["MudBlazor.ChatArrowPosition.Top"].DeclaringType = Types["MudBlazor.ChatArrowPosition"];
        Fields["MudBlazor.ChatBubblePosition.End"].DeclaringType = Types["MudBlazor.ChatBubblePosition"];
        Fields["MudBlazor.ChatBubblePosition.Start"].DeclaringType = Types["MudBlazor.ChatBubblePosition"];
        Fields["MudBlazor.CollectionComparer`1.Default"].DeclaringType = Types["MudBlazor.CollectionComparer`1"];
        Fields["MudBlazor.Color.Dark"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Default"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Error"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Info"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Inherit"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Primary"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Secondary"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Success"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Surface"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Tertiary"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Transparent"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.Color.Warning"].DeclaringType = Types["MudBlazor.Color"];
        Fields["MudBlazor.ColorPickerMode.HEX"].DeclaringType = Types["MudBlazor.ColorPickerMode"];
        Fields["MudBlazor.ColorPickerMode.HSL"].DeclaringType = Types["MudBlazor.ColorPickerMode"];
        Fields["MudBlazor.ColorPickerMode.RGB"].DeclaringType = Types["MudBlazor.ColorPickerMode"];
        Fields["MudBlazor.ColorPickerView.Grid"].DeclaringType = Types["MudBlazor.ColorPickerView"];
        Fields["MudBlazor.ColorPickerView.GridCompact"].DeclaringType = Types["MudBlazor.ColorPickerView"];
        Fields["MudBlazor.ColorPickerView.Palette"].DeclaringType = Types["MudBlazor.ColorPickerView"];
        Fields["MudBlazor.ColorPickerView.Spectrum"].DeclaringType = Types["MudBlazor.ColorPickerView"];
        Fields["MudBlazor.ContentNavigationExpandBehaviour.Always"].DeclaringType = Types["MudBlazor.ContentNavigationExpandBehaviour"];
        Fields["MudBlazor.ContentNavigationExpandBehaviour.WhenSectionIsActive"].DeclaringType = Types["MudBlazor.ContentNavigationExpandBehaviour"];
        Fields["MudBlazor.DataGridEditMode.Cell"].DeclaringType = Types["MudBlazor.DataGridEditMode"];
        Fields["MudBlazor.DataGridEditMode.Form"].DeclaringType = Types["MudBlazor.DataGridEditMode"];
        Fields["MudBlazor.DataGridEditTrigger.Manual"].DeclaringType = Types["MudBlazor.DataGridEditTrigger"];
        Fields["MudBlazor.DataGridEditTrigger.OnRowClick"].DeclaringType = Types["MudBlazor.DataGridEditTrigger"];
        Fields["MudBlazor.DataGridFilterCaseSensitivity.CaseInsensitive"].DeclaringType = Types["MudBlazor.DataGridFilterCaseSensitivity"];
        Fields["MudBlazor.DataGridFilterCaseSensitivity.Default"].DeclaringType = Types["MudBlazor.DataGridFilterCaseSensitivity"];
        Fields["MudBlazor.DataGridFilterCaseSensitivity.Ignore"].DeclaringType = Types["MudBlazor.DataGridFilterCaseSensitivity"];
        Fields["MudBlazor.DataGridFilterMode.ColumnFilterMenu"].DeclaringType = Types["MudBlazor.DataGridFilterMode"];
        Fields["MudBlazor.DataGridFilterMode.ColumnFilterRow"].DeclaringType = Types["MudBlazor.DataGridFilterMode"];
        Fields["MudBlazor.DataGridFilterMode.Simple"].DeclaringType = Types["MudBlazor.DataGridFilterMode"];
        Fields["MudBlazor.DefaultConverter`1.GlobalGetFunc"].DeclaringType = Types["MudBlazor.DefaultConverter`1"];
        Fields["MudBlazor.DefaultConverter`1.GlobalSetFunc"].DeclaringType = Types["MudBlazor.DefaultConverter`1"];
        Fields["MudBlazor.DefaultFocus.Element"].DeclaringType = Types["MudBlazor.DefaultFocus"];
        Fields["MudBlazor.DefaultFocus.FirstChild"].DeclaringType = Types["MudBlazor.DefaultFocus"];
        Fields["MudBlazor.DefaultFocus.LastChild"].DeclaringType = Types["MudBlazor.DefaultFocus"];
        Fields["MudBlazor.DefaultFocus.None"].DeclaringType = Types["MudBlazor.DefaultFocus"];
        Fields["MudBlazor.Defaults+Classes+Position.BottomCenter"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.Defaults+Classes+Position.BottomEnd"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.Defaults+Classes+Position.BottomLeft"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.Defaults+Classes+Position.BottomRight"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.Defaults+Classes+Position.BottomStart"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.Defaults+Classes+Position.TopCenter"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.Defaults+Classes+Position.TopEnd"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.Defaults+Classes+Position.TopLeft"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.Defaults+Classes+Position.TopRight"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.Defaults+Classes+Position.TopStart"].DeclaringType = Types["MudBlazor.Defaults+Classes+Position"];
        Fields["MudBlazor.DialogPosition.BottomCenter"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.DialogPosition.BottomLeft"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.DialogPosition.BottomRight"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.DialogPosition.Center"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.DialogPosition.CenterLeft"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.DialogPosition.CenterRight"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.DialogPosition.Custom"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.DialogPosition.TopCenter"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.DialogPosition.TopLeft"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.DialogPosition.TopRight"].DeclaringType = Types["MudBlazor.DialogPosition"];
        Fields["MudBlazor.Direction.Bottom"].DeclaringType = Types["MudBlazor.Direction"];
        Fields["MudBlazor.Direction.End"].DeclaringType = Types["MudBlazor.Direction"];
        Fields["MudBlazor.Direction.Left"].DeclaringType = Types["MudBlazor.Direction"];
        Fields["MudBlazor.Direction.Right"].DeclaringType = Types["MudBlazor.Direction"];
        Fields["MudBlazor.Direction.Start"].DeclaringType = Types["MudBlazor.Direction"];
        Fields["MudBlazor.Direction.Top"].DeclaringType = Types["MudBlazor.Direction"];
        Fields["MudBlazor.DividerType.FullWidth"].DeclaringType = Types["MudBlazor.DividerType"];
        Fields["MudBlazor.DividerType.Inset"].DeclaringType = Types["MudBlazor.DividerType"];
        Fields["MudBlazor.DividerType.Middle"].DeclaringType = Types["MudBlazor.DividerType"];
        Fields["MudBlazor.DoubleEpsilonEqualityComparer.Default"].DeclaringType = Types["MudBlazor.DoubleEpsilonEqualityComparer"];
        Fields["MudBlazor.DrawerClipMode.Always"].DeclaringType = Types["MudBlazor.DrawerClipMode"];
        Fields["MudBlazor.DrawerClipMode.Docked"].DeclaringType = Types["MudBlazor.DrawerClipMode"];
        Fields["MudBlazor.DrawerClipMode.Never"].DeclaringType = Types["MudBlazor.DrawerClipMode"];
        Fields["MudBlazor.DrawerVariant.Mini"].DeclaringType = Types["MudBlazor.DrawerVariant"];
        Fields["MudBlazor.DrawerVariant.Persistent"].DeclaringType = Types["MudBlazor.DrawerVariant"];
        Fields["MudBlazor.DrawerVariant.Responsive"].DeclaringType = Types["MudBlazor.DrawerVariant"];
        Fields["MudBlazor.DrawerVariant.Temporary"].DeclaringType = Types["MudBlazor.DrawerVariant"];
        Fields["MudBlazor.DropdownWidth.Adaptive"].DeclaringType = Types["MudBlazor.DropdownWidth"];
        Fields["MudBlazor.DropdownWidth.Ignore"].DeclaringType = Types["MudBlazor.DropdownWidth"];
        Fields["MudBlazor.DropdownWidth.Relative"].DeclaringType = Types["MudBlazor.DropdownWidth"];
        Fields["MudBlazor.Edge.End"].DeclaringType = Types["MudBlazor.Edge"];
        Fields["MudBlazor.Edge.False"].DeclaringType = Types["MudBlazor.Edge"];
        Fields["MudBlazor.Edge.Start"].DeclaringType = Types["MudBlazor.Edge"];
        Fields["MudBlazor.FilterOperator+Boolean.Is"].DeclaringType = Types["MudBlazor.FilterOperator+Boolean"];
        Fields["MudBlazor.FilterOperator+DateTime.After"].DeclaringType = Types["MudBlazor.FilterOperator+DateTime"];
        Fields["MudBlazor.FilterOperator+DateTime.Before"].DeclaringType = Types["MudBlazor.FilterOperator+DateTime"];
        Fields["MudBlazor.FilterOperator+DateTime.Empty"].DeclaringType = Types["MudBlazor.FilterOperator+DateTime"];
        Fields["MudBlazor.FilterOperator+DateTime.Is"].DeclaringType = Types["MudBlazor.FilterOperator+DateTime"];
        Fields["MudBlazor.FilterOperator+DateTime.IsNot"].DeclaringType = Types["MudBlazor.FilterOperator+DateTime"];
        Fields["MudBlazor.FilterOperator+DateTime.NotEmpty"].DeclaringType = Types["MudBlazor.FilterOperator+DateTime"];
        Fields["MudBlazor.FilterOperator+DateTime.OnOrAfter"].DeclaringType = Types["MudBlazor.FilterOperator+DateTime"];
        Fields["MudBlazor.FilterOperator+DateTime.OnOrBefore"].DeclaringType = Types["MudBlazor.FilterOperator+DateTime"];
        Fields["MudBlazor.FilterOperator+Enum.Is"].DeclaringType = Types["MudBlazor.FilterOperator+Enum"];
        Fields["MudBlazor.FilterOperator+Enum.IsNot"].DeclaringType = Types["MudBlazor.FilterOperator+Enum"];
        Fields["MudBlazor.FilterOperator+Guid.Equal"].DeclaringType = Types["MudBlazor.FilterOperator+Guid"];
        Fields["MudBlazor.FilterOperator+Guid.NotEqual"].DeclaringType = Types["MudBlazor.FilterOperator+Guid"];
        Fields["MudBlazor.FilterOperator+Number.Empty"].DeclaringType = Types["MudBlazor.FilterOperator+Number"];
        Fields["MudBlazor.FilterOperator+Number.Equal"].DeclaringType = Types["MudBlazor.FilterOperator+Number"];
        Fields["MudBlazor.FilterOperator+Number.GreaterThan"].DeclaringType = Types["MudBlazor.FilterOperator+Number"];
        Fields["MudBlazor.FilterOperator+Number.GreaterThanOrEqual"].DeclaringType = Types["MudBlazor.FilterOperator+Number"];
        Fields["MudBlazor.FilterOperator+Number.LessThan"].DeclaringType = Types["MudBlazor.FilterOperator+Number"];
        Fields["MudBlazor.FilterOperator+Number.LessThanOrEqual"].DeclaringType = Types["MudBlazor.FilterOperator+Number"];
        Fields["MudBlazor.FilterOperator+Number.NotEmpty"].DeclaringType = Types["MudBlazor.FilterOperator+Number"];
        Fields["MudBlazor.FilterOperator+Number.NotEqual"].DeclaringType = Types["MudBlazor.FilterOperator+Number"];
        Fields["MudBlazor.FilterOperator+String.Contains"].DeclaringType = Types["MudBlazor.FilterOperator+String"];
        Fields["MudBlazor.FilterOperator+String.Empty"].DeclaringType = Types["MudBlazor.FilterOperator+String"];
        Fields["MudBlazor.FilterOperator+String.EndsWith"].DeclaringType = Types["MudBlazor.FilterOperator+String"];
        Fields["MudBlazor.FilterOperator+String.Equal"].DeclaringType = Types["MudBlazor.FilterOperator+String"];
        Fields["MudBlazor.FilterOperator+String.NotContains"].DeclaringType = Types["MudBlazor.FilterOperator+String"];
        Fields["MudBlazor.FilterOperator+String.NotEmpty"].DeclaringType = Types["MudBlazor.FilterOperator+String"];
        Fields["MudBlazor.FilterOperator+String.NotEqual"].DeclaringType = Types["MudBlazor.FilterOperator+String"];
        Fields["MudBlazor.FilterOperator+String.StartsWith"].DeclaringType = Types["MudBlazor.FilterOperator+String"];
        Fields["MudBlazor.HorizontalAlignment.Center"].DeclaringType = Types["MudBlazor.HorizontalAlignment"];
        Fields["MudBlazor.HorizontalAlignment.End"].DeclaringType = Types["MudBlazor.HorizontalAlignment"];
        Fields["MudBlazor.HorizontalAlignment.Left"].DeclaringType = Types["MudBlazor.HorizontalAlignment"];
        Fields["MudBlazor.HorizontalAlignment.Right"].DeclaringType = Types["MudBlazor.HorizontalAlignment"];
        Fields["MudBlazor.HorizontalAlignment.Start"].DeclaringType = Types["MudBlazor.HorizontalAlignment"];
        Fields["MudBlazor.InputMode.decimal"].DeclaringType = Types["MudBlazor.InputMode"];
        Fields["MudBlazor.InputMode.email"].DeclaringType = Types["MudBlazor.InputMode"];
        Fields["MudBlazor.InputMode.none"].DeclaringType = Types["MudBlazor.InputMode"];
        Fields["MudBlazor.InputMode.numeric"].DeclaringType = Types["MudBlazor.InputMode"];
        Fields["MudBlazor.InputMode.search"].DeclaringType = Types["MudBlazor.InputMode"];
        Fields["MudBlazor.InputMode.tel"].DeclaringType = Types["MudBlazor.InputMode"];
        Fields["MudBlazor.InputMode.text"].DeclaringType = Types["MudBlazor.InputMode"];
        Fields["MudBlazor.InputMode.url"].DeclaringType = Types["MudBlazor.InputMode"];
        Fields["MudBlazor.InputType.Color"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Date"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.DateTimeLocal"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Email"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Hidden"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Month"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Number"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Password"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Search"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Telephone"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Text"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Time"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Url"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InputType.Week"].DeclaringType = Types["MudBlazor.InputType"];
        Fields["MudBlazor.InterpolationOption.EndSlope"].DeclaringType = Types["MudBlazor.InterpolationOption"];
        Fields["MudBlazor.InterpolationOption.NaturalSpline"].DeclaringType = Types["MudBlazor.InterpolationOption"];
        Fields["MudBlazor.InterpolationOption.Periodic"].DeclaringType = Types["MudBlazor.InterpolationOption"];
        Fields["MudBlazor.InterpolationOption.Straight"].DeclaringType = Types["MudBlazor.InterpolationOption"];
        Fields["MudBlazor.Justify.Center"].DeclaringType = Types["MudBlazor.Justify"];
        Fields["MudBlazor.Justify.FlexEnd"].DeclaringType = Types["MudBlazor.Justify"];
        Fields["MudBlazor.Justify.FlexStart"].DeclaringType = Types["MudBlazor.Justify"];
        Fields["MudBlazor.Justify.SpaceAround"].DeclaringType = Types["MudBlazor.Justify"];
        Fields["MudBlazor.Justify.SpaceBetween"].DeclaringType = Types["MudBlazor.Justify"];
        Fields["MudBlazor.Justify.SpaceEvenly"].DeclaringType = Types["MudBlazor.Justify"];
        Fields["MudBlazor.Margin.Dense"].DeclaringType = Types["MudBlazor.Margin"];
        Fields["MudBlazor.Margin.None"].DeclaringType = Types["MudBlazor.Margin"];
        Fields["MudBlazor.Margin.Normal"].DeclaringType = Types["MudBlazor.Margin"];
        Fields["MudBlazor.MaxWidth.ExtraExtraLarge"].DeclaringType = Types["MudBlazor.MaxWidth"];
        Fields["MudBlazor.MaxWidth.ExtraLarge"].DeclaringType = Types["MudBlazor.MaxWidth"];
        Fields["MudBlazor.MaxWidth.ExtraSmall"].DeclaringType = Types["MudBlazor.MaxWidth"];
        Fields["MudBlazor.MaxWidth.False"].DeclaringType = Types["MudBlazor.MaxWidth"];
        Fields["MudBlazor.MaxWidth.Large"].DeclaringType = Types["MudBlazor.MaxWidth"];
        Fields["MudBlazor.MaxWidth.Medium"].DeclaringType = Types["MudBlazor.MaxWidth"];
        Fields["MudBlazor.MaxWidth.Small"].DeclaringType = Types["MudBlazor.MaxWidth"];
        Fields["MudBlazor.MouseEvent.LeftClick"].DeclaringType = Types["MudBlazor.MouseEvent"];
        Fields["MudBlazor.MouseEvent.MouseOver"].DeclaringType = Types["MudBlazor.MouseEvent"];
        Fields["MudBlazor.MouseEvent.RightClick"].DeclaringType = Types["MudBlazor.MouseEvent"];
        Fields["MudBlazor.MudBaseDatePicker.CurrentView"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Fields["MudBlazor.MudDataGrid`1.RenderedColumns"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Fields["MudBlazor.MudTabPanel.PanelRef"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Fields["MudBlazor.ObjectFit.Contain"].DeclaringType = Types["MudBlazor.ObjectFit"];
        Fields["MudBlazor.ObjectFit.Cover"].DeclaringType = Types["MudBlazor.ObjectFit"];
        Fields["MudBlazor.ObjectFit.Fill"].DeclaringType = Types["MudBlazor.ObjectFit"];
        Fields["MudBlazor.ObjectFit.None"].DeclaringType = Types["MudBlazor.ObjectFit"];
        Fields["MudBlazor.ObjectFit.ScaleDown"].DeclaringType = Types["MudBlazor.ObjectFit"];
        Fields["MudBlazor.ObjectPosition.Bottom"].DeclaringType = Types["MudBlazor.ObjectPosition"];
        Fields["MudBlazor.ObjectPosition.Center"].DeclaringType = Types["MudBlazor.ObjectPosition"];
        Fields["MudBlazor.ObjectPosition.Left"].DeclaringType = Types["MudBlazor.ObjectPosition"];
        Fields["MudBlazor.ObjectPosition.LeftBottom"].DeclaringType = Types["MudBlazor.ObjectPosition"];
        Fields["MudBlazor.ObjectPosition.LeftTop"].DeclaringType = Types["MudBlazor.ObjectPosition"];
        Fields["MudBlazor.ObjectPosition.Right"].DeclaringType = Types["MudBlazor.ObjectPosition"];
        Fields["MudBlazor.ObjectPosition.RightBottom"].DeclaringType = Types["MudBlazor.ObjectPosition"];
        Fields["MudBlazor.ObjectPosition.RightTop"].DeclaringType = Types["MudBlazor.ObjectPosition"];
        Fields["MudBlazor.ObjectPosition.Top"].DeclaringType = Types["MudBlazor.ObjectPosition"];
        Fields["MudBlazor.OpenTo.Date"].DeclaringType = Types["MudBlazor.OpenTo"];
        Fields["MudBlazor.OpenTo.Hours"].DeclaringType = Types["MudBlazor.OpenTo"];
        Fields["MudBlazor.OpenTo.Minutes"].DeclaringType = Types["MudBlazor.OpenTo"];
        Fields["MudBlazor.OpenTo.Month"].DeclaringType = Types["MudBlazor.OpenTo"];
        Fields["MudBlazor.OpenTo.None"].DeclaringType = Types["MudBlazor.OpenTo"];
        Fields["MudBlazor.OpenTo.Year"].DeclaringType = Types["MudBlazor.OpenTo"];
        Fields["MudBlazor.Orientation.Landscape"].DeclaringType = Types["MudBlazor.Orientation"];
        Fields["MudBlazor.Orientation.Portrait"].DeclaringType = Types["MudBlazor.Orientation"];
        Fields["MudBlazor.Origin.BottomCenter"].DeclaringType = Types["MudBlazor.Origin"];
        Fields["MudBlazor.Origin.BottomLeft"].DeclaringType = Types["MudBlazor.Origin"];
        Fields["MudBlazor.Origin.BottomRight"].DeclaringType = Types["MudBlazor.Origin"];
        Fields["MudBlazor.Origin.CenterCenter"].DeclaringType = Types["MudBlazor.Origin"];
        Fields["MudBlazor.Origin.CenterLeft"].DeclaringType = Types["MudBlazor.Origin"];
        Fields["MudBlazor.Origin.CenterRight"].DeclaringType = Types["MudBlazor.Origin"];
        Fields["MudBlazor.Origin.TopCenter"].DeclaringType = Types["MudBlazor.Origin"];
        Fields["MudBlazor.Origin.TopLeft"].DeclaringType = Types["MudBlazor.Origin"];
        Fields["MudBlazor.Origin.TopRight"].DeclaringType = Types["MudBlazor.Origin"];
        Fields["MudBlazor.OverflowBehavior.FlipAlways"].DeclaringType = Types["MudBlazor.OverflowBehavior"];
        Fields["MudBlazor.OverflowBehavior.FlipNever"].DeclaringType = Types["MudBlazor.OverflowBehavior"];
        Fields["MudBlazor.OverflowBehavior.FlipOnOpen"].DeclaringType = Types["MudBlazor.OverflowBehavior"];
        Fields["MudBlazor.Page.First"].DeclaringType = Types["MudBlazor.Page"];
        Fields["MudBlazor.Page.Last"].DeclaringType = Types["MudBlazor.Page"];
        Fields["MudBlazor.Page.Next"].DeclaringType = Types["MudBlazor.Page"];
        Fields["MudBlazor.Page.Previous"].DeclaringType = Types["MudBlazor.Page"];
        Fields["MudBlazor.PickerVariant.Dialog"].DeclaringType = Types["MudBlazor.PickerVariant"];
        Fields["MudBlazor.PickerVariant.Inline"].DeclaringType = Types["MudBlazor.PickerVariant"];
        Fields["MudBlazor.PickerVariant.Static"].DeclaringType = Types["MudBlazor.PickerVariant"];
        Fields["MudBlazor.Placement.Bottom"].DeclaringType = Types["MudBlazor.Placement"];
        Fields["MudBlazor.Placement.End"].DeclaringType = Types["MudBlazor.Placement"];
        Fields["MudBlazor.Placement.Left"].DeclaringType = Types["MudBlazor.Placement"];
        Fields["MudBlazor.Placement.Right"].DeclaringType = Types["MudBlazor.Placement"];
        Fields["MudBlazor.Placement.Start"].DeclaringType = Types["MudBlazor.Placement"];
        Fields["MudBlazor.Placement.Top"].DeclaringType = Types["MudBlazor.Placement"];
        Fields["MudBlazor.PopoverHolderOperation.Create"].DeclaringType = Types["MudBlazor.PopoverHolderOperation"];
        Fields["MudBlazor.PopoverHolderOperation.Remove"].DeclaringType = Types["MudBlazor.PopoverHolderOperation"];
        Fields["MudBlazor.PopoverHolderOperation.Update"].DeclaringType = Types["MudBlazor.PopoverHolderOperation"];
        Fields["MudBlazor.PopoverMode.Default"].DeclaringType = Types["MudBlazor.PopoverMode"];
        Fields["MudBlazor.Position.Bottom"].DeclaringType = Types["MudBlazor.Position"];
        Fields["MudBlazor.Position.Center"].DeclaringType = Types["MudBlazor.Position"];
        Fields["MudBlazor.Position.End"].DeclaringType = Types["MudBlazor.Position"];
        Fields["MudBlazor.Position.Left"].DeclaringType = Types["MudBlazor.Position"];
        Fields["MudBlazor.Position.Right"].DeclaringType = Types["MudBlazor.Position"];
        Fields["MudBlazor.Position.Start"].DeclaringType = Types["MudBlazor.Position"];
        Fields["MudBlazor.Position.Top"].DeclaringType = Types["MudBlazor.Position"];
        Fields["MudBlazor.ResizeMode.Column"].DeclaringType = Types["MudBlazor.ResizeMode"];
        Fields["MudBlazor.ResizeMode.Container"].DeclaringType = Types["MudBlazor.ResizeMode"];
        Fields["MudBlazor.ResizeMode.None"].DeclaringType = Types["MudBlazor.ResizeMode"];
        Fields["MudBlazor.ScrollBehavior.Auto"].DeclaringType = Types["MudBlazor.ScrollBehavior"];
        Fields["MudBlazor.ScrollBehavior.Smooth"].DeclaringType = Types["MudBlazor.ScrollBehavior"];
        Fields["MudBlazor.SelectionMode.MultiSelection"].DeclaringType = Types["MudBlazor.SelectionMode"];
        Fields["MudBlazor.SelectionMode.SingleSelection"].DeclaringType = Types["MudBlazor.SelectionMode"];
        Fields["MudBlazor.SelectionMode.ToggleSelection"].DeclaringType = Types["MudBlazor.SelectionMode"];
        Fields["MudBlazor.Severity.Error"].DeclaringType = Types["MudBlazor.Severity"];
        Fields["MudBlazor.Severity.Info"].DeclaringType = Types["MudBlazor.Severity"];
        Fields["MudBlazor.Severity.Normal"].DeclaringType = Types["MudBlazor.Severity"];
        Fields["MudBlazor.Severity.Success"].DeclaringType = Types["MudBlazor.Severity"];
        Fields["MudBlazor.Severity.Warning"].DeclaringType = Types["MudBlazor.Severity"];
        Fields["MudBlazor.Size.Large"].DeclaringType = Types["MudBlazor.Size"];
        Fields["MudBlazor.Size.Medium"].DeclaringType = Types["MudBlazor.Size"];
        Fields["MudBlazor.Size.Small"].DeclaringType = Types["MudBlazor.Size"];
        Fields["MudBlazor.SkeletonType.Circle"].DeclaringType = Types["MudBlazor.SkeletonType"];
        Fields["MudBlazor.SkeletonType.Rectangle"].DeclaringType = Types["MudBlazor.SkeletonType"];
        Fields["MudBlazor.SkeletonType.Text"].DeclaringType = Types["MudBlazor.SkeletonType"];
        Fields["MudBlazor.SnackbarDuplicatesBehavior.Allow"].DeclaringType = Types["MudBlazor.SnackbarDuplicatesBehavior"];
        Fields["MudBlazor.SnackbarDuplicatesBehavior.GlobalDefault"].DeclaringType = Types["MudBlazor.SnackbarDuplicatesBehavior"];
        Fields["MudBlazor.SnackbarDuplicatesBehavior.Prevent"].DeclaringType = Types["MudBlazor.SnackbarDuplicatesBehavior"];
        Fields["MudBlazor.SortDirection.Ascending"].DeclaringType = Types["MudBlazor.SortDirection"];
        Fields["MudBlazor.SortDirection.Descending"].DeclaringType = Types["MudBlazor.SortDirection"];
        Fields["MudBlazor.SortDirection.None"].DeclaringType = Types["MudBlazor.SortDirection"];
        Fields["MudBlazor.SortMode.Multiple"].DeclaringType = Types["MudBlazor.SortMode"];
        Fields["MudBlazor.SortMode.None"].DeclaringType = Types["MudBlazor.SortMode"];
        Fields["MudBlazor.SortMode.Single"].DeclaringType = Types["MudBlazor.SortMode"];
        Fields["MudBlazor.StepAction.Activate"].DeclaringType = Types["MudBlazor.StepAction"];
        Fields["MudBlazor.StepAction.Complete"].DeclaringType = Types["MudBlazor.StepAction"];
        Fields["MudBlazor.StepAction.Reset"].DeclaringType = Types["MudBlazor.StepAction"];
        Fields["MudBlazor.StepAction.Skip"].DeclaringType = Types["MudBlazor.StepAction"];
        Fields["MudBlazor.StretchItems.All"].DeclaringType = Types["MudBlazor.StretchItems"];
        Fields["MudBlazor.StretchItems.End"].DeclaringType = Types["MudBlazor.StretchItems"];
        Fields["MudBlazor.StretchItems.Middle"].DeclaringType = Types["MudBlazor.StretchItems"];
        Fields["MudBlazor.StretchItems.None"].DeclaringType = Types["MudBlazor.StretchItems"];
        Fields["MudBlazor.StretchItems.Start"].DeclaringType = Types["MudBlazor.StretchItems"];
        Fields["MudBlazor.StretchItems.StartAndEnd"].DeclaringType = Types["MudBlazor.StretchItems"];
        Fields["MudBlazor.SwipeDirection.BottomToTop"].DeclaringType = Types["MudBlazor.SwipeDirection"];
        Fields["MudBlazor.SwipeDirection.LeftToRight"].DeclaringType = Types["MudBlazor.SwipeDirection"];
        Fields["MudBlazor.SwipeDirection.None"].DeclaringType = Types["MudBlazor.SwipeDirection"];
        Fields["MudBlazor.SwipeDirection.RightToLeft"].DeclaringType = Types["MudBlazor.SwipeDirection"];
        Fields["MudBlazor.SwipeDirection.TopToBottom"].DeclaringType = Types["MudBlazor.SwipeDirection"];
        Fields["MudBlazor.TabHeaderPosition.After"].DeclaringType = Types["MudBlazor.TabHeaderPosition"];
        Fields["MudBlazor.TabHeaderPosition.Before"].DeclaringType = Types["MudBlazor.TabHeaderPosition"];
        Fields["MudBlazor.TabHeaderPosition.None"].DeclaringType = Types["MudBlazor.TabHeaderPosition"];
        Fields["MudBlazor.TabInteractionType.Activate"].DeclaringType = Types["MudBlazor.TabInteractionType"];
        Fields["MudBlazor.TableApplyButtonPosition.End"].DeclaringType = Types["MudBlazor.TableApplyButtonPosition"];
        Fields["MudBlazor.TableApplyButtonPosition.Start"].DeclaringType = Types["MudBlazor.TableApplyButtonPosition"];
        Fields["MudBlazor.TableApplyButtonPosition.StartAndEnd"].DeclaringType = Types["MudBlazor.TableApplyButtonPosition"];
        Fields["MudBlazor.TableEditButtonPosition.End"].DeclaringType = Types["MudBlazor.TableEditButtonPosition"];
        Fields["MudBlazor.TableEditButtonPosition.Start"].DeclaringType = Types["MudBlazor.TableEditButtonPosition"];
        Fields["MudBlazor.TableEditButtonPosition.StartAndEnd"].DeclaringType = Types["MudBlazor.TableEditButtonPosition"];
        Fields["MudBlazor.TableEditTrigger.EditButton"].DeclaringType = Types["MudBlazor.TableEditTrigger"];
        Fields["MudBlazor.TableEditTrigger.RowClick"].DeclaringType = Types["MudBlazor.TableEditTrigger"];
        Fields["MudBlazor.TimeEditMode.Normal"].DeclaringType = Types["MudBlazor.TimeEditMode"];
        Fields["MudBlazor.TimeEditMode.OnlyHours"].DeclaringType = Types["MudBlazor.TimeEditMode"];
        Fields["MudBlazor.TimeEditMode.OnlyMinutes"].DeclaringType = Types["MudBlazor.TimeEditMode"];
        Fields["MudBlazor.TimelineAlign.Default"].DeclaringType = Types["MudBlazor.TimelineAlign"];
        Fields["MudBlazor.TimelineAlign.End"].DeclaringType = Types["MudBlazor.TimelineAlign"];
        Fields["MudBlazor.TimelineAlign.Start"].DeclaringType = Types["MudBlazor.TimelineAlign"];
        Fields["MudBlazor.TimelineOrientation.Horizontal"].DeclaringType = Types["MudBlazor.TimelineOrientation"];
        Fields["MudBlazor.TimelineOrientation.Vertical"].DeclaringType = Types["MudBlazor.TimelineOrientation"];
        Fields["MudBlazor.TimelinePosition.Alternate"].DeclaringType = Types["MudBlazor.TimelinePosition"];
        Fields["MudBlazor.TimelinePosition.Bottom"].DeclaringType = Types["MudBlazor.TimelinePosition"];
        Fields["MudBlazor.TimelinePosition.End"].DeclaringType = Types["MudBlazor.TimelinePosition"];
        Fields["MudBlazor.TimelinePosition.Left"].DeclaringType = Types["MudBlazor.TimelinePosition"];
        Fields["MudBlazor.TimelinePosition.Right"].DeclaringType = Types["MudBlazor.TimelinePosition"];
        Fields["MudBlazor.TimelinePosition.Start"].DeclaringType = Types["MudBlazor.TimelinePosition"];
        Fields["MudBlazor.TimelinePosition.Top"].DeclaringType = Types["MudBlazor.TimelinePosition"];
        Fields["MudBlazor.TimeSeriesDisplayType.Area"].DeclaringType = Types["MudBlazor.TimeSeriesDisplayType"];
        Fields["MudBlazor.TimeSeriesDisplayType.Line"].DeclaringType = Types["MudBlazor.TimeSeriesDisplayType"];
        Fields["MudBlazor.Transition.Custom"].DeclaringType = Types["MudBlazor.Transition"];
        Fields["MudBlazor.Transition.Fade"].DeclaringType = Types["MudBlazor.Transition"];
        Fields["MudBlazor.Transition.None"].DeclaringType = Types["MudBlazor.Transition"];
        Fields["MudBlazor.Transition.Slide"].DeclaringType = Types["MudBlazor.Transition"];
        Fields["MudBlazor.Typo.body1"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.body2"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.button"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.caption"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.h1"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.h2"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.h3"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.h4"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.h5"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.h6"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.inherit"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.overline"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.subtitle1"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Typo.subtitle2"].DeclaringType = Types["MudBlazor.Typo"];
        Fields["MudBlazor.Underline.Always"].DeclaringType = Types["MudBlazor.Underline"];
        Fields["MudBlazor.Underline.Hover"].DeclaringType = Types["MudBlazor.Underline"];
        Fields["MudBlazor.Underline.None"].DeclaringType = Types["MudBlazor.Underline"];
        Fields["MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1.Instance"].DeclaringType = Types["MudBlazor.Utilities.Clone.SystemTextJsonDeepCloneStrategy`1"];
        Fields["MudBlazor.Utilities.MudColorOutputFormats.ColorElements"].DeclaringType = Types["MudBlazor.Utilities.MudColorOutputFormats"];
        Fields["MudBlazor.Utilities.MudColorOutputFormats.Hex"].DeclaringType = Types["MudBlazor.Utilities.MudColorOutputFormats"];
        Fields["MudBlazor.Utilities.MudColorOutputFormats.HexA"].DeclaringType = Types["MudBlazor.Utilities.MudColorOutputFormats"];
        Fields["MudBlazor.Utilities.MudColorOutputFormats.RGB"].DeclaringType = Types["MudBlazor.Utilities.MudColorOutputFormats"];
        Fields["MudBlazor.Utilities.MudColorOutputFormats.RGBA"].DeclaringType = Types["MudBlazor.Utilities.MudColorOutputFormats"];
        Fields["MudBlazor.Variant.Filled"].DeclaringType = Types["MudBlazor.Variant"];
        Fields["MudBlazor.Variant.Outlined"].DeclaringType = Types["MudBlazor.Variant"];
        Fields["MudBlazor.Variant.Text"].DeclaringType = Types["MudBlazor.Variant"];
        Fields["MudBlazor.Width.False"].DeclaringType = Types["MudBlazor.Width"];
        Fields["MudBlazor.Width.lg"].DeclaringType = Types["MudBlazor.Width"];
        Fields["MudBlazor.Width.md"].DeclaringType = Types["MudBlazor.Width"];
        Fields["MudBlazor.Width.sm"].DeclaringType = Types["MudBlazor.Width"];
        Fields["MudBlazor.Width.xl"].DeclaringType = Types["MudBlazor.Width"];
        Fields["MudBlazor.Width.xs"].DeclaringType = Types["MudBlazor.Width"];
        Fields["MudBlazor.Width.xxl"].DeclaringType = Types["MudBlazor.Width"];
        Fields["MudBlazor.Wrap.NoWrap"].DeclaringType = Types["MudBlazor.Wrap"];
        Fields["MudBlazor.Wrap.Wrap"].DeclaringType = Types["MudBlazor.Wrap"];
        Fields["MudBlazor.Wrap.WrapReverse"].DeclaringType = Types["MudBlazor.Wrap"];
        Fields["MudBlazor.XAxisLabelPosition.Bottom"].DeclaringType = Types["MudBlazor.XAxisLabelPosition"];
        Fields["MudBlazor.XAxisLabelPosition.None"].DeclaringType = Types["MudBlazor.XAxisLabelPosition"];
        Fields["MudBlazor.XAxisLabelPosition.Top"].DeclaringType = Types["MudBlazor.XAxisLabelPosition"];
        Fields["MudBlazor.YAxisLabelPosition.Left"].DeclaringType = Types["MudBlazor.YAxisLabelPosition"];
        Fields["MudBlazor.YAxisLabelPosition.None"].DeclaringType = Types["MudBlazor.YAxisLabelPosition"];
        Fields["MudBlazor.YAxisLabelPosition.Right"].DeclaringType = Types["MudBlazor.YAxisLabelPosition"];

        // Link events to their declaring types
        Events["MudBlazor.Column`1.GroupingChanged"].DeclaringType = Types["MudBlazor.Column`1"];
        Events["MudBlazor.Column`1.GroupingChanged"].Property = Properties["MudBlazor.Column`1.Grouping"];
        Events["MudBlazor.Column`1.HiddenChanged"].DeclaringType = Types["MudBlazor.Column`1"];
        Events["MudBlazor.Column`1.HiddenChanged"].Property = Properties["MudBlazor.Column`1.Hidden"];
        Events["MudBlazor.Column`1.ValueChanged"].DeclaringType = Types["MudBlazor.Column`1"];
        Events["MudBlazor.Column`1.ValueChanged"].Property = Properties["MudBlazor.Column`1.Value"];
        Events["MudBlazor.DialogService.DialogInstanceAddedAsync"].DeclaringType = Types["MudBlazor.DialogService"];
        Events["MudBlazor.DialogService.OnDialogCloseRequested"].DeclaringType = Types["MudBlazor.DialogService"];
        Events["MudBlazor.HierarchyColumn`1.HiddenChanged"].DeclaringType = Types["MudBlazor.HierarchyColumn`1"];
        Events["MudBlazor.HierarchyColumn`1.HiddenChanged"].Property = Properties["MudBlazor.HierarchyColumn`1.Hidden"];
        Events["MudBlazor.Internal.MudInputAdornment.AdornmentClick"].DeclaringType = Types["MudBlazor.Internal.MudInputAdornment"];
        Events["MudBlazor.MudAlert.CloseIconClicked"].DeclaringType = Types["MudBlazor.MudAlert"];
        Events["MudBlazor.MudAlert.OnClick"].DeclaringType = Types["MudBlazor.MudAlert"];
        Events["MudBlazor.MudAutocomplete`1.OnClearButtonClick"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Events["MudBlazor.MudAutocomplete`1.OpenChanged"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Events["MudBlazor.MudAutocomplete`1.OpenChanged"].Property = Properties["MudBlazor.MudAutocomplete`1.Open"];
        Events["MudBlazor.MudAutocomplete`1.ReturnedItemsCountChanged"].DeclaringType = Types["MudBlazor.MudAutocomplete`1"];
        Events["MudBlazor.MudBadge.OnClick"].DeclaringType = Types["MudBlazor.MudBadge"];
        Events["MudBlazor.MudBaseButton.OnClick"].DeclaringType = Types["MudBlazor.MudBaseButton"];
        Events["MudBlazor.MudBaseDatePicker.PickerMonthChanged"].DeclaringType = Types["MudBlazor.MudBaseDatePicker"];
        Events["MudBlazor.MudBaseDatePicker.PickerMonthChanged"].Property = Properties["MudBlazor.MudBaseDatePicker.PickerMonth"];
        Events["MudBlazor.MudBaseInput`1.OnAdornmentClick"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Events["MudBlazor.MudBaseInput`1.OnBlur"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Events["MudBlazor.MudBaseInput`1.OnInternalInputChanged"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Events["MudBlazor.MudBaseInput`1.OnKeyDown"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Events["MudBlazor.MudBaseInput`1.OnKeyUp"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Events["MudBlazor.MudBaseInput`1.TextChanged"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Events["MudBlazor.MudBaseInput`1.TextChanged"].Property = Properties["MudBlazor.MudBaseInput`1.Text"];
        Events["MudBlazor.MudBaseInput`1.ValueChanged"].DeclaringType = Types["MudBlazor.MudBaseInput`1"];
        Events["MudBlazor.MudBaseInput`1.ValueChanged"].Property = Properties["MudBlazor.MudBaseInput`1.Value"];
        Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnAdornmentClick"].DeclaringTypeName = "MudBaseInput`1";
        Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnBlur"].DeclaringTypeName = "MudBaseInput`1";
        Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnInternalInputChanged"].DeclaringTypeName = "MudBaseInput`1";
        Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnKeyDown"].DeclaringTypeName = "MudBaseInput`1";
        Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnKeyUp"].DeclaringTypeName = "MudBaseInput`1";
        Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"].DeclaringTypeName = "MudBaseInput`1";
        Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"].Property = Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"];
        Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValueChanged"].DeclaringTypeName = "MudBaseInput`1";
        Events["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ValueChanged"].Property = Properties["MudBlazor.MudBaseInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Value"];
        Events["MudBlazor.MudBaseItemsControl`1.SelectedIndexChanged"].DeclaringType = Types["MudBlazor.MudBaseItemsControl`1"];
        Events["MudBlazor.MudBaseItemsControl`1.SelectedIndexChanged"].Property = Properties["MudBlazor.MudBaseItemsControl`1.SelectedIndex"];
        Events["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged"].DeclaringTypeName = "MudBaseItemsControl`1";
        Events["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged"].Property = Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudCarouselItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex"];
        Events["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged"].DeclaringTypeName = "MudBaseItemsControl`1";
        Events["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndexChanged"].Property = Properties["MudBlazor.MudBaseItemsControl`1[[MudBlazor.MudTimelineItem, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].SelectedIndex"];
        Events["MudBlazor.MudBooleanInput`1.ValueChanged"].DeclaringType = Types["MudBlazor.MudBooleanInput`1"];
        Events["MudBlazor.MudBooleanInput`1.ValueChanged"].Property = Properties["MudBlazor.MudBooleanInput`1.Value"];
        Events["MudBlazor.MudBreakpointProvider.OnBreakpointChanged"].DeclaringType = Types["MudBlazor.MudBreakpointProvider"];
        Events["MudBlazor.MudChartBase.SelectedIndexChanged"].DeclaringType = Types["MudBlazor.MudChartBase"];
        Events["MudBlazor.MudChartBase.SelectedIndexChanged"].Property = Properties["MudBlazor.MudChartBase.SelectedIndex"];
        Events["MudBlazor.MudChatBubble.OnClick"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Events["MudBlazor.MudChatBubble.OnContextClick"].DeclaringType = Types["MudBlazor.MudChatBubble"];
        Events["MudBlazor.MudChip`1.OnClick"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Events["MudBlazor.MudChip`1.OnClose"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Events["MudBlazor.MudChip`1.SelectedChanged"].DeclaringType = Types["MudBlazor.MudChip`1"];
        Events["MudBlazor.MudChip`1.SelectedChanged"].Property = Properties["MudBlazor.MudChip`1.Selected"];
        Events["MudBlazor.MudChipSet`1.OnClose"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Events["MudBlazor.MudChipSet`1.SelectedValueChanged"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Events["MudBlazor.MudChipSet`1.SelectedValueChanged"].Property = Properties["MudBlazor.MudChipSet`1.SelectedValue"];
        Events["MudBlazor.MudChipSet`1.SelectedValuesChanged"].DeclaringType = Types["MudBlazor.MudChipSet`1"];
        Events["MudBlazor.MudChipSet`1.SelectedValuesChanged"].Property = Properties["MudBlazor.MudChipSet`1.SelectedValues"];
        Events["MudBlazor.MudCollapse.ExpandedChanged"].DeclaringType = Types["MudBlazor.MudCollapse"];
        Events["MudBlazor.MudCollapse.ExpandedChanged"].Property = Properties["MudBlazor.MudCollapse.Expanded"];
        Events["MudBlazor.MudCollapse.OnAnimationEnd"].DeclaringType = Types["MudBlazor.MudCollapse"];
        Events["MudBlazor.MudColorPicker.ValueChanged"].DeclaringType = Types["MudBlazor.MudColorPicker"];
        Events["MudBlazor.MudColorPicker.ValueChanged"].Property = Properties["MudBlazor.MudColorPicker.Value"];
        Events["MudBlazor.MudDataGrid`1.CanceledEditingItem"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDataGrid`1.CommittedItemChanges"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDataGrid`1.CurrentPageChanged"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDataGrid`1.CurrentPageChanged"].Property = Properties["MudBlazor.MudDataGrid`1.CurrentPage"];
        Events["MudBlazor.MudDataGrid`1.FormFieldChanged"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDataGrid`1.RowClick"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDataGrid`1.RowContextMenuClick"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDataGrid`1.RowsPerPageChanged"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDataGrid`1.RowsPerPageChanged"].Property = Properties["MudBlazor.MudDataGrid`1.RowsPerPage"];
        Events["MudBlazor.MudDataGrid`1.SelectedItemChanged"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDataGrid`1.SelectedItemChanged"].Property = Properties["MudBlazor.MudDataGrid`1.SelectedItem"];
        Events["MudBlazor.MudDataGrid`1.SelectedItemsChanged"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDataGrid`1.SelectedItemsChanged"].Property = Properties["MudBlazor.MudDataGrid`1.SelectedItems"];
        Events["MudBlazor.MudDataGrid`1.StartedEditingItem"].DeclaringType = Types["MudBlazor.MudDataGrid`1"];
        Events["MudBlazor.MudDatePicker.DateChanged"].DeclaringType = Types["MudBlazor.MudDatePicker"];
        Events["MudBlazor.MudDatePicker.DateChanged"].Property = Properties["MudBlazor.MudDatePicker.Date"];
        Events["MudBlazor.MudDateRangePicker.DateRangeChanged"].DeclaringType = Types["MudBlazor.MudDateRangePicker"];
        Events["MudBlazor.MudDateRangePicker.DateRangeChanged"].Property = Properties["MudBlazor.MudDateRangePicker.DateRange"];
        Events["MudBlazor.MudDebouncedInput`1.OnDebounceIntervalElapsed"].DeclaringType = Types["MudBlazor.MudDebouncedInput`1"];
        Events["MudBlazor.MudDialog.OnBackdropClick"].DeclaringType = Types["MudBlazor.MudDialog"];
        Events["MudBlazor.MudDialog.OnKeyDown"].DeclaringType = Types["MudBlazor.MudDialog"];
        Events["MudBlazor.MudDialog.OnKeyUp"].DeclaringType = Types["MudBlazor.MudDialog"];
        Events["MudBlazor.MudDialog.VisibleChanged"].DeclaringType = Types["MudBlazor.MudDialog"];
        Events["MudBlazor.MudDialog.VisibleChanged"].Property = Properties["MudBlazor.MudDialog.Visible"];
        Events["MudBlazor.MudDrawer.OpenChanged"].DeclaringType = Types["MudBlazor.MudDrawer"];
        Events["MudBlazor.MudDrawer.OpenChanged"].Property = Properties["MudBlazor.MudDrawer.Open"];
        Events["MudBlazor.MudDropContainer`1.ItemDropped"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Events["MudBlazor.MudDropContainer`1.ItemPicked"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Events["MudBlazor.MudDropContainer`1.RefreshRequested"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Events["MudBlazor.MudDropContainer`1.TransactionEnded"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Events["MudBlazor.MudDropContainer`1.TransactionIndexChanged"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Events["MudBlazor.MudDropContainer`1.TransactionStarted"].DeclaringType = Types["MudBlazor.MudDropContainer`1"];
        Events["MudBlazor.MudDynamicDropItem`1.OnDragEnded"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Events["MudBlazor.MudDynamicDropItem`1.OnDragStarted"].DeclaringType = Types["MudBlazor.MudDynamicDropItem`1"];
        Events["MudBlazor.MudDynamicTabs.AddTab"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Events["MudBlazor.MudDynamicTabs.CloseTab"].DeclaringType = Types["MudBlazor.MudDynamicTabs"];
        Events["MudBlazor.MudElement.RefChanged"].DeclaringType = Types["MudBlazor.MudElement"];
        Events["MudBlazor.MudElement.RefChanged"].Property = Properties["MudBlazor.MudElement.Ref"];
        Events["MudBlazor.MudExpansionPanel.ExpandedChanged"].DeclaringType = Types["MudBlazor.MudExpansionPanel"];
        Events["MudBlazor.MudExpansionPanel.ExpandedChanged"].Property = Properties["MudBlazor.MudExpansionPanel.Expanded"];
        Events["MudBlazor.MudField.OnAdornmentClick"].DeclaringType = Types["MudBlazor.MudField"];
        Events["MudBlazor.MudFileUpload`1.FilesChanged"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Events["MudBlazor.MudFileUpload`1.FilesChanged"].Property = Properties["MudBlazor.MudFileUpload`1.Files"];
        Events["MudBlazor.MudFileUpload`1.OnFilesChanged"].DeclaringType = Types["MudBlazor.MudFileUpload`1"];
        Events["MudBlazor.MudForm.ErrorsChanged"].DeclaringType = Types["MudBlazor.MudForm"];
        Events["MudBlazor.MudForm.ErrorsChanged"].Property = Properties["MudBlazor.MudForm.Errors"];
        Events["MudBlazor.MudForm.FieldChanged"].DeclaringType = Types["MudBlazor.MudForm"];
        Events["MudBlazor.MudForm.IsTouchedChanged"].DeclaringType = Types["MudBlazor.MudForm"];
        Events["MudBlazor.MudForm.IsTouchedChanged"].Property = Properties["MudBlazor.MudForm.IsTouched"];
        Events["MudBlazor.MudForm.IsValidChanged"].DeclaringType = Types["MudBlazor.MudForm"];
        Events["MudBlazor.MudForm.IsValidChanged"].Property = Properties["MudBlazor.MudForm.IsValid"];
        Events["MudBlazor.MudHidden.HiddenChanged"].DeclaringType = Types["MudBlazor.MudHidden"];
        Events["MudBlazor.MudHidden.HiddenChanged"].Property = Properties["MudBlazor.MudHidden.Hidden"];
        Events["MudBlazor.MudInput`1.OnClearButtonClick"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Events["MudBlazor.MudInput`1.OnDecrement"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Events["MudBlazor.MudInput`1.OnIncrement"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Events["MudBlazor.MudInput`1.OnMouseWheel"].DeclaringType = Types["MudBlazor.MudInput`1"];
        Events["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClearButtonClick"].DeclaringTypeName = "MudInput`1";
        Events["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnDecrement"].DeclaringTypeName = "MudInput`1";
        Events["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnIncrement"].DeclaringTypeName = "MudInput`1";
        Events["MudBlazor.MudInput`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnMouseWheel"].DeclaringTypeName = "MudInput`1";
        Events["MudBlazor.MudLink.OnClick"].DeclaringType = Types["MudBlazor.MudLink"];
        Events["MudBlazor.MudList`1.SelectedValueChanged"].DeclaringType = Types["MudBlazor.MudList`1"];
        Events["MudBlazor.MudList`1.SelectedValueChanged"].Property = Properties["MudBlazor.MudList`1.SelectedValue"];
        Events["MudBlazor.MudList`1.SelectedValuesChanged"].DeclaringType = Types["MudBlazor.MudList`1"];
        Events["MudBlazor.MudList`1.SelectedValuesChanged"].Property = Properties["MudBlazor.MudList`1.SelectedValues"];
        Events["MudBlazor.MudListItem`1.ExpandedChanged"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Events["MudBlazor.MudListItem`1.ExpandedChanged"].Property = Properties["MudBlazor.MudListItem`1.Expanded"];
        Events["MudBlazor.MudListItem`1.OnClick"].DeclaringType = Types["MudBlazor.MudListItem`1"];
        Events["MudBlazor.MudMask.OnClearButtonClick"].DeclaringType = Types["MudBlazor.MudMask"];
        Events["MudBlazor.MudMenu.OpenChanged"].DeclaringType = Types["MudBlazor.MudMenu"];
        Events["MudBlazor.MudMenu.OpenChanged"].Property = Properties["MudBlazor.MudMenu.Open"];
        Events["MudBlazor.MudMenuItem.OnClick"].DeclaringType = Types["MudBlazor.MudMenuItem"];
        Events["MudBlazor.MudMessageBox.OnCancel"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Events["MudBlazor.MudMessageBox.OnNo"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Events["MudBlazor.MudMessageBox.OnYes"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Events["MudBlazor.MudMessageBox.VisibleChanged"].DeclaringType = Types["MudBlazor.MudMessageBox"];
        Events["MudBlazor.MudMessageBox.VisibleChanged"].Property = Properties["MudBlazor.MudMessageBox.Visible"];
        Events["MudBlazor.MudNavGroup.ExpandedChanged"].DeclaringType = Types["MudBlazor.MudNavGroup"];
        Events["MudBlazor.MudNavGroup.ExpandedChanged"].Property = Properties["MudBlazor.MudNavGroup.Expanded"];
        Events["MudBlazor.MudNavLink.OnClick"].DeclaringType = Types["MudBlazor.MudNavLink"];
        Events["MudBlazor.MudOverlay.OnClick"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Events["MudBlazor.MudOverlay.OnClosed"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Events["MudBlazor.MudOverlay.VisibleChanged"].DeclaringType = Types["MudBlazor.MudOverlay"];
        Events["MudBlazor.MudOverlay.VisibleChanged"].Property = Properties["MudBlazor.MudOverlay.Visible"];
        Events["MudBlazor.MudPagination.ControlButtonClicked"].DeclaringType = Types["MudBlazor.MudPagination"];
        Events["MudBlazor.MudPagination.SelectedChanged"].DeclaringType = Types["MudBlazor.MudPagination"];
        Events["MudBlazor.MudPagination.SelectedChanged"].Property = Properties["MudBlazor.MudPagination.Selected"];
        Events["MudBlazor.MudPicker`1.OnClick"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Events["MudBlazor.MudPicker`1.PickerClosed"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Events["MudBlazor.MudPicker`1.PickerOpened"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Events["MudBlazor.MudPicker`1.TextChanged"].DeclaringType = Types["MudBlazor.MudPicker`1"];
        Events["MudBlazor.MudPicker`1.TextChanged"].Property = Properties["MudBlazor.MudPicker`1.Text"];
        Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].OnClick"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerClosed"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].PickerOpened"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].TextChanged"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].TextChanged"].Property = Properties["MudBlazor.MudPicker`1[[MudBlazor.Utilities.MudColor, MudBlazor, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].Text"];
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClick"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClosed"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerOpened"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"].Property = Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.DateTime, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"];
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].OnClick"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerClosed"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].PickerOpened"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"].DeclaringTypeName = "MudPicker`1";
        Events["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TextChanged"].Property = Properties["MudBlazor.MudPicker`1[[System.Nullable`1[[System.TimeSpan, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Text"];
        Events["MudBlazor.MudRadioGroup`1.ValueChanged"].DeclaringType = Types["MudBlazor.MudRadioGroup`1"];
        Events["MudBlazor.MudRadioGroup`1.ValueChanged"].Property = Properties["MudBlazor.MudRadioGroup`1.Value"];
        Events["MudBlazor.MudRangeInput`1.OnClearButtonClick"].DeclaringType = Types["MudBlazor.MudRangeInput`1"];
        Events["MudBlazor.MudRating.HoveredValueChanged"].DeclaringType = Types["MudBlazor.MudRating"];
        Events["MudBlazor.MudRating.SelectedValueChanged"].DeclaringType = Types["MudBlazor.MudRating"];
        Events["MudBlazor.MudRating.SelectedValueChanged"].Property = Properties["MudBlazor.MudRating.SelectedValue"];
        Events["MudBlazor.MudRatingItem.ItemClicked"].DeclaringType = Types["MudBlazor.MudRatingItem"];
        Events["MudBlazor.MudRatingItem.ItemHovered"].DeclaringType = Types["MudBlazor.MudRatingItem"];
        Events["MudBlazor.MudScrollToTop.OnClick"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Events["MudBlazor.MudScrollToTop.OnScroll"].DeclaringType = Types["MudBlazor.MudScrollToTop"];
        Events["MudBlazor.MudSelect`1.OnClearButtonClick"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Events["MudBlazor.MudSelect`1.OnClose"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Events["MudBlazor.MudSelect`1.OnOpen"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Events["MudBlazor.MudSelect`1.SelectedValuesChanged"].DeclaringType = Types["MudBlazor.MudSelect`1"];
        Events["MudBlazor.MudSelect`1.SelectedValuesChanged"].Property = Properties["MudBlazor.MudSelect`1.SelectedValues"];
        Events["MudBlazor.MudSlider`1.NullableValueChanged"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Events["MudBlazor.MudSlider`1.NullableValueChanged"].Property = Properties["MudBlazor.MudSlider`1.NullableValue"];
        Events["MudBlazor.MudSlider`1.ValueChanged"].DeclaringType = Types["MudBlazor.MudSlider`1"];
        Events["MudBlazor.MudSlider`1.ValueChanged"].Property = Properties["MudBlazor.MudSlider`1.Value"];
        Events["MudBlazor.MudStep.CompletedChanged"].DeclaringType = Types["MudBlazor.MudStep"];
        Events["MudBlazor.MudStep.CompletedChanged"].Property = Properties["MudBlazor.MudStep.Completed"];
        Events["MudBlazor.MudStep.DisabledChanged"].DeclaringType = Types["MudBlazor.MudStep"];
        Events["MudBlazor.MudStep.DisabledChanged"].Property = Properties["MudBlazor.MudStep.Disabled"];
        Events["MudBlazor.MudStep.HasErrorChanged"].DeclaringType = Types["MudBlazor.MudStep"];
        Events["MudBlazor.MudStep.HasErrorChanged"].Property = Properties["MudBlazor.MudStep.HasError"];
        Events["MudBlazor.MudStep.OnClick"].DeclaringType = Types["MudBlazor.MudStep"];
        Events["MudBlazor.MudStepper.ActiveIndexChanged"].DeclaringType = Types["MudBlazor.MudStepper"];
        Events["MudBlazor.MudStepper.ActiveIndexChanged"].Property = Properties["MudBlazor.MudStepper.ActiveIndex"];
        Events["MudBlazor.MudSwipeArea.OnSwipeEnd"].DeclaringType = Types["MudBlazor.MudSwipeArea"];
        Events["MudBlazor.MudTable`1.OnRowClick"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Events["MudBlazor.MudTable`1.OnRowMouseEnter"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Events["MudBlazor.MudTable`1.OnRowMouseLeave"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Events["MudBlazor.MudTable`1.SelectedItemChanged"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Events["MudBlazor.MudTable`1.SelectedItemChanged"].Property = Properties["MudBlazor.MudTable`1.SelectedItem"];
        Events["MudBlazor.MudTable`1.SelectedItemsChanged"].DeclaringType = Types["MudBlazor.MudTable`1"];
        Events["MudBlazor.MudTable`1.SelectedItemsChanged"].Property = Properties["MudBlazor.MudTable`1.SelectedItems"];
        Events["MudBlazor.MudTableBase.CurrentPageChanged"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Events["MudBlazor.MudTableBase.CurrentPageChanged"].Property = Properties["MudBlazor.MudTableBase.CurrentPage"];
        Events["MudBlazor.MudTableBase.OnCancelEditClick"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Events["MudBlazor.MudTableBase.OnCommitEditClick"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Events["MudBlazor.MudTableBase.OnPreviewEditClick"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Events["MudBlazor.MudTableBase.RowsPerPageChanged"].DeclaringType = Types["MudBlazor.MudTableBase"];
        Events["MudBlazor.MudTableBase.RowsPerPageChanged"].Property = Properties["MudBlazor.MudTableBase.RowsPerPage"];
        Events["MudBlazor.MudTableGroupRow`1.OnRowClick"].DeclaringType = Types["MudBlazor.MudTableGroupRow`1"];
        Events["MudBlazor.MudTableSortLabel`1.SortDirectionChanged"].DeclaringType = Types["MudBlazor.MudTableSortLabel`1"];
        Events["MudBlazor.MudTableSortLabel`1.SortDirectionChanged"].Property = Properties["MudBlazor.MudTableSortLabel`1.SortDirection"];
        Events["MudBlazor.MudTabPanel.OnClick"].DeclaringType = Types["MudBlazor.MudTabPanel"];
        Events["MudBlazor.MudTabs.ActivePanelIndexChanged"].DeclaringType = Types["MudBlazor.MudTabs"];
        Events["MudBlazor.MudTabs.ActivePanelIndexChanged"].Property = Properties["MudBlazor.MudTabs.ActivePanelIndex"];
        Events["MudBlazor.MudTextField`1.OnClearButtonClick"].DeclaringType = Types["MudBlazor.MudTextField`1"];
        Events["MudBlazor.MudTFootRow.OnRowClick"].DeclaringType = Types["MudBlazor.MudTFootRow"];
        Events["MudBlazor.MudTHeadRow.OnRowClick"].DeclaringType = Types["MudBlazor.MudTHeadRow"];
        Events["MudBlazor.MudThemeProvider.IsDarkModeChanged"].DeclaringType = Types["MudBlazor.MudThemeProvider"];
        Events["MudBlazor.MudThemeProvider.IsDarkModeChanged"].Property = Properties["MudBlazor.MudThemeProvider.IsDarkMode"];
        Events["MudBlazor.MudTimePicker.TimeChanged"].DeclaringType = Types["MudBlazor.MudTimePicker"];
        Events["MudBlazor.MudTimePicker.TimeChanged"].Property = Properties["MudBlazor.MudTimePicker.Time"];
        Events["MudBlazor.MudToggleGroup`1.ValueChanged"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Events["MudBlazor.MudToggleGroup`1.ValueChanged"].Property = Properties["MudBlazor.MudToggleGroup`1.Value"];
        Events["MudBlazor.MudToggleGroup`1.ValuesChanged"].DeclaringType = Types["MudBlazor.MudToggleGroup`1"];
        Events["MudBlazor.MudToggleGroup`1.ValuesChanged"].Property = Properties["MudBlazor.MudToggleGroup`1.Values"];
        Events["MudBlazor.MudToggleIconButton.ToggledChanged"].DeclaringType = Types["MudBlazor.MudToggleIconButton"];
        Events["MudBlazor.MudToggleIconButton.ToggledChanged"].Property = Properties["MudBlazor.MudToggleIconButton.Toggled"];
        Events["MudBlazor.MudTooltip.VisibleChanged"].DeclaringType = Types["MudBlazor.MudTooltip"];
        Events["MudBlazor.MudTooltip.VisibleChanged"].Property = Properties["MudBlazor.MudTooltip.Visible"];
        Events["MudBlazor.MudTr.CheckedChanged"].DeclaringType = Types["MudBlazor.MudTr"];
        Events["MudBlazor.MudTr.CheckedChanged"].Property = Properties["MudBlazor.MudTr.Checked"];
        Events["MudBlazor.MudTreeView`1.SelectedValueChanged"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Events["MudBlazor.MudTreeView`1.SelectedValueChanged"].Property = Properties["MudBlazor.MudTreeView`1.SelectedValue"];
        Events["MudBlazor.MudTreeView`1.SelectedValuesChanged"].DeclaringType = Types["MudBlazor.MudTreeView`1"];
        Events["MudBlazor.MudTreeView`1.SelectedValuesChanged"].Property = Properties["MudBlazor.MudTreeView`1.SelectedValues"];
        Events["MudBlazor.MudTreeViewItem`1.ExpandedChanged"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Events["MudBlazor.MudTreeViewItem`1.ExpandedChanged"].Property = Properties["MudBlazor.MudTreeViewItem`1.Expanded"];
        Events["MudBlazor.MudTreeViewItem`1.OnClick"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Events["MudBlazor.MudTreeViewItem`1.OnDoubleClick"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Events["MudBlazor.MudTreeViewItem`1.SelectedChanged"].DeclaringType = Types["MudBlazor.MudTreeViewItem`1"];
        Events["MudBlazor.MudTreeViewItem`1.SelectedChanged"].Property = Properties["MudBlazor.MudTreeViewItem`1.Selected"];
        Events["MudBlazor.MudTreeViewItemToggleButton.ExpandedChanged"].DeclaringType = Types["MudBlazor.MudTreeViewItemToggleButton"];
        Events["MudBlazor.MudTreeViewItemToggleButton.ExpandedChanged"].Property = Properties["MudBlazor.MudTreeViewItemToggleButton.Expanded"];
        Events["MudBlazor.SelectColumn`1.HiddenChanged"].DeclaringType = Types["MudBlazor.SelectColumn`1"];
        Events["MudBlazor.SelectColumn`1.HiddenChanged"].Property = Properties["MudBlazor.SelectColumn`1.Hidden"];
        Events["MudBlazor.Snackbar.OnClose"].DeclaringType = Types["MudBlazor.Snackbar"];
        Events["MudBlazor.Snackbar.OnUpdate"].DeclaringType = Types["MudBlazor.Snackbar"];
        Events["MudBlazor.SnackbarService.OnSnackbarsUpdated"].DeclaringType = Types["MudBlazor.SnackbarService"];
        Events["MudBlazor.SvgLegend.OnVisibilityChanged"].DeclaringType = Types["MudBlazor.SvgLegend"];
        Events["System.Exception.SerializeObjectState"].DeclaringTypeName = "Exception";

        // Add see-also links for all types
        Types["MudBlazor.AggregateDefinition`1"].Links.Add(new() { Type = Types["MudBlazor.MudDataGrid`1"], Text = "" });
        Types["MudBlazor.BlockMask"].Links.Add(new() { Type = Types["MudBlazor.DateMask"], Text = "" });
        Types["MudBlazor.BlockMask"].Links.Add(new() { Type = Types["MudBlazor.MultiMask"], Text = "" });
        Types["MudBlazor.BlockMask"].Links.Add(new() { Type = Types["MudBlazor.PatternMask"], Text = "" });
        Types["MudBlazor.BlockMask"].Links.Add(new() { Type = Types["MudBlazor.RegexMask"], Text = "" });
        Types["MudBlazor.BreadcrumbItem"].Links.Add(new() { Type = Types["MudBlazor.MudBreadcrumbs"], Text = "" });
        Types["MudBlazor.BreadcrumbItem"].Links.Add(new() { Type = Types["MudBlazor.BreadcrumbLink"], Text = "" });
        Types["MudBlazor.BreadcrumbItem"].Links.Add(new() { Type = Types["MudBlazor.BreadcrumbSeparator"], Text = "" });
        Types["MudBlazor.BreadcrumbLink"].Links.Add(new() { Type = Types["MudBlazor.MudBreadcrumbs"], Text = "" });
        Types["MudBlazor.BreadcrumbLink"].Links.Add(new() { Type = Types["MudBlazor.BreadcrumbItem"], Text = "" });
        Types["MudBlazor.BreadcrumbLink"].Links.Add(new() { Type = Types["MudBlazor.BreadcrumbSeparator"], Text = "" });
        Types["MudBlazor.BreadcrumbSeparator"].Links.Add(new() { Type = Types["MudBlazor.MudBreadcrumbs"], Text = "" });
        Types["MudBlazor.BreadcrumbSeparator"].Links.Add(new() { Type = Types["MudBlazor.BreadcrumbItem"], Text = "" });
        Types["MudBlazor.BreadcrumbSeparator"].Links.Add(new() { Type = Types["MudBlazor.BreadcrumbLink"], Text = "" });
        Types["MudBlazor.Charts.Bar"].Links.Add(new() { Type = Types["MudBlazor.Charts.Donut"], Text = "" });
        Types["MudBlazor.Charts.Bar"].Links.Add(new() { Type = Types["MudBlazor.Charts.Line"], Text = "" });
        Types["MudBlazor.Charts.Bar"].Links.Add(new() { Type = Types["MudBlazor.Charts.Pie"], Text = "" });
        Types["MudBlazor.Charts.Bar"].Links.Add(new() { Type = Types["MudBlazor.Charts.StackedBar"], Text = "" });
        Types["MudBlazor.Charts.Bar"].Links.Add(new() { Type = Types["MudBlazor.Charts.TimeSeries"], Text = "" });
        Types["MudBlazor.Charts.Donut"].Links.Add(new() { Type = Types["MudBlazor.Charts.Bar"], Text = "" });
        Types["MudBlazor.Charts.Donut"].Links.Add(new() { Type = Types["MudBlazor.Charts.Line"], Text = "" });
        Types["MudBlazor.Charts.Donut"].Links.Add(new() { Type = Types["MudBlazor.Charts.Pie"], Text = "" });
        Types["MudBlazor.Charts.Donut"].Links.Add(new() { Type = Types["MudBlazor.Charts.StackedBar"], Text = "" });
        Types["MudBlazor.Charts.Donut"].Links.Add(new() { Type = Types["MudBlazor.Charts.TimeSeries"], Text = "" });
        Types["MudBlazor.Charts.Line"].Links.Add(new() { Type = Types["MudBlazor.Charts.Bar"], Text = "" });
        Types["MudBlazor.Charts.Line"].Links.Add(new() { Type = Types["MudBlazor.Charts.Donut"], Text = "" });
        Types["MudBlazor.Charts.Line"].Links.Add(new() { Type = Types["MudBlazor.Charts.Pie"], Text = "" });
        Types["MudBlazor.Charts.Line"].Links.Add(new() { Type = Types["MudBlazor.Charts.StackedBar"], Text = "" });
        Types["MudBlazor.Charts.Line"].Links.Add(new() { Type = Types["MudBlazor.Charts.TimeSeries"], Text = "" });
        Types["MudBlazor.Charts.Pie"].Links.Add(new() { Type = Types["MudBlazor.Charts.Bar"], Text = "" });
        Types["MudBlazor.Charts.Pie"].Links.Add(new() { Type = Types["MudBlazor.Charts.Donut"], Text = "" });
        Types["MudBlazor.Charts.Pie"].Links.Add(new() { Type = Types["MudBlazor.Charts.Line"], Text = "" });
        Types["MudBlazor.Charts.Pie"].Links.Add(new() { Type = Types["MudBlazor.Charts.StackedBar"], Text = "" });
        Types["MudBlazor.Charts.Pie"].Links.Add(new() { Type = Types["MudBlazor.Charts.TimeSeries"], Text = "" });
        Types["MudBlazor.Charts.StackedBar"].Links.Add(new() { Type = Types["MudBlazor.Charts.Bar"], Text = "" });
        Types["MudBlazor.Charts.StackedBar"].Links.Add(new() { Type = Types["MudBlazor.Charts.Donut"], Text = "" });
        Types["MudBlazor.Charts.StackedBar"].Links.Add(new() { Type = Types["MudBlazor.Charts.Line"], Text = "" });
        Types["MudBlazor.Charts.StackedBar"].Links.Add(new() { Type = Types["MudBlazor.Charts.Pie"], Text = "" });
        Types["MudBlazor.Charts.StackedBar"].Links.Add(new() { Type = Types["MudBlazor.Charts.TimeSeries"], Text = "" });
        Types["MudBlazor.Charts.TimeSeries"].Links.Add(new() { Type = Types["MudBlazor.Charts.Bar"], Text = "" });
        Types["MudBlazor.Charts.TimeSeries"].Links.Add(new() { Type = Types["MudBlazor.Charts.Donut"], Text = "" });
        Types["MudBlazor.Charts.TimeSeries"].Links.Add(new() { Type = Types["MudBlazor.Charts.Line"], Text = "" });
        Types["MudBlazor.Charts.TimeSeries"].Links.Add(new() { Type = Types["MudBlazor.Charts.Pie"], Text = "" });
        Types["MudBlazor.Charts.TimeSeries"].Links.Add(new() { Type = Types["MudBlazor.Charts.StackedBar"], Text = "" });
        Types["MudBlazor.Column`1"].Links.Add(new() { Type = Types["MudBlazor.MudDataGrid`1"], Text = "" });
        Types["MudBlazor.DateMask"].Links.Add(new() { Type = Types["MudBlazor.BlockMask"], Text = "" });
        Types["MudBlazor.DateMask"].Links.Add(new() { Type = Types["MudBlazor.MultiMask"], Text = "" });
        Types["MudBlazor.DateMask"].Links.Add(new() { Type = Types["MudBlazor.PatternMask"], Text = "" });
        Types["MudBlazor.DateMask"].Links.Add(new() { Type = Types["MudBlazor.RegexMask"], Text = "" });
        Types["MudBlazor.DialogOptions"].Links.Add(new() { Type = Types["MudBlazor.MudDialogContainer"], Text = "" });
        Types["MudBlazor.DialogOptions"].Links.Add(new() { Type = Types["MudBlazor.MudDialogProvider"], Text = "" });
        Types["MudBlazor.DialogOptions"].Links.Add(new() { Type = Types["MudBlazor.MudDialog"], Text = "" });
        Types["MudBlazor.DialogOptions"].Links.Add(new() { Type = Types["MudBlazor.DialogParameters`1"], Text = "" });
        Types["MudBlazor.DialogOptions"].Links.Add(new() { Type = Types["MudBlazor.DialogReference"], Text = "" });
        Types["MudBlazor.DialogOptions"].Links.Add(new() { Type = Types["MudBlazor.DialogService"], Text = "" });
        Types["MudBlazor.DialogParameters`1"].Links.Add(new() { Type = Types["MudBlazor.MudDialogContainer"], Text = "" });
        Types["MudBlazor.DialogParameters`1"].Links.Add(new() { Type = Types["MudBlazor.MudDialogProvider"], Text = "" });
        Types["MudBlazor.DialogParameters`1"].Links.Add(new() { Type = Types["MudBlazor.MudDialog"], Text = "" });
        Types["MudBlazor.DialogParameters`1"].Links.Add(new() { Type = Types["MudBlazor.DialogOptions"], Text = "" });
        Types["MudBlazor.DialogParameters`1"].Links.Add(new() { Type = Types["MudBlazor.DialogReference"], Text = "" });
        Types["MudBlazor.DialogParameters`1"].Links.Add(new() { Type = Types["MudBlazor.DialogService"], Text = "" });
        Types["MudBlazor.DialogReference"].Links.Add(new() { Type = Types["MudBlazor.MudDialog"], Text = "" });
        Types["MudBlazor.DialogReference"].Links.Add(new() { Type = Types["MudBlazor.MudDialogContainer"], Text = "" });
        Types["MudBlazor.DialogReference"].Links.Add(new() { Type = Types["MudBlazor.MudDialogProvider"], Text = "" });
        Types["MudBlazor.DialogReference"].Links.Add(new() { Type = Types["MudBlazor.DialogOptions"], Text = "" });
        Types["MudBlazor.DialogReference"].Links.Add(new() { Type = Types["MudBlazor.DialogParameters`1"], Text = "" });
        Types["MudBlazor.DialogReference"].Links.Add(new() { Type = Types["MudBlazor.DialogService"], Text = "" });
        Types["MudBlazor.DialogService"].Links.Add(new() { Type = Types["MudBlazor.MudDialog"], Text = "" });
        Types["MudBlazor.DialogService"].Links.Add(new() { Type = Types["MudBlazor.MudDialogContainer"], Text = "" });
        Types["MudBlazor.DialogService"].Links.Add(new() { Type = Types["MudBlazor.MudDialogProvider"], Text = "" });
        Types["MudBlazor.DialogService"].Links.Add(new() { Type = Types["MudBlazor.DialogOptions"], Text = "" });
        Types["MudBlazor.DialogService"].Links.Add(new() { Type = Types["MudBlazor.DialogParameters`1"], Text = "" });
        Types["MudBlazor.DialogService"].Links.Add(new() { Type = Types["MudBlazor.DialogReference"], Text = "" });
        Types["MudBlazor.FilterContext`1"].Links.Add(new() { Type = Types["MudBlazor.MudDataGrid`1"], Text = "" });
        Types["MudBlazor.FilterHeaderCell`1"].Links.Add(new() { Type = Types["MudBlazor.MudDataGrid`1"], Text = "" });
        Types["MudBlazor.HeaderCell`1"].Links.Add(new() { Type = Types["MudBlazor.MudDataGrid`1"], Text = "" });
        Types["MudBlazor.HierarchyColumn`1"].Links.Add(new() { Type = Types["MudBlazor.Column`1"], Text = "" });
        Types["MudBlazor.HierarchyColumn`1"].Links.Add(new() { Type = Types["MudBlazor.MudDataGrid`1"], Text = "" });
        Types["MudBlazor.MudAlert"].Links.Add(new() { Type = Types["MudBlazor.SnackbarService"], Text = "" });
        Types["MudBlazor.MudAppBar"].Links.Add(new() { Type = Types["MudBlazor.MudContextualActionBar"], Text = "" });
        Types["MudBlazor.MudAvatar"].Links.Add(new() { Type = Types["MudBlazor.MudAvatarGroup"], Text = "" });
        Types["MudBlazor.MudAvatarGroup"].Links.Add(new() { Type = Types["MudBlazor.MudAvatar"], Text = "" });
        Types["MudBlazor.MudBreadcrumbs"].Links.Add(new() { Type = Types["MudBlazor.BreadcrumbItem"], Text = "" });
        Types["MudBlazor.MudBreadcrumbs"].Links.Add(new() { Type = Types["MudBlazor.BreadcrumbLink"], Text = "" });
        Types["MudBlazor.MudBreadcrumbs"].Links.Add(new() { Type = Types["MudBlazor.BreadcrumbSeparator"], Text = "" });
        Types["MudBlazor.MudButton"].Links.Add(new() { Type = Types["MudBlazor.MudButtonGroup"], Text = "" });
        Types["MudBlazor.MudButton"].Links.Add(new() { Type = Types["MudBlazor.MudFab"], Text = "" });
        Types["MudBlazor.MudButton"].Links.Add(new() { Type = Types["MudBlazor.MudIconButton"], Text = "" });
        Types["MudBlazor.MudButton"].Links.Add(new() { Type = Types["MudBlazor.MudToggleIconButton"], Text = "" });
        Types["MudBlazor.MudButtonGroup"].Links.Add(new() { Type = Types["MudBlazor.MudButton"], Text = "" });
        Types["MudBlazor.MudCard"].Links.Add(new() { Type = Types["MudBlazor.MudCardActions"], Text = "" });
        Types["MudBlazor.MudCard"].Links.Add(new() { Type = Types["MudBlazor.MudCardContent"], Text = "" });
        Types["MudBlazor.MudCard"].Links.Add(new() { Type = Types["MudBlazor.MudCardHeader"], Text = "" });
        Types["MudBlazor.MudCard"].Links.Add(new() { Type = Types["MudBlazor.MudCardMedia"], Text = "" });
        Types["MudBlazor.MudCardActions"].Links.Add(new() { Type = Types["MudBlazor.MudCard"], Text = "" });
        Types["MudBlazor.MudCardActions"].Links.Add(new() { Type = Types["MudBlazor.MudCardContent"], Text = "" });
        Types["MudBlazor.MudCardActions"].Links.Add(new() { Type = Types["MudBlazor.MudCardHeader"], Text = "" });
        Types["MudBlazor.MudCardActions"].Links.Add(new() { Type = Types["MudBlazor.MudCardMedia"], Text = "" });
        Types["MudBlazor.MudCardContent"].Links.Add(new() { Type = Types["MudBlazor.MudCard"], Text = "" });
        Types["MudBlazor.MudCardContent"].Links.Add(new() { Type = Types["MudBlazor.MudCardActions"], Text = "" });
        Types["MudBlazor.MudCardContent"].Links.Add(new() { Type = Types["MudBlazor.MudCardHeader"], Text = "" });
        Types["MudBlazor.MudCardContent"].Links.Add(new() { Type = Types["MudBlazor.MudCardMedia"], Text = "" });
        Types["MudBlazor.MudCardHeader"].Links.Add(new() { Type = Types["MudBlazor.MudCard"], Text = "" });
        Types["MudBlazor.MudCardHeader"].Links.Add(new() { Type = Types["MudBlazor.MudCardActions"], Text = "" });
        Types["MudBlazor.MudCardHeader"].Links.Add(new() { Type = Types["MudBlazor.MudCardContent"], Text = "" });
        Types["MudBlazor.MudCardHeader"].Links.Add(new() { Type = Types["MudBlazor.MudCardMedia"], Text = "" });
        Types["MudBlazor.MudCardMedia"].Links.Add(new() { Type = Types["MudBlazor.MudCard"], Text = "" });
        Types["MudBlazor.MudCardMedia"].Links.Add(new() { Type = Types["MudBlazor.MudCardActions"], Text = "" });
        Types["MudBlazor.MudCardMedia"].Links.Add(new() { Type = Types["MudBlazor.MudCardContent"], Text = "" });
        Types["MudBlazor.MudCardMedia"].Links.Add(new() { Type = Types["MudBlazor.MudCardHeader"], Text = "" });
        Types["MudBlazor.MudCarousel`1"].Links.Add(new() { Type = Types["MudBlazor.MudCarouselItem"], Text = "" });
        Types["MudBlazor.MudCarouselItem"].Links.Add(new() { Type = Types["MudBlazor.MudCarousel`1"], Text = "" });
        Types["MudBlazor.MudCheckBox`1"].Links.Add(new() { Type = Types["MudBlazor.MudRadio`1"], Text = "" });
        Types["MudBlazor.MudChip`1"].Links.Add(new() { Type = Types["MudBlazor.MudChipSet`1"], Text = "" });
        Types["MudBlazor.MudChipSet`1"].Links.Add(new() { Type = Types["MudBlazor.MudChip`1"], Text = "" });
        Types["MudBlazor.MudCollapse"].Links.Add(new() { Type = Types["MudBlazor.MudExpansionPanels"], Text = "" });
        Types["MudBlazor.MudCollapse"].Links.Add(new() { Type = Types["MudBlazor.MudExpansionPanel"], Text = "" });
        Types["MudBlazor.MudContextualActionBar"].Links.Add(new() { Type = Types["MudBlazor.MudAppBar"], Text = "" });
        Types["MudBlazor.MudDataGridPager`1"].Links.Add(new() { Type = Types["MudBlazor.MudDataGrid`1"], Text = "" });
        Types["MudBlazor.MudDatePicker"].Links.Add(new() { Type = Types["MudBlazor.MudDateRangePicker"], Text = "" });
        Types["MudBlazor.MudDateRangePicker"].Links.Add(new() { Type = Types["MudBlazor.MudDatePicker"], Text = "" });
        Types["MudBlazor.MudDialog"].Links.Add(new() { Type = Types["MudBlazor.MudDialogContainer"], Text = "" });
        Types["MudBlazor.MudDialog"].Links.Add(new() { Type = Types["MudBlazor.MudDialogProvider"], Text = "" });
        Types["MudBlazor.MudDialog"].Links.Add(new() { Type = Types["MudBlazor.DialogOptions"], Text = "" });
        Types["MudBlazor.MudDialog"].Links.Add(new() { Type = Types["MudBlazor.DialogParameters`1"], Text = "" });
        Types["MudBlazor.MudDialog"].Links.Add(new() { Type = Types["MudBlazor.DialogReference"], Text = "" });
        Types["MudBlazor.MudDialog"].Links.Add(new() { Type = Types["MudBlazor.DialogService"], Text = "" });
        Types["MudBlazor.MudDialog"].Links.Add(new() { Type = Types["MudBlazor.MudMessageBox"], Text = "" });
        Types["MudBlazor.MudDialogContainer"].Links.Add(new() { Type = Types["MudBlazor.MudDialog"], Text = "" });
        Types["MudBlazor.MudDialogContainer"].Links.Add(new() { Type = Types["MudBlazor.MudDialogProvider"], Text = "" });
        Types["MudBlazor.MudDialogContainer"].Links.Add(new() { Type = Types["MudBlazor.DialogOptions"], Text = "" });
        Types["MudBlazor.MudDialogContainer"].Links.Add(new() { Type = Types["MudBlazor.DialogParameters`1"], Text = "" });
        Types["MudBlazor.MudDialogContainer"].Links.Add(new() { Type = Types["MudBlazor.DialogReference"], Text = "" });
        Types["MudBlazor.MudDialogContainer"].Links.Add(new() { Type = Types["MudBlazor.DialogService"], Text = "" });
        Types["MudBlazor.MudDialogProvider"].Links.Add(new() { Type = Types["MudBlazor.MudDialog"], Text = "" });
        Types["MudBlazor.MudDialogProvider"].Links.Add(new() { Type = Types["MudBlazor.MudDialogContainer"], Text = "" });
        Types["MudBlazor.MudDialogProvider"].Links.Add(new() { Type = Types["MudBlazor.DialogOptions"], Text = "" });
        Types["MudBlazor.MudDialogProvider"].Links.Add(new() { Type = Types["MudBlazor.DialogParameters`1"], Text = "" });
        Types["MudBlazor.MudDialogProvider"].Links.Add(new() { Type = Types["MudBlazor.DialogReference"], Text = "" });
        Types["MudBlazor.MudDialogProvider"].Links.Add(new() { Type = Types["MudBlazor.DialogService"], Text = "" });
        Types["MudBlazor.MudDrawer"].Links.Add(new() { Type = Types["MudBlazor.MudDrawerContainer"], Text = "" });
        Types["MudBlazor.MudDrawer"].Links.Add(new() { Type = Types["MudBlazor.MudDrawerHeader"], Text = "" });
        Types["MudBlazor.MudDrawerContainer"].Links.Add(new() { Type = Types["MudBlazor.MudDrawer"], Text = "" });
        Types["MudBlazor.MudDrawerContainer"].Links.Add(new() { Type = Types["MudBlazor.MudDrawerHeader"], Text = "" });
        Types["MudBlazor.MudDrawerHeader"].Links.Add(new() { Type = Types["MudBlazor.MudDrawer"], Text = "" });
        Types["MudBlazor.MudDrawerHeader"].Links.Add(new() { Type = Types["MudBlazor.MudDrawerContainer"], Text = "" });
        Types["MudBlazor.MudDropContainer`1"].Links.Add(new() { Type = Types["MudBlazor.MudDropZone`1"], Text = "" });
        Types["MudBlazor.MudDropContainer`1"].Links.Add(new() { Type = Types["MudBlazor.MudDynamicDropItem`1"], Text = "" });
        Types["MudBlazor.MudDropZone`1"].Links.Add(new() { Type = Types["MudBlazor.MudDropContainer`1"], Text = "" });
        Types["MudBlazor.MudDropZone`1"].Links.Add(new() { Type = Types["MudBlazor.MudDynamicDropItem`1"], Text = "" });
        Types["MudBlazor.MudExpansionPanel"].Links.Add(new() { Type = Types["MudBlazor.MudExpansionPanels"], Text = "" });
        Types["MudBlazor.MudExpansionPanel"].Links.Add(new() { Type = Types["MudBlazor.MudCollapse"], Text = "" });
        Types["MudBlazor.MudExpansionPanels"].Links.Add(new() { Type = Types["MudBlazor.MudExpansionPanel"], Text = "" });
        Types["MudBlazor.MudExpansionPanels"].Links.Add(new() { Type = Types["MudBlazor.MudCollapse"], Text = "" });
        Types["MudBlazor.MudFab"].Links.Add(new() { Type = Types["MudBlazor.MudButton"], Text = "" });
        Types["MudBlazor.MudFab"].Links.Add(new() { Type = Types["MudBlazor.MudIconButton"], Text = "" });
        Types["MudBlazor.MudFab"].Links.Add(new() { Type = Types["MudBlazor.MudToggleIconButton"], Text = "" });
        Types["MudBlazor.MudField"].Links.Add(new() { Type = Types["MudBlazor.MudTextField`1"], Text = "" });
        Types["MudBlazor.MudGrid"].Links.Add(new() { Type = Types["MudBlazor.MudItem"], Text = "" });
        Types["MudBlazor.MudIcon"].Links.Add(new() { Type = Types["MudBlazor.MudIconButton"], Text = "" });
        Types["MudBlazor.MudIconButton"].Links.Add(new() { Type = Types["MudBlazor.MudButton"], Text = "" });
        Types["MudBlazor.MudIconButton"].Links.Add(new() { Type = Types["MudBlazor.MudFab"], Text = "" });
        Types["MudBlazor.MudIconButton"].Links.Add(new() { Type = Types["MudBlazor.MudToggleIconButton"], Text = "" });
        Types["MudBlazor.MudIconButton"].Links.Add(new() { Type = Types["MudBlazor.MudIcon"], Text = "" });
        Types["MudBlazor.MudItem"].Links.Add(new() { Type = Types["MudBlazor.MudGrid"], Text = "" });
        Types["MudBlazor.MudLayout"].Links.Add(new() { Type = Types["MudBlazor.MudMainContent"], Text = "" });
        Types["MudBlazor.MudList`1"].Links.Add(new() { Type = Types["MudBlazor.MudListItem`1"], Text = "" });
        Types["MudBlazor.MudList`1"].Links.Add(new() { Type = Types["MudBlazor.MudListSubheader"], Text = "" });
        Types["MudBlazor.MudListItem`1"].Links.Add(new() { Type = Types["MudBlazor.MudList`1"], Text = "" });
        Types["MudBlazor.MudListItem`1"].Links.Add(new() { Type = Types["MudBlazor.MudListSubheader"], Text = "" });
        Types["MudBlazor.MudListSubheader"].Links.Add(new() { Type = Types["MudBlazor.MudList`1"], Text = "" });
        Types["MudBlazor.MudListSubheader"].Links.Add(new() { Type = Types["MudBlazor.MudListItem`1"], Text = "" });
        Types["MudBlazor.MudMenu"].Links.Add(new() { Type = Types["MudBlazor.MudMenuItem"], Text = "" });
        Types["MudBlazor.MudMenuItem"].Links.Add(new() { Type = Types["MudBlazor.MudMenu"], Text = "" });
        Types["MudBlazor.MudMessageBox"].Links.Add(new() { Type = Types["MudBlazor.MudDialog"], Text = "" });
        Types["MudBlazor.MudNavGroup"].Links.Add(new() { Type = Types["MudBlazor.MudNavLink"], Text = "" });
        Types["MudBlazor.MudNavGroup"].Links.Add(new() { Type = Types["MudBlazor.MudNavMenu"], Text = "" });
        Types["MudBlazor.MudNavLink"].Links.Add(new() { Type = Types["MudBlazor.MudNavGroup"], Text = "" });
        Types["MudBlazor.MudNavLink"].Links.Add(new() { Type = Types["MudBlazor.MudNavMenu"], Text = "" });
        Types["MudBlazor.MudNavMenu"].Links.Add(new() { Type = Types["MudBlazor.MudNavGroup"], Text = "" });
        Types["MudBlazor.MudNavMenu"].Links.Add(new() { Type = Types["MudBlazor.MudNavLink"], Text = "" });
        Types["MudBlazor.MudPicker`1"].Links.Add(new() { Type = Types["MudBlazor.MudPickerContent"], Text = "" });
        Types["MudBlazor.MudPicker`1"].Links.Add(new() { Type = Types["MudBlazor.MudPickerToolbar"], Text = "" });
        Types["MudBlazor.MudPickerContent"].Links.Add(new() { Type = Types["MudBlazor.MudPicker`1"], Text = "" });
        Types["MudBlazor.MudPickerContent"].Links.Add(new() { Type = Types["MudBlazor.MudPickerToolbar"], Text = "" });
        Types["MudBlazor.MudPickerToolbar"].Links.Add(new() { Type = Types["MudBlazor.MudPicker`1"], Text = "" });
        Types["MudBlazor.MudPickerToolbar"].Links.Add(new() { Type = Types["MudBlazor.MudPickerContent"], Text = "" });
        Types["MudBlazor.MudPopoverProvider"].Links.Add(new() { Type = Types["MudBlazor.MudThemeProvider"], Text = "" });
        Types["MudBlazor.MudPopoverProvider"].Links.Add(new() { Type = Types["MudBlazor.MudDialogProvider"], Text = "" });
        Types["MudBlazor.MudPopoverProvider"].Links.Add(new() { Type = Types["MudBlazor.MudSnackbarProvider"], Text = "" });
        Types["MudBlazor.MudProgressCircular"].Links.Add(new() { Type = Types["MudBlazor.MudProgressLinear"], Text = "" });
        Types["MudBlazor.MudProgressLinear"].Links.Add(new() { Type = Types["MudBlazor.MudProgressCircular"], Text = "" });
        Types["MudBlazor.MudRadio`1"].Links.Add(new() { Type = Types["MudBlazor.MudCheckBox`1"], Text = "" });
        Types["MudBlazor.MudRadio`1"].Links.Add(new() { Type = Types["MudBlazor.MudRadioGroup`1"], Text = "" });
        Types["MudBlazor.MudRating"].Links.Add(new() { Type = Types["MudBlazor.MudRatingItem"], Text = "" });
        Types["MudBlazor.MudRatingItem"].Links.Add(new() { Type = Types["MudBlazor.MudRating"], Text = "" });
        Types["MudBlazor.MudSelect`1"].Links.Add(new() { Type = Types["MudBlazor.MudSelectItem`1"], Text = "" });
        Types["MudBlazor.MudSelectItem`1"].Links.Add(new() { Type = Types["MudBlazor.MudSelect`1"], Text = "" });
        Types["MudBlazor.MudSimpleTable"].Links.Add(new() { Type = Types["MudBlazor.MudTable`1"], Text = "" });
        Types["MudBlazor.MudToggleIconButton"].Links.Add(new() { Type = Types["MudBlazor.MudButton"], Text = "" });
        Types["MudBlazor.MudToggleIconButton"].Links.Add(new() { Type = Types["MudBlazor.MudFab"], Text = "" });
        Types["MudBlazor.MudToggleIconButton"].Links.Add(new() { Type = Types["MudBlazor.MudIconButton"], Text = "" });
        Types["MudBlazor.MultiMask"].Links.Add(new() { Type = Types["MudBlazor.BlockMask"], Text = "" });
        Types["MudBlazor.MultiMask"].Links.Add(new() { Type = Types["MudBlazor.DateMask"], Text = "" });
        Types["MudBlazor.MultiMask"].Links.Add(new() { Type = Types["MudBlazor.PatternMask"], Text = "" });
        Types["MudBlazor.MultiMask"].Links.Add(new() { Type = Types["MudBlazor.RegexMask"], Text = "" });
        Types["MudBlazor.PatternMask"].Links.Add(new() { Type = Types["MudBlazor.BlockMask"], Text = "" });
        Types["MudBlazor.PatternMask"].Links.Add(new() { Type = Types["MudBlazor.DateMask"], Text = "" });
        Types["MudBlazor.PatternMask"].Links.Add(new() { Type = Types["MudBlazor.MultiMask"], Text = "" });
        Types["MudBlazor.PatternMask"].Links.Add(new() { Type = Types["MudBlazor.RegexMask"], Text = "" });
        Types["MudBlazor.RegexMask"].Links.Add(new() { Type = Types["MudBlazor.BlockMask"], Text = "" });
        Types["MudBlazor.RegexMask"].Links.Add(new() { Type = Types["MudBlazor.DateMask"], Text = "" });
        Types["MudBlazor.RegexMask"].Links.Add(new() { Type = Types["MudBlazor.MultiMask"], Text = "" });
        Types["MudBlazor.RegexMask"].Links.Add(new() { Type = Types["MudBlazor.PatternMask"], Text = "" });
        Types["MudBlazor.SelectColumn`1"].Links.Add(new() { Type = Types["MudBlazor.MudDataGrid`1"], Text = "" });

    }
}
