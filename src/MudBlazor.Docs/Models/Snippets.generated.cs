//-----------------------------------------------------------------------
// This file is autogenerated by MudBlazor.Docs.Compiler
// Any changes to this file will be overwritten on build
// <auto-generated />
//-----------------------------------------------------------------------

namespace MudBlazor.Docs.Models
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MudBlazor.Docs.Compiler", "0.0.0.0")]
    public static partial class Snippets
    {
        public const string BorderRadiusCornerExample = @"<div class=""mud-theme-info py-4 px-6 mx-4 rounded-tl-xl"">
    <MudText Align=""Align.Center"">.rounded-tl-xl</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded-tr-xl"">
    <MudText Align=""Align.Center"">.rounded-tr-xl</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-br-xl"">
    <MudText Align=""Align.Center"">.rounded-br-xl</MudText>
</div>
<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-bl-xl"">
    <MudText Align=""Align.Center"">.rounded-bl-xl</MudText>
</div>";

        public const string BorderRadiusDefaultExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded"">
    <MudText Align=""Align.Center"">.rounded</MudText>
</div>";

        public const string BorderRadiusPillnCircleExample = @"<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-pill"">
    <MudText Align=""Align.Center"">.rounded-pill</MudText>
</div>

<div class=""mud-theme-primary pa-7 rounded-circle""></div>";

        public const string BorderRadiusRemoveExample = @"<div class=""mud-theme-primary py-4 px-8 rounded-0"">
    <MudText Align=""Align.Center"">.rounded-0</MudText>
</div>";

        public const string BorderRadiusSidesExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-t-xl"">
    <MudText Align=""Align.Center"">.rounded-t-xl</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-r-xl"">
    <MudText Align=""Align.Center"">.rounded-r-xl</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded-b-xl"">
    <MudText Align=""Align.Center"">.rounded-b-xl</MudText>
</div>
<div class=""mud-theme-info py-4 px-6 mx-4 rounded-l-xl"">
    <MudText Align=""Align.Center"">.rounded-l-xl</MudText>
</div>";

        public const string BorderRadiusSizeExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-0"">
    <MudText Align=""Align.Center"">.rounded-0</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-sm"">
    <MudText Align=""Align.Center"">.rounded-sm</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded"">
    <MudText Align=""Align.Center"">.rounded</MudText>
</div>
<div class=""mud-theme-info py-4 px-6 mx-4 rounded-lg"">
    <MudText Align=""Align.Center"">.rounded-lg</MudText>
</div>
<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-xl"">
    <MudText Align=""Align.Center"">.rounded-xl</MudText>
</div>";

        public const string BorderStyleExample = @"<MudPaper Class=""border-solid border-2 mud-border-primary pa-4"" Elevation=""0"">border-solid</MudPaper>
<MudPaper Class=""border-dashed border-2 mud-border-primary pa-4"" Elevation=""0"">border-dashed</MudPaper>
<MudPaper Class=""border-dotted border-2 mud-border-primary pa-4"" Elevation=""0"">border-dotted</MudPaper>
<MudPaper Class=""border-double border-4 mud-border-primary pa-4"" Elevation=""0"">border-double</MudPaper>";

        public const string BorderStyleNoneHiddenExample = @"<MudPaper Outlined=""true"" Class=""border-none pa-4"" Elevation=""0"">border-none</MudPaper>
<MudPaper Outlined=""true"" Class=""border-hidden pa-4"" Elevation=""0"">border-hidden</MudPaper>";

        public const string BorderWidthAllSidesExample = @"<MudPaper Class=""border border-solid mud-border-primary pa-4"" Square=""true"">border</MudPaper>
<MudPaper Class=""border-2 border-solid mud-border-primary pa-4"" Square=""true"">border-2</MudPaper>
<MudPaper Class=""border-4 border-solid mud-border-primary pa-4"" Square=""true"">border-4</MudPaper>
<MudPaper Class=""border-8 border-solid mud-border-primary pa-4"" Square=""true"">border-8</MudPaper>";

        public const string BorderWidthHorizontalVerticalExample = @"<MudPaper Class=""border-x-4 border-solid mud-border-primary pa-4""  Square=""true"">border-x-4</MudPaper>
<MudPaper Class=""border-y-4 border-solid mud-border-primary pa-4""  Square=""true"">border-y-4</MudPaper>";

        public const string BorderWidthIndividualSidesExample = @"<MudPaper Class=""border-t-4 border-solid mud-border-primary pa-4"" Square=""true"">border-t-4</MudPaper>
<MudPaper Class=""border-r-4 border-solid mud-border-primary pa-4"" Square=""true"">border-r-4</MudPaper>
<MudPaper Class=""border-b-4 border-solid mud-border-primary pa-4"" Square=""true"">border-b-4</MudPaper>
<MudPaper Class=""border-l-4 border-solid mud-border-primary pa-4"" Square=""true"">border-l-4</MudPaper>";

        public const string AlignContentCenterExample = @"<MudPaper Class=""d-flex align-content-center flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignContentEndExample = @"<MudPaper Class=""d-flex align-content-end flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignContentSpaceAroundExample = @"<MudPaper Class=""d-flex align-content-space-around flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignContentSpaceBetweenExample = @"<MudPaper Class=""d-flex align-content-space-between flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignContentStartExample = @"<MudPaper Class=""d-flex align-content-start flex-wrap flex-grow-1 gap-4"" MaxWidth=""608px"" Height=""320px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""128px"" Height=""64px""/>
</MudPaper>";

        public const string AlignItemBaselineExample = @"<MudPaper Class=""d-flex align-baseline flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""pt-4 pb-12 d-flex flex-1 mud-theme-primary""><MudPaper Square=""true"" Elevation=""0"" Height=""4px"" Width=""100%""/></MudPaper>
    <MudPaper Class=""pt-16 pb-16 d-flex flex-1 mud-theme-primary""><MudPaper Square=""true"" Elevation=""0"" Height=""4px"" Width=""100%""/></MudPaper>
    <MudPaper Class=""pt-12 pb-4 d-flex flex-1 mud-theme-primary""><MudPaper Square=""true"" Elevation=""0"" Height=""4px"" Width=""100%""/></MudPaper>
</MudPaper>";

        public const string AlignItemCenterExample = @"<MudPaper Class=""d-flex align-center flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-4 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-8 d-flex flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignItemEndExample = @"<MudPaper Class=""d-flex align-end flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-4 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-8 d-flex flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignItemStartExample = @"<MudPaper Class=""d-flex align-start flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-8 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-12 d-flex flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignItemStretchExample = @"<MudPaper Class=""d-flex align-stretch flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-4 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 d-flex flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-8 d-flex flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignSelfCenterExample = @"<MudPaper Class=""d-flex flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
    <MudPaper Class=""align-self-center py-4 flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignSelfEndExample = @"<MudPaper Class=""d-flex flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
    <MudPaper Class=""align-self-end py-4 flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignSelfStartExample = @"<MudPaper Class=""d-flex flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
    <MudPaper Class=""align-self-start py-4 flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string AlignSelfStretchExample = @"<MudPaper Class=""d-flex flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
    <MudPaper Class=""align-self-stretch py-4 flex-1 mud-theme-primary""/>
    <MudPaper Class=""py-16 flex-1 mud-theme-primary""/>
</MudPaper>";

        public const string FlexAutoExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-auto d-flex py-8 mud-theme-primary"" Width=""40%"" Elevation=""0""/>
    <MudPaper Class=""flex-auto d-flex py-8  mud-theme-primary"" Width=""20%"" Elevation=""0""/>
</div>";

        public const string FlexDirectionColumnExample = @"<MudPaper Class=""d-flex flex-column flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""100%"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""100%"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""100%"" Height=""64px""/>
</MudPaper>";

        public const string FlexDirectionColumnReversedExample = @"<MudPaper Class=""d-flex flex-column-reverse flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""100%"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""100%"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""100%"" Height=""64px""/>
</MudPaper>";

        public const string FlexDirectionRowExample = @"<MudPaper Class=""d-flex flex-row flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string FlexDirectionRowReversedExample = @"<MudPaper Class=""d-flex flex-row-reverse flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-secondary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string FlexEnableExample = @"<MudPaper Class=""d-flex pa-4"">
    I'm a flexbox container.
</MudPaper>
<MudPaper Class=""d-flex pa-4"">
    I'm a flexbox container.
</MudPaper>
<MudPaper Class=""d-inline-flex pa-4"">
    I'm an inline flexbox container.
</MudPaper>
<MudPaper Class=""d-inline-flex pa-4"">
    I'm an inline flexbox container.
</MudPaper>";

        public const string FlexFlex1Example = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-1 d-flex py-8 mud-theme-primary"" Elevation=""0""/>
    <MudPaper Class=""flex-1 d-flex py-8  mud-theme-primary"" Elevation=""0""/>
</div>";

        public const string FlexGrowExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-grow-1 py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""py-8  mud-theme-primary"" Width=""64px"" Elevation=""0""/>
</div>";

        public const string FlexInitalExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-initial d-flex py-8 mud-theme-primary"" Width=""40%"" Elevation=""0""/>
    <MudPaper Class=""flex-initial d-flex py-8  mud-theme-primary"" Width=""25%"" Elevation=""0""/>
</div>";

        public const string FlexNoGrowExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-grow-1 py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-grow-0 py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-grow-1 py-8  mud-theme-primary"" Width=""64px"" Elevation=""0""/>
</div>";

        public const string FlexNoShrinkExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-1 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-shrink-0 py-8 mud-theme-primary"" Width=""128px"" Elevation=""0""/>
    <MudPaper Class=""flex-1 py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
</div>";

        public const string FlexNoneExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-none d-flex py-8 mud-theme-primary"" Width=""256px"" Elevation=""0""/>
    <MudPaper Class=""flex-1 d-flex py-8  mud-theme-primary"" Elevation=""0""/>
</div>";

        public const string FlexShrinkExample = @"<div class=""d-flex flex-grow-1 gap-4"">
    <MudPaper Class=""flex-none py-8 mud-theme-primary"" Width=""64px"" Elevation=""0""/>
    <MudPaper Class=""flex-shrink-1 py-8 mud-theme-primary"" Width=""100%"" Elevation=""0""/>
    <MudPaper Class=""flex-none py-8  mud-theme-primary"" Width=""64px"" Elevation=""0""/>
</div>";

        public const string FlexWrapNoWrapExample = @"<MudPaper Class=""d-flex flex-nowrap gap-4 overflow-auto"" MaxWidth=""560px"" Elevation=""0"">
    <MudPaper Class=""flex-none mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""flex-none mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""flex-none mud-theme-primary"" Width=""256px"" Height=""64px""/>
</MudPaper>";

        public const string FlexWrapReverseExample = @"<MudPaper Class=""d-flex flex-wrap-reverse gap-4"" MaxWidth=""528px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
</MudPaper>";

        public const string FlexWrapWrapExample = @"<MudPaper Class=""d-flex flex-wrap gap-4"" MaxWidth=""528px"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""256px"" Height=""64px""/>
</MudPaper>";

        public const string GapBasicExample = @"<MudPaper Class=""gap-4 d-flex flex-wrap"" MaxWidth=""560px"" Elevation=""0"">
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""256px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""256px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""256px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""256px""/>
</MudPaper>";

        public const string GapRowColExample = @"<MudPaper Class=""gap-x-8 gap-y-4 d-flex flex-wrap"" MaxWidth=""560px"" Elevation=""0"">
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
    <MudPaper Class=""flex-auto mud-theme-primary"" Height=""64px"" Width=""128px""/>
</MudPaper>";

        public const string JustifyContentCenterExample = @"<MudPaper Class=""d-flex justify-center flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string JustifyContentEndExample = @"<MudPaper Class=""d-flex justify-end flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string JustifyContentSpaceAroundExample = @"<MudPaper Class=""d-flex justify-space-around flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string JustifyContentSpaceBetweenExample = @"<MudPaper Class=""d-flex justify-space-between flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string JustifyContentStartExample = @"<MudPaper Class=""d-flex justify-start flex-grow-1 gap-4"" Elevation=""0"">
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
    <MudPaper Class=""mud-theme-primary"" Width=""64px"" Height=""64px""/>
</MudPaper>";

        public const string OrderBasicExample = @"<div class=""d-flex gap-2"">
    <MudAvatar Class=""order-3"" Size=""Size.Large"" Color=""Color.Primary"" Rounded=""true"">01</MudAvatar>
    <MudAvatar Class=""order-2"" Size=""Size.Large"" Color=""Color.Primary"" Rounded=""true"">02</MudAvatar>
    <MudAvatar Class=""order-1"" Size=""Size.Large"" Color=""Color.Primary"" Rounded=""true"">03</MudAvatar>
</div>";

        public const string CursorExample = @"<MudButton Variant=""Variant.Filled"">Default</MudButton>
<MudButton Class=""cursor-progress"" Color=""Color.Primary"" Variant=""Variant.Filled"">Saving...</MudButton>
<MudButton Class=""cursor-not-allowed"" Color=""Color.Primary"" Variant=""Variant.Filled"">Delete</MudButton>";

        public const string CursorInteractiveExample = @"<div class=""d-flex flex-wrap gap-4"">
    @foreach (var cursor in Cursors)
    {
        <MudPaper Class=""@($""d-flex justify-center align-center {cursor}"")"" Width=""128px"" Height=""64px"">
            @cursor
        </MudPaper>
    }
</div>

@code {
    string[] Cursors = new[]
    {
        ""cursor-all-scroll"", ""cursor-auto"", ""cursor-cell"", ""cursor-col-resize"", ""cursor-copy"", ""cursor-crosshair"", ""cursor-default"", ""cursor-grab"", ""cursor-grabbing"", ""cursor-help"", ""cursor-move"", ""cursor-no-drop"", ""cursor-none"", ""cursor-not-allowed"", ""cursor-n-resize"", ""cursor-pointer"", ""cursor-progress"", ""cursor-row-resize"", ""cursor-text"", ""cursor-url"", ""cursor-vertical-text"", ""cursor-wait"", ""cursor-w-resize"", ""cursor-zoom-in"", ""cursor-zoom-out""
    };
}";

        public const string PointerEventsExample = @"<MudText Class=""pointer-events-auto mx-4"" Typo=""Typo.h5"">pointer-events-auto</MudText>
<MudText Class=""pointer-events-none mx-4"" Typo=""Typo.h5"">pointer-events-none</MudText>";

        public const string DisplayDblockExample = @"<div>
    <div class=""d-block pa-2 mud-theme-primary"">d-block</div>
    <div class=""d-block pa-2 mud-theme-dark"">d-block</div>
</div>";

        public const string DisplayDinlineExample = @"<div>
    <div class=""d-inline pa-2 mud-theme-primary"">d-inline</div>
    <div class=""d-inline pa-2 mud-theme-dark"">d-inline</div>
</div>";

        public const string DisplayVisibilyExample = @"<MudPaper Elevation=""0"" Class=""pa-4"" Style=""height:100px; width:180px;"">
    <div class=""d-none d-sm-flex d-md-none mud-theme-primary rounded"" style=""height:100%; width:100%;""></div>
</MudPaper>
<MudPaper Elevation=""0"" Class=""pa-4"" Style=""height:100px; width:180px;"">
    <div class=""d-lg-none mud-theme-secondary rounded"" style=""height:100%; width:100%;""></div>
</MudPaper>
<MudPaper Elevation=""0"" Class=""pa-4"" Style=""height:100px; width:180px;"">
    <div class=""d-none d-lg-block mud-theme-tertiary rounded"" style=""height:100%; width:100%;""></div>
</MudPaper>";

        public const string VisibilityExample = @"<MudPaper Class=""px-8 py-4 mud-theme-primary"">Default</MudPaper>
<MudPaper Class=""invisible px-8 py-4 mud-theme-primary"">Invisible</MudPaper>
<MudPaper Class=""px-8 py-4 mud-theme-primary"">Default</MudPaper>";

        public const string ZIndexExample = @"<MudAvatar Class=""z-30 ma-n2"" Color=""Color.Primary"" Size=""Size.Large"">M</MudAvatar>
<MudAvatar Class=""z-20 ma-n2"" Color=""Color.Secondary"" Size=""Size.Large"">U</MudAvatar>
<MudAvatar Class=""z-10 ma-n2"" Color=""Color.Tertiary"" Size=""Size.Large"">D</MudAvatar>";

        public const string SpacingBreakpointExample = @"<MudPaper Class=""pa-md-6 mx-lg-auto mud-theme-secondary"">
    <MudText Typo=""Typo.body1"">Adjust screen size to see the changes.</MudText>
</MudPaper>";

        public const string SpacingCenteringExample = @"<MudPaper Class=""mx-auto pa-6 mud-theme-success"">
    <MudText Typo=""Typo.body1"">Centered!</MudText>
</MudPaper>";

        public const string SpacingExample = @"<MudPaper Class=""pa-4 mr-16"">
    <MudText Typo=""Typo.subtitle2"">pa-4 mr-16</MudText>
</MudPaper>
<MudPaper Class=""pa-4"">
    <MudText Typo=""Typo.subtitle2"">pa-4</MudText>
</MudPaper>
<MudPaper Class=""pa-4 ml-8"">
    <MudText Typo=""Typo.subtitle2"">pa-4 ml-8</MudText>
</MudPaper>";

        public const string SpacingNegativeExample = @"<MudPaper Class=""mx-auto pa-4 mud-theme-secondary"" Style=""height:100px; width:150px;"">
</MudPaper>
<MudPaper Class=""mt-n12 mx-auto pa-6 mud-theme-primary"" Elevation=""12"" Style=""width: 350px;"">
    <MudText Typo=""Typo.body1"">This card uses negative top margin!</MudText>
</MudPaper>";

        public const string AlertAlignmentExample = @"<MudAlert Severity=""Severity.Normal"" ContentAlignment=""HorizontalAlignment.Left"">Left</MudAlert>
<MudAlert Severity=""Severity.Info"" ContentAlignment=""HorizontalAlignment.Center"">Center</MudAlert>
<MudAlert Severity=""Severity.Success"" ContentAlignment=""HorizontalAlignment.Right"">Right</MudAlert>
<MudAlert Severity=""Severity.Warning"" ContentAlignment=""HorizontalAlignment.Start"">Start</MudAlert>
<MudAlert Severity=""Severity.Error"" ContentAlignment=""HorizontalAlignment.End"">End</MudAlert>";

        public const string AlertCloseExample = @"@if (showLeaveAlert)
{
    <MudAlert Severity=""Severity.Info"" ContentAlignment=""HorizontalAlignment.Center"" ShowCloseIcon=""true"" CloseIconClicked=""(() => CloseMe(true))"">Time to leave. Please close me!</MudAlert>
}
@if (showCallAlert)
{
    <MudAlert Severity=""Severity.Success"" ContentAlignment=""HorizontalAlignment.Center"" ShowCloseIcon=""true"" CloseIconClicked=""(() => CloseMe(false))"">Time to call. Please close me!</MudAlert>
}
@if (!showLeaveAlert && !showCallAlert)
{
    <div style=""display: flex; justify-content: center;"" class=""mt-6"">
        <MudButton @onclick=""ShowAlerts"" Variant=""Variant.Filled"" Color=""Color.Primary"">Show Alerts</MudButton>
    </div>
}

@code { 
    private bool showCallAlert = true;
    private bool showLeaveAlert = true;

    private void CloseMe(bool value)
    {
        if (value)
        {
            showLeaveAlert = false;
        }
        else
        {
            showCallAlert = false;
        }
    }

    private void ShowAlerts()
    {
        showCallAlert = true;
        showLeaveAlert = true;
    }
}";

        public const string AlertDenseExample = @"<MudGrid>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Dense=""true"" Class=""my-2"">Dense Default</MudAlert>
        <MudAlert Severity=""Severity.Info"" Dense=""true"" Class=""my-2"">Dense Info</MudAlert>
        <MudAlert Severity=""Severity.Success"" Dense=""true"" Class=""my-2"">Dense Success</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Dense=""true"" Class=""my-2"">Dense Warning</MudAlert>
        <MudAlert Severity=""Severity.Error"" Dense=""true"" Class=""my-2"">Dense Error</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Default</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Info</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Success</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Warning</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" Dense=""true"" Class=""my-2"">Dense Error</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Default</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Info</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Success</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Warning</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" Dense=""true"" Class=""my-2"">Dense Error</MudAlert>
    </MudItem>
</MudGrid>";

        public const string AlertElevationExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Elevation=""@elevation"" Class=""mt-16"">
    Elevated Alert, or is it?
</MudAlert>
<MudSlider @bind-Value=""elevation"" Min=""0"" Max=""24"" Class=""my-4"">Elevation</MudSlider>

@code {
    public int elevation = 1;
}";

        public const string AlertFilledExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"">The reactor type is RBMK-1000</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"">The reactor was fired up successfully</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"">The reactor is running at optimum temperature</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"">The reactor temperature exceeds the optimal range</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"">Meltdown is imminent</MudAlert>";

        public const string AlertNoIconExample = @"<MudGrid>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" NoIcon=""true"" Class=""mb-2 mt-3"">Default No Icon</MudAlert>
        <MudAlert Severity=""Severity.Info"" NoIcon=""true"" Class=""my-2"">Info No Icon</MudAlert>
        <MudAlert Severity=""Severity.Success"" NoIcon=""true"" Class=""my-2"">Success No Icon</MudAlert>
        <MudAlert Severity=""Severity.Warning"" NoIcon=""true"" Class=""my-2"">Warning No Icon</MudAlert>
        <MudAlert Severity=""Severity.Error"" NoIcon=""true"" Class=""my-2"">Error No Icon</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Icon Default No</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Info No Icon</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Success No Icon</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Warning No Icon</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" NoIcon=""true"" Class=""my-2"">Error No Icon</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""mb-2 mt-3"">Default No Icon</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""my-2"">Info No Icon</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""my-2"">Success No Icon</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""my-2"">Warning No Icon</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" NoIcon=""true"" Class=""my-2"">Error No Icon</MudAlert>
    </MudItem>
</MudGrid>";

        public const string AlertOutlinedExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"">The reactor type is RBMK-1000</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"">The reactor was fired up successfully</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"">The reactor is running at optimum temperature</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"">The reactor temperature exceeds the optimal range</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"">Meltdown is imminent</MudAlert>";

        public const string AlertSimpleExample = @"<MudAlert Severity=""Severity.Normal"">The reactor type is RBMK-1000</MudAlert>
<MudAlert Severity=""Severity.Info"">The reactor was fired up successfully</MudAlert>
<MudAlert Severity=""Severity.Success"">The reactor is running at optimum temperature</MudAlert>
<MudAlert Severity=""Severity.Warning"">The reactor temperature exceeds the optimal range</MudAlert>
<MudAlert Severity=""Severity.Error"">Meltdown is imminent</MudAlert>";

        public const string AlertSquareExample = @"<MudGrid>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Square=""true"" Class=""mb-2 mt-3"">Default Square</MudAlert>
        <MudAlert Severity=""Severity.Info"" Square=""true"" Class=""my-2"">Info Square</MudAlert>
        <MudAlert Severity=""Severity.Success"" Square=""true"" Class=""my-2"">Success Square</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Square=""true"" Class=""my-2"">Warning Square</MudAlert>
        <MudAlert Severity=""Severity.Error"" Square=""true"" Class=""my-2"">Error Square</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Default Square</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Info Square</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Success Square</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Warning Square</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" Square=""true"" Class=""my-2"">Error Square</MudAlert>
    </MudItem>
    <MudItem md=""4"" xs=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Square=""true"" Class=""mb-2 mt-3"">Default Square</MudAlert>
        <MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" Square=""true"" Class=""my-2"">Info Square</MudAlert>
        <MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" Square=""true"" Class=""my-2"">Success Square</MudAlert>
        <MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" Square=""true"" Class=""my-2"">Warning Square</MudAlert>
        <MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" Square=""true"" Class=""my-2"">Error Square</MudAlert>
    </MudItem>
</MudGrid>";

        public const string AppBarBottomExample = @"<MudLayout>
    <MudMainContent Class=""pt-0"">
        <MudList T=""string"">
            <MudListItem Text=""App Bookmark Item 1"" Icon=""@Icons.Material.Filled.Bookmark"" />
            <MudListItem Text=""App Bookmark Item 2"" Icon=""@Icons.Material.Filled.Bookmark"" IconColor=""Color.Primary"" />
            <MudListItem Text=""App Bookmark Item 3"" Icon=""@Icons.Material.Filled.Bookmark"" IconColor=""Color.Secondary"" />
            <MudListItem Text=""App Bookmark Item 4"" Icon=""@Icons.Material.Filled.Bookmark"" IconColor=""Color.Tertiary"" />
            <MudListItem Text=""App Bookmark Item 5"" Icon=""@Icons.Material.Filled.Bookmark"" IconColor=""Color.Info"" />
            <MudListItem Text=""App Bookmark Item 6"" Icon=""@Icons.Material.Filled.Bookmark"" IconColor=""Color.Success"" />
            <MudListItem Text=""App Bookmark Item 7"" Icon=""@Icons.Material.Filled.Bookmark"" IconColor=""Color.Warning"" />
            <MudListItem Text=""App Bookmark Item 8"" Icon=""@Icons.Material.Filled.Bookmark"" IconColor=""Color.Error"" />
            <MudListItem Text=""App Bookmark Item 9"" Icon=""@Icons.Material.Filled.Bookmark"" IconColor=""Color.Dark"" />
        </MudList>
    </MudMainContent>
    <MudAppBar Bottom=""true"" Fixed=""true"" Color=""Color.Primary"" Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Filled.FavoriteBorder"" Color=""Color.Inherit"" Edge=""Edge.End"" />
        <MudIconButton Icon=""@Icons.Material.Filled.MoreVert"" Color=""Color.Inherit"" Edge=""Edge.End"" />
    </MudAppBar>
</MudLayout>


@code{
    bool open = false;

    void ToggleDrawer()
    {
        open = !open;
    }
}";

        public const string AppBarContextualExample = @"<MudLayout>
    <MudAppBar Color=""Color.Primary"" Fixed=""false"" Contextual>
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
        <MudSpacer />
        <MudIconButton Icon=""@(Deleted > 0 ? @Icons.Material.Filled.FlipToBack : @Icons.Material.Filled.FlipToFront)"" Color=""Color.Inherit"" OnClick=""ResetItems"" />
    </MudAppBar>
    <MudMainContent Class=""pt-4"">
        <div class=""d-flex flex-wrap gap-4"">
            @for (int i = 0; i < _images.Length; i++)
            {
                var index = i;

                if (_images[index].IsDeleted) continue;

                <MudPaper Width=""200px"" Height=""150px"" Elevation=""0"" Class=""d-flex align-center justify-center"" Style=""background-color:inherit"">
                    <MudImage Src=""@($""images/{_images[index].Title}.jpg"")"" Width=""@_images[index].Width"" Height=""@_images[index].Height""
                              Elevation=""25"" ObjectFit=""ObjectFit.Cover"" Class=""rounded-lg""
                              @onclick=""@(() => SelectImage(index))""/>
                </MudPaper>
            }
        </div>
    </MudMainContent>
</MudLayout>

<MudContextualActionBar Color=""Color.Tertiary"" Fixed=""false"" Visible=""ShowContext"">
    <MudIconButton Icon=""@Icons.Material.Filled.Close"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""UnselectItems"" />
    <MudText Class=""pl-8"" Typo=""Typo.h6"">@($""{_selected.Count} Selected"") </MudText>
    <MudSpacer />
    <MudIconButton Icon=""@Icons.Material.Filled.Share"" Color=""Color.Inherit"" />
    <MudIconButton Icon=""@Icons.Material.Filled.Edit"" Color=""Color.Inherit"" />
    <MudIconButton Icon=""@Icons.Material.Filled.Delete"" Color=""Color.Inherit"" OnClick=""DeleteSelectedItems"" />
</MudContextualActionBar>

@code {
    private bool ShowContext => _selected.Count > 0;

    private readonly HashSet<Image> _selected = [];
    private int Deleted => _images.Count(x => x.IsDeleted);
    private readonly Image[] _images = [ new Image(""sweden""), new Image(""iceland""), new Image(""castle""), new Image(""tractor""), new Image(""door""), new Image(""pilars"") ];

    private void SelectImage(int index)
    {
        var image = _images[index];
        bool isSelected = _selected.Contains(image);

        _images[index] = image with { Width = isSelected ? 200 : 100, Height = isSelected ? 150 : 75 };

        if (isSelected)
            _selected.Remove(image);
        else
            _selected.Add(_images[index]);
    }

    private void UnselectItems()
    {
        for (int index = 0; index < _images.Length; index++)
        {
            var image = _images[index];

            if (_selected.Contains(image))
            {
                _images[index] = image with { Width = 200, Height = 150 };
            }
        }

        _selected.Clear();
    }

    private void DeleteSelectedItems()
    {
        for (int index = 0; index < _images.Length; index++)
        {
            var image = _images[index];

            if(_selected.Contains(image))
            {
                _images[index] = image with { Width = 200, Height = 150, IsDeleted = true };
            }
        }

        _selected.Clear();
    }

    private void ResetItems()
    {
        for (int index = 0; index < _images.Length; index++)
        {
            var image = _images[index];

            if (image.IsDeleted)
            {
                _images[index] = image with { IsDeleted = false };
            }
        }
    }

    private record Image(string Title, int Width = 200, int Height = 150, bool IsDeleted = false);
}";

        public const string AppBarMenuExample = @"<MudAppBar Color=""Color.Primary"" Fixed=""false"">
    <MudMenu Dense
             Variant=Variant.Text
             Size=Size.Medium
             Color=Color.Inherit
             Icon=@Icons.Material.TwoTone.MoreVert
             AnchorOrigin=Origin.CenterCenter TransformOrigin=Origin.TopRight>

        <!-- User Menu -->
        <MudMenu Dense
                 Variant=Variant.Text
                 Size=Size.Medium
                 Color=Color.Inherit
                 Icon=@Icons.Material.TwoTone.MoreVert
                 AnchorOrigin=Origin.CenterRight TransformOrigin=Origin.TopLeft
                 ActivationEvent=MouseEvent.MouseOver>

            <!-- Settings -->
            <ActivatorContent>
                <MudMenuItem Icon=@Icons.Material.TwoTone.Settings IconColor=Color.Primary AutoClose=@false>
                    <MudText Class=""ml-n5"" Color=Color.Default>Settings</MudText>
                </MudMenuItem>
            </ActivatorContent>

            <!-- Theme -->
            <ChildContent>
                <MudMenuItem Icon=@Icons.Material.TwoTone.DarkMode IconColor=Color.Secondary>
                    <MudText Class=""ml-n5"" Color=Color.Default>Dark Theme</MudText>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>

        <MudDivider />

        <!-- Sign In -->
        <MudMenuItem Href=""/"" ForceLoad Icon=@Icons.Material.TwoTone.Login IconColor=Color.Primary>
            <MudText Class=""ml-n5"" Color=Color.Default>Sign In</MudText>
        </MudMenuItem>
        <!-- Sign Out -->
        <MudMenuItem Href=""/"" ForceLoad Icon=@Icons.Material.TwoTone.Logout IconColor=Color.Primary>
            <MudText Class=""ml-n5"" Color=Color.Default>Sign Out</MudText>
        </MudMenuItem>

    </MudMenu>
    <MudSpacer />
    <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" />
</MudAppBar>

@code {

}";

        public const string AppBarSimpleExample = @"<MudAppBar Color=""Color.Primary"" Fixed=""false"">
    <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
    <MudSpacer />
    <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" />
</MudAppBar>";

        public const string AppBarUsageExample = @"<MudAppBar Color=""Color.Primary"" Fixed=""false"" Dense=""@dense"" Elevation=""@elevation"">
    <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
    <MudSpacer />
    <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" />
</MudAppBar>

<MudGrid>
    <MudItem md=""6"" sm=""12"">
        <MudSlider @bind-Value=""@elevation"" Min=""0"" Max=""24"" ValueLabel=""true"">Elevation</MudSlider>
    </MudItem>
    <MudItem md=""6"" sm=""12"">
        <MudSwitch @bind-Value=""@dense"" Label=""Dense"" Class=""mt-6"" Color=""Color.Primary""></MudSwitch>
    </MudItem>
</MudGrid>

@code
{
    int elevation = 4;
    bool dense = false;
}";

        public const string AutocompleteCancellationTokenExample = @"@using System.Threading
@using System.Net.Http.Json

<MudGrid>
	<MudItem xs=""12"">
		<MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""_state"" SearchFunc=""@Search"" Variant=""Variant.Outlined"" ShowProgressIndicator=""true"" />
	</MudItem>
</MudGrid>

@code {
	[Inject] private HttpClient HttpClient { get; set; }
	private string _state;

	private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
	{
		// Forward the CancellationToken to methods which supported, such as HttpClient and DbContext
		return await HttpClient.GetFromJsonAsync<IEnumerable<string>>($""webapi/AmericanStates/searchWithDelay/{value ?? string.Empty}"", token);
	}
}";

        public const string AutocompleteClrObjectsExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@using System.Threading
@inject HttpClient httpClient

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value1"" 
                         SearchFunc=""@Search"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value2"" 
                         SearchFunc=""@Search"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"">
            <ItemTemplate Context=""e"">                          
                <MudText>
                    <MudIcon Icon=""@Icons.Material.Filled.CheckBoxOutlineBlank"" Class=""mb-n1 mr-3""/>@($""{e.Name} ({e.Sign})"")
                </MudText>
            </ItemTemplate>
            <ItemSelectedTemplate Context=""e"">                
                <MudText>
                    <MudIcon Icon=""@Icons.Material.Filled.CheckBox"" Class=""mb-n1 mr-3""/>@($""{e.Name} ({e.Sign})"")
                </MudText>
            </ItemSelectedTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value3""
                   SearchFunc=""@Search"" ItemDisabledFunc=""@((Element e) => (e.Name.Contains(""H"")))"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"">
            <ItemDisabledTemplate>
                <MudText>Not available: @context.ToString()</MudText>
            </ItemDisabledTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudText Class=""mb-n3"" Typo=""Typo.body2"">
            Selected values: <MudChip T=""string"">@(value1?.ToString() ?? ""Not selected"")</MudChip><MudChip T=""string"">@(value2?.ToString() ?? ""Not selected"")</MudChip><MudChip T=""string"">@(value3?.ToString() ?? ""Not selected"")</MudChip>
        </MudText>
    </MudItem>
</MudGrid>

@code {
    private Element value1, value2, value3;

    private async Task<IEnumerable<Element>> Search(string value, CancellationToken token)
    {
        return  await httpClient.GetFromJsonAsync<List<Element>>($""webapi/periodictable/{value}"", token);
    }
}";

        public const string AutocompletePlaygroundExample = @"@using MudBlazor

<MudStack Row Class=""justify-space-between mud-width-full"">
    <MudStack Style=""width: 300px"">
        @foreach (var variant in Enum.GetValues(typeof(Variant)).Cast<Variant>())
        {
            <MudAutocomplete @bind-Value=""_value""
                             SearchFunc=""Search""
                             Variant=""variant""
                             Label=""@variant.ToString()""
                             Margin=""_margin""
                             Dense=""_dense""
                             Disabled=""_disabled""
                             ReadOnly=""_readonly""
                             Placeholder=""@(_placeholder ? ""Placeholder"" : null)""
                             HelperText=""@(_helperText ? ""Helper Text"" : null)""
                             HelperTextOnFocus=""_helperTextOnFocus""
                             Clearable=""_clearable"" />
        }
    </MudStack>

    <MudStack>
        <MudSelect @bind-Value=""_margin"" Label=""Margin"">
            @foreach (var margin in Enum.GetValues(typeof(Margin)).Cast<Margin>())
            {
                <MudSelectItem Value=""margin"">@margin</MudSelectItem>
            }
        </MudSelect>

        <MudSwitch @bind-Value=""_dense"" Label=""Dense"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_readonly"" Label=""ReadOnly"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_disabled"" Label=""Disabled"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_placeholder"" Label=""Placeholder"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_helperText"" Label=""HelperText"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_helperTextOnFocus"" Label=""HelperTextOnFocus"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_clearable"" Label=""Clearable"" Color=""Color.Primary"" />
    </MudStack>
</MudStack>

@code {
    string _value;
    Margin _margin;
    bool _dense;
    bool _disabled;
    bool _readonly;
    bool _placeholder;
    bool _helperText;
    bool _helperTextOnFocus;
    bool _clearable;

    private string[] _states =
    {
        ""Alabama"", ""Alaska"", ""Arizona"", ""Arkansas"", ""California"",
        ""Colorado"", ""Connecticut"", ""Delaware"", ""Florida"", ""Georgia"",
        ""Hawaii"", ""Idaho"", ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"",
        ""Kentucky"", ""Louisiana"", ""Maine"", ""Maryland"", ""Massachusetts"",
        ""Michigan"", ""Minnesota"", ""Mississippi"", ""Missouri"", ""Montana"",
        ""Nebraska"", ""Nevada"", ""New Hampshire"", ""New Jersey"", ""New Mexico"",
        ""New York"", ""North Carolina"", ""North Dakota"", ""Ohio"", ""Oklahoma"",
        ""Oregon"", ""Pennsylvania"", ""Rhode Island"", ""South Carolina"", ""South Dakota"",
        ""Tennessee"", ""Texas"", ""Utah"", ""Vermont"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming""
    };

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return _states;

        return _states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}";

        public const string AutocompletePresentationExtrasExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@using System.Threading
@inject HttpClient httpClient

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value1""
                         SearchFunc=""@Search"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"">
            <MoreItemsTemplate>
                <MudText Align=""Align.Center"" Class=""px-4 py-1"">
                    Only the first 10 items are shown
                </MudText>
            </MoreItemsTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value2""
                         SearchFunc=""@SearchEmpty"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"">
            <NoItemsTemplate>
                <MudText Align=""Align.Center"" Class=""px-4 py-1"">
                    No items found
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value3""
                         SearchFunc=""@Search"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"">
            <BeforeItemsTemplate>
                <MudText Color=""Color.Primary"" Class=""px-4 py-1"">Always Shows Before List</MudText>
            </BeforeItemsTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value4""
                         SearchFunc=""@Search"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"">
            <AfterItemsTemplate>
                <div class=""pa-2"">
                    <MudButton Color=""Color.Primary"">Add Item(does nothing)</MudButton>
                </div>
            </AfterItemsTemplate>
        </MudAutocomplete>
    </MudItem>
</MudGrid>

@code {
    private Element value1, value2, value3, value4;

    private async Task<IEnumerable<Element>> Search(string value, CancellationToken token)
    {
        return await httpClient.GetFromJsonAsync<List<Element>>($""webapi/periodictable/{value}"", token);
    }

    private async Task<IEnumerable<Element>> SearchEmpty(string value, CancellationToken token)
    {
        await Task.Delay(5, token);
        return Array.Empty<Element>();
    }
}";

        public const string AutocompleteProgressExample = @"@using System.Threading

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value1"" SearchFunc=""@Search1"" Variant=""Variant.Outlined"" ShowProgressIndicator=""true"" ProgressIndicatorColor=""SelectedColor"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value3"" SearchFunc=""@Search1"" Variant=""Variant.Outlined"" ProgressIndicatorColor=""SelectedColor"">
            <ProgressIndicatorInPopoverTemplate>
                <MudList T=""string"" ReadOnly>
                    <MudListItem>
                        Loading...
                    </MudListItem>
                </MudList>
            </ProgressIndicatorInPopoverTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value2"" SearchFunc=""@Search1"" ShowProgressIndicator=""true"">
            <ProgressIndicatorTemplate>
                <MudProgressLinear Size=""Size.Small"" Indeterminate=""true"" Color=""SelectedColor"" />
            </ProgressIndicatorTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem md=""4"">
        <MudText Typo=""Typo.h6"" GutterBottom=""true"">Progress options</MudText>
        <MudSelect T=""Color"" Label=""Color"" Margin=""Margin.Dense"" Dense=""true"" Value=""@SelectedColor"" ValueChanged=""OnColorSelected"">
            <MudSelectItem T=""Color"" Value=""@Color.Default"">Default</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""@Color.Info"">Info</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""@Color.Success"">Success</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""@Color.Warning"">Warning</MudSelectItem>
            <MudSelectItem T=""Color"" Value=""@Color.Error"">Error</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

@code {

    public Color SelectedColor { get; set; } = Color.Default;

    private string value1;
    private string value2;
    private string value3;

    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private async Task<IEnumerable<string>> Search1(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(1000, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public void OnColorSelected(Color value)
    {
        SelectedColor = value;
    }
}";

        public const string AutocompleteStrictFalseExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@using System.Threading
@inject HttpClient httpClient

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Strict false with ToString"" @bind-Value=""value1""
                         SearchFunc=""@Search"" Strict=""false"">
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Strict false with ToStringFunc"" @bind-Value=""value2""
                         SearchFunc=""@Search"" ToStringFunc=""@(e=> e==null?null : $""{e.Name} ({e.Sign})"")"" Strict=""false"">
        </MudAutocomplete>
    </MudItem>
</MudGrid>

@code {
    private Element value1, value2;

    private async Task<IEnumerable<Element>> Search(string value, CancellationToken token)
    {
        return await httpClient.GetFromJsonAsync<List<Element>>($""webapi/periodictable/{value}"", token);
    }
}";

        public const string AutocompleteUsageExample = @"@using System.Threading

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value1"" SearchFunc=""@Search1""
                         ResetValueOnEmptyText=""@resetValueOnEmptyText""
                         CoerceText=""@coerceText"" CoerceValue=""@coerceValue"" SelectValueOnTab=""@selectedOnTab"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value2"" SearchFunc=""@Search2""
                         ResetValueOnEmptyText=""@resetValueOnEmptyText""
                         CoerceText=""@coerceText"" CoerceValue=""@coerceValue"" SelectValueOnTab=""@selectedOnTab""
                         AdornmentIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Primary"" />
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudText Class=""mb-n3"" Typo=""Typo.body2"">
            <MudChip T=""string"">@(value1 ?? ""Not selected"")</MudChip><MudChip T=""string"">@(value2 ?? ""Not selected"")</MudChip>
        </MudText>
    </MudItem>
    <MudItem xs=""12"" md=""12"" class=""flex-column"">
        <MudSwitch @bind-Value=""resetValueOnEmptyText"" Color=""Color.Primary"">Reset Value on empty Text</MudSwitch>
        <MudSwitch @bind-Value=""coerceText"" Color=""Color.Secondary"">Coerce Text to Value</MudSwitch>
        <MudSwitch @bind-Value=""coerceValue"" Color=""Color.Tertiary"">Coerce Value to Text (if not found)</MudSwitch>
        <MudSwitch @bind-Value=""selectedOnTab"" Color=""Color.Tertiary"">Select Value On Tab Key Press</MudSwitch>

    </MudItem>
</MudGrid>

@code {
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private bool selectedOnTab;
    private string value1, value2;
    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private async Task<IEnumerable<string>> Search1(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}";

        public const string AutocompleteValidationExample = @"@using System.ComponentModel.DataAnnotations
@using System.Threading

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <EditForm EditContext=""editContext1"">
        <DataAnnotationsValidator />
            <MudAutocomplete Label=""US States"" @bind-Value=""choice1.State"" Required=""true""
             SearchFunc=""@SearchAsync"" Immediate=""true"" CoerceValue=""@coerceValue"" ResetValueOnEmptyText=""true""
             AdornmentIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Primary""
             For=""@(() => choice1.State)""/>
            <MudButton ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" Color=""Color.Primary"" 
             Class=""ml-auto mt-3 mb-3"" OnClick=""@(()=>success1=editContext1.Validate())"">Validate</MudButton>
                   @if (success1)
                   {
                       <MudText Color=""Color.Success"">Success</MudText>
                   }
        </EditForm>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <EditForm EditContext=""editContext2"">
        <DataAnnotationsValidator />
            <MudAutocomplete Label=""US States"" @bind-Value=""choice2.State"" Required=""true""
             SearchFunc=""@SearchAsync"" Immediate=""true"" CoerceValue=""@coerceValue"" ResetValueOnEmptyText=""true""
             OpenIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Secondary""
             Validation=""@(new Func<string, IEnumerable<string>>(Validate))"" />
            <MudButton ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" Color=""Color.Primary"" 
                       Class=""ml-auto mt-3 mb-3"" OnClick=""@(()=>success2=editContext2.Validate())"">Validate</MudButton>
                   @if (success2)
                   {
                       <MudText Color=""Color.Success"">Success</MudText>
                   }
        </EditForm>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudForm @ref=""form"">
            <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""choice3.State"" Required=""true""
             SearchFunc=""@SearchAsync"" Immediate=""true"" CoerceValue=""@coerceValue"" ResetValueOnEmptyText=""true""
             CloseIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Tertiary""
             Validation=""@(new Func<string, IEnumerable<string>>(Validate))"" />
            <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Class=""ml-auto mt-3 mb-3"" 
             OnClick=""@(()=>form.Validate())"">Validate</MudButton>
                    @if (form.IsTouched && form.IsValid)
                    {
                        <MudText Color=""Color.Success"">Success</MudText>
                    }
                    else
                    {
                        <MudText>IsTouched: @form.IsTouched, IsValid: @form.IsValid</MudText>
                    }
        </MudForm>
	</MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudText Class=""mb-n3"" Typo=""Typo.body2"">
            <MudChip T=""string"">@(choice1.State ?? ""Not selected"")</MudChip><MudChip T=""string"">@(choice2.State ?? ""Not selected"")</MudChip><MudChip T=""string"">@(choice3.State ?? ""Not selected"")</MudChip>
        </MudText>
    </MudItem>
    <MudItem xs=""12"" md=""12"" class=""flex-column"">
        <MudSwitch @bind-Value=""coerceValue"" Color=""Color.Tertiary"">Coerce Value to Text (if not found)</MudSwitch>
    </MudItem>
</MudGrid>

@code {
    private MudForm form;
    private bool coerceValue;
    private bool success1;
    private bool success2;
    private Choice choice1 = new();
    private Choice choice2 = new();
    private Choice choice3 = new();
    private EditContext editContext1;
    private EditContext editContext2;

    protected override void OnInitialized()
    {
        editContext1 = new EditContext(choice1);
        editContext2 = new EditContext(choice2);
    } 

    private static string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private async Task<IEnumerable<string>> SearchAsync(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return states;
        }

        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private IEnumerable<string> Validate(string value)
    {        
        if (string.IsNullOrWhiteSpace(value))
        {
            yield return ""The State field is required"";
            yield break;
        }

        if (!states.Contains(value))
        {
            yield return ""This is an incorrect value"";
        }
    }

    public class Choice
    {
        [Required]
        [State]
        public string State { get; set;}
    }

    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter)]
    public sealed class StateAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (!states.Contains(value))
            {
                return new ValidationResult(""This is an incorrect value"", new[] { validationContext.MemberName });
            }

            return null;
        }
    }
}";

        public const string AvatarBadgeExample = @"<MudBadge Color=""Color.Success"" Overlap=""true"" Bordered=""true"">
    <MudAvatar>
        <MudImage Src=""images/jonny.jpg"" />
    </MudAvatar>
</MudBadge>
<MudBadge Color=""Color.Warning"" Overlap=""true"" Bordered=""true"">
    <MudAvatar>
        <MudImage Src=""images/mony.jpg"" />
    </MudAvatar>
</MudBadge>
<MudBadge Color=""Color.Error"" Icon=""@Icons.Material.Filled.Remove"" Overlap=""true"" Bordered=""true"">
    <MudAvatar>
        <MudImage Src=""images/toiletvisit.jpg"" />
    </MudAvatar>
</MudBadge>";

        public const string AvatarBasicExample = @"<MudAvatar Color=""Color.Primary"">M</MudAvatar>
<MudAvatar Color=""Color.Secondary"">U</MudAvatar>
<MudAvatar Color=""Color.Tertiary"">D</MudAvatar>";

        public const string AvatarGroupExample = @"<MudAvatarGroup Max=""@max"" Spacing=""@spacing"" MaxColor=""Color.Primary"">
    <MudAvatar>
        <MudImage Src=""images/jonny.jpg"" />
    </MudAvatar>
    <MudAvatar>
        <MudImage Src=""images/mony.jpg"" />
    </MudAvatar>
    <MudAvatar>
        <MudImage Src=""images/toiletvisit.jpg"" />
    </MudAvatar>
    <MudAvatar>
        <MudImage Src=""images/jonny.jpg"" />
    </MudAvatar>
    <MudAvatar>
        <MudImage Src=""images/mony.jpg"" />
    </MudAvatar>
    <MudAvatar>
        <MudImage Src=""images/toiletvisit.jpg"" />
    </MudAvatar>
</MudAvatarGroup>

<MudGrid>
    <MudItem xs=""12"" sm=""6"">
        <MudSlider Min=""0"" Max=""6"" Step=""0"" @bind-Value=""max"" Color=""Color.Info"">Max Avatars</MudSlider>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudSlider Min=""0"" Max=""16"" Step=""0"" @bind-Value=""spacing"" Color=""Color.Error"">Spacing</MudSlider>
    </MudItem>
</MudGrid>

@code {
    int max = 3;
    int spacing = 3;
}";

        public const string AvatarIconExample = @"<MudAvatar Color=""Color.Warning"" Variant=""Variant.Filled"">
    <MudIcon Color=""Color.Dark"" Icon=""@Icons.Custom.Uncategorized.Radioactive"" Size=""Size.Large"" />
</MudAvatar>
<MudAvatar Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudIcon Icon=""@Icons.Custom.Brands.MudBlazor"" />
</MudAvatar>
<MudAvatar Color=""Color.Secondary"" Variant=""Variant.Outlined"">
    <MudIcon Icon=""@Icons.Material.Filled.FormatListNumbered"" />
</MudAvatar>";

        public const string AvatarImageExample = @"<MudAvatar>
    <MudImage Src=""images/mony.jpg""></MudImage>
</MudAvatar>
<MudAvatar>
    <MudImage Src=""images/mony.jpg"" Alt=""An image of the best dog ever!""></MudImage>
</MudAvatar>
<MudAvatar>
    <MudImage Src=""images/toiletvisit.jpg""></MudImage>
</MudAvatar>";

        public const string AvatarOutlinedExample = @"<MudAvatar Color=""Color.Info"" Variant=""Variant.Outlined"">M</MudAvatar>
<MudAvatar Color=""Color.Success"" Variant=""Variant.Outlined"">U</MudAvatar>
<MudAvatar Color=""Color.Warning"" Variant=""Variant.Outlined"">D</MudAvatar>";

        public const string AvatarShapesExample = @"<MudAvatar Square=""true"">N</MudAvatar>
<MudAvatar Rounded=""true"" Color=""Color.Secondary"">
    <MudIcon Icon=""@Icons.Material.Filled.FormatListNumbered"" />
</MudAvatar>
<MudAvatar Color=""Color.Primary"">
    <MudIcon Icon=""@Icons.Material.Filled.Comment"" />
</MudAvatar>
<MudAvatar Square=""true"" Variant=""Variant.Outlined"">N</MudAvatar>
<MudAvatar Rounded=""true"" Color=""Color.Secondary""  Variant=""Variant.Outlined"">
    <MudIcon Icon=""@Icons.Material.Filled.FormatListNumbered"" />
</MudAvatar>
<MudAvatar Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudIcon Icon=""@Icons.Material.Filled.Comment"" />
</MudAvatar>";

        public const string AvatarSizeExample = @"<MudAvatar Size=""Size.Small"" Color=""Color.Primary"">A</MudAvatar>
<MudAvatar Size=""Size.Medium"" Color=""Color.Primary"">A</MudAvatar>
<MudAvatar Size=""Size.Large"" Color=""Color.Primary"">A</MudAvatar>
<MudAvatar Style=""height:70px; width:70px; font-size:2rem;"" Color=""Color.Primary"">A</MudAvatar>
<MudAvatar Style=""height:70px; width:70px; font-size:2rem;"" Color=""Color.Primary"" Variant=""Variant.Outlined"">A</MudAvatar>
<MudAvatar Size=""Size.Large"" Color=""Color.Primary"" Variant=""Variant.Outlined"">A</MudAvatar>
<MudAvatar Size=""Size.Medium"" Color=""Color.Primary"" Variant=""Variant.Outlined"">A</MudAvatar>
<MudAvatar Size=""Size.Small"" Color=""Color.Primary"" Variant=""Variant.Outlined"">A</MudAvatar>";

        public const string BadgeBasicExample = @"<div Class=""d-flex justify-space-around flex-wrap mt-4"">
    <MudBadge Content=""3"" Overlap=""true"" Class=""mx-6 my-4"">
        <MudIcon Icon=""@Icons.Material.Filled.Email"" Color=""Color.Default"" />
    </MudBadge>
    <MudBadge Content=""100"" Color=""Color.Primary"" Overlap=""true"" Class=""mx-6 my-4"">
        <MudIcon Icon=""@Icons.Material.Filled.Email"" Color=""Color.Default"" />
    </MudBadge>
    <MudBadge Icon=""@Icons.Material.Filled.Lock"" Color=""Color.Error"" Overlap=""true"" Bordered=""true"" Class=""mx-6 my-4"">
        <MudButton Color=""Color.Error"" Variant=""Variant.Filled"" DropShadow=""false"">Security Issues</MudButton>
    </MudBadge>
    <MudBadge Dot=""true"" Color=""Color.Info"" Class=""mx-6 my-4"">
        <MudText>Bug Reports</MudText>
    </MudBadge>
</div>";

        public const string BadgeInteractiveExample = @"<MudGrid>
    <MudItem md=""3"">
        <MudPaper Class=""pa-4"" Elevation=""0"">
            <MudText Typo=""Typo.h6"" GutterBottom=""true"">Test Options</MudText>
            <MudSelect T=""string"" Label=""Component"" Margin=""Margin.Dense"" Dense=""true"" Value=""@SelectedTestComponent"" ValueChanged=""OnSelectedTestComponent"">
                <MudSelectItem T=""string"" Value=""@(""MudIcon"")"">MudIcon</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudButton"")"">MudButton</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudIconButton"")"">MudIconButton</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudText"")"">MudText</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudAvatar"")"">MudAvatar</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""MudChip"")"">MudChip</MudSelectItem>
            </MudSelect>
        </MudPaper>
    </MudItem>
    <MudItem md=""6"" Class=""d-flex align-center justify-center my-auto"">
        <MudBadge Origin=""@Origin"" Content=""@BadgeContent"" Color=""Color.Primary"" Overlap=""@Overlap"" Dot=""@Dot"" Bordered=""@Bordered"" Icon=""@BadgeIcon"">
            @if (SelectedTestComponent == ""MudIcon"")
            {
                <MudIcon Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""Color.Default"" Size=""Size.Large"" />
            }
            else if (SelectedTestComponent == ""MudButton"")
            {
                <MudButton Color=""Color.Primary"" Variant=""Variant.Filled"">MudButton</MudButton>
            }
            else if (SelectedTestComponent == ""MudIconButton"")
            {
                <MudIconButton Icon=""@Icons.Material.Filled.Email"" Color=""Color.Default"" />
            }
            else if (SelectedTestComponent == ""MudText"")
            {
                <MudText>MudText</MudText>
            }
            else if(SelectedTestComponent == ""MudAvatar"")
            {
                <MudAvatar Size=""Size.Large"" Class=""ma-2"">
                    <MudImage Src=""images/mony.jpg"" />
                </MudAvatar>
            }
            else if(SelectedTestComponent == ""MudChip"")
            {
                <MudChip T=""string"" Label=""true"" Color=""Color.Warning"" Style=""color:black;"">Radioactive Areas</MudChip>
            }
        </MudBadge>
    </MudItem>
    <MudItem md=""3"">
        <MudPaper Class=""pa-4"" Elevation=""0"">
            <MudText Typo=""Typo.h6"" GutterBottom=""true"">Badge Options</MudText>
            <MudSelect Label=""Badge Origin"" Margin=""Margin.Dense"" Dense=""true"" @bind-Value=""Origin"">
                <MudSelectItem Value=""Origin.TopLeft"">TopLeft</MudSelectItem>
                <MudSelectItem Value=""Origin.TopCenter"">TopCenter</MudSelectItem>
                <MudSelectItem Value=""Origin.TopRight"">TopRight</MudSelectItem>
                <MudSelectItem Value=""Origin.CenterLeft"">CenterLeft</MudSelectItem>
                <MudSelectItem Value=""Origin.CenterCenter"">CenterCenter</MudSelectItem>
                <MudSelectItem Value=""Origin.CenterRight"">CenterRight</MudSelectItem>
                <MudSelectItem Value=""Origin.BottomLeft"">BottomLeft</MudSelectItem>
                <MudSelectItem Value=""Origin.BottomCenter"">BottomCenter</MudSelectItem>
                <MudSelectItem Value=""Origin.BottomRight"">BottomRight</MudSelectItem>
            </MudSelect>
            <MudCheckBox @bind-Value=""Dot"" Label=""Dot"" Color=""Color.Primary"" Style=""width:100%;"" />
            <MudCheckBox @bind-Value=""Overlap"" Label=""Overlap"" Color=""Color.Primary"" Style=""width:100%;"" />
            <MudCheckBox @bind-Value=""Bordered"" Label=""Bordered"" Color=""Color.Primary"" Style=""width:100%;"" />
            <MudCheckBox T=""bool"" ValueChanged=""AddIcon"" Label=""Icon"" Color=""Color.Primary"" Style=""width:100%;"" />
            <MudText Typo=""Typo.subtitle2"" Class=""my-2"">Badge Content</MudText>
            <div style=""display: flex;"">
                <MudButton OnClick=""AddValue"" Variant=""Variant.Filled"" Size=""Size.Small"" Color=""Color.Primary"" FullWidth=""true"" Class=""mr-1"">Add @AddNumber</MudButton>
                <MudButton OnClick=""ClearContent"" Variant=""Variant.Filled"" Size=""Size.Small"" Color=""Color.Secondary"" FullWidth=""true"" Class=""ml-1"">Clear</MudButton>
            </div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public Origin Origin { get; set; } = Origin.TopRight;
    public bool Dot { get; set; }
    public bool Overlap { get; set; }
    public bool Bordered { get; set; }
    public string BadgeIcon { get; set; }

    public string SelectedTestComponent { get; set; } = ""MudChip"";
    public string AddNumber { get; set; } = ""1"";

    public int? BadgeContent { get; set; }

    public void OnSelectedTestComponent(string value)
    {
        SelectedTestComponent = value;
    }

    public void AddIcon()
    {
        if (String.IsNullOrEmpty(BadgeIcon))
        {
            BadgeIcon = Icons.Custom.Uncategorized.Radioactive;
        }
        else
        {
            BadgeIcon = null;
        }
    }

    public void AddValue()
    {
        if(BadgeContent == null)
        {
            AddNumber = ""25"";
            BadgeContent = 1;
        }
        else
        {
            BadgeContent += 25;
        }
    }

    public void ClearContent()
    {
        AddNumber = ""1"";
        BadgeContent = null;
    }
}";

        public const string BreadcrumbsBasicExample = @"<MudBreadcrumbs Items=""_items""></MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items =
    [
        new(""Home"", href: ""#""),
        new(""Link 1"", href: ""#""),
        new(""Link 2"", href: null, disabled: true)
    ];
}";

        public const string BreadcrumbsCollapsedExample = @"<MudBreadcrumbs Items=""_items"" MaxItems=""4""></MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items =
    [
        new(""Home"", href: ""#""),
        new(""Link 1"", href: ""#""),
        new(""Link 2"", href: ""#""),
        new(""Link 3"", href: ""#""),
        new(""Link 4"", href: null, disabled: true)
    ];
}";

        public const string BreadcrumbsItemIconsExample = @"<MudBreadcrumbs Items=""_items""></MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items =
    [
        new(""Home"", href: ""#"", icon: Icons.Material.Filled.Home),
        new(""Videos"", href: ""#"", icon: Icons.Material.Filled.VideoLibrary),
        new(""Create"", href: null, disabled: true, icon: Icons.Material.Filled.Create)
    ];
}";

        public const string BreadcrumbsItemTemplateExample = @"<MudBreadcrumbs Items=""_items"">
    <ItemTemplate Context=""item"">
        <MudLink Href=""@item.Href"">@item.Text.ToUpper()</MudLink>
    </ItemTemplate>
</MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items =
    [
        new(""Home"", href: ""#""),
        new(""Link 1"", href: ""#""),
        new(""Link 2"", href: null, disabled: true)
    ];
}";

        public const string BreadcrumbsSeparatorExample = @"<MudBreadcrumbs Items=""_items"" Separator="">""></MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items =
    [
        new(""Home"", href: ""#""),
        new(""Link 1"", href: ""#""),
        new(""Link 2"", href: null, disabled: true)
    ];
}";

        public const string BreadcrumbsSeparatorTemplateExample = @"<MudBreadcrumbs Items=""_items"">
    <SeparatorTemplate>
        <MudIcon Icon=""@Icons.Material.Filled.ArrowForward"" Size=""Size.Small"" />
    </SeparatorTemplate>
</MudBreadcrumbs>

@code {
    private List<BreadcrumbItem> _items =
    [
        new(""Home"", href: ""#""),
        new(""Link 1"", href: ""#""),
        new(""Link 2"", href: null, disabled: true)
    ];
}";

        public const string BreakpointListenerExample = @"@using MudBlazor.Services
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudCard Class=""pa-5"">
    <MudText>Size started with @_start</MudText>
    @if (_breakpointHistory.Count > 0)
    {
        <MudText>And continued with: </MudText>
        <MudList T=""string"" Dense=""_breakpointHistory.Count > 10"">
            @foreach (var item in _breakpointHistory)
            {
                <MudListItem Text=""@item.ToString()""></MudListItem>
            }
        </MudList>
    }
</MudCard>

@code
{
    [Inject]
    private IBrowserViewportService BrowserViewportService { get; set; }

    private List<Breakpoint> _breakpointHistory = new();
    private Breakpoint _start;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 250,
        NotifyOnBreakpointOnly = true
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        if (browserViewportEventArgs.IsImmediate)
        {
            _start = browserViewportEventArgs.Breakpoint;
        }
        else
        {
            _breakpointHistory.Add(browserViewportEventArgs.Breakpoint);
        }

        return InvokeAsync(StateHasChanged);
    }
}";

        public const string BreakpointProviderPageHiddenExample = @"@using MudBlazor.Services

<MudBreakpointProvider>
	@for (int i = 0; i < _amountOfRows; i++)
	{
		<MudHidden Breakpoint=""Breakpoint.Xl"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>XL</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.Lg"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>LG</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.Md"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>MD</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.Sm"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>SM</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.Xs"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>XS</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.LgAndUp"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>LG and Up</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.MdAndUp"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>MD and Up</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.SmAndUp"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>SM and Up</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.LgAndDown"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>LG and Down</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.MdAndDown"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>MD and Down</MudText>
			</MudCard>
		</MudHidden>
		<MudHidden Breakpoint=""Breakpoint.SmAndDown"" Invert=""true"">
			<MudCard Class=""pa-5"">
				<MudText>SM and Down</MudText>
			</MudCard>
		</MudHidden>
	}
</MudBreakpointProvider>

<MudSlider @bind-Value=""_amountOfRows"" Min=""1"" Max=""100""></MudSlider>
<MudText>Rows: @_amountOfRows</MudText>

@code {
	private int _amountOfRows = 2;

}";

        public const string ButtonCustomizedExample = @"<MudButton Variant=""Variant.Filled"" EndIcon=""@Icons.Material.Filled.ArrowDownward"" Style=""background-color: yellowgreen; color: white; width: 200px; height: 60px;"">
    Download Now
</MudButton>";

        public const string ButtonDropShadowExample = @"<MudButton Variant=""Variant.Filled"" DropShadow=""false"" Color=""Color.Primary"">Disable elevation</MudButton>";

        public const string ButtonFilledExample = @"<MudButton Variant=""Variant.Filled"">Default</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"">Primary</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"">Secondary</MudButton>
<MudButton Variant=""Variant.Filled"" Disabled=""true"">Disabled</MudButton>";

        public const string ButtonFullWidthExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" FullWidth=""true"">Full Width Button</MudButton>";

        public const string ButtonIconLabelExample = @"<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.Delete"" Color=""Color.Error"">Delete</MudButton>
<MudButton Variant=""Variant.Filled"" EndIcon=""@Icons.Material.Filled.Send"" Color=""Color.Primary"">Send</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Warning"">Warning</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.Mic"" IconColor=""Color.Error"">Talk</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.Save"" Color=""Color.Info""  Size=""Size.Small"">Save</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.Save"" IconColor=""Color.Secondary"" Size=""Size.Large"">Save</MudButton>";

        public const string ButtonLinkExample = @"<MudButton Href=""https://github.com/MudBlazor/MudBlazor""
           Target=""_blank""
           Variant=""Variant.Filled""
           EndIcon=""@Icons.Custom.Brands.GitHub""
           Color=""Color.Primary""
           Disabled=@disabled>
    GitHub Link
</MudButton>
<MudButton Href=""https://github.com/MudBlazor/MudBlazor""
           Target=""_blank""
           Variant=""Variant.Text""
           EndIcon=""@Icons.Custom.Brands.GitHub""
           Color=""Color.Secondary""
           Style=""text-transform:none""
           Disabled=@disabled>
    GitHub Link
</MudButton>
<MudButton Href=""https://github.com/MudBlazor/MudBlazor""
           Target=""_blank""
           Variant=""Variant.Outlined""
           EndIcon=""@Icons.Custom.Brands.GitHub""
           Color=""Color.Tertiary""
           Disabled=@disabled>
    GitHub Link
</MudButton>
<br />
<MudSwitch Color=""Color.Primary"" @bind-Value=@(disabled) Label=""Disable"" />

@code{
    bool disabled = false;
}";

        public const string ButtonLoadingExample = @"<MudButton Disabled=""@_processing"" OnClick=""ProcessSomething"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    @if (_processing)
    {
        <MudProgressCircular Class=""ms-n1"" Size=""Size.Small"" Indeterminate=""true""/>
        <MudText Class=""ms-2"">Processing</MudText>
    }
    else
    {
        <MudText>Click me</MudText>
    }
</MudButton>

@code {
    private bool _processing = false;

    async Task ProcessSomething()
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }
}";

        public const string ButtonNofollowExample = @"<MudButton Href=""https://github.com/MudBlazor/MudBlazor""
           Rel=""nofollow""
           Variant=""Variant.Filled""
           EndIcon=""@Icons.Custom.Brands.GitHub""
           Color=""Color.Primary"">
    GitHub Link
</MudButton>
<MudButton Href=""https://github.com/MudBlazor/MudBlazor""
           Target=""_blank""
           Rel=""nofollow noopener""
           Variant=""Variant.Outlined""
           EndIcon=""@Icons.Custom.Brands.GitHub""
           Color=""Color.Tertiary"">
    GitHub Link
</MudButton>";

        public const string ButtonOutlinedExample = @"<MudButton Variant=""Variant.Outlined"">Default</MudButton>
<MudButton Variant=""Variant.Outlined"" Color=""Color.Primary"">Primary</MudButton>
<MudButton Variant=""Variant.Outlined"" Color=""Color.Secondary"">Secondary</MudButton>
<MudButton Variant=""Variant.Outlined"" Disabled=""true"">Disabled</MudButton>";

        public const string ButtonSizeExample = @"<MudButton Variant=""Variant.Filled"" Size=""Size.Small""  Color=""Color.Primary"">Small</MudButton>
<MudButton Variant=""Variant.Filled"" Size=""Size.Medium"" Color=""Color.Secondary"">Medium</MudButton>
<MudButton Variant=""Variant.Filled"" Size=""Size.Large""  Color=""Color.Tertiary"">Large</MudButton>";

        public const string ButtonTextExample = @"<MudButton Variant=""Variant.Text"">Default</MudButton>
<MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Primary</MudButton>
<MudButton Variant=""Variant.Text"" Color=""Color.Secondary"">Secondary</MudButton>
<MudButton Variant=""Variant.Text"" Disabled=""true"">Disabled</MudButton>";

        public const string FabSimpleExample = @"<MudFab Color=""Color.Primary"" StartIcon=""@Icons.Material.Filled.Add"" />
<MudFab Color=""Color.Secondary"" StartIcon=""@Icons.Material.Filled.Edit"" />
<MudFab Color=""Color.Tertiary"" StartIcon=""@Icons.Material.Filled.ShoppingCart"" DropShadow=""false"" />
<MudFab StartIcon=""@Icons.Material.Filled.Bookmark"" Label=""Bookmark"" />
<MudFab StartIcon=""@Icons.Material.Filled.Save"" Disabled=""true"" />";

        public const string FabSizeExample = @"<MudFab Color=""Color.Secondary"" StartIcon=""@Icons.Material.Filled.Add"" Size=""Size.Small"" />
<MudFab Color=""Color.Secondary"" StartIcon=""@Icons.Material.Filled.Add"" Size=""Size.Medium"" />
<MudFab Color=""Color.Secondary"" StartIcon=""@Icons.Material.Filled.Add"" Size=""Size.Large"" />";

        public const string ButtonGroupBasicExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Filled"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Text"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>";

        public const string ButtonGroupCustomStylesExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"" OverrideStyles=""_overrideStyles"">
    <MudButton Color=""Color.Primary"" Variant=""Variant.Outlined"">One</MudButton>
    <MudButton Color=""Color.Warning"" Variant=""Variant.Outlined"">Two</MudButton>
    <MudButton Color=""Color.Secondary"" Variant=""Variant.Outlined"">Three</MudButton>
</MudButtonGroup>

<MudSwitch @bind-Value=""_overrideStyles"" Label=""Override styles"" Color=""Color.Primary"" />

@code {
    private bool _overrideStyles;
}";

        public const string ButtonGroupDropShadowExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Filled"" DropShadow=""@_dropShadow"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudSwitch @bind-Value=""_dropShadow"" Label=""Drop shadow"" Color=""Color.Primary"" />

@code {
    private bool _dropShadow = false;
}";

        public const string ButtonGroupIconButtonExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudIconButton Icon=""@Icons.Material.Filled.AccessAlarm""></MudIconButton>
    <MudToggleIconButton Icon=""@Icons.Material.Filled.AlarmOff"" Color=""@Color.Error""
                         ToggledIcon=""@Icons.Material.Filled.AlarmOn"" ToggledColor=""@Color.Success"" />
    <MudButton StartIcon=""@Icons.Material.Filled.AlarmAdd"" IconColor=""Color.Warning"">Add alarm</MudButton>
</MudButtonGroup>";

        public const string ButtonGroupSizesColorsExample = @"<MudButtonGroup Color=""Color.Primary"" Size=""Size.Small"" Variant=""Variant.Filled"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Secondary"" Size=""Size.Medium"" Variant=""Variant.Filled"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Tertiary"" Size=""Size.Large"" Variant=""Variant.Filled"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>";

        public const string ButtonGroupSplitButtonExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"">
    <MudButton>@_buttonText</MudButton>
    <MudMenu Icon=""@Icons.Material.Filled.ArrowDropDown"" Style=""align-self: auto;"">
        <MudMenuItem OnClick=""() => SetButtonText(0)"">Reply</MudMenuItem>
        <MudMenuItem OnClick=""() => SetButtonText(1)"">Reply All</MudMenuItem>
        <MudMenuItem OnClick=""() => SetButtonText(2)"">Forward</MudMenuItem>
        <MudMenuItem OnClick=""() => SetButtonText(3)"">Reply & Delete</MudMenuItem>
    </MudMenu>
</MudButtonGroup>
@code {
    private string _buttonText = ""Reply"";

    private void SetButtonText(int id)
    {
        switch (id)
        {
            case 0: _buttonText = ""Reply"";
                break;
            case 1:
                _buttonText = ""Reply All"";
                break;
            case 2:
                _buttonText = ""Forward"";
                break;
            case 3:
                _buttonText = ""Reply & Delete"";
                break;
        }
    }
}";

        public const string ButtonGroupVerticalExample = @"<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Filled"" Vertical=""true"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Text"" Vertical=""true"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>

<MudButtonGroup Color=""Color.Primary"" Variant=""Variant.Outlined"" Vertical=""true"">
    <MudButton>One</MudButton>
    <MudButton>Two</MudButton>
    <MudButton>Three</MudButton>
</MudButtonGroup>";

        public const string CardCombinedExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar Color=""Color.Secondary"">I</MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo=""Typo.body1"">Istra Croatia</MudText>
            <MudText Typo=""Typo.body2"">Peninsula in Europe</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon=""@Icons.Material.Filled.Settings"" Color=""Color.Default"" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardMedia Image=""images/pilars.jpg"" Height=""250"" />
    <MudCardContent>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon=""@Icons.Material.Filled.Favorite"" Color=""Color.Default"" />
        <MudIconButton Icon=""@Icons.Material.Filled.Share"" Color=""Color.Default"" />
    </MudCardActions>
</MudCard>";

        public const string CardHeaderExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo=""Typo.h6"">The Story Book</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon=""@Icons.Material.Filled.Settings"" Color=""Color.Default"" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText>This day everything happened.</MudText>
        <MudText Typo=""Typo.body2"">The quick, brown fox jumps over a lazy dog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Read More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string CardMediaExample = @"<MudCard>
    <MudCardMedia Image=""images/door.jpg"" Height=""200"" />
    <MudCardContent>
        <MudText Typo=""Typo.h5"">Old Paint</MudText>
        <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Share</MudButton>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string CardOutlinedExample = @"<MudCard Outlined=""true"">
    <MudCardContent>
        <MudText>Story of the day</MudText>
        <MudText Typo=""Typo.body2"">The quick, brown fox jumps over a lazy dog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string CardSimpleExample = @"<MudCard>
    <MudCardContent>
        <MudText>Story of the day</MudText>
        <MudText Typo=""Typo.body2"">The quick, brown fox jumps over a lazy dog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string CarouselBindingExample = @"<MudCarousel Class=""mud-width-full"" @ref=""_carousel"" ItemsSource=""@_source"" @bind-SelectedIndex=""selectedIndex"" Style=""height:200px;"" ShowArrows=""@_arrows"" ShowBullets=""@_bullets"" EnableSwipeGesture=""@_enableSwipeGesture"" AutoCycle=""@_autocycle"">
	<ItemTemplate>
		<div class=""d-flex flex-column flex-column justify-center"" style=""height:100%"">
			<MudIcon Class=""mx-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
			<MudText Align=""@Align.Center"" Class=""mx-auto"">@context</MudText>
		</div>
	</ItemTemplate>
</MudCarousel>
<MudSwitch @bind-Value=""_arrows"" Color=""Color.Primary"">Show Arrows</MudSwitch>
<MudSwitch @bind-Value=""_bullets"" Color=""Color.Primary"">Show Bullets</MudSwitch>
<MudSwitch @bind-Value=""_enableSwipeGesture"" Color=""Color.Primary"">Enable Swap Gesture</MudSwitch>
<MudSwitch @bind-Value=""_autocycle"" Color=""Color.Primary"">Auto Cycle (Default: 5 secs)</MudSwitch>
<br />
<MudButton Class=""ma-2"" Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""AddAsync"">Add</MudButton>
<MudButton Class=""ma-2"" Variant=""Variant.Filled"" Color=""Color.Error"" OnClick=""@(async () => await DeleteAsync(_carousel.SelectedIndex))"">Delete</MudButton>
<MudSelect @bind-Value=""selectedIndex"" Label=""@($""Selected Item (index: {selectedIndex})"")"">
	@{
		int index = 0;
		foreach (var item in _source)
		{
			<MudSelectItem Value=""@index"">@item</MudSelectItem>

			index++;
		}
	}
</MudSelect>
@code {
	private MudCarousel<string> _carousel;
	private bool _arrows = true;
	private bool _bullets = true;
	private bool _enableSwipeGesture = true;
	private bool _autocycle = true;
	private IList<string> _source = new List<string>() { ""Item 1"", ""Item 2"", ""Item 3"", ""Item 4"", ""Item 5"" };
	private int selectedIndex = 2;

	private async Task AddAsync()
	{
		_source.Add($""Item {_source.Count + 1}"");
		await Task.Delay(1);
		_carousel.MoveTo(_source.Count - 1);
	}

	private async Task DeleteAsync(int index)
	{
		if (_source.Any())
		{
			_source.RemoveAt(index);
			await Task.Delay(1);
			_carousel.MoveTo(System.Math.Max(System.Math.Min(index, _source.Count - 1), 0));
		}

	}

}";

        public const string CarouselCustomTransitionExample = @"@*Keyframes by https://animate.style/*@
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"" />
<style type=""text/css"">

    .bounceIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: bounceIn;
        animation-fill-mode: forwards;
    }

    .bounceOut {
        animation-duration: 0.5s;
        animation-name: bounceOut;
        animation-fill-mode: forwards;
    }

    .backInDown {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: backInDown;
        animation-fill-mode: forwards;
    }

    .backOutDown {
        animation-duration: 0.5s;
        animation-name: backOutDown;
        animation-fill-mode: forwards;
    }

    .rotateIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: rotateIn;
        animation-fill-mode: forwards;
    }

    .rotateOut {
        animation-duration: 0.5s;
        animation-name: rotateOut;
        animation-fill-mode: forwards;
    }

</style>

<MudCarousel Class=""mud-width-full"" Style=""height:200px;"" TData=""object"" AutoCycle=""false"">
    <MudCarouselItem Color=""@Color.Primary"" Transition=""Transition.Custom"" CustomTransitionEnter=""@AnimationEntrance"" CustomTransitionExit=""@AnimationExit"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Color=""@Color.Secondary"" Transition=""Transition.Custom"" CustomTransitionEnter=""@AnimationEntrance"" CustomTransitionExit=""@AnimationExit"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""Transition.Custom"" CustomTransitionEnter=""@AnimationEntrance"" CustomTransitionExit=""@AnimationExit"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Primary"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
</MudCarousel>

<MudTextField @bind-Value=""AnimationEntrance"" Label=""Entrance Class (copy and paste from style tag)"" Class=""ma-2"" />
<MudTextField @bind-Value=""AnimationExit"" Label=""Exit Class (copy and paste from style tag)"" Class=""ma-2""/>

@code{ 
    private string AnimationEntrance = ""bounceIn"";
    private string AnimationExit = ""bounceOut""; 
}";

        public const string CarouselExample = @"<MudCarousel Class=""mud-width-full"" Style=""height:200px;"" ShowArrows=""@arrows"" ShowBullets=""@bullets"" EnableSwipeGesture=""@enableSwipeGesture"" AutoCycle=""@autocycle"" TData=""object"">
    <MudCarouselItem Transition=""transition"" Color=""@Color.Primary"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""transition"" Color=""@Color.Secondary"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""transition"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Primary"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
</MudCarousel>
<MudSelect @bind-Value=""transition"" Label=""Transition"" Class=""ma-2"">
    <MudSelectItem Value=""@Transition.Fade"">Fade</MudSelectItem>
    <MudSelectItem Value=""@Transition.Slide"">Slide</MudSelectItem>
    <MudSelectItem Value=""@Transition.None"">None</MudSelectItem>
</MudSelect>
<MudSwitch @bind-Value=""arrows"" Color=""Color.Primary"">Show Arrows</MudSwitch>
<MudSwitch @bind-Value=""bullets"" Color=""Color.Primary"">Show Bullets</MudSwitch>
<MudSwitch @bind-Value=""enableSwipeGesture"" Color=""Color.Primary"">Enable Swipe Gesture</MudSwitch>
<MudSwitch @bind-Value=""autocycle"" Color=""Color.Primary"">Auto Cycle (Default: 5 secs)</MudSwitch>

@code{ 
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
}";

        public const string CarouselPerPageTransitionExample = @"@*Keyframes by https://animate.style/*@
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"" />
<style type=""text/css"">

    .bounceIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: bounceIn;
        animation-fill-mode: forwards;
    }

    .bounceOut {
        animation-duration: 0.5s;
        animation-name: bounceOut;
        animation-fill-mode: forwards;
    }

    .backInDown {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: backInDown;
        animation-fill-mode: forwards;
    }

    .backOutDown {
        animation-duration: 0.5s;
        animation-name: backOutDown;
        animation-fill-mode: forwards;
    }

    .rotateIn {
        opacity: 0;
        animation-delay: 0.5s;
        animation-duration: 0.5s;
        animation-name: rotateIn;
        animation-fill-mode: forwards;
    }

    .rotateOut {
        animation-duration: 0.5s;
        animation-name: rotateOut;
        animation-fill-mode: forwards;
    }
</style>

<MudCarousel Class=""mud-width-full"" Style=""height:200px;"" TData=""object"" AutoCycle=""false"">
    <MudCarouselItem Color=""@Color.Primary"" Transition=""Transition.Slide"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Color=""@Color.Secondary"" Transition=""Transition.Fade"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Color=""@Color.Tertiary"" Transition=""Transition.Custom"" CustomTransitionEnter=""bounceIn"" CustomTransitionExit=""bounceOut"">
        <div class=""d-flex"" style=""height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""Transition.Custom"" CustomTransitionEnter=""backInDown"" CustomTransitionExit=""backOutDown"">
        <div class=""d-flex"" style=""background-color:lightgray; height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Primary"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
    <MudCarouselItem Transition=""Transition.Custom"" CustomTransitionEnter=""rotateIn"" CustomTransitionExit=""rotateOut"">
        <div class=""d-flex"" style=""background-color:lightgray; height:100%"">
            <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Secondary"" Size=""@Size.Large"" />
        </div>
    </MudCarouselItem>
</MudCarousel>";

        public const string CarouselTemplatesExample = @"<MudCarousel Class=""mud-width-full"" Style=""height:200px;"" AutoCycle=""false"" TData=""object"">
    <BulletTemplate Context=""selected"">
        <div Class=""mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon"">
            <span class=""mud-icon-button-label"">
                <MudIcon Icon=""@(selected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Circle)"" Color=""@Color.Inherit"" />
            </span>
        </div>
    </BulletTemplate>
    <PreviousButtonTemplate>
        <div Class=""mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon"">
            <span class=""mud-icon-button-label"">
                <MudIcon Class=""mud-ripple mud-ripple-icon mud-icon-button-size-medium"" Icon=""@Icons.Material.Filled.SkipPrevious"" Color=""@Color.Inherit"" />
            </span>
        </div>
    </PreviousButtonTemplate>
    <NextButtonTemplate>
        <div Class=""mud-button-root mud-icon-button mud-icon-button-color-inherit mud-ripple mud-ripple-icon"">
            <span class=""mud-icon-button-label"">
                <MudIcon Class=""mud-ripple mud-ripple-icon mud-icon-button-size-medium"" Icon=""@Icons.Material.Filled.SkipNext"" Color=""@Color.Inherit"" />
            </span>
        </div>
    </NextButtonTemplate>
    <ChildContent>
        <MudCarouselItem Color=""@Color.Primary"">
            <div class=""d-flex"" style=""height:100%"">
                <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
            </div>
        </MudCarouselItem>
        <MudCarouselItem Color=""@Color.Secondary"">
            <div class=""d-flex"" style=""height:100%"">
                <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Size=""@Size.Large"" />
            </div>
        </MudCarouselItem>
        <MudCarouselItem>
            <div class=""d-flex"" style=""height:100%"">
                <MudIcon Class=""mx-auto my-auto"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""@Color.Primary"" Size=""@Size.Large"" />
            </div>
        </MudCarouselItem>
    </ChildContent>
</MudCarousel>

@code { }";

        public const string BarCustomGraphicsExample = @"<MudChart ChartType=""ChartType.Bar"" ChartSeries=""@Series"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px"">
	<CustomGraphics>
		<style>
			.heavy { font: bold 30px Helvetica; }
			.Rrrrr { font: italic 40px Helvetica; fill: rgb(62,44,221); }
		</style>
		<text x=""80"" y=""35"" class=""heavy"">I Love</text>
		<text x=""105"" y=""70"" class=""Rrrrr"">MudBlazor!</text>
	</CustomGraphics>
</MudChart>


@code {
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""United States"", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = ""Germany"", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = ""Sweden"", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };
}";

        public const string BarExample1 = @"<div>
    <MudChart ChartType=""ChartType.Bar"" ChartSeries=""@Series"" @bind-SelectedIndex=""Index"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px""></MudChart>
</div>
<MudText Typo=""Typo.h6"">Selected portion of the chart: @Index</MudText>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""United States"", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = ""Germany"", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = ""Sweden"", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };
}";

        public const string DonutCustomGraphicsExample = @"<MudChart ChartType=""ChartType.Donut"" Width=""300px"" Height=""300px"" InputData=""@data"" InputLabels=""@labels"">
	<CustomGraphics>
		<text class=""donut-inner-text"" x=""47%"" y=""35%"" dominant-baseline=""middle"" text-anchor=""middle"" fill=""black"" font-family=""Helvetica"" font-size=""2"">Total</text>
		<text class=""donut-inner-text"" x=""47%"" y=""50%"" dominant-baseline=""middle"" text-anchor=""middle"" fill=""black"" font-family=""Helvetica"" font-size=""5"">@data.Sum().ToString()</text>
	</CustomGraphics>
</MudChart>

@code {
    public double[] data = { 25, 77, 28, 5 };
    public string[] labels = { ""Oil"", ""Coal"", ""Gas"", ""Biomass"" };
}";

        public const string DonutExample1 = @"<MudPaper Class=""pa-4"">
    <MudChart ChartType=""ChartType.Donut"" Width=""300px"" Height=""300px"" @bind-SelectedIndex=""Index"" InputData=""@data"" InputLabels=""@labels""></MudChart>
</MudPaper>
<MudPaper Class=""pa-4 mt-2 d-flex justify-center"">
    <MudButton OnClick=""AddDataSize"" Variant=""Variant.Filled"" Color=""Color.Primary"">Add</MudButton>
    <MudButton @onclick=""RandomizeData"" Variant=""Variant.Filled"" Class=""mx-4"">Randomize</MudButton>
    <MudButton OnClick=""RemoveDataSize"" Variant=""Variant.Filled"" Color=""Color.Secondary"">Remove</MudButton>  
</MudPaper>
<MudText Typo=""Typo.h6"">Selected portion of the chart: @Index</MudText>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    public double[] data = { 50, 25, 20, 5 };
    public string[] labels = { ""Fossil"", ""Nuclear"", ""Solar"", ""Wind"", ""Oil"", ""Coal"", ""Gas"", ""Biomass"",
                                ""Hydro"", ""Geothermal"", ""Nuclear Fusion"", ""Pumped Storage"", ""Solar"", ""Wind"", ""Oil"",
                                ""Coal"", ""Gas"", ""Biomass"", ""Hydro"", ""Geothermal"" };

    Random random = new Random();

    void RandomizeData()
    {
        var new_data = new double[dataSize];
        for (int i = 0; i < new_data.Length; i++)
            new_data[i] = random.NextDouble() * 100;
        data = new_data;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
            RandomizeData();
        }
    }
    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
            RandomizeData();
        }
    }
}";

        public const string DonutExample2 = @"<MudChart ChartType=""ChartType.Donut"" LegendPosition=""@LegendPosition"" Width=""300px"" Height=""300px""
          InputData=""@data"" InputLabels=""@labels"">
</MudChart>


<MudSelect Label=""Legend Position"" Variant=""Variant.Outlined"" Dense=""true"" T=""@Position"" ValueChanged=""OnSelectedValue"" Class=""mt-4"">
    <MudSelectItem T=""Position"" Value=""Position.Top"">Top</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.Left"">Left</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.Right"">Right</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.Bottom"">Bottom</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.Start"">Start</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""Position.End"">End</MudSelectItem>
</MudSelect>

@code {
    public double[] data = { 25, 77, 28, 5 };
    public string[] labels = { ""Oil"", ""Coal"", ""Gas"", ""Biomass"" };

    public Position LegendPosition { get; set; } = Position.Bottom;

    private void OnSelectedValue(Position value)
    {
        switch(value)
        {
            case Position.Top:
                LegendPosition = Position.Top;
                break;
            case Position.Left:
                LegendPosition = Position.Left;
                break;
            case Position.Right:
                LegendPosition = Position.Right;
                break;
            case Position.Bottom:
                LegendPosition = Position.Bottom;
                break;
            case Position.Start:
                LegendPosition = Position.Start;
                break;
            case Position.End:
                LegendPosition = Position.End;
                break;
        }
    }
}";

        public const string HeatMapExample1 = @"<MudPaper Class=""pa-4"">
    <MudChart ChartType=""ChartType.HeatMap"" ChartSeries=""@_series"" ChartOptions=""@_options""
              XAxisLabels=""@_xLabels"" Width=""100%"" Height=""350px""></MudChart>
</MudPaper>
<MudPaper Class=""pa-4 mt-2 d-flex justify-center"">
    <MudButton OnClick=""AddColor"" Disabled=""@(_colorCount >= 5)"" Variant=""Variant.Filled"" Color=""Color.Primary"">Add Color</MudButton>
    <MudButton @onclick=""RandomizeData"" Variant=""Variant.Filled"" Class=""mx-4"">Randomize</MudButton>
    <MudButton OnClick=""RemoveColor"" Disabled=""@(_colorCount <= 1)"" Variant=""Variant.Filled"" Color=""Color.Secondary"">Remove Color</MudButton>
</MudPaper>

<MudStack Row Justify=""Justify.Center"">
    @for (var i = 0; i < _colors.Length; i++)
    {
        <MudPaper Class=""pa-2 mx-1""
                  Style=""@($""background-color: {_colors[i]}; width: 50px; height: 50px;{(i > _colorCount -1 ? string.Empty : ""border: 2px solid black;"" )}"")"">
        </MudPaper>
    }
</MudStack>

<MudText Align=""Align.Center"" Typo=""Typo.h6"">Number of Colors Selected: @_colorCount</MudText>

@code {
    private int _colorCount = 1;
    private readonly string[] _colors = [""#5AC8FA"", ""#34C759"", ""#007AFF"", ""#FFCC00"", ""#e03131""];
    private List<ChartSeries> _series = [];
    private ChartOptions _options = new();
    private string[] _xLabels = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BuildOptions();
        RandomizeData();
    }

    private void AddColor()
    {
        _colorCount++;
        BuildOptions();
    }

    private void RemoveColor()
    {
        _colorCount--;
        BuildOptions();
    }

    private void BuildOptions()
    {
        var options = new ChartOptions
        {
            ChartPalette = _colors.Take(_colorCount).ToArray()
        };
        _options = options;
    }

    private void RandomizeData()
    {
        string[] xaxis = [""A"", string.Empty, ""C"",];
        var heatMapSeries = new List<ChartSeries>();
        var dataPoints = xaxis.Length;
        foreach (var x in xaxis)
        {
            var data = new double[dataPoints];
            for (int i = 0; i < dataPoints; i++)
            {
                data[i] = Math.Round(Random.Shared.NextDouble() * 100, 2);
            }
            heatMapSeries.Add(new ChartSeries { Name = x, Data = data });
        }
        _xLabels = xaxis;
        _series = heatMapSeries;
        BuildOptions();
    }
}";

        public const string HeatMapExample2 = @"<MudPaper Class=""pa-4"">
    <MudChart ChartType=""ChartType.HeatMap"" ChartSeries=""@_series"" ChartOptions=""@_options""
              XAxisLabels=""@_xLabels"" Width=""100%"" Height=""350px""></MudChart>
</MudPaper>
<MudPaper Class=""pa-4 mt-2 d-flex justify-center"">
    <MudGrid Spacing=""2"" Class=""d-flex"">
        <MudItem xs=""4"">
            <MudStack Row AlignItems=""AlignItems.Center"" Justify=""Justify.Center"">
                <MudText Class=""pr-1"">YAxis Labels</MudText>
                <MudSelect T=""YAxisLabelPosition"" @bind-Value=""@_yAxisLabelPosition"" @bind-Value:after=""BuildOptions"" FullWidth=""true"">
                    <MudSelectItem Value=""YAxisLabelPosition.Left"">Left</MudSelectItem>
                    <MudSelectItem Value=""YAxisLabelPosition.Right"">Right</MudSelectItem>
                    <MudSelectItem Value=""YAxisLabelPosition.None"">None</MudSelectItem>
                </MudSelect>
            </MudStack>
        </MudItem>
        <MudItem xs=""4"" Class=""d-flex align-center justify-center"">
            <MudButton @onclick=""RandomizeData"" Variant=""Variant.Filled"" Class=""mx-4"">Randomize</MudButton>
        </MudItem>
        <MudItem xs=""4"">
            <MudStack Row AlignItems=""AlignItems.Center"" Justify=""Justify.Center"">
                <MudText Class=""pr-1"">XAxis Labels</MudText>
                <MudSelect T=""XAxisLabelPosition"" @bind-Value=""@_xAxisLabelPosition"" @bind-Value:after=""BuildOptions"" FullWidth=""true"">
                    <MudSelectItem Value=""XAxisLabelPosition.Top"">Top</MudSelectItem>
                    <MudSelectItem Value=""XAxisLabelPosition.Bottom"">Bottom</MudSelectItem>
                    <MudSelectItem Value=""XAxisLabelPosition.None"">None</MudSelectItem>
                </MudSelect>
            </MudStack>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private readonly string[] _colors = [""#5AC8FA"", ""#34C759"", ""#007AFF""];
    private List<ChartSeries> _series = [];
    private ChartOptions _options = new();
    private XAxisLabelPosition _xAxisLabelPosition = XAxisLabelPosition.Top;
    private YAxisLabelPosition _yAxisLabelPosition = YAxisLabelPosition.Left;
    private string[] _xLabels = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BuildOptions();
        RandomizeData();
    }

    private void BuildOptions()
    {
        var options = new ChartOptions
        {
            ChartPalette = _colors,
            XAxisLabelPosition = _xAxisLabelPosition,
            YAxisLabelPosition = _yAxisLabelPosition
        };
        _options = options;
    }

    private void RandomizeData()
    {
        string[] xaxis = [""A"", ""B"", ""C"",];
        var heatMapSeries = new List<ChartSeries>();
        var dataPoints = xaxis.Length;
        foreach (var x in xaxis)
        {
            var data = new double[dataPoints];
            for (int i = 0; i < dataPoints; i++)
            {
                data[i] = Math.Round(Random.Shared.NextDouble() * 100, 2);
            }
            heatMapSeries.Add(new ChartSeries { Name = x, Data = data });
        }
        _xLabels = xaxis;
        _series = heatMapSeries;
        BuildOptions();
    }
}";

        public const string HeatMapExample3 = @"<MudPaper Class=""pa-4"">
    <MudChart ChartType=""ChartType.HeatMap"" ChartSeries=""@_series"" ChartOptions=""@_options""
              XAxisLabels=""@_xLabels"" Width=""100%"" Height=""350px""></MudChart>
</MudPaper>
<MudPaper Class=""pa-4 mt-2 d-flex justify-center"">
    <MudItem xs=""4"" Class=""d-flex align-center"">
        <MudCheckBox T=""bool"" @bind-Value=""_enableSmoothGradient"" @bind-Value:after=""BuildOptions"" Color=""Color.Primary"">
            Smooth Gradient
        </MudCheckBox>
    </MudItem>
    <MudButton @onclick=""RandomizeData"" Variant=""Variant.Filled"" Class=""mx-4"">Randomize</MudButton>
</MudPaper>

@code {
    private bool _enableSmoothGradient = true;
    private readonly string[] _colors = [""#5AC8FA"", ""#34C759"", ""#007AFF""];
    private List<ChartSeries> _series = [];
    private ChartOptions _options = new();
    private string[] _xLabels = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BuildOptions();
        RandomizeData();
    }

    private void BuildOptions()
    {
        var options = new ChartOptions
        {
            ChartPalette = _colors,
            EnableSmoothGradient = _enableSmoothGradient
        };
        _options = options;
    }

    private void RandomizeData()
    {
        string[] xaxis = [""A"", string.Empty, ""C"",];
        var heatMapSeries = new List<ChartSeries>();
        var dataPoints = xaxis.Length;
        foreach (var x in xaxis)
        {
            var data = new double[dataPoints];
            for (int i = 0; i < dataPoints; i++)
            {
                data[i] = Math.Round(Random.Shared.NextDouble() * 100, 2);
            }
            heatMapSeries.Add(new ChartSeries { Name = x, Data = data });
        }
        _xLabels = xaxis;
        _series = heatMapSeries;
        BuildOptions();
    }
}";

        public const string HeatMapExample4 = @"<link href=""https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined"" rel=""stylesheet"" />

<MudGrid>
    <MudItem xs=""2"" Class=""d-flex align-center"">
        <MudRadioGroup T=""Position"" Value=""_showLegendPosition"" ValueChanged=""@((Position value) => ShowLegendPositionChanged(value))"" Class=""d-flex flex-column align-center justify-center"">

            <!-- Top Radio -->
            <MudItem xs=""12"" Class=""d-flex justify-center align-center"">
                <MudRadio Color=""Color.Primary"" Value=""Position.Top"" LabelPlacement=""Placement.Top"" Dense>Top</MudRadio>
            </MudItem>

            <MudItem xs=""12"" Class=""d-flex justify-center py-2"">
                <MudGrid Class=""align-center justify-center"">
                    <!-- Left Radio -->
                    <MudItem xs=""4"" Class=""d-flex align-center justify-center"">
                        <MudRadio Color=""Color.Primary"" Value=""Position.Left"" LabelPlacement=""Placement.Left"" Dense>L</MudRadio>
                    </MudItem>

                    <!-- Center Badge -->
                    <MudItem xs=""4"" Class=""d-flex align-center justify-center"">
                        <MudBadge Origin=""@_anchorOrigin"" Color=""Color.Primary"" Dot=""true"" Overlap Elevation=""4"" BadgeClass=""ma-2"">
                            <MudPaper Elevation=""0"" Outlined=""true"" Class=""pa-6"">
                                <MudText Align=""Align.Center"">Heat Map</MudText>
                            </MudPaper>
                        </MudBadge>
                    </MudItem>

                    <!-- Right Radio -->
                    <MudItem xs=""4"" Class=""d-flex align-center justify-center"">
                        <MudRadio Color=""Color.Primary"" Value=""Position.Right"" Dense>R</MudRadio>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <!-- Bottom Radio -->
            <MudItem xs=""12"" Class=""d-flex justify-center align-center"">
                <MudRadio Color=""Color.Primary"" Value=""Position.Bottom"" LabelPlacement=""Placement.Bottom"" Dense>Bottom</MudRadio>
            </MudItem>

        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""10"">
        <MudChart ChartType=""ChartType.HeatMap"" ChartSeries=""@_series""
                  XAxisLabels=""@_xAxisLabels"" ChartOptions=""@_options"" LegendPosition=""_showLegendPosition"">
            <MudHeatMapCell Row=""0"" Column=""0"">
                <!-- Font Icons act differently and should resize dynamically without specifying width/height -->
                <MudIcon Icon=""material-symbols-outlined/database"" Color=""Color.Primary"" />
            </MudHeatMapCell>
            <MudHeatMapCell Row=""1"" Column=""0"" Value=""72.192304983"">
                <!-- text tag doesn't need resized so no width/height -->
                <text dominant-baseline=""middle"" text-anchor=""middle"" fill=""black"" font-family=""Helvetica"" font-size=""14"">N/A</text>
            </MudHeatMapCell>
            <MudHeatMapCell Row=""2"" Column=""0"" Width=""24"" Height=""24"">
                <svg xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 24 24"">
                    <!-- Face Circle -->
                    <circle cx=""12"" cy=""12"" r=""11"" stroke=""black"" stroke-width=""1"" fill=""#FFD700"" />
                    <!-- Left Eye -->
                    <circle cx=""8"" cy=""9"" r=""1.5"" fill=""black"" />
                    <!-- Right Eye -->
                    <circle cx=""16"" cy=""9"" r=""1.5"" fill=""black"" />
                    <!-- Smile -->
                    <path d=""M7,14 Q12,17 17,14"" stroke=""black"" stroke-width=""1"" fill=""none"" />
                </svg>
            </MudHeatMapCell>
            <MudHeatMapCell Row=""3"" Column=""0"" Width=""24"" Height=""24"">
                <MudIcon Icon=""@Icons.Material.Filled.Face"" Color=""Color.Secondary"" />
            </MudHeatMapCell>
            <MudHeatMapCell Row=""4"" Column=""0"" Value=""33.912384"" />
            <MudHeatMapCell Row=""5"" Column=""0"">
                NO
            </MudHeatMapCell>
            <MudHeatMapCell Row=""6"" Column=""0"" MudColor=""@(new Utilities.MudColor(""#FF5733""))"" />
        </MudChart>
    </MudItem>
</MudGrid>
<MudGrid Spacing=""2"" Class=""d-flex"">
    <MudItem xs=""2"" Class=""d-flex align-center"">
        <MudButton OnClick=""@RandomizeData"" Variant=""Variant.Filled"">Randomize Data</MudButton>
    </MudItem>
    <MudItem xs=""2"" Class=""d-flex align-center"">
        <MudCheckBox T=""bool"" @bind-Value=""_enableGradient"" @bind-Value:after=""BuildOptions"" Color=""Color.Primary"">
            Smooth Gradient
        </MudCheckBox>
    </MudItem>
    <MudItem xs=""2"" Class=""d-flex align-center justify-left"">
        <MudSelect T=""YAxisLabelPosition"" @bind-Value=""@_yAxisLabelPosition"" @bind-Value:after=""BuildOptions"" FullWidth=""true"" Label=""YAxis Labels"">
            <MudSelectItem Value=""YAxisLabelPosition.Left"">Left</MudSelectItem>
            <MudSelectItem Value=""YAxisLabelPosition.Right"">Right</MudSelectItem>
            <MudSelectItem Value=""YAxisLabelPosition.None"">None</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs=""2"" Class=""d-flex align-center justify-left"">
        <MudSelect T=""XAxisLabelPosition"" @bind-Value=""@_xAxisLabelPosition"" @bind-Value:after=""BuildOptions"" FullWidth=""true"" Label=""XAxis Labels"">
            <MudSelectItem Value=""XAxisLabelPosition.Top"">Top</MudSelectItem>
            <MudSelectItem Value=""XAxisLabelPosition.Bottom"">Bottom</MudSelectItem>
            <MudSelectItem Value=""XAxisLabelPosition.None"">None</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs=""2"" Class=""d-flex align-center"">
        <MudNumericField Label=""Number of Colors Used"" @bind-Value=""_colorCount"" @bind-Value:after=""BuildOptions"" Min=""1"" Max=""5"" Step=""1"" />
    </MudItem>
    <MudItem xs=""2""></MudItem>
    <MudItem xs=""2"" Class=""d-flex align-center"">
        <MudCheckBox T=""bool"" @bind-Value=""@_legendVisible"" @bind-Value:after=""BuildOptions"" Color=""Color.Primary"">
            Show Legend
        </MudCheckBox>
    </MudItem>
    <MudItem xs=""3"" Class=""d-flex align-center"">
        <MudCheckBox T=""bool"" @bind-Value=""@_showLegendValues"" @bind-Value:after=""BuildOptions"" Color=""Color.Primary"">
            Show Legend Values
        </MudCheckBox>
    </MudItem>
    <MudItem xs=""2"" Class=""d-flex align-center"">
        <MudCheckBox T=""bool"" @bind-Value=""@_showValueLabels"" @bind-Value:after=""BuildOptions"" Color=""Color.Primary"">
            Show Values
        </MudCheckBox>
    </MudItem>
    <MudItem xs=""3"" Class=""d-flex align-center"">
        <MudCheckBox T=""bool"" @bind-Value=""@_showValueToolTips"" @bind-Value:after=""BuildOptions"" Color=""Color.Primary"">
            Show Value Tooltips
        </MudCheckBox>
    </MudItem>
</MudGrid>

@code {
    private ChartOptions _options = new();
    private List<ChartSeries> _series = [];
    private XAxisLabelPosition _xAxisLabelPosition = XAxisLabelPosition.Bottom;
    private YAxisLabelPosition _yAxisLabelPosition = YAxisLabelPosition.Left;
    private bool _enableGradient = false;
    private bool _showValueLabels = true;
    private bool _showLegendValues = true;
    private bool _showValueToolTips = true;
    private bool _legendVisible = true;
    private Position _showLegendPosition = Position.Bottom;
    private Origin _anchorOrigin = Origin.BottomCenter;
    private int _colorCount = 5;
    private readonly string[] _colors = [""#5AC8FA"", ""#34C759"", ""#007AFF"", ""#FFCC00"", ""#e03131""];
    private readonly List<ChartSeries> _heatMapSeries =
    [
        new() { Name = ""Mo"", Data = [90, 79, 72, 69, 62, 62, 55, 65, 70] },
        new() { Name = ""Te"", Data = [35, 41, 35, 51, 49, 62, 69, 91, 148] },
        new() { Name = ""We"", Data = [22, 90, 62, 32, 05, 42, 63, 43, 155] },
        new() { Name = ""Th"", Data = [35, 41, 35, 51, 49, 62, 69, 91, 148] },
        new() { Name = ""Fr"", Data = [22, 90, 62, 32, 05, 42, 63, 43, 155] },
        new() { Name = ""Sa"", Data = [35, 41, 35, 51, 49, 62, 69, 91, 148] },
        new() { Name = ""Su"", Data = [22, 90, 62, 32, 05, 42, 63, 43, 155] }
    ];
    private string[] _xAxisLabels = [""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep""];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _series = _heatMapSeries;
        BuildOptions();
    }

    private void ShowLegendPositionChanged(Position value)
    {
        _showLegendPosition = value;
        _anchorOrigin = value switch
        {
            Position.Top => Origin.TopCenter,
            Position.Left => Origin.CenterLeft,
            Position.Right => Origin.CenterRight,
            Position.Bottom => Origin.BottomCenter,
            _ => _anchorOrigin
        };
        BuildOptions();
    }

    private void BuildOptions()
    {
        _options = new ChartOptions
        {
            XAxisLabelPosition = _xAxisLabelPosition,
            YAxisLabelPosition = _yAxisLabelPosition,
            EnableSmoothGradient = _enableGradient,
            ChartPalette = _colors.Take(_colorCount).ToArray(),
            ShowLabels = _showValueLabels,
            ShowLegend = _legendVisible,
            ShowLegendLabels = _showLegendValues
        };
        StateHasChanged();
    }

    private void RandomizeData()
    {
        var newSeries = new List<ChartSeries>();
        string[] days = [""Mo"", ""Te"", ""We"", ""Th"", ""Fr"", ""Sa"", ""Su""];
        const int DataPoints = 9;

        foreach (var day in days)
        {
            var data = new double[DataPoints];
            for (int i = 0; i < DataPoints; i++)
            {
                data[i] = Random.Shared.NextDouble() * 100;
            }
            newSeries.Add(new ChartSeries { Name = day, Data = data });
        }

        _series = newSeries;
    }
}";

        public const string HeatMapExample5 = @"<MudPaper Class=""pa-4"">
    <MudChart ChartType=""ChartType.HeatMap"" ChartSeries=""@_series"" ChartOptions=""@_options""
              XAxisLabels=""@_xLabels"" Width=""100%"" Height=""350px""></MudChart>
</MudPaper>
<MudPaper Class=""pa-4 mt-2 d-flex justify-center"">
    <MudGrid Spacing=""2"" Class=""d-flex"">
        <MudItem xs=""4"" Class=""d-flex align-center"">
            <MudCheckBox T=""bool"" @bind-Value=""@_showValueLabels"" @bind-Value:after=""BuildOptions"" Color=""Color.Primary"">
                Show Values
            </MudCheckBox>
        </MudItem>
        <MudItem xs=""4"" Class=""d-flex align-center justify-center"">
            <MudButton @onclick=""RandomizeData"" Variant=""Variant.Filled"" Class=""mx-4"">Randomize</MudButton>
        </MudItem>
        <MudItem xs=""4"" Class=""d-flex align-center"">
            <MudCheckBox T=""bool"" @bind-Value=""@_showValueToolTips"" @bind-Value:after=""BuildOptions"" Color=""Color.Primary"">
                Show Value Tooltips
            </MudCheckBox>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private readonly string[] _colors = [""#5AC8FA"", ""#34C759"", ""#007AFF""];
    private List<ChartSeries> _series = [];
    private ChartOptions _options = new();
    private bool _showValueLabels = true;
    private bool _showValueToolTips = true;
    private string[] _xLabels = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BuildOptions();
        RandomizeData();
    }

    private void BuildOptions()
    {
        var options = new ChartOptions
        {
            ChartPalette = _colors,
            ShowLabels = _showValueLabels,
            ShowToolTips = _showValueToolTips
        };
        _options = options;
    }

    private void RandomizeData()
    {
        string[] xaxis = [""A"", ""B"", ""C"",];
        var heatMapSeries = new List<ChartSeries>();
        var dataPoints = xaxis.Length;
        foreach (var x in xaxis)
        {
            var data = new double[dataPoints];
            for (int i = 0; i < dataPoints; i++)
            {
                data[i] = Math.Round(Random.Shared.NextDouble() * 100, 2);
            }
            heatMapSeries.Add(new ChartSeries { Name = x, Data = data });
        }
        _xLabels = xaxis;
        _series = heatMapSeries;
        BuildOptions();
    }
}";

        public const string HeatMapExample6 = @"<link href=""https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined"" rel=""stylesheet"" />

<MudPaper Class=""pa-4"">
    <MudChart ChartType=""ChartType.HeatMap"" ChartSeries=""@_series"" ChartOptions=""@_options""
    XAxisLabels=""@_xLabels"" Width=""100%"" Height=""300px"">
    <!-- Setting Value for weekend to 0 and weekday to 1 to let Color Palette do the magic -->
        <MudHeatMapCell Row=""0"" Column=""0"" Value=""0"">
            <MudIcon Icon=""material-symbols-outlined/rainy"" Color=""Color.Secondary"" />
        </MudHeatMapCell>
        <MudHeatMapCell Row=""0"" Column=""1"" Value=""1"">
            <MudIcon Icon=""material-symbols-outlined/sunny"" Color=""Color.Secondary"" />
        </MudHeatMapCell>
        <MudHeatMapCell Row=""0"" Column=""2"" Value=""1"">
            <MudIcon Icon=""material-symbols-outlined/foggy"" Color=""Color.Secondary"" />
        </MudHeatMapCell>
        <MudHeatMapCell Row=""0"" Column=""3"" Value=""1"" Width=""24"" MudColor=""@(new Utilities.MudColor(""#FF5733""))"">
            <MudIcon Icon=""@Icons.Material.Outlined.Thunderstorm"" Color=""Color.Dark"" />
        </MudHeatMapCell>
        <MudHeatMapCell Row=""0"" Column=""4"" Value=""1"" >
            <MudIcon Icon=""material-symbols-outlined/rainy"" Color=""Color.Secondary"" />
        </MudHeatMapCell>
        <MudHeatMapCell Row=""0"" Column=""5"" Value=""1"">
            <MudIcon Icon=""material-symbols-outlined/sunny"" Color=""Color.Secondary"" />
        </MudHeatMapCell>
        <MudHeatMapCell Row=""0"" Column=""6"" Value=""0"">
            <MudIcon Icon=""material-symbols-outlined/sunny"" Color=""Color.Secondary"" />
        </MudHeatMapCell>
    </MudChart>
</MudPaper>

@code {
    private readonly string[] _colors = [""#5AC8FA"", ""#34C759"", ""#007AFF""];
    private List<ChartSeries> _series = [];
    private ChartOptions _options = new();
    private string[] _xLabels = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        WeeklyData();
        BuildOptions();
    }

    private void BuildOptions()
    {
        var options = new ChartOptions
        {
            ChartPalette = _colors,
            YAxisLabelPosition = YAxisLabelPosition.None,
            ShowLegend = false,
            XAxisLabelPosition = XAxisLabelPosition.Top,
            ShowToolTips = false,
            ShowLabels = false
        };
        _options = options;
    }

    private void WeeklyData()
    {
        string[] xaxis = [""Sun"", ""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"",];
        var heatMapSeries = new List<ChartSeries>();
        var dataPoints = xaxis.Length;
        var data = new double[dataPoints];
        for (int i = 0; i < dataPoints; i++)
        {
            data[i] = i;
        }
        heatMapSeries.Add(new ChartSeries { Name = string.Empty, Data = data });
        _xLabels = xaxis;
        _series = heatMapSeries;
    }
}";

        public const string LineExample1 = @"<div>
    <MudChart ChartType=""ChartType.Line"" ChartSeries=""@Series"" @bind-SelectedIndex=""Index"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px"" ChartOptions=""@Options""/>
    <MudGrid>
        <MudItem xs=""6"">
            <MudText Typo=""Typo.body1"" Class=""py-3"">Selected: @(Index < 0 ? ""None"" : Series[Index].Name)</MudText>
        </MudItem>
        <MudItem xs=""6"">
            <MudSlider @bind-Value=""Options.LineStrokeWidth"" Min=""1"" Max=""10"" Color=""Color.Info"">Line Width: @Options.LineStrokeWidth.ToString()</MudSlider>
        </MudItem>
    </MudGrid>
</div>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public ChartOptions Options = new ChartOptions();
    
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""Fossil"", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = ""Renewable"", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = {""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };
    
}";

        public const string LineExampleHideLines = @"<div>
    <MudChart ChartType=""ChartType.Line"" ChartSeries=""@Series"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px"" CanHideSeries/>
    <MudButton Variant=""Variant.Filled"" @onclick=""RandomizeData"">Randomize Data</MudButton>
</div>

@code {

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RandomizeData();
    }

    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels = {""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };

    Random random = new Random();
    public void RandomizeData()
    {
        var newSeries = new List<ChartSeries>();
        for (int s = 1; s <= 10; s++)
        {
            var series = new ChartSeries() { Name = $""Series {s}"", Data = new double[9] };
            for (int i = 0; i < 9; i++)
                series.Data[i] = random.NextDouble() * 100;
            newSeries.Add(series);
        }
        Series = newSeries;
        StateHasChanged();
    }
}";

        public const string LineExampleInterpolation = @"<div>
    <MudChart ChartType=""ChartType.Line"" ChartSeries=""@Series"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350"" ChartOptions=""options""></MudChart>
    <MudButton @onclick=""RandomizeData"">Randomize Data</MudButton>
    <MudMenu Label=""Interpolation Algorithm"" FullWidth=""true"">
        <MudMenuItem OnClick=""() => OnClickMenu(InterpolationOption.Straight)"">Straight</MudMenuItem>
        <MudMenuItem OnClick=""() => OnClickMenu(InterpolationOption.NaturalSpline)"">Natural Spline</MudMenuItem>
        <MudMenuItem OnClick=""() => OnClickMenu(InterpolationOption.EndSlope)"">End Slope</MudMenuItem>
        <MudMenuItem OnClick=""() => OnClickMenu(InterpolationOption.Periodic)"">Periodic</MudMenuItem>
    </MudMenu>
</div>

@code {
    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""Series 1"", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = ""Series 2"", Data = new double[] { 35, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };

    Random random = new Random();
    protected override void OnInitialized()
    {
        options.InterpolationOption = InterpolationOption.NaturalSpline;
        options.YAxisFormat = ""c2"";
    }

    public void RandomizeData()
    {
        var new_series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = ""Series 1"", Data = new double[9] },
            new ChartSeries() { Name = ""Series 2"", Data = new double[9] },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = random.NextDouble() * 100;
            new_series[1].Data[i] = random.NextDouble() * 100;
        }
        Series = new_series;
        StateHasChanged();
    }

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }


}";

        public const string LineExampleYAxisTicks = @"<div>
    <MudChart ChartType=""ChartType.Line"" ChartSeries=""@_series"" XAxisLabels=""@_xAxisLabels"" ChartOptions=""@_options"" Width=""100%"" Height=""350px""></MudChart>
    <MudSlider @bind-Value=""_options.YAxisTicks"" Min=""10"" Max=""400"" Step=""10"" Color=""Color.Info"">Y-Axis Ticks: @_options.YAxisTicks.ToString()</MudSlider>
</div>

@code {
    private readonly List<ChartSeries> _series = new();
    private readonly ChartOptions _options = new();
    private readonly string[] _xAxisLabels = { ""1986-04-20"", ""1986-04-21"", ""1986-04-22"", ""1986-04-23"", ""1986-04-24"", ""1986-04-25"", ""1986-04-26"" };

    protected override void OnInitialized()
    {
        double[] data1 = { 65, 68, 70, 74, 74, 72, 74 };
        double[] data2 = { 88, 90, 91, 92, 91, 90, 90 };
        double[] data3 = { 89, 91, 92, 92, 92, 92, 91 };
        double[] data4 = { 85, 86, 90, 90, 92, 99, 0 };

        _series.Add(new ChartSeries { Name = ""Chernobyl-1"", Data = data1 });
        _series.Add(new ChartSeries { Name = ""Chernobyl-2"", Data = data2 });
        _series.Add(new ChartSeries { Name = ""Chernobyl-3"", Data = data3 });
        _series.Add(new ChartSeries { Name = ""Chernobyl-4"", Data = data4 });

        _options.YAxisTicks = 50;

        StateHasChanged();
    }
}";

        public const string PieExample1 = @"<MudPaper Class=""pa-4"">
    <MudChart ChartType=""ChartType.Pie"" InputData=""@data"" @bind-SelectedIndex=""Index"" InputLabels=""@labels"" Width=""300px"" Height=""300px"" />
</MudPaper>
<MudPaper Class=""pa-4 mt-2 d-flex justify-center"">
    <MudButton OnClick=""AddDataSize"" Variant=""Variant.Filled"" Color=""Color.Primary"">Add</MudButton>
    <MudButton @onclick=""RandomizeData"" Variant=""Variant.Filled"" Class=""mx-4"">Randomize</MudButton>
    <MudButton OnClick=""RemoveDataSize"" Variant=""Variant.Filled"" Color=""Color.Secondary"">Remove</MudButton>  
</MudPaper>
<MudText Typo=""Typo.h6"">Selected portion of the chart: @Index</MudText>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int dataSize = 4;
    double[] data = { 77, 25, 20, 5 };
    string[] labels = { ""Uranium"", ""Plutonium"", ""Thorium"", ""Caesium"", ""Technetium"", ""Promethium"",
                        ""Polonium"", ""Astatine"", ""Radon"", ""Francium"", ""Radium"", ""Actinium"", ""Protactinium"",
                        ""Neptunium"", ""Americium"", ""Curium"", ""Berkelium"", ""Californium"", ""Einsteinium"", ""Mudblaznium"" };

    Random random = new Random();

    void RandomizeData()
    {
        var new_data = new double[dataSize];
        for (int i = 0; i < new_data.Length; i++)
            new_data[i] = random.NextDouble() * 100;
        data = new_data;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (dataSize < 20)
        {
            dataSize = dataSize + 1;
            RandomizeData();
        }
    }
    void RemoveDataSize()
    {
        if (dataSize > 0)
        {
            dataSize = dataSize - 1;
            RandomizeData();
        }
    }
}";

        public const string StackedBarCustomGraphicsExample = @"<MudChart ChartType=""ChartType.StackedBar"" ChartSeries=""@Series"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px"">
	<CustomGraphics>
		<style>
			.heavy { font: bold 30px Helvetica; }
			.Rrrrr { font: italic 40px Helvetica; fill: rgb(62,44,221); }
		</style>
		<text x=""80"" y=""35"" class=""heavy"">I Love</text>
		<text x=""105"" y=""70"" class=""Rrrrr"">MudBlazor!</text>
	</CustomGraphics>
</MudChart>


@code {
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""United States"", Data = new double[] { 40, 20, 25, 27, 46, 46, 48, 44, 15 } },
        new ChartSeries() { Name = ""Germany"", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 40 } },
        new ChartSeries() { Name = ""Sweden"", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 20 } },
    };
    public string[] XAxisLabels = { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };
}";

        public const string StackedBarExample1 = @"<div>
    <MudChart ChartType=""ChartType.StackedBar"" ChartSeries=""@Series"" @bind-SelectedIndex=""Index"" LegendPosition=""@LegendPosition"" XAxisLabels=""@XAxisLabels"" Width=""100%"" Height=""350px""></MudChart>
</div>
<MudText Typo=""Typo.h6"">Selected portion of the chart: @Index</MudText>

<div>
    <MudRadioGroup T=""Position"" @bind-Value=""LegendPosition"">
        <MudRadio Value=""@(Position.Bottom)"" Color=""Color.Primary"">Bottom</MudRadio>
        <MudRadio Value=""@(Position.Top)"" Color=""Color.Primary"">Top</MudRadio>
        <MudRadio Value=""@(Position.Left)"" Color=""Color.Primary"">Left</MudRadio>
        <MudRadio Value=""@(Position.Right)"" Color=""Color.Primary"">Right</MudRadio>
        <MudRadio Value=""@(Position.Start)"" Color=""Color.Primary"">Start</MudRadio>
        <MudRadio Value=""@(Position.End)"" Color=""Color.Primary"">End</MudRadio>
    </MudRadioGroup>
</div>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.

    private Position LegendPosition = Position.Bottom;

    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = ""United States"", Data = new double[] { 40, 20, 25, 27, 46, 60, 48, 80, 15 } },
        new ChartSeries() { Name = ""Germany"", Data = new double[] { 19, 24, 35, 13, 28, 15, 13, 16, 31 } },
        new ChartSeries() { Name = ""Sweden"", Data = new double[] { 8, 6, 11, 13, 4, 16, 10, 16, 18 } },
    };
    public string[] XAxisLabels = { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"" };
}";

        public const string TimeSeriesExample1 = @"<div>
    <MudTimeSeriesChart ChartSeries=""@_series"" @bind-SelectedIndex=""Index"" Width=""100%"" Height=""350px"" ChartOptions=""@_options"" CanHideSeries TimeLabelSpacing=""TimeSpan.FromMinutes(5)"" />
    <MudGrid>
        <MudItem xs=""6"">
            <MudText Typo=""Typo.body1"" Class=""py-3"">Selected: @(Index < 0 ? ""None"" : _series[Index].Name)</MudText>
        </MudItem>
        <MudItem xs=""6"">
            <MudSlider @bind-Value=""_options.LineStrokeWidth"" Min=""1"" Max=""10"" Color=""Color.Info"">Line Width: @_options.LineStrokeWidth.ToString()</MudSlider>
        </MudItem>
    </MudGrid>
</div>

@code
{
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private ChartOptions _options = new ChartOptions
        {
            YAxisLines = false,
            YAxisTicks = 500,
            MaxNumYAxisTicks = 10,
            YAxisRequireZeroPoint = true,
            XAxisLines = false,
            LineStrokeWidth = 1,
        };

    private TimeSeriesChartSeries _chart1 = new();
    private TimeSeriesChartSeries _chart2 = new();
    private TimeSeriesChartSeries _chart3 = new();

    private List<TimeSeriesChartSeries> _series = new();

    private readonly Random _random = new Random();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var now = DateTime.Now;

        _chart1 = new TimeSeriesChartSeries
            {
                Index = 0,
                Name = ""Series 1"",
                Data = Enumerable.Range(-360, 360).Select(x => new TimeSeriesChartSeries.TimeValue(now.AddSeconds(x * 10), _random.Next(6000, 15000))).ToList(),
                IsVisible = true,
                Type = TimeSeriesDisplayType.Line
            };

        _chart2 = new TimeSeriesChartSeries
            {
                Index = 1,
                Name = ""Series 2"",
                Data = Enumerable.Range(-360, 360).Select(x => new TimeSeriesChartSeries.TimeValue(now.AddSeconds(x * 10), _random.Next(0, 7000))).ToList(),
                IsVisible = true,
                Type = TimeSeriesDisplayType.Area
            };

        _chart3 = new TimeSeriesChartSeries
            {
                Index = 2,
                Name = ""Series 3"",
                Data = Enumerable.Range(-90, 60).Select(x => new TimeSeriesChartSeries.TimeValue(now.AddSeconds(x * 30), _random.Next(4000, 10000))).ToList(),
                IsVisible = true,
                Type = TimeSeriesDisplayType.Line
            };

        _series.Add(_chart1);
        _series.Add(_chart2);
        _series.Add(_chart3);

        StateHasChanged();
    }
}";

        public const string ChatAvatarExample = @"<MudChat ChatPosition=""ChatBubblePosition.Start"">
    <MudAvatar>OK</MudAvatar>
    <MudChatBubble>
        It was said that you would, destroy the Sith, not join them.
    </MudChatBubble>
    <MudChatBubble>
        It was you who would bring balance to the Force
    </MudChatBubble>
</MudChat>

<MudChat ChatPosition=""ChatBubblePosition.Start"">
    <MudAvatar>
        <MudImage Src=""images/jonny.jpg"" />
    </MudAvatar>
    <MudChatBubble>
        Not leave it in Darkness
    </MudChatBubble>
</MudChat>";

        public const string ChatBasicExample = @"<MudChat ChatPosition=""ChatBubblePosition.Start"">
    <MudChatBubble>
        It's over Anakin
    </MudChatBubble>
    <MudChatBubble>
        I have the high ground.
    </MudChatBubble>
</MudChat>
<MudChat ChatPosition=""ChatBubblePosition.End"">
    <MudChatBubble>
        You underestimate my power!
    </MudChatBubble>
</MudChat>";

        public const string ChatClickExample = @"@inject ISnackbar Snackbar

@{
    var orderedGroups = messages
        .OrderByDescending(m => m.Time)
        .GroupBy(m => m.Name)
        .ToList();

    for (int i = 0; i < orderedGroups.Count; i++)
    {
        var group = orderedGroups[i];
        var position = i == 0 ? ChatBubblePosition.Start : ChatBubblePosition.End;

        <MudChat ChatPosition=""@position"">
            <MudAvatar>@group.First().Initials</MudAvatar>
            <MudChatHeader Name=""@group.Key"" Time=""@group.First().Time"" />
            @foreach (var message in group.OrderByDescending(m => m.Time))
            {
                <MudChatBubble OnClick=""(MouseEventArgs args) => ClickMessage(args, message)"" 
                               OnContextClick=""(MouseEventArgs args) => RightClickMessage(args, message)"">
                    @message.Text
                </MudChatBubble>
            }
        </MudChat>
    }
}

<MudMenu PositionAtCursor=""true"" @ref=""_contextMenu"" id=""_contextMenu"">
    <MudMenuItem Icon=""@Icons.Material.Filled.Block"" OnClick=""@BanUser"">
        Ban @_selectedMessage?.Name
    </MudMenuItem>
    <MudMenuItem Icon=""@Icons.Material.Filled.Info"" OnClick=""@ShowHiddenInfo"">
        View Details for @_selectedMessage?.Name
    </MudMenuItem>
</MudMenu>

@code {
    #nullable enable
    private List<Message> messages = new();
    private Message? _selectedMessage;
    private MudMenu? _contextMenu;

    protected override void OnInitialized()
    {
        messages.Add(new Message(""Obi-Wan Kenobi"", ""OK"", ""You were my brother Anakin."", ""2 hours ago""));
        messages.Add(new Message(""Obi-Wan Kenobi"", ""OK"", ""I loved you."", ""2 hours ago""));
        messages.Add(new Message(""Anakin Skywalker"", ""AS"", ""I'm sorry."", ""1 hour ago""));
    }

    private void ShowHiddenInfo()
    {
        if (_selectedMessage is not null)
        {
            Snackbar.Add($""Hidden information for {_selectedMessage.Name}"", Severity.Info);
        }
    }

    private void BanUser()
    {
        if (_selectedMessage is not null)
        {
            Snackbar.Add($""{_selectedMessage.Name} has been banned!"", Severity.Error);
        }
    }

    private async Task RightClickMessage(MouseEventArgs args, Message message)
    {
        _selectedMessage = message;
        if (_contextMenu != null)
            await _contextMenu.OpenMenuAsync(args);
    }

    private async Task ClickMessage(MouseEventArgs args, Message message)
    {
        _selectedMessage = message;
        Snackbar.Add(""Message clicked: "" + message.Text, Severity.Info);
        await Task.CompletedTask;
    }


    private record Message(string Name, string Initials, string Text, string Time);
}";

        public const string ChatFullExample = @"<MudGrid>
    <MudItem xs=""12"" Class=""justify-center"">
        <MudStack Row>
            <MudCheckBox Label=""Dense"" @bind-Value=""_dense"" />
            <MudCheckBox Label=""Square"" @bind-Value=""_square"" />
            <MudNumericField Label=""Elevation"" @bind-Value=""_elevation"" Step=""1"" Min=""0"" Max=""25"" FullWidth=""false"" Style=""width: 100px;""/>
            <MudSelect Class=""mr-1"" T=""MudBlazor.Color"" Label=""Chat Color"" @bind-Value=""_selectedColor"">
                @foreach (MudBlazor.Color color in Enum.GetValues(typeof(MudBlazor.Color)))
                {
                    <MudSelectItem Value=""@color"">@color.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T=""MudBlazor.ChatArrowPosition"" Label=""Chat Arrow"" @bind-Value=""_selectedArrowPosition"">
                @foreach (MudBlazor.ChatArrowPosition pos in Enum.GetValues(typeof(MudBlazor.ChatArrowPosition)))
                {
                    <MudSelectItem Value=""@pos"">@pos.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudRadioGroup @bind-Value=""_variant"">
                <MudRadio Value=""@Variant.Text"" Label=""Text"" />
                <MudRadio Value=""@Variant.Outlined"" Label=""Outlined"" />
                <MudRadio Value=""@Variant.Filled"" Label=""Filled"" />
            </MudRadioGroup>
        </MudStack>
    </MudItem>
</MudGrid>

<MudChat Color=""_selectedColor"" Dense=""@_dense"" Elevation=""@_elevation"" Variant=""@_variant"" Square=""_square"" ArrowPosition=""_selectedArrowPosition"" ChatPosition=""ChatBubblePosition.Start"">
    <MudChatHeader Name=""Anakin"" Time=""12:46"" />
    <MudAvatar Size=""@(_dense ? Size.Small : Size.Medium)"">
        <MudImage Src=""images/toiletvisit.jpg"" />
    </MudAvatar>
    <MudChatBubble>What kind of nonsense is this</MudChatBubble>
    <MudChatBubble>Put me on the Council and not make me a Master!??</MudChatBubble>
    <MudChatBubble>That's never been done in the history of the Jedi. It's insulting!</MudChatBubble>
    <MudChatFooter Text=""Seen at 12:46"" />
</MudChat>

<MudChat Color=""_selectedColor"" Dense=""@_dense"" Elevation=""@_elevation"" Variant=""@_variant"" Square=""_square"" ArrowPosition=""_selectedArrowPosition"" ChatPosition=""ChatBubblePosition.End"">
    <MudChatHeader Name=""Obi-Wan Kenobi"" Time=""12:45"" />
    <MudAvatar Size=""@(_dense ? Size.Small : Size.Medium)"">
        <MudImage Src=""images/jonny.jpg"" />
    </MudAvatar>
    <MudChatBubble>Calm down, Anakin. You have been given a great honor. <br/> To be on the Council at your age.</MudChatBubble>
    <MudChatBubble Color=""Color.Primary"">It's never happened before.</MudChatBubble>
    <MudChatFooter Text=""Delivered"" />
</MudChat>

@code {
    private bool _dense = true;
    private bool _square = false;
    private int _elevation = 5;
    private Variant _variant = Variant.Text;
    private Color _selectedColor = Color.Default;
    private ChatArrowPosition _selectedArrowPosition = ChatArrowPosition.Top;
    }";

        public const string ChatHeaderFooterExample = @"<MudChat ChatPosition=""ChatBubblePosition.Start"">
    <MudChatHeader Name=""Obi-Wan Kenobi"" Time=""2 hours ago"" />
    <MudChatBubble>You were my brother Anakin.</MudChatBubble>
    <MudChatFooter Text=""Seen"" />
</MudChat>

<MudChat ChatPosition=""ChatBubblePosition.Start"">
    <MudChatHeader>
        <MudAlert Severity=""Severity.Info"" Dense=""true"">Obi-Wan Kenobi</MudAlert>
    </MudChatHeader>
    <MudChatBubble>I loved you.</MudChatBubble>
    <MudChatFooter>
        <MudAlert Severity=""Severity.Info"" Dense=""true"">Seen</MudAlert>
    </MudChatFooter>
</MudChat>";

        public const string ChatHoverExample = @"@inject ISnackbar Snackbar
@inject IScrollListenerFactory ScrollListenerFactory

@{
    var orderedGroups = messages
        .OrderByDescending(m => m.Time)
        .GroupBy(m => m.Name)
        .ToList();

    for (int i = 0; i < orderedGroups.Count; i++)
    {
        var group = orderedGroups[i];
        var position = i == 0 ? ChatBubblePosition.Start : ChatBubblePosition.End;

        <MudChat ChatPosition=""@position"">
            <MudAvatar>@group.First().Initials</MudAvatar>
            <MudChatHeader Name=""@group.Key"" Time=""@group.First().Time"" />
            @foreach (var message in group.OrderByDescending(m => m.Time))
            {
                <MudChatBubble OnClick=""@((args) => ClickMessage(args, message))""
                OnContextClick=""@((args) => RightClickMessage(args, message))""
                @onmouseenter=""@((args) => HoverStart(args, message))""
                @onmouseleave=""@(() => HoverStop(""bubble""))"">
                    @message.Text
                    <MudPopover Open=""@(Hovering && message.Equals(_hoverMessage))"" Class=""hoverarea""
                    AnchorOrigin=""Origin.CenterRight""
                    TransformOrigin=""Origin.BottomRight""
                    @onscroll=""@(() => HoverStop(""scroll""))""
                    @onmouseenter=""@(() => _paperHovering = true)""
                    @onmouseleave=""@(() => HoverStop(""paper""))"">
                        <div class=""d-flex"" style=""width: 100%;"" @onclick:stopPropagation=""true"" @onclick:preventDefault=""true"">
                            <span class=""emoji"" @onclick=""@(() => MessageAction(""liked""))"">👍</span>
                            <span class=""emoji"" @onclick=""@(() => MessageAction(""cried""))"">😭</span>
                            <span class=""emoji"" @onclick=""@(() => MessageAction(""angered""))"">👿</span>
                            <MudDivider Class=""mx-1"" Vertical=""true"" FlexItem=""true"" />
                            <MudTooltip Text=""Reply"">
                                <span class=""emoji"" @onclick=""@Reply"">↩️</span>
                            </MudTooltip>
                        </div>
                    </MudPopover>
                </MudChatBubble>
                <MudChatFooter>
                    <MudPaper Class=""actionarea"" Elevation=""0"">
                        <div class=""d-flex"" style=""width: 100%;"" @onclick:stopPropagation=""true"" @onclick:preventDefault=""true"">
                            @if (message.Likes > 0)
                            {
                                <span class=""emoji"" @onclick=""@(() => MessageAction(""liked""))"">👍</span>
                                @message.Likes
                            }
                            @if (message.Cries > 0)
                            {
                                <span class=""emoji"" @onclick=""@(() => MessageAction(""cried""))"">😭</span>
                                @message.Cries
                            }
                            @if (message.Angers > 0)
                            {
                                <span class=""emoji"" @onclick=""@(() => MessageAction(""angered""))"">👿</span>
                                @message.Angers
                            }
                        </div>
                    </MudPaper>
                </MudChatFooter>
            }
        </MudChat>
    }
}

<MudMenu PositionAtCursor=""true"" @ref=""_contextMenu"" id=""_contextMenu"">
    <MudMenuItem Icon=""@Icons.Material.Filled.Block"" OnClick=""@BanUser"">
        Ban @_selectedMessage?.Name
    </MudMenuItem>
    <MudMenuItem Icon=""@Icons.Material.Filled.Info"" OnClick=""@ShowHiddenInfo"">
        View Details for @_selectedMessage?.Name
    </MudMenuItem>
</MudMenu>

<style>
    .hoverarea {
    cursor: pointer !important;
    background-color: var(--mud-palette-appbar-background);
    color: var(--mud-palette-appbar-text);
    transition: opacity 0.3s ease;
    opacity: .8;
    }

    .actionarea {
    background-color: var(--mud-palette-appbar-background);
    color: var(--mud-palette-appbar-text);
    }

    .actionarea:focus {
    opacity: 1; 
    }

    span.emoji {
    font-size: 12px;
    padding: 1px 1px;
    align-self: center;
    }
</style>

@code {
    #nullable enable
    private IScrollListener? _scrollListener;
    private List<Message> messages = new();
    private Message? _selectedMessage;
    private MudMenu? _contextMenu;

    private bool Hovering => _paperHovering || _bubbleHovering;
    private bool _bubbleHovering;
    private bool _paperHovering;

    private Message? _hoverMessage;

    protected override void OnInitialized()
    {
        _scrollListener = ScrollListenerFactory.Create(null);
        _scrollListener.OnScroll += OnScrollAsync;
        messages.Add(new Message(""Obi-Wan Kenobi"", ""OK"", ""You were my brother Anakin."", ""2 hours ago""));
        messages.Add(new Message(""Obi-Wan Kenobi"", ""OK"", ""I loved you."", ""2 hours ago""));
        messages.Add(new Message(""Anakin Skywalker"", ""AS"", ""I'm sorry."", ""1 hour ago""));
    }

    private void OnScrollAsync(object? sender, ScrollEventArgs e)
    {
        HoverStop(""scroll"");
    }

    public void Dispose()
    {
        if (_scrollListener != null)
            _scrollListener.OnScroll -= OnScrollAsync;
    }

    private void HoverStart(MouseEventArgs args, Message message)
    {
        _bubbleHovering = true;
        _hoverMessage = message;
    }

    private void HoverStop(string typeOfStop)
    {
        try
        {
            switch (typeOfStop)
            {
                case ""paper"":
                    _paperHovering = false;
                    break;
                case ""bubble"":
                    _bubbleHovering = false;
                    break;
                case ""scroll"":
                    _paperHovering = false;
                    _bubbleHovering = false;
                    StateHasChanged();
                    break;
                default:
                    break;
            }
        }
        catch { }
    }

    private void MessageAction(string actionType)
    {
        switch (actionType)
        {
            case ""liked"":
                _hoverMessage!.Likes++;
                break;
            case ""cried"":
                _hoverMessage!.Cries++;
                break;
            case ""angered"":
                _hoverMessage!.Angers++;
                break;
            default:
                break;
        }
    }

    private void Reply()
    {
        if (_hoverMessage is null)
        {
            Snackbar.Add(""No message available!"", Severity.Warning);
        }
        else
        {
            Snackbar.Add($""Simulate Reply: To: {_hoverMessage.Name}"", Severity.Success);
        }
    }

    private void ShowHiddenInfo()
    {
        if (_selectedMessage is not null)
        {
            Snackbar.Add($""Hidden information for {_selectedMessage.Name}"", Severity.Info);
        }
    }

    private void BanUser()
    {
        if (_selectedMessage is not null)
        {
            Snackbar.Add($""{_selectedMessage.Name} has been banned!"", Severity.Error);
        }
    }

    private async Task RightClickMessage(MouseEventArgs args, Message message)
    {
        _selectedMessage = message;
        if (_contextMenu != null)
            await _contextMenu.OpenMenuAsync(args);
    }

    private async Task ClickMessage(MouseEventArgs args, Message message)
    {
        _selectedMessage = message;
        Snackbar.Add(""Message clicked: "" + message.Text, Severity.Info);
        await Task.CompletedTask;
    }

    private record Message(
        string Name,
        string Initials,
        string Text,
        string Time,
        int Likes = 0,
        int Cries = 0,
        int Angers = 0)
    {
        public int Likes { get; set; } = Likes;
        public int Cries { get; set; } = Cries;
        public int Angers { get; set; } = Angers;
    }

}";

        public const string CheckboxBasicExample = @"<MudCheckBox @bind-Value=""Basic_CheckBox1""></MudCheckBox>
<MudCheckBox @bind-Value=""Basic_CheckBox2"" Color=""Color.Primary""></MudCheckBox>
<MudCheckBox @bind-Value=""Basic_CheckBox3"" Color=""Color.Secondary""></MudCheckBox>
<MudCheckBox @bind-Value=""Basic_CheckBox4"" Disabled=""true""></MudCheckBox>

@code {
    public bool Basic_CheckBox1 { get; set; } = true;
    public bool Basic_CheckBox2 { get; set; } = false;
    public bool Basic_CheckBox3 { get; set; } = false;
    public bool Basic_CheckBox4 { get; set; } = true;
}";

        public const string CheckboxColorExample = @"<MudCheckBox @bind-Value=""Basic_CheckBox1"" UncheckedColor=""Color.Error""></MudCheckBox>
<MudCheckBox @bind-Value=""Basic_CheckBox2"" Color=""Color.Primary"" UncheckedColor=""Color.Default""></MudCheckBox>
<MudCheckBox @bind-Value=""Basic_CheckBox3"" Color=""Color.Secondary"" UncheckedColor=""Color.Default""></MudCheckBox>
<MudCheckBox @bind-Value=""Basic_CheckBox4"" Disabled=""true"" UncheckedColor=""Color.Success""></MudCheckBox>

@code {
    public bool Basic_CheckBox1 { get; set; } = true;
    public bool Basic_CheckBox2 { get; set; } = false;
    public bool Basic_CheckBox3 { get; set; } = false;
    public bool Basic_CheckBox4 { get; set; } = true;
}";

        public const string CheckboxContentPlacementExample = @"<MudGrid>
    <MudItem xs=""12"" md=""1"">
        <MudRadioGroup @bind-Value=""Placement"">
            <MudStack AlignItems=""AlignItems.Start"" Justify=""Justify.FlexStart"">
                <MudRadio Color=""Color.Primary"" Value=""@(Placement.Top)"">Top</MudRadio>
                <MudRadio Color=""Color.Primary"" Value=""@(Placement.Bottom)"">Bottom</MudRadio>
                <MudRadio Color=""Color.Primary"" Value=""@(Placement.Start)"">Start</MudRadio>
                <MudRadio Color=""Color.Primary"" Value=""@(Placement.End)"">End</MudRadio>
                <MudRadio Color=""Color.Primary"" Value=""@(Placement.Left)"">Left</MudRadio>
                <MudRadio Color=""Color.Primary"" Value=""@(Placement.Right)"">Right</MudRadio>
            </MudStack>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""9"" Class=""d-flex justify-center align-center my-auto"">
        <MudCheckBox T=""string"" Label=""Test"" LabelPlacement=""@Placement"" Color=""Color.Secondary"" />
    </MudItem>
    <MudItem xs=""12"" md=""2"" Style=""width:100%""></MudItem>
</MudGrid>

@code {
    public Placement Placement { get; set; } = Placement.Right;
}";

        public const string CheckboxConversionExample = @"<MudCheckBox @bind-Value=""boolean"">bool: @boolean</MudCheckBox>
<MudCheckBox @bind-Value=""nullable"" Color=""Color.Primary"">bool?: @nullable</MudCheckBox>
<MudCheckBox @bind-Value=""integer"" Color=""Color.Secondary"">int: @integer</MudCheckBox>
<MudCheckBox @bind-Value=""str"" Color=""Color.Tertiary"">string: ""@(str)""</MudCheckBox>
<MudCheckBox @bind-Value=""customstr"" Converter=""@(new CustomStringToBoolConverter())""> custom string: ""@(customstr)""</MudCheckBox>
<MudCheckBox @bind-Value=""obj"" Converter=""@(new ObjectToBoolConverter())"">boxed bool: ""@(obj.ToString())""</MudCheckBox>

@code{ 
    public bool boolean { get; set; } = true;
    public bool? nullable { get; set; } = true;
    public int integer { get; set; } = 1;
    public string str { get; set; } = ""on"";
    public string customstr { get; set; } = CustomStringToBoolConverter.NullString;
    public object obj { get; set; } = false;

    public class ObjectToBoolConverter : BoolConverter<object>
    {
        public ObjectToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        private object OnGet(bool? value) => value == true;

        private bool? OnSet(object arg)
        {
            if (arg == null)
                return null;
            try
            {
                if (arg is bool)
                    return (bool)arg;
                else if (arg is bool?)
                    return (bool?)arg;
                else
                {
                    UpdateSetError(""Unable to convert to bool? from type object"");
                    return null;
                }
            }
            catch (FormatException e)
            {
                UpdateSetError(""Conversion error: "" + e.Message);
                return null;
            }
        }
    }

    public class CustomStringToBoolConverter : BoolConverter<string>
    {
        public CustomStringToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        public const string TrueString = ""Yes, please"";
        public const string FalseString = ""No, thanks"";
        public const string NullString = ""I don't know"";

        private string OnGet(bool? value) => value == null ? NullString : (value == true ? TrueString : FalseString);

        private bool? OnSet(string arg)
        {
            try
            {
                if (arg == TrueString)
                    return true;
                if (arg == FalseString)
                    return false;
                return null;
            }
            catch (FormatException e)
            {
                UpdateSetError(""Conversion error: "" + e.Message);
                return null;
            }
        }
    } }";

        public const string CheckboxDenseExample = @"<MudCheckBox @bind-Value=""Dense_CheckBox"" Dense=""true"" Color=""Color.Success""></MudCheckBox>
<MudCheckBox @bind-Value=""Dense_CheckBox"" Dense=""false"" Color=""Color.Primary""></MudCheckBox>

@code {
    public bool Dense_CheckBox { get; set; } = true;
}";

        public const string CheckboxIconExample = @"<MudCheckBox @bind-Value=""CheckBox1"" Color=""Color.Secondary"" CheckedIcon=""@Icons.Material.Filled.Favorite"" UncheckedIcon=""@Icons.Material.Filled.FavoriteBorder""></MudCheckBox>
<MudCheckBox @bind-Value=""CheckBox2"" Color=""Color.Tertiary"" CheckedIcon=""@Icons.Material.Filled.Bookmark"" UncheckedIcon=""@Icons.Material.Filled.BookmarkBorder""></MudCheckBox>
<MudCheckBox @bind-Value=""CheckBox3"" Color=""Color.Warning"" CheckedIcon=""@Icons.Material.Filled.Star"" UncheckedIcon=""@Icons.Material.Filled.StarOutline""></MudCheckBox>



@code {
    public bool CheckBox1 { get; set; } = true;
    public bool CheckBox2 { get; set; } = false;
    public bool CheckBox3 { get; set; } = false;
}";

        public const string CheckboxIndeterminateExample = @"<MudCheckBox @bind-Value=""value"" Color=""@Color.Primary"">
    Value: @(value == null ? ""null"" : value.ToString())
</MudCheckBox>
<MudButton OnClick=""@(()=>value=null)"">Reset</MudButton>
<MudCheckBox @bind-Value=""anotherValue"" Color=""@Color.Secondary"" TriState=""true"">Checkbox with TriState. Value: @(anotherValue == null ? ""null"" : anotherValue.ToString())</MudCheckBox>

@code {
    public bool? value { get; set; } = null;
    public bool? anotherValue { get; set;} = null;
}";

        public const string CheckboxKeyboardNavigationExample = @"<MudCheckBox @bind-Value=""CheckBox1"" Color=""Color.Primary"" Label=""Basic""></MudCheckBox>
<MudCheckBox @bind-Value=""CheckBox2"" Color=""Color.Primary"" Label=""TriState"" TriState=""true""></MudCheckBox>

@code {
    public bool CheckBox1 { get; set; } = true;
    public bool? CheckBox2 { get; set; } = null;
}";

        public const string CheckboxLabelExample = @"<MudCheckBox @bind-Value=""Label_CheckBox1"" Label=""Default""></MudCheckBox>
<MudCheckBox @bind-Value=""Label_CheckBox2"" Label=""Primary"" Color=""Color.Primary""></MudCheckBox>
<MudCheckBox @bind-Value=""Label_CheckBox3"" Label=""Secondary"" LabelPlacement=""Placement.Start"" Color=""Color.Secondary""></MudCheckBox>
<MudCheckBox @bind-Value=""Label_CheckBox1"" Disabled=""true"" Label=""Disabled"" LabelPlacement=""Placement.Start""></MudCheckBox>

@code {
    public bool Label_CheckBox1 { get; set; } = true;
    public bool Label_CheckBox2 { get; set; } = false;
    public bool Label_CheckBox3 { get; set; } = false;
}";

        public const string CheckboxReadOnlyExample = @"<div>
    <MudCheckBox ReadOnly=""@ReadOnly"" @bind-Value=""Label_Checkbox1"" Label=""@(ReadOnly ? ""ReadOnly Checkbox 1"" : ""EditMode Checkbox 1"")""/>
    <MudCheckBox ReadOnly=""@ReadOnly"" @bind-Value=""Label_Checkbox2"" Label=""@(ReadOnly ? ""ReadOnly Checkbox 2"" : ""EditMode Checkbox 2"")""/>
</div>
<MudSelect  @bind-Value=""Label_Checkbox1"" Label=""Checkbox 1"">
    <MudSelectItem Value=""@(false)"">False</MudSelectItem>
    <MudSelectItem Value=""@(true)"">True</MudSelectItem>
</MudSelect>
<MudSelect @bind-Value=""Label_Checkbox2"" Label=""Checkbox 2"">
    <MudSelectItem Value=""@(false)"">False</MudSelectItem>
    <MudSelectItem Value=""@(true)"">True</MudSelectItem>
</MudSelect>

<MudSwitch @bind-Value=""ReadOnly"" Label=""@(ReadOnly ? ""ReadOnly Mode"" : ""Edit Mode"")"" Color=""Color.Primary""/>

@code {
    public bool Label_Checkbox1 { get; set; } = true;
    public bool Label_Checkbox2 { get; set; } = false;
    public bool ReadOnly { get; set; } = true;
}";

        public const string CheckboxSizeExample = @"<MudCheckBox @bind-Value=""Size_CheckBox1"" Size=""Size.Small"" Color=""Color.Primary""></MudCheckBox>
<MudCheckBox @bind-Value=""Size_CheckBox2"" Size=""Size.Medium"" Color=""Color.Secondary""></MudCheckBox>
<MudCheckBox @bind-Value=""Size_CheckBox3"" Size=""Size.Large"" Color=""Color.Tertiary""></MudCheckBox>
@code {
    public bool Size_CheckBox1 { get; set; } = true;
    public bool Size_CheckBox2 { get; set; } = false;
    public bool Size_CheckBox3 { get; set; } = false;
}";

        public const string ChipAvatarExample = @"<MudChip T=""string"">
    <AvatarContent>
        <MudAvatar>
            <MudImage Src=""images/toiletvisit.jpg""></MudImage>
        </MudAvatar>
    </AvatarContent>
    <ChildContent>Avatar</ChildContent>
</MudChip>

<MudChip T=""string"">
    <AvatarContent>
        <MudAvatar>MK</MudAvatar>
    </AvatarContent>
    <ChildContent>Avatar</ChildContent>
</MudChip>";

        public const string ChipBasicExample = @"<MudChip T=""string"">Default</MudChip>
<MudChip T=""string"" Color=""Color.Primary"">Primary</MudChip>
<MudChip T=""string"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip T=""string"" Color=""Color.Info"">Info</MudChip>
<MudChip T=""string"" Color=""Color.Success"">Success</MudChip>
<MudChip T=""string"" Color=""Color.Warning"">Warning</MudChip>
<MudChip T=""string"" Color=""Color.Error"">Error</MudChip>
<MudChip T=""string"" Color=""Color.Dark"">Dark</MudChip>
<MudDivider />
<MudChip T=""string"" Disabled=""true"">Default</MudChip>
<MudChip T=""string"" Disabled=""true"" Color=""Color.Primary"">Primary</MudChip>
<MudChip T=""string"" Disabled=""true"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip T=""string"" Disabled=""true"" Color=""Color.Info"">Info</MudChip>
<MudChip T=""string"" Disabled=""true"" Color=""Color.Success"">Success</MudChip>
<MudChip T=""string"" Disabled=""true"" Color=""Color.Warning"">Warning</MudChip>
<MudChip T=""string"" Disabled=""true"" Color=""Color.Error"">Error</MudChip>
<MudChip T=""string"" Disabled=""true"" Color=""Color.Dark"">Dark</MudChip>";

        public const string ChipClickableExample = @"<MudChip T=""string"" OnClick=""OnChipClicked"" Color=""Color.Default"">Clicked @ClickCount times</MudChip>

@code {
    private int ClickCount { get; set; }

    private void OnChipClicked()
    {
        ClickCount++;
    }
}";

        public const string ChipClosableExample = @"<MudChip T=""string"" Color=""Color.Default"" OnClose=""Closed"">Closable</MudChip>
<MudChip T=""string"" Color=""Color.Error"" OnClose=""Closed"">Closable</MudChip>
<MudChip T=""string"" Color=""Color.Primary"" OnClose=""Closed"" CloseIcon=""@Icons.Material.Filled.AlarmAdd"">Closable</MudChip>
<MudChip T=""string"" Color=""Color.Success"" OnClose=""Closed"" CloseIcon=""@Icons.Material.Filled.AlarmOn"">Closable</MudChip>

@code {
    void Closed(MudChip<string> chip) {
        // react to chip closed
    }
}";

        public const string ChipIconExample = @"<MudChip T=""string"" Icon=""@Icons.Material.Filled.Dangerous"" IconColor=""Color.Error"">Extensions</MudChip>
<MudChip T=""string"" Icon=""@Icons.Material.Filled.Extension"" Color=""Color.Dark"">Extensions</MudChip>
<MudChip T=""string"" Icon=""@Icons.Material.Filled.Person"" Color=""Color.Primary"">Account</MudChip>
<MudChip T=""string"" Icon=""@Icons.Material.Filled.FlightTakeoff"" Color=""Color.Secondary"">Your flight times</MudChip>
<MudChip T=""string"" Icon=""@Icons.Material.Filled.VerifiedUser"" Color=""Color.Info"">Verified User</MudChip>";

        public const string ChipLabelExample = @"<MudChip T=""string"" Label=""true"">Default</MudChip>
<MudChip T=""string"" Icon=""@Icons.Custom.Brands.MudBlazor"" Label=""true"" Color=""Color.Primary"">MudBlazor</MudChip>
<MudChip T=""string"" Icon=""@Icons.Custom.Brands.Twitter"" Label=""true"" Color=""Color.Info"" OnClose=""CloseChip"">New Tweets</MudChip>
<MudChip T=""string"" Icon=""@Icons.Custom.Uncategorized.Radioactive"" Label=""true"" Color=""Color.Warning"" Style=""color:black;"">Radioactive Areas</MudChip>

@code {
    void CloseChip()
    {
        // Code..
    }
}";

        public const string ChipLinkExample = @"<MudChip T=""string""
         Href=""https://github.com/MudBlazor/MudBlazor""
         Target=""_blank""
         Variant=""Variant.Filled""
         Icon=""@Icons.Custom.Brands.GitHub""
         Disabled=""_disabled"">
    GitHub
</MudChip>

<MudChip T=""string""
         Href=""https://github.com/MudBlazor/MudBlazor""
         Target=""_blank""
         Variant=""Variant.Filled""
         Icon=""@Icons.Custom.Brands.GitHub""
         Disabled=""_disabled"">
    With Icon
</MudChip>

<MudChip T=""string""
         Href=""https://github.com/MudBlazor/MudBlazor""
         Target=""_blank""
         Variant=""Variant.Filled""
         Icon=""@Icons.Custom.Brands.GitHub""
         Disabled=""_disabled"">
    <AvatarContent>
        <MudAvatar>GH</MudAvatar>
    </AvatarContent>
    <ChildContent>With Avatar</ChildContent>
</MudChip>

<br />

<MudSwitch Color=""Color.Primary"" @bind-Value=""_disabled"" Label=""Disable"" />

@code {
    bool _disabled = false;
}";

        public const string ChipLinkRelExample = @"<MudChip T=""string""
         Href=""https://github.com/MudBlazor/MudBlazor""
         Rel=""nofollow""
         Icon=""@Icons.Custom.Brands.GitHub""
         Color=""Color.Secondary"">
    Link with rel=""nofollow""
</MudChip>

<MudChip T=""string""
         Href=""https://github.com/MudBlazor/MudBlazor""
         Target=""_blank""
         Rel=""nofollow noopener""
         Icon=""@Icons.Custom.Brands.GitHub""
         Color=""Color.Tertiary"">
    Link with rel=""nofollow noopener""
</MudChip>";

        public const string ChipOutlinedExample = @"<MudChip T=""string"" Variant=""Variant.Outlined"">Default</MudChip>
<MudChip T=""string"" Variant=""Variant.Outlined"" Color=""Color.Primary"">Primary</MudChip>
<MudChip T=""string"" Variant=""Variant.Outlined"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip T=""string"" Variant=""Variant.Outlined"" Color=""Color.Info"">Info</MudChip>
<MudChip T=""string"" Variant=""Variant.Outlined"" Color=""Color.Success"">Success</MudChip>
<MudChip T=""string"" Variant=""Variant.Outlined"" Color=""Color.Warning"">Warning</MudChip>
<MudChip T=""string"" Variant=""Variant.Outlined"" Color=""Color.Error"">Error</MudChip>
<MudChip T=""string"" Variant=""Variant.Outlined"" Color=""Color.Dark"">Dark</MudChip>
<MudDivider />
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Outlined"">Default</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Primary"">Primary</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Info"">Info</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Success"">Success</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Warning"">Warning</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Error"">Error</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Outlined"" Color=""Color.Dark"">Dark</MudChip>";

        public const string ChipSizeExample = @"<MudChip T=""string"" Size=""Size.Small"">Small</MudChip>
<MudChip T=""string"" Size=""Size.Medium"">Medium</MudChip>
<MudChip T=""string"" Size=""Size.Large"">Large</MudChip>";

        public const string ChipTextExample = @"<MudChip T=""string"" Variant=""Variant.Text"">Default</MudChip>
<MudChip T=""string"" Variant=""Variant.Text"" Color=""Color.Primary"">Primary</MudChip>
<MudChip T=""string"" Variant=""Variant.Text"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip T=""string"" Variant=""Variant.Text"" Color=""Color.Info"">Info</MudChip>
<MudChip T=""string"" Variant=""Variant.Text"" Color=""Color.Success"">Success</MudChip>
<MudChip T=""string"" Variant=""Variant.Text"" Color=""Color.Warning"">Warning</MudChip>
<MudChip T=""string"" Variant=""Variant.Text"" Color=""Color.Error"">Error</MudChip>
<MudChip T=""string"" Variant=""Variant.Text"" Color=""Color.Dark"">Dark</MudChip>
<MudDivider />
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Text"">Default</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Primary"">Primary</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Secondary"">Secondary</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Info"">Info</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Success"">Success</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Warning"">Warning</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Error"">Error</MudChip>
<MudChip T=""string"" Disabled=""true"" Variant=""Variant.Text"" Color=""Color.Dark"">Dark</MudChip>";

        public const string ChipSetAddRemoveExample = @"<MudChipSet T=""string"" AllClosable OnClose=""Closed"">
    @foreach (var value in _values)
    {
        <MudChip Text=""@value""></MudChip>
    }
</MudChipSet>

<div class=""d-flex flex-column align-center"">
        <MudButton StartIcon=""@Icons.Material.Filled.Add"" OnClick=""Add"">Add chip</MudButton>
</div>


@code
{
    private int _i = 1;
    private List<string> _values = new();
    public void Add() => _values.Add(""Value "" + (_i++));
    public void Closed(MudChip<string> chip) => _values.Remove(chip.Text);
}";

        public const string ChipSetBasicExample = @"<MudChipSet T=""Color"" @bind-SelectedValue=""SelectedColor"" CheckMark SelectionMode=""@SelectionMode"">
    <MudChip Text=""purple"" Color=""Color.Primary"" Value=""@Color.Primary"">Primary</MudChip>
    <MudChip Text=""pink"" Color=""Color.Secondary"" Value=""@Color.Secondary"">Secondary</MudChip>
    <MudChip Text=""blue"" Color=""Color.Info"" Value=""@Color.Info"">Info</MudChip>
    <MudChip Text=""green"" Color=""Color.Success"" Value=""@Color.Success"">Success</MudChip>
    <MudChip Text=""orange"" Color=""Color.Warning"" Value=""@Color.Warning"">Warning</MudChip>
    <MudChip Text=""red"" Color=""Color.Error"" Value=""@Color.Error"">Error</MudChip>
    <MudChip Text=""black"" Color=""Color.Dark"" Value=""@Color.Dark"">Dark</MudChip>
</MudChipSet>

<div class=""d-flex flex-column align-center"">
    @if (SelectedColor != default) {
        <MudText>You selected the <MudText Color=""@SelectedColor"" Inline>@SelectedColor.ToDescriptionString()</MudText> chip.</MudText>
    }
    else {
        <MudText>Nothing selected.</MudText>
    }
    <MudRadioGroup @bind-Value=""SelectionMode"">
        <MudRadio Value=""@SelectionMode.SingleSelection"" Color=""Color.Primary"">SingleSelection</MudRadio>
        <MudRadio Value=""@SelectionMode.ToggleSelection"" Color=""Color.Primary"">ToggleSelection</MudRadio>
    </MudRadioGroup>
</div>

@code
{
    public SelectionMode SelectionMode = SelectionMode.SingleSelection;
    public Color SelectedColor;
}";

        public const string ChipSetChipBindingExample = @"<MudChipSet @bind-SelectedValues=""_selected"" SelectionMode=""SelectionMode.MultiSelection"">
    @for (int i = 0; i < _included.Length; i++) 
    {
        var index = i;
        <MudChip Value=""@_ingredients[index]"" @bind-Selected=""_included[index]"" Color=""Color.Primary"" Variant=""@Variant.Text"" />
    }
</MudChipSet>

<div class=""d-flex flex-column align-center"">
    @if (_selected is { Count: > 0 }) 
    {
        <MudText>Your special coctail recipe: <b>@string.Join("", "", _selected.OrderBy(x => x))</b></MudText>
    }
    else 
    {
        <MudText>Add ingredients to your coctail.</MudText>
    }
    <div class=""d-flex"">
        @for (int i = 0; i < _included.Length; i++) 
        {
            var index = i;
            <MudCheckBox Color=""Color.Secondary"" @bind-Value=""_included[index]"">@_ingredients[index]</MudCheckBox>
        }
    </div>
</div>

@code
{
    private string[] _ingredients = [""Vodka"", ""Tomato Juice"", ""Olive"", ""Peppermint"", ""Vermouth"", ""Coconut Milk"", ""Port Wine""];
    private bool[] _included = new bool[7];
    private IReadOnlyCollection<string> _selected;

}";

        public const string ChipSetDefaultChipsExample = @"<MudChipSet @bind-SelectedValues=""_selected"" SelectionMode=""SelectionMode.MultiSelection"" CheckMark>
    <MudChip Value=""@(""Milk"")"" />
    <MudChip Value=""@(""Eggs"")"" />
    <MudChip Value=""@(""Soap"")"" />
    <MudChip Value=""@(""Cornflakes"")"" />
    <MudChip Value=""@(""Salad"")"" />
    <MudChip Value=""@(""Apples"")"" />
    <MudChip Value=""@(""Red wine"")"" />
</MudChipSet>

<div class=""d-flex justify-center"">
    @if (_selected is { Count: > 0 })
    {
        <MudText>You selected @string.Join("", "", _selected).</MudText>
    }
    else
    {
        <MudText>Nothing selected.</MudText>
    }
</div>

@code
{
    private IReadOnlyCollection<string> _selected = [""Milk"", ""Cornflakes""];
}";

        public const string ChipSetForKeyboardNavigationExample = @"<MudStack Justify=""@Justify.Center""
          Class=""mud-width-full"">
    <MudChipSet T=""string""
                AllClosable=""@true""
                CheckMark=""@true""
                SelectionMode=""@SelectionMode.MultiSelection""
                OnClose=""@OnChipClosed"">
        @for (var i = 0; i < _chips.Count; i++)
        {
            var localIndex = i;
            <MudChip Value=""@_chips[localIndex]""
                     Color=""@((Color)(localIndex % _numberOfColors))"" />
        }
    </MudChipSet>
    <MudButton OnClick=""@AddChip""
               Variant=""@Variant.Filled"">
        Add chip
    </MudButton>
</MudStack>

<MudDivider />

<MudStack>
    <MudChip T=""string""
             OnClick=""@OpenDialogAsync""
             Text=""Click to open a dialog"" />
</MudStack>

@code {
    [Inject]
    private IDialogService DialogService { get; set; }

    private readonly List<string> _chips = [""Chip 1"", ""Chip 2"", ""Chip 3""];
    private int _chipCounter = 3;
    private int _numberOfColors = Enum.GetValues(typeof(Color)).Length;

    private void AddChip()
        => _chips.Add($""Chip {++_chipCounter}"");

    private void OnChipClosed(MudChip<string> chip)
        => _chips.Remove(chip.Value);

    private Task OpenDialogAsync()
        => DialogService.ShowMessageBox(""Dialog"", ""This is a dialog"");
}";

        public const string ChipSetMultiselectionExample = @"<MudChipSet @bind-SelectedValues=""_selected"" SelectionMode=""SelectionMode.MultiSelection"" CheckMark=""_checkMark"" Variant=""Variant.Text"" Color=""Color.Info"">
    <MudChip Value=""@(""Milk"")"" />
    <MudChip Value=""@(""Eggs"")"" />
    <MudChip Value=""@(""Soap"")"" />
    <MudChip Value=""@(""Corn flakes"")"" />
    <MudChip Value=""@(""Salad"")"" />
    <MudChip Value=""@(""Apples"")"" />
    <MudChip Value=""@(""Red wine"")"" />
</MudChipSet>

<div class=""d-flex flex-column align-center"">
    @if (_selected is { Count: > 0 }) {
        <MudText>You selected @string.Join("", "", _selected.OrderBy(x => x))</MudText>
    }
    else {
        <MudText>Nothing selected.</MudText>
    }
    <MudCheckBox @bind-Value=""_checkMark"">Check marks</MudCheckBox>
</div>

@code
{
    private bool _checkMark = true;
    private IReadOnlyCollection<string> _selected;
}";

        public const string ChipSetSelectedColorExample = @"<MudChipSet T=""string"" SelectionMode=""SelectionMode.MultiSelection"" CheckMark=""_checkMark"">
    <MudChip Text=""Brunsås"" Variant=""Variant.Text"" Color=""Color.Default"" SelectedColor=""Color.Primary""></MudChip>
    <MudChip Text=""Spotted Dick"" Variant=""Variant.Text"" Color=""Color.Primary"" SelectedColor=""Color.Secondary""></MudChip>
    <MudChip Text=""Sushi"" Variant=""Variant.Text"" Color=""Color.Dark"" SelectedColor=""Color.Warning""></MudChip>
    <MudChip Text=""Schnitzel"" Variant=""Variant.Text"" Color=""Color.Info"" SelectedColor=""Color.Error""></MudChip>
    <MudChip Text=""Hamburger"" Variant=""Variant.Text"" Color=""Color.Success"" SelectedColor=""Color.Error""></MudChip>
</MudChipSet>
<MudChipSet T=""string"" SelectionMode=""SelectionMode.MultiSelection"" CheckMark=""_checkMark"">
    <MudChip Text=""Brunsås"" Variant=""Variant.Outlined"" Color=""Color.Default"" SelectedColor=""Color.Primary""></MudChip>
    <MudChip Text=""Spotted Dick"" Variant=""Variant.Outlined"" Color=""Color.Primary"" SelectedColor=""Color.Secondary""></MudChip>
    <MudChip Text=""Sushi"" Variant=""Variant.Outlined"" Color=""Color.Dark"" SelectedColor=""Color.Warning""></MudChip>
    <MudChip Text=""Schnitzel"" Variant=""Variant.Outlined"" Color=""Color.Info"" SelectedColor=""Color.Error""></MudChip>
    <MudChip Text=""Hamburger"" Variant=""Variant.Outlined"" Color=""Color.Success"" SelectedColor=""Color.Error""></MudChip>
</MudChipSet>
<MudChipSet T=""string"" SelectionMode=""SelectionMode.MultiSelection"" CheckMark=""_checkMark"">
    <MudChip Text=""Brunsås"" Variant=""Variant.Filled"" Color=""Color.Default"" SelectedColor=""Color.Primary""></MudChip>
    <MudChip Text=""Spotted Dick"" Variant=""Variant.Filled"" Color=""Color.Primary"" SelectedColor=""Color.Secondary""></MudChip>
    <MudChip Text=""Sushi"" Variant=""Variant.Filled"" Color=""Color.Dark"" SelectedColor=""Color.Warning""></MudChip>
    <MudChip Text=""Schnitzel"" Variant=""Variant.Filled"" Color=""Color.Info"" SelectedColor=""Color.Error""></MudChip>
    <MudChip Text=""Hamburger"" Variant=""Variant.Filled"" Color=""Color.Success"" SelectedColor=""Color.Error""></MudChip>
</MudChipSet>
<MudCheckBox @bind-Value=""_checkMark"">Check marks</MudCheckBox>

@code
{
    private bool _checkMark = true;
}";

        public const string ChipSetVariantsExample = @"<MudChipSet T=""string"" SelectionMode=""SelectionMode.MultiSelection"" CheckMark=""_checkMark"">
    <MudChip Text=""gray"" Variant=""Variant.Text"" Color=""Color.Default"">Default</MudChip>
    <MudChip Text=""purple"" Variant=""Variant.Text"" Color=""Color.Primary"">Primary</MudChip>
    <MudChip Text=""pink"" Variant=""Variant.Text"" Color=""Color.Secondary"">Secondary</MudChip>
    <MudChip Text=""blue"" Variant=""Variant.Text"" Color=""Color.Info"">Info</MudChip>
    <MudChip Text=""green"" Variant=""Variant.Text"" Color=""Color.Success"">Success</MudChip>
    <MudChip Text=""orange"" Variant=""Variant.Text"" Color=""Color.Warning"">Warning</MudChip>
    <MudChip Text=""red"" Variant=""Variant.Text"" Color=""Color.Error"">Error</MudChip>
    <MudChip Text=""black"" Variant=""Variant.Text"" Color=""Color.Dark"">Dark</MudChip>
</MudChipSet>
<MudChipSet T=""string"" SelectionMode=""SelectionMode.MultiSelection"" CheckMark=""_checkMark"">
    <MudChip Text=""gray"" Variant=""Variant.Outlined"" Color=""Color.Default"">Default</MudChip>
    <MudChip Text=""purple"" Variant=""Variant.Outlined"" Color=""Color.Primary"">Primary</MudChip>
    <MudChip Text=""pink"" Variant=""Variant.Outlined"" Color=""Color.Secondary"">Secondary</MudChip>
    <MudChip Text=""blue"" Variant=""Variant.Outlined"" Color=""Color.Info"">Info</MudChip>
    <MudChip Text=""green"" Variant=""Variant.Outlined"" Color=""Color.Success"">Success</MudChip>
    <MudChip Text=""orange"" Variant=""Variant.Outlined"" Color=""Color.Warning"">Warning</MudChip>
    <MudChip Text=""red"" Variant=""Variant.Outlined"" Color=""Color.Error"">Error</MudChip>
    <MudChip Text=""black"" Variant=""Variant.Outlined"" Color=""Color.Dark"">Dark</MudChip>
</MudChipSet>
<MudChipSet T=""string"" SelectionMode=""SelectionMode.MultiSelection"" CheckMark=""_checkMark"">
    <MudChip Text=""gray"" Variant=""Variant.Filled"" Color=""Color.Default"">Default</MudChip>
    <MudChip Text=""purple"" Variant=""Variant.Filled"" Color=""Color.Primary"">Primary</MudChip>
    <MudChip Text=""pink"" Variant=""Variant.Filled"" Color=""Color.Secondary"">Secondary</MudChip>
    <MudChip Text=""blue"" Variant=""Variant.Filled"" Color=""Color.Info"">Info</MudChip>
    <MudChip Text=""green"" Variant=""Variant.Filled"" Color=""Color.Success"">Success</MudChip>
    <MudChip Text=""orange"" Variant=""Variant.Filled"" Color=""Color.Warning"">Warning</MudChip>
    <MudChip Text=""red"" Variant=""Variant.Filled"" Color=""Color.Error"">Error</MudChip>
    <MudChip Text=""black"" Variant=""Variant.Filled"" Color=""Color.Dark"">Dark</MudChip>
</MudChipSet>
<MudCheckBox @bind-Value=""_checkMark"">Check marks</MudCheckBox>


@code
{
    private bool _checkMark = true;
}";

        public const string CollapseSimpleExample = @"<MudPaper Class=""pa-4"">
    <MudStack Spacing=""2"">
        <MudButton OnClick=""OnExpandCollapseClick"">@(_expanded ? ""Collapse"" : ""Expand"")</MudButton>
        <MudDivider />
        <MudCollapse Expanded=""_expanded"">
                This content is collapsible.
        </MudCollapse>
    </MudStack>
</MudPaper>

@code {
    bool _expanded = true;

    private void OnExpandCollapseClick() {
        _expanded = !_expanded;
    }
}";

        public const string ColorPickerAlphaExample = @"<MudColorPicker Label=""Disabled Alpha"" ShowAlpha=""false"" />";

        public const string ColorPickerBasicExample = @"@using MudBlazor.Utilities

<MudColorPicker Label=""Basic Color Picker"" @bind-Text=""_colorValue"" Style=""@($""color: {_colorValue};"")"" Placeholder=""Select Color"" />

@code {
    private string _colorValue;
}";

        public const string ColorPickerColorModeExample = @"<MudColorPicker Label=""HSL"" ColorPickerMode=""ColorPickerMode.HSL"" ShowModeSwitch=""false"" />";

        public const string ColorPickerDialogExample = @"<MudColorPicker ShowToolbar=""true"" Label=""Dialog Picker"" PickerVariant=""PickerVariant.Dialog"" />";

        public const string ColorPickerDragExample = @"<MudStack>
    <MudColorPicker ThrottleInterval=""Interval"" DragEffect=""@Draggable"" PickerVariant=""PickerVariant.Static"" />

    <MudNumericField T=""int"" @bind-Value=""Interval"" Label=""Throttle interval"" />

    <MudCheckBox T=""bool"" @bind-Value=""Draggable"" Label=""Allow dragging the pointer"" />
</MudStack>

@code {
    public int Interval { get; set; } = 100;
    public bool Draggable { get; set; } = true;
}";

        public const string ColorPickerElevationExample = @"<MudColorPicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""1""/>
<MudColorPicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""12"" />";

        public const string ColorPickerExampleUsageExample = @"@using MudBlazor.Utilities


<MudPaper Elevation=""0"" Class=""mud-width-full mud-height-full d-flex justify-center align-end pb-8"" MinHeight=""600px"" Style=""@($""background-image:linear-gradient({_degrees}deg, {_gradientPrimary.ToString(MudColorOutputFormats.RGBA)} 0%, {_gradientSecondary.ToString(MudColorOutputFormats.RGBA)} 100%);"")"">
    <MudPaper Class=""d-flex"">
        <MudColorPicker Rounded=""true"" Class=""rounded-tr-0"" PickerVariant=""PickerVariant.Static"" ShowModeSwitch=""false"" Value=""_pickerColor"" ValueChanged=""UpdateSelectedColor"" />
        <div class=""pa-2"">
            <MudText Typo=""Typo.h6"" Class=""mx-1"">Gradient Colors</MudText>

            <MudList T=""string"" SelectedValueChanged=""ChangeSelectedColor"">
                <MudListItem Text=""1"">
                    <div class=""mud-width-full rounded py-4"" style=""@($""background-color:{_gradientPrimary};"")""></div>
                </MudListItem>
                <MudListItem Text=""2"">
                    <div class=""mud-width-full rounded py-4"" style=""@($""background-color:{_gradientSecondary};"")""></div>
                </MudListItem>
            </MudList>
            <MudSlider Min=""0"" Max=""360"" Step=""1"" @bind-Value=""_degrees"" Class=""px-2"">Degrees</MudSlider>
        </div>
    </MudPaper>
</MudPaper>


@code {
    private MudColor _gradientPrimary = ""#594AE2"";
    private MudColor _gradientSecondary = ""#FF4081"";
    private MudColor _pickerColor = ""#594AE2"";

    private int _degrees = 90;

    bool _isFirstColor = true;

    public void ChangeSelectedColor(string item)
    {
        if (item == ""1"")
        {
            _isFirstColor = true;
            _pickerColor = _gradientPrimary;
            UpdateSelectedColor(_gradientPrimary);
        }
        else if (item == ""2"")
        {
            _isFirstColor = false;
            _pickerColor = _gradientSecondary;
            UpdateSelectedColor(_gradientSecondary);
        }
    }

    public void UpdateSelectedColor(MudColor value)
    {
        _pickerColor = value;

        if (_isFirstColor)
        {
            _gradientPrimary = value;
        }
        else
        {
            _gradientSecondary = value;
        }
    }
}";

        public const string ColorPickerInlineExample = @"<MudColorPicker ShowToolbar=""true"" Label=""Dialog Picker"" PickerVariant=""PickerVariant.Inline"" />";

        public const string ColorPickerPaletteExample = @"@using MudBlazor.Utilities

<MudColorPicker PickerVariant=""PickerVariant.Static"" ColorPickerView=""ColorPickerView.Palette"" Palette=""_customPalette"" />

@code {
    private readonly IEnumerable<MudColor> _customPalette = new List<IEnumerable<MudColor>>
    {
        MudColor.GenerateTintShadePalette(""#DC143C"", shadeStep: 0),
        MudColor.GenerateTintShadePalette(""#1E90FF"", tintStep: 0),
        // Reverse for illustrative purposes
        MudColor.GenerateTintShadePalette(""#8E24AA"").Reverse(),
        MudColor.GenerateAnalogousPalette(""#40E0D0""),
        MudColor.GenerateGradientPalette(""#1E90FF"", ""#32CD32""),
        MudColor.GenerateMultiGradientPalette([""#FF4500"", ""#32CD32"", ""#8A2BE2""])
    }.SelectMany(palette => palette);
}";

        public const string ColorPickerPlaygroundExample = @"<MudGrid>
    <MudItem md=""8"" Class=""d-flex justify-center"">
        <MudColorPicker ShowToolbar=""ShowToolbar"" ShowAlpha=""ShowAlpha"" ShowColorField=""ShowColorField"" ShowPreview=""ShowPreview"" ShowSliders=""ShowSliders"" ShowInputs=""ShowInputs"" ShowModeSwitch=""ShowModeSwitch"" 
                ColorPickerMode=""ColorPickerMode"" PickerVariant=""PickerVariant.Static"" />
    </MudItem>
    <MudItem md=""4"">
        <MudPaper Height=""400px"" Class=""px-4 pt-2 pb-4"">
            <MudText Typo=""Typo.h6"">Options</MudText>
            <MudCheckBox @bind-Value=""ShowToolbar"" Label=""Show Toolbar"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Value=""ShowAlpha"" Label=""Show Alpha"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Value=""ShowColorField"" Label=""Show Color Field"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Value=""ShowPreview"" Label=""Show Preview"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Value=""ShowSliders"" Label=""Show Sliders"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Value=""ShowInputs"" Label=""Show Inputs"" Color=""Color.Primary"" Dense=""true"" />
            <MudCheckBox @bind-Value=""ShowModeSwitch"" Label=""Show Mode Switch"" Color=""Color.Primary"" Dense=""true"" />
            <MudSelect Label=""Color Picker Mode"" Variant=""Variant.Outlined"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""ColorPickerMode"" Class=""mt-4"">
                <MudSelectItem T=""ColorPickerMode"" Value=""ColorPickerMode.RGB"">RGB</MudSelectItem>
                <MudSelectItem T=""ColorPickerMode"" Value=""ColorPickerMode.HSL"">HSL</MudSelectItem>
                <MudSelectItem T=""ColorPickerMode"" Value=""ColorPickerMode.HEX"">HEX</MudSelectItem>
            </MudSelect>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public bool ShowToolbar { get; set; } = true;
    public bool ShowAlpha { get; set; } = true;
    public bool ShowColorField { get; set; } = true;
    public bool ShowPreview { get; set; } = true;
    public bool ShowSliders { get; set; } = true;
    public bool ShowInputs { get; set; } = true;
    public bool ShowModeSwitch { get; set; } = true;

    public ColorPickerMode ColorPickerMode { get; set; }
}";

        public const string ColorPickerStaticExample = @"<MudColorPicker PickerVariant=""PickerVariant.Static"" />";

        public const string ColorPickerSwitchModeExample = @"<MudColorPicker Label=""Switch Disabled"" ShowModeSwitch=""false"" />";

        public const string ColorPickerViewModeExample = @"<MudColorPicker Label=""Spectrum"" ColorPickerView=""ColorPickerView.Spectrum"" />
<MudColorPicker Label=""Palette"" ColorPickerView=""ColorPickerView.Palette"" />
<MudColorPicker Label=""Grid"" ColorPickerView=""ColorPickerView.Grid"" />
<MudColorPicker Label=""Compact Grid"" ColorPickerView=""ColorPickerView.GridCompact"" />";

        public const string ContainedFixedExample = @"<MudPaper Height=""400px"" Width=""100%"">
    <MudContainer Fixed=""true"">
        <MudPaper Height=""400px"" Width=""100%"" Square=""true"" Class=""mud-theme-primary""></MudPaper>
    </MudContainer>
</MudPaper>";

        public const string ContainerFluidExample = @"<MudPaper Height=""400px"" Width=""100%"">
    <MudContainer MaxWidth=""MaxWidth.Small"">
        <MudPaper Height=""400px"" Width=""100%"" Square=""true"" Class=""mud-theme-primary""></MudPaper>
    </MudContainer>
</MudPaper>";

        public const string DataGridAdvancedExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" MultiSelection=""true"" Items=""@Elements"" SortMode=""SortMode.Multiple"" Filterable=""true"" QuickFilter=""@_quickFilter""
    Hideable=""true"" RowClick=""@RowClicked"" RowContextMenuClick=""RowRightClicked"" SelectedItemsChanged=""@SelectedItemsChanged"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value=""_searchString"" Placeholder=""Search"" Adornment=""Adornment.Start"" Immediate=""true""
            AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T=""Element"" />
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" Sortable=""false"" Filterable=""false"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" SortBy=""@_sortBy"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
        <PropertyColumn Property=""x => x.Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Value=""@_sortNameByLength"" Color=""Color.Primary"">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style=""flex:1"">
    <MudExpansionPanel Text=""Show Events"">
        @foreach (var message in _events)
        {
            <MudText Typo=""@Typo.body2"">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class=""d-flex"">
                <MudSpacer/>
                <MudButton Class=""mt-3"" ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" OnClick=""@(() => _events.Clear())"">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<Element, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<Element, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Sign.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($""{x.Number} {x.Position} {x.Molar}"".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<Element> args)
    {
        _events.Insert(0, $""Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}"");
    }
    
    void RowRightClicked(DataGridRowClickEventArgs<Element> args)
    {
        _events.Insert(0, $""Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}"");
    }

    void SelectedItemsChanged(HashSet<Element> items)
    {
        _events.Insert(0, $""Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}"");
    }
}";

        public const string DataGridAdvancedFilteringExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@Elements"" Filterable=""true"" FilterMode=""@DataGridFilterMode.ColumnFilterRow"">
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" Filterable=""false"" />
        <PropertyColumn Property=""x => x.Sign"">
            <FilterTemplate>
                <MudIconButton OnClick=""@OpenFilter"" Icon=""@_icon"" Size=""@Size.Small"" />
                <MudOverlay Visible=""@_filterOpen"" OnClick=""@(() => _filterOpen = false)"" />
                <MudPopover Open=""@_filterOpen"" AnchorOrigin=""Origin.BottomCenter"" TransformOrigin=""Origin.TopCenter""
                    Style=""width:150px"">
		           <MudStack Spacing=""0"">
                       <MudCheckBox T=""bool"" Label=""Select All"" Size=""@Size.Small"" Value=""@_selectAll"" ValueChanged=""@SelectAll"" />
                       <MudStack Spacing=""0"" Style=""overflow-y:auto;max-height:250px"">
                           @foreach (var item in context.Items)
                           {
                                <MudCheckBox T=""bool"" Label=""@($""{item.Sign}"")"" Size=""@Size.Small"" Value=""@(_selectedItems.Contains(item))""
                                             ValueChanged=""@((value) => SelectedChanged(value, item))"" />
                           }
                       </MudStack>
                       <MudStack Row=""true"">
                            <MudButton OnClick=""@(() => ClearFilterAsync(context))"">Clear</MudButton>
                            <MudButton Color=""@Color.Primary"" OnClick=""@(() => ApplyFilterAsync(context))"">Filter</MudButton>
                       </MudStack>
                   </MudStack>
	            </MudPopover>
            </FilterTemplate>
        </PropertyColumn>
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
        <PropertyColumn Property=""x => x.Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

@code {
    IEnumerable<Element> Elements = new List<Element>();
    HashSet<Element> _selectedItems = new();
    HashSet<Element> _filterItems = new();
    FilterDefinition<Element> _filterDefinition;
    bool _selectAll = true;
    string _icon = Icons.Material.Outlined.FilterAlt;

    bool _filterOpen = false;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
        _selectedItems = Elements.ToHashSet();
        _filterItems = Elements.ToHashSet();
        _filterDefinition = new FilterDefinition<Element>
        {
            FilterFunction = x => _filterItems.Contains(x)
        };
    }

    void OpenFilter()
    {
        _filterOpen = true;
    }

    private void SelectedChanged(bool value, Element item)
    {
        if (value)
            _selectedItems.Add(item);
        else
            _selectedItems.Remove(item);

        if (_selectedItems.Count == Elements.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    private async Task ClearFilterAsync(FilterContext<Element> context)
    {
        _selectedItems = Elements.ToHashSet();
        _filterItems = Elements.ToHashSet();
        _icon = Icons.Material.Outlined.FilterAlt;
        await context.Actions.ClearFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private async Task ApplyFilterAsync(FilterContext<Element> context)
    {
        _filterItems = _selectedItems.ToHashSet();
        _icon = _filterItems.Count == Elements.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
        await context.Actions.ApplyFilterAsync(_filterDefinition);
        _filterOpen = false;
    }

    private void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedItems = Elements.ToHashSet();
        }
        else
        {
            _selectedItems.Clear();
        }
    }
}";

        public const string DataGridAggregationExample = @"@using System.Net.Http.Json
@inject HttpClient httpClient

<MudDataGrid Items=""@_items"" Groupable=""true"" Filterable=""true"">
    <Columns>
        <PropertyColumn Property=""x => x.Name"" AggregateDefinition=""@(new AggregateDefinition<Model>())"">
            <AggregateTemplate>
                @{
                    var names = context.Select(x => x.Name).ToArray();
                    var index = 1;
                }
                @foreach (var name in names)
                {
                    <MudAvatar Color=""@((Color)index++)"" Variant=""Variant.Outlined"" Size=""Size.Small"" Class=""ml-2 mr-1"">
                        @name.First()
                    </MudAvatar>
                    @name.Substring(1)
                }
            </AggregateTemplate>
        </PropertyColumn>
        <PropertyColumn Property=""x => x.Age"" AggregateDefinition=""_ageAggregation"" />
        <PropertyColumn Property=""x => x.Status""></PropertyColumn>
        <PropertyColumn Property=""x => x.Salary"" AggregateDefinition=""_salaryAggregation"" />
        <PropertyColumn Property=""x => x.HireDate"" Title=""Hired"">
            <CellTemplate>
                @context.Item.HireDate.ToString(""d"")
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property=""x => x.IsManager"" Title=""Manager"" />
    </Columns>
</MudDataGrid>

@code { 
    public record Model (string Name, int Age, Severity Status, decimal Salary, DateTime HireDate, bool IsManager);

    IEnumerable<Model> _items = new List<Model>()
    {
        new Model(""Sam"", 56, Severity.Normal, 50_000.00M, new DateTime(2005, 3, 5), false), 
        new Model(""Alicia"", 54, Severity.Info, 75_000.00M, new DateTime(2010, 1, 17), false), 
        new Model(""Ira"", 27, Severity.Success, 102_000.00M, new DateTime(2017, 6, 15), true),
        new Model(""John"", 32, Severity.Warning, 132_000.00M, new DateTime(2021, 12, 23), true),
        new Model(""Fred"", 65, Severity.Warning, 87_000.00M, new DateTime(2003, 7, 3), false), 
        new Model(""Tabitha"", 33, Severity.Info, 157_000.00M, new DateTime(2015, 2, 12), true), 
        new Model(""Hunter"", 22, Severity.Success, 43_000.00M, new DateTime(2017, 9, 20), false),
        new Model(""Esme"", 55, Severity.Warning, 149_000.00M, new DateTime(2017, 8, 1), true)
    };

    AggregateDefinition<Model> _ageAggregation = new AggregateDefinition<Model>
    {
        Type = AggregateType.Avg,
        DisplayFormat = ""Average age is {value}""
    };

    AggregateDefinition<Model> _salaryAggregation = new AggregateDefinition<Model>
    {
        Type = AggregateType.Custom,
        CustomAggregate = x =>
        {
            var highestSalary = x.Max(z => z.Salary);
            var countOver100Grand = x.Count(z => z.Salary > 100_000);
            return $""Highest: {highestSalary:C0} | {countOver100Grand} Over {100000:C0}"";
        }
    };
}";

        public const string DataGridBasicExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@Elements.Take(4)"">
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
    </Columns>
</MudDataGrid>

@code { 
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridColumReorderingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@_elements"" DragDropColumnReordering=""@_reorderingEnabled"" ApplyDropClassesOnDragStarted=""@_applyDropClassesOnDragStarted"" 
                    DragIndicatorIcon=""@_dragIndicatorIcon"" Dense ColumnResizeMode=""ResizeMode.Container"">
    <Columns>
        <SelectColumn T=""Element""/>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr (fixed)"" DragAndDropEnabled=""false""/>
        <PropertyColumn Property=""x => x.Sign""/>
        <PropertyColumn Property=""x => x.Name"" Title=""Name (fixed)"" DragAndDropEnabled=""false"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
        <PropertyColumn Property=""x => x.Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-column mt-4"">
    <MudSwitch @bind-Value=""_reorderingEnabled"" Color=""Color.Primary"">DragDropColumnReordering</MudSwitch>
    <MudSwitch @bind-Value=""_applyDropClassesOnDragStarted"" Color=""Color.Primary"">ApplyDropClassesOnDragStarted</MudSwitch>
</div>

@code {
    IEnumerable<Element> _elements = new List<Element>();
    bool _applyDropClassesOnDragStarted = false;

    string _dragIndicatorIcon = Icons.Material.Filled.DragIndicator;

    bool _reorderingEnabled = true;

    protected override async Task OnInitializedAsync()
    {
        _elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

}";

        public const string DataGridColumnCultureExample = @"@using System.Globalization

<MudDataGrid Items=""@_items"" Filterable=""true"">
    <Columns>
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Age"" />
        <PropertyColumn Property=""x => x.Amount"" Title=""Amount (es-ES culture)"" Culture=""@(new CultureInfo(""es-ES""))"" />
        <PropertyColumn Property=""x => x.Total"" Title=""Total (invariant culture)"" Culture=""@CultureInfo.InvariantCulture"" />
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<Model> _items = new List<Model>()
    {
        new Model(""Sam"", 56, 2.3, 3.2), 
        new Model(""Alicia"", 54, 4.5, 4.9), 
        new Model(""Ira"", 27, 2.1, 2.5),
        new Model(""John"", 32, 5.9, 6.1)
    };

    public record Model(string Name, int? Age, double? Amount, double? Total);
}";

        public const string DataGridColumnTypesExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@employees"" Filterable=""false"" SortMode=""@SortMode.None"" Groupable=""false"">
    <Columns>
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.YearsEmployed"" Title=""Years Employed"" />
        <PropertyColumn Property=""x => x.Salary"" Format=""C"" />
        <PropertyColumn Property=""x => x.Salary * x.YearsEmployed"" Title=""Total Earned"" Format=""C"" />
        <TemplateColumn CellClass=""d-flex justify-end"">
            <CellTemplate>
                <MudStack Row>
                    <MudRating Size=""@Size.Small"" SelectedValue=""@context.Item.Rating"" />
                    <MudButton Size=""@Size.Small"" Variant=""@Variant.Filled"" Color=""@Color.Primary"">Hire</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    public record Employee(string Name, string Position, int YearsEmployed, int Salary, int Rating);
    public IEnumerable<Employee> employees;

    protected override void OnInitialized()
    {
        employees = new List<Employee>
        {
            new Employee(""Sam"", ""CPA"", 23, 87_000, 4),
            new Employee(""Alicia"", ""Product Manager"", 11, 143_000, 5),
            new Employee(""Ira"", ""Developer"", 4, 92_000, 3),
            new Employee(""John"", ""IT Director"", 17, 229_000, 4),
        };
    }
}";

        public const string DataGridColumnsPanelExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" @ref=""grid"" Items=""_elements"" DragDropColumnReordering=""_dragDropReorderingEnabled"" ColumnsPanelReordering=""_columnsPanelReorderingEnabled""
             ColumnResizeMode=""ResizeMode.Container"" Hideable=""_hideable"" Filterable=""_filterable"" Groupable=""_groupable"" FilterMode=""_filterMode"" ShowMenuIcon=""true"">
    <Columns>
        <SelectColumn T=""Element""/>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" />
        <PropertyColumn Property=""x => x.Sign"" Hidden=""true"" DragAndDropEnabled=""false"" Groupable=""false"" Sortable=""false"" Filterable=""false"" />
        <PropertyColumn Property=""x => x.Name"" Title=""Name"" Hidden=""false"" DragAndDropEnabled=""true"" Groupable=""true"" Sortable=""true"" Filterable=""true"" Grouping=""false"" />
        <PropertyColumn Property=""x => x.Position"" Filterable=""false"" Hideable=""false"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" @bind-Hidden=""_hideMolar"" @bind-Grouping=""_groupMolar"" Hideable=""true"" />
        <PropertyColumn Property=""x => x.Group"" Hidden=""_hideCategory"" Grouping=""_groupCategory"" Title=""Category"" />
        <TemplateColumn Title=""Template"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-rows flex-wrap mr-4"">
    <MudSwitch @bind-Value=""_dragDropReorderingEnabled"" Color=""Color.Primary"">Drag Drop Column Reordering</MudSwitch>
    <MudSwitch @bind-Value=""_columnsPanelReorderingEnabled"" Color=""Color.Primary"">Columns Panel Column Reordering</MudSwitch>
    <MudSwitch @bind-Value=""_filterable"" Color=""Color.Primary"">Filterable</MudSwitch>
</div>

<div class=""d-flex flex-rows flex-wrap mr-4"">
    <MudSwitch @bind-Value=""_hideable"" Color=""Color.Primary"">Hideable</MudSwitch>
    <MudSwitch @bind-Value=""_hideMolar"" Color=""Color.Primary"" Converter=""_oppositeBoolConverter"">Molar Mass Visible</MudSwitch>
    <MudSwitch @bind-Value=""_hideCategory"" Color=""Color.Primary"" Converter=""_oppositeBoolConverter"">Category Visible</MudSwitch>
</div>

<div class=""d-flex flex-wrap mt-4 gap-1"">
    <MudButton OnClick=""@(() => HideColumnsAsync(false))"" Variant=""Variant.Filled"" Color=""Color.Primary"">Show All Columns</MudButton>
    <MudButton OnClick=""@(() => HideColumnsAsync(true))"" Variant=""Variant.Filled"" Color=""Color.Primary"">Hide All Columns</MudButton>
</div>

<div class=""d-flex flex-rows flex-wrap mr-4"">
    <MudSwitch @bind-Value=""_groupable"" Color=""Color.Primary"">Groupable</MudSwitch>
    <MudSwitch @bind-Value=""_groupMolar"" Color=""Color.Primary"">Group By Molar</MudSwitch>
    <MudSwitch @bind-Value=""_groupCategory"" Color=""Color.Primary"">Group By Category</MudSwitch>
</div>

<div class=""d-flex flex-wrap mt-4"">
    <MudRadioGroup T=""DataGridFilterMode"" @bind-Value=""_filterMode"">
        <MudRadio Dense=""true"" Value=""@DataGridFilterMode.Simple"" Color=""Color.Primary"">Simple</MudRadio>
        <MudRadio Dense=""true"" Value=""@DataGridFilterMode.ColumnFilterMenu"" Color=""Color.Tertiary"">Column Menu</MudRadio>
        <MudRadio Dense=""true"" Value=""@DataGridFilterMode.ColumnFilterRow"">Column Row</MudRadio>
    </MudRadioGroup>
</div>


@code {
    private IEnumerable<Element> _elements = new List<Element>();

    private DataGridFilterMode _filterMode = DataGridFilterMode.Simple;
    private bool _dragDropReorderingEnabled = true;
    private bool _columnsPanelReorderingEnabled = true;
    private bool _hideable = true;
    private bool _filterable = true;
    private bool _groupable = true;
    private bool _hideMolar = false;
    private bool _hideCategory = false;
    private bool _groupMolar = false;
    private bool _groupCategory = false;
    public MudDataGrid<Element> grid = null;

    private MudBlazor.Converter<bool, bool?> _oppositeBoolConverter = new()
    {
            SetFunc = value => !value,
            GetFunc = value => !value ?? true,
        };

    protected override async Task OnInitializedAsync()
    {
        _elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private async Task HideColumnsAsync(bool hide)
    {        
        foreach (var column in grid.RenderedColumns)
        {
            if (hide)
            {
                await column.HideAsync();
            }
            else
            {
                await column.ShowAsync();
            }
        };
    }
}";

        public const string DataGridContextMenuExample = @"@inject ISnackbar Snackbar

<MudDataGrid T=""ClientInfo"" Items=""Clients"" Filterable=""true""
             RowContextMenuClick=""@((_rightClick ? OpenMenuContent : null)!)""
             RowClick=""@((!_rightClick ? OpenMenuContent : null)!)"">
    <Columns>
        <PropertyColumn Property=""x => x.Username"" Title=""Username"" />
        <PropertyColumn Property=""x => x.HwId"" Title=""HWID"" />
        <TemplateColumn T=""ClientInfo"" Title=""Status"">
            <CellTemplate>
                <MudChip Color=""Color.Error"" Size=""Size.Small"">Offline</MudChip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudStack Row AlignItems=""AlignItems.Center"" Class=""ml-2"">
            <MudText><strong>Activator:&nbsp;&nbsp;</strong> Left Click</MudText>
            <MudSwitch Class=""ml-n3"" @bind-Value=""_rightClick"" Label=""Right Click"" />
        </MudStack>
    </PagerContent>
</MudDataGrid>
<MudMenu PositionAtCursor=""true"" @ref=""_contextMenu"" id=""_contextMenu"">
    <MudMenuItem Icon=""@Icons.Material.Filled.Block"">
        Ban @_contextRow?.Username
    </MudMenuItem>
    <MudMenuItem Icon=""@Icons.Material.Filled.Info"" OnClick=""@ShowHiddenInfo"">
        View Details for @_contextRow?.HwId
    </MudMenuItem>
</MudMenu>

@code {
#nullable enable
    private ClientInfo? _contextRow;
    private bool _rightClick = true;
    private MudMenu _contextMenu = null!;

    public List<ClientInfo> Clients =
    [
        new() { Username = ""user123"", HwId = ""000-000-000-000"", HiddenInformation = ""Not good Grid info for user123"" },
        new() { Username = ""joedoe"", HwId = ""111-000-111-000"", HiddenInformation = ""Not good Grid info for joedoe"" }
    ];

    private async Task OpenMenuContent(DataGridRowClickEventArgs<ClientInfo> args)
    {
        _contextRow = args.Item;
        await _contextMenu.OpenMenuAsync(args.MouseEventArgs);
    }

    private void ShowHiddenInfo()
    {
        if (_contextRow is not null)
        {
            Snackbar.Add($""Hidden information for {_contextRow.HwId}: {_contextRow.HiddenInformation}"", Severity.Info);
        }
    }

    public class ClientInfo
    {
        public string Username { get; set; } = string.Empty;

        public string HwId { get; set; } = string.Empty;

        public string HiddenInformation { get; set; } = string.Empty;
    }
}";

        public const string DataGridCustomSortingExample = @"@using System.Globalization;

<MudDataGrid @ref=""DataGrid"" Items=""@_items"" SortMode=""SortMode.Multiple"">
    <Columns>
        <PropertyColumn Property=""x => x.Name"" Comparer=""@(NaturalSortingEnabled ? new MudBlazor.Utilities.NaturalComparer() : null)"" />
        <PropertyColumn Property=""x => x.Value"" />
        <PropertyColumn Property=""x => x.Misc"" />
    </Columns>
</MudDataGrid>
<MudStack Row=""true"">
    <MudSwitch T=""bool"" Value=""@NaturalSortingEnabled"" ValueChanged=""OnCheckedChanged"" Color=""Color.Primary"">Enable Natural Sorting</MudSwitch>
</MudStack>

@code {
    private MudDataGrid<Item> DataGrid;

    private bool NaturalSortingEnabled = true;

    private IEnumerable<Item> _items = new List<Item>()
    {
        new Item(""1"", 42, ""555""), 
        new Item(""10"", 73, ""7""), 
        new Item(""2"", 11, ""4444""), 
        new Item(""1_10"", 33, ""33333""),
        new Item(""1_2"", 99, ""66""), 
        new Item(""1_11"", 44, ""1111111""),
        new Item(""0"", 55, ""222222"")
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await DataGrid.SetSortAsync(nameof(Item.Name), SortDirection.Ascending, x => x.Name, NaturalSortingEnabled ? new MudBlazor.Utilities.NaturalComparer() : null);
        }
    }

    private async Task OnCheckedChanged(bool value)
    {
        NaturalSortingEnabled = value;
        if (DataGrid.SortDefinitions.ContainsKey(nameof(Item.Name)))
        {
            if (DataGrid.SortDefinitions[nameof(Item.Name)].Descending)
            {
                DataGrid.SortDefinitions.Clear();
                await DataGrid.SetSortAsync(nameof(Item.Name), SortDirection.Descending, x => x.Name, NaturalSortingEnabled ? new MudBlazor.Utilities.NaturalComparer() : null);
            }
            else
            {
                DataGrid.SortDefinitions.Clear();
                await DataGrid.SetSortAsync(nameof(Item.Name), SortDirection.Ascending, x => x.Name, NaturalSortingEnabled ? new MudBlazor.Utilities.NaturalComparer() : null);
            }
        }
        else
        {
            await DataGrid.SetSortAsync(nameof(Item.Name), SortDirection.Ascending, x => x.Name, NaturalSortingEnabled ? new MudBlazor.Utilities.NaturalComparer() : null);
        }
    }

    public class Item
    {
        public string Name { get; set; }
        public int Value { get; set; }
        public string Misc { get; set; }

        public Item(string name, int value, String misc)
        {
            Name = name;
            Value = value;
            Misc = misc;
        }
    }   
}";

        public const string DataGridDetailRowExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@Elements""
             ReadOnly=""@_isReadOnly"" EditMode=""@DataGridEditMode.Cell"">
    <Columns>
        <HierarchyColumn T=""Element"" ButtonDisabledFunc=""@(x => x.Sign == ""He"")"" InitiallyExpandedFunc=""@(x => x.Sign == ""Li"")"" />
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo=""Typo.h6"">@context.Item.Name</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>This element is number @context.Item.Number</MudText>
                <MudText>This element has a molar mass of @context.Item.Molar</MudText>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch T=""bool"" @bind-Value=""_isReadOnly"" Color=""@Color.Primary"">Read Only</MudSwitch>
</div>


@code { 
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
    
    private bool _isReadOnly = true;
}";

        public const string DataGridEditingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@Elements.Take(4)"" ReadOnly=""@_readOnly"" EditMode=""@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)""
    StartedEditingItem=""@StartedEditingItem"" CanceledEditingItem=""@CanceledEditingItem"" CommittedItemChanges=""@CommittedItemChanges""
    Bordered=""true"" Dense=""true"" EditTrigger=""@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"">
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" Editable=""false"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"">
            <EditTemplate>
                <MudSelect @bind-Value=""context.Item.Position"" Required RequiredError=""You must select a Position!!!"" Margin=""@Margin.Dense"">
                    <MudSelectItem Value=""0"">zero</MudSelectItem>
                    <MudSelectItem Value=""1"">one</MudSelectItem>
                    <MudSelectItem Value=""17"">seventeen</MudSelectItem>
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
        <TemplateColumn Hidden=""@(_isCellEditMode || _readOnly || _editTriggerRowClick)"" CellClass=""d-flex justify-end"">
            <CellTemplate>
                <MudIconButton Size=""@Size.Small"" Icon=""@Icons.Material.Outlined.Edit"" OnClick=""@context.Actions.StartEditingItemAsync"" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Value=""_readOnly"" Color=""Color.Primary"">Read Only</MudSwitch>
    <div class=""d-flex justify-start align-center"">
        <p class=""mud-typography mud-typography-body1 mud-inherit-text mr-2"">Form</p>
        <MudSwitch @bind-Value=""_isCellEditMode"" Color=""Color.Primary"">Cell</MudSwitch>
    </div>
    <div class=""d-flex justify-start align-center"">
        <p class=""mud-typography mud-typography-body1 mud-inherit-text mr-2"">Manual</p>
        <MudSwitch @bind-Value=""_editTriggerRowClick"" Color=""Color.Primary"">On Row Click</MudSwitch>
    </div>
</div>

<MudExpansionPanels Style=""flex:1"">
    <MudExpansionPanel Text=""Show Events"">
        @foreach (var message in _events)
        {
            <MudText Typo=""@Typo.body2"">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class=""d-flex"">
                <MudSpacer/>
                <MudButton Class=""mt-3"" ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" OnClick=""@(() => _events.Clear())"">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    // events
    void StartedEditingItem(Element item)
    {
        _events.Insert(0, $""Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}"");
    }

    void CanceledEditingItem(Element item)
    {
        _events.Insert(0, $""Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}"");
    }

    void CommittedItemChanges(Element item)
    {
        _events.Insert(0, $""Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}"");
    }
}";

        public const string DataGridFilteringExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@Elements"" Filterable=""true"" FilterMode=""@_filterMode"" FilterCaseSensitivity=""@_caseSensitivity"">
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" Filterable=""false"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"" Filterable=""false"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
        <PropertyColumn Property=""x => x.Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudRadioGroup T=""DataGridFilterMode"" @bind-Value=""@_filterMode"">
        <MudRadio Dense=""true"" Value=""@DataGridFilterMode.Simple"" Color=""Color.Primary"">Simple</MudRadio>
        <MudRadio Dense=""true"" Value=""@DataGridFilterMode.ColumnFilterMenu"" Color=""Color.Tertiary"">Column Menu</MudRadio>
        <MudRadio Dense=""true"" Value=""@DataGridFilterMode.ColumnFilterRow"">Column Row</MudRadio>
    </MudRadioGroup>
</div>

<div class=""d-flex flex-wrap mt-4"">
    <MudRadioGroup T=""DataGridFilterCaseSensitivity"" @bind-Value=""@_caseSensitivity"">
        <MudRadio Dense=""true"" Value=""@DataGridFilterCaseSensitivity.Default"" Color=""Color.Primary"">Default Case Sensitivity</MudRadio>
        <MudRadio Dense=""true"" Value=""@DataGridFilterCaseSensitivity.CaseInsensitive"" Color=""Color.Tertiary"">Case Insensitive</MudRadio>
    </MudRadioGroup>
</div>


@code {
    IEnumerable<Element> Elements = new List<Element>();
    DataGridFilterMode _filterMode = DataGridFilterMode.Simple;
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.Default;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridGroupingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid @ref=""dataGrid"" MultiSelection=""true"" Items=""@Elements"" Filterable=""true""
    Hideable=""true"" Groupable=""true"" GroupExpanded=""false"" GroupClassFunc=""GroupClassFunc"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" Filterable=""false"" Groupable=""false"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
        <PropertyColumn Property=""x => x.Group"" Title=""Category"" Grouping GroupBy=""@_groupBy"">
            <GroupTemplate>
                @if (_customizeGroupTemplate)
                {
                    <span style=""font-weight:bold"">Group: @context.Grouping.Key <MudChip Variant=""Variant.Outlined"" Color=""Color.Primary"" Size=""Size.Small"">total @context.Grouping.Count()</MudChip></span>
                }
                else
                {
                    <span style=""font-weight:bold"">Category: @context.Grouping.Key</span>
                }
            </GroupTemplate>
        </PropertyColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch T=""bool"" @bind-Value=""_customizeGroupTemplate"" Color=""@Color.Primary"">Customize Group Template</MudSwitch>
    <MudSwitch T=""bool"" Value=""@_customizeGroupBy"" Color=""@Color.Primary"" ValueChanged=""@CustomizeByGroupChanged"">Customize Group By</MudSwitch>
    <MudButton OnClick=""@ExpandAllGroups"" Color=""@Color.Primary"">Expand All</MudButton>
    <MudButton OnClick=""@CollapseAllGroups"" Color=""@Color.Primary"">Collapse All</MudButton>
</div>

@code {
    IEnumerable<Element> Elements = new List<Element>();
    MudDataGrid<Element> dataGrid;
    bool _customizeGroupTemplate;
    static bool _customizeGroupBy;
    static string[] _nonmetals = new string[] { ""H"", ""He"",""N"", ""O"", ""F"", ""Ne"", ""Cl"", ""Ar"", ""Kr"", ""Xe"", ""Rn"", ""Br"", ""C"", ""P"", ""Se"", ""Se"", ""I"" };
    Func<Element, object> _groupBy = x => 
    {
        if (_customizeGroupBy)
            return _nonmetals.Contains(x.Sign) ? ""Nonmetal"":  ""Metal"";
        return x.Group;
    };

    private string GroupClassFunc(GroupDefinition<Element> item)
    {
        return item.Grouping.Key?.ToString() == ""Nonmetal"" || item.Grouping.Key?.ToString() == ""Other""
                ? ""mud-theme-warning""
                : string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    void ExpandAllGroups()
    {
        dataGrid?.ExpandAllGroups();
    }

    void CollapseAllGroups()
    {
        dataGrid?.CollapseAllGroups();
    }

    void CustomizeByGroupChanged(bool isChecked)
    {
        _customizeGroupBy = isChecked;
        dataGrid.GroupItems();
    }
}";

        public const string DataGridObservabilityExample = @"@using System.Net.Http.Json
@using System.Collections.ObjectModel
@inject HttpClient httpClient

<MudButton OnClick=""@AddItem"" Color=""@Color.Success"" Class=""add-item-btn"">Add Item</MudButton>
<MudButton OnClick=""@RemoveItem"" Color=""@Color.Error"" Class=""remove-item-btn"">Remove Item</MudButton>

<MudDataGrid Items=""@_items"">
    <Columns>
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Age"" />
        <PropertyColumn Property=""x => x.Status"" />
        <PropertyColumn Property=""x => x.Salary"" />
        <PropertyColumn Property=""x => x.HireDate"" Title=""Hired"" />
        <PropertyColumn Property=""x => x.IsManager"" Title=""Manager"" />
    </Columns>
</MudDataGrid>

@code {

    public record Model (string Name, int Age, Severity Status, decimal Salary, DateTime HireDate, bool IsManager);

    ObservableCollection<Model> _items = new ObservableCollection<Model>()
    {
        new Model(""Sam"", 56, Severity.Normal, 50_000.00M, new DateTime(2005, 3, 5), false), 
        new Model(""Alicia"", 54, Severity.Info, 75_000.00M, new DateTime(2010, 1, 17), false), 
        new Model(""Ira"", 27, Severity.Success, 102_000.00M, new DateTime(2017, 6, 15), true),
        new Model(""John"", 32, Severity.Warning, 132_000.00M, new DateTime(2021, 12, 23), true),
        new Model(""Fred"", 65, Severity.Warning, 87_000.00M, new DateTime(2003, 7, 3), false), 
        new Model(""Tabitha"", 33, Severity.Info, 157_000.00M, new DateTime(2015, 2, 12), true), 
        new Model(""Hunter"", 22, Severity.Success, 43_000.00M, new DateTime(2017, 9, 20), false),
        new Model(""Esme"", 55, Severity.Warning, 149_000.00M, new DateTime(2017, 8, 1), true)
    };

    void AddItem()
    {
        _items.Add(new Model(""New Person"", 44, Severity.Warning, 85_000.00M, new DateTime(2022, 1, 1), true));
    }

    void RemoveItem()
    {
        if (_items.Any())
        {
            _items.RemoveAt(0);
        }
    }
}";

        public const string DataGridResizeExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@Elements"" ColumnResizeMode=""@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)"" RowsPerPage=""5"">
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" />
        <PropertyColumn Property=""x => x.Sign"" Resizable=""false"" />
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
        <PropertyColumn Property=""x => x.Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" PageSizeOptions=@(new int[] {5, 10, 20}) />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <div class=""d-flex justify-start align-center"">
        <p class=""mud-typography mud-typography-body1 mud-inherit-text mr-2"">ResizeMode.Container</p>
        <MudSwitch @bind-Value=""_resizeColumn"" Color=""Color.Primary"">ResizeMode.Column</MudSwitch>
    </div>
</div>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private bool _resizeColumn;

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridSelectionExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@Elements.Take(4)"">
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
    </Columns>
</MudDataGrid>

@code { 
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridServerSideExample = @"@using System.Net.Http.Json
@using System.Threading
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid @ref=""dataGrid"" T=""Element"" ServerData=""ServerReload"" Filterable=""false"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField T=""string"" ValueChanged=""@(s=>OnSearch(s))"" Placeholder=""Search"" Adornment=""Adornment.Start""
                      AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
        <PropertyColumn Property=""x => x.Group"" Title=""Category"" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<Element> dataGrid;
    string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<GridData<Element>> ServerReload(GridState<Element> state)
    {
        IEnumerable<Element> data = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if(string.IsNullOrWhiteSpace(searchString))
                return true;
            if(element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if(element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if($""{element.Number} {element.Position} {element.Molar}"".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        var totalItems = data.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if(sortDefinition != null)
        {
            switch(sortDefinition.SortBy)
            {
                case nameof(Element.Number):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Number
                    );
                    break;
                case nameof(Element.Sign):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Sign
                    );
                    break;
                case nameof(Element.Name):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Name
                    );
                    break;
                case nameof(Element.Position):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Position
                    );
                    break;
                case nameof(Element.Molar):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Molar
                    );
                    break;
            }
        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<Element> {
            TotalItems = totalItems,
            Items = pagedData
        };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }
}";

        public const string DataGridSortingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid T=""Element"" Items=""@Elements"" SortMode=""@_sortMode"">
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" Sortable=""false"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" SortBy=""@_sortBy"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
        <PropertyColumn Property=""x => x.Group"" Title=""Category"" />
            <TemplateColumn Title=""Custom"" SortBy=""@(x => $""{x.Sign} - {x.Name}"")"">
                <CellTemplate>
                    @context.Item.Sign - @context.Item.Name
                </CellTemplate>
            </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T=""Element"" />
    </PagerContent>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Value=""_sortNameByLength"" Color=""Color.Primary"">Sort Name Column By Length</MudSwitch>
    <MudRadioGroup T=SortMode @bind-Value=""@_sortMode"">
        <MudRadio Dense=true Value=@SortMode.Multiple Color=""Color.Primary"">Multiple</MudRadio>
        <MudRadio Dense=true Value=@SortMode.Single Color=""Color.Tertiary"">Single</MudRadio>
        <MudRadio Dense=true Value=@SortMode.None>None</MudRadio>
    </MudRadioGroup>
</div>


@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private bool _sortNameByLength;
    private SortMode _sortMode = SortMode.Multiple;

    // custom sort by name length
    private Func<Element, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DataGridStickyColumnsExample = @"@using System.Net.Http.Json

<MudDataGrid Items=""@_users"" HorizontalScrollbar=""true"" Bordered=""true"" Dense=""true"">
    <Columns>
        <PropertyColumn Property=""x => x.Name"" StickyLeft=""true"" />
        <PropertyColumn Property=""x => x.Age"" />
        <PropertyColumn Property=""x => x.FillerColumn"" HeaderStyle=""white-space:nowrap"">
            <HeaderTemplate>
                @((MarkupString)$""This is a really long column{string.Join("""", Enumerable.Repeat(""&nbsp;"", 1000))}..."")
            </HeaderTemplate>
        </PropertyColumn>
        <PropertyColumn Property=""x => x.Salary"" />
        <TemplateColumn StickyRight=""true"">
            <CellTemplate>
                <MudIconButton Icon=""@Icons.Material.Outlined.Edit"" Size=""@Size.Small"" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    public record User(string Name, int Age, string FillerColumn, decimal Salary);

    private IEnumerable<User> _users = new List<User>
    {
        new User(""Sam"", 56, ""..."", 50_000.00M), 
        new User(""Alicia"", 54, ""..."", 75_000.00M), 
        new User(""Ira"", 27, ""..."", 102_000.00M),
        new User(""John"", 32, ""..."", 132_000.00M),
    };
}";

        public const string DataGridValidatorExample = @"<MudForm @ref=""_form"" ValidationDelay=""0"">
    <MudDataGrid T=""Item""
                 Items=""_items""
                 Validator=""@(_bindValidatorToForm ? _form : _defaultValidator)"">
        <Columns>
            <TemplateColumn Title=""Name"">
                <CellTemplate>
                    <MudTextField @bind-Value=""context.Item.Name""
                                  Immediate=""true""
                                  Validation=""(string name) => ValidateName(name)"" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudForm>

<MudStack Row>
    <MudSwitch Color=""Color.Primary"" @bind-Value=""_bindValidatorToForm"">Bind MudDataGrid.Validator to MudForm?</MudSwitch>
    <MudSwitch ReadOnly=""true"" Value=""_form?.IsTouched"">MudForm.IsTouched</MudSwitch>
    <MudSwitch ReadOnly=""true"" Value=""_form?.IsValid"">MudForm.IsValid</MudSwitch>
</MudStack>

@code
{
    private readonly Interfaces.IForm _defaultValidator = new DataGridRowValidator();
    private MudForm _form;
    private bool _bindValidatorToForm = true;

    private Item[] _items =
    [
        new() { Name = ""valid"" },
        new() { Name = ""invalid"" }
    ];

    private static string ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return ""Name is required"";
        }

        if (name == ""invalid"")
        {
            return ""Name must not be 'invalid'"";
        }

        return null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnParametersSetAsync();
        if (firstRender)
        {
            await _form.Validate();
            _form.ResetTouched();
        }
    }

    public class Item
    {
        public string Name { get; set; }
    }
}";

        public const string DataGridVirtualizationExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models

<MudDataGrid Items=""@_items"" Virtualize=""true"" FixedHeader=""true"" Height=""350px"">
    <Columns>
        <PropertyColumn Property=""x => x.Column1"" />
        <PropertyColumn Property=""x => x.Column2"" />
        <PropertyColumn Property=""x => x.Column3"" />
        <PropertyColumn Property=""x => x.Column4"" />
        <PropertyColumn Property=""x => x.Column5"" />
    </Columns>
</MudDataGrid>

@code {
    public record Model(string Column1, string Column2, string Column3, string Column4, string Column5);

    private List<Model> _items = new List<Model>();

    protected override void OnInitialized()
    {
        for (var i = 0; i < 20000; i++)
            _items.Add(new Model($""Value_{i}"", $""Value_{i}"", $""Value_{i}"", $""Value_{i}"", $""Value_{i}""));
    }
}";

        public const string DataGridVirtualizeServerDataExample = @"@using System.Threading

<MudDataGrid T=""int"" VirtualizeServerData=""ServerDataFunc"" Virtualize=""true"" Filterable FixedHeader Height=""400px"" ItemSize=""52.68f"">
    <Columns>
        <PropertyColumn Property=""x => x"" Title=""Number"" />
    </Columns>
    <RowLoadingContent>
        <tr class=""mud-table-row"">
            <td class=""mud-table-cell"" colspan=""1000"">
                Loading...
            </td>
        </tr>
    </RowLoadingContent>
</MudDataGrid>

@code {
    private readonly List<int> _items = Enumerable.Range(0, 51).ToList();
    
    private async Task<GridData<int>> ServerDataFunc(GridStateVirtualize<int> gridState, CancellationToken token)
    {
        try
        {
            var result = _items.ToList();

            await Task.Delay(1000, token);

            if (gridState.SortDefinitions.Count > 0) 
            {
                var firstSort = gridState.SortDefinitions.First();
                result = firstSort.Descending 
                    ? result.OrderByDescending(firstSort.SortFunc).ToList() 
                    : result.OrderBy(firstSort.SortFunc).ToList();
            }

            if (gridState.FilterDefinitions.Any())
            {
                var filterFunctions = gridState.FilterDefinitions.Select(x => x.GenerateFilterFunction());
                result = result
                    .Where(x => filterFunctions.All(f => f(x)))
                    .ToList();
            }

            var totalNumberOfFilteredItems = result.Count;
            
            result = result
                .Skip(gridState.StartIndex)
                .Take(gridState.Count)
                .ToList();

            return new GridData<int>
            {
                Items = result,
                TotalItems = totalNumberOfFilteredItems
            };
        }
        catch (TaskCanceledException)
        {
            return new GridData<int>
            {
                Items = [],
                TotalItems = 0
            };
        }
    }
}";

        public const string DataGridVisualStylingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudDataGrid Items=""@Elements.Take(4)"" Hover=""@_hover"" Dense=""@_dense"" Striped=""@_striped"" Bordered=""@_bordered""
    RowStyleFunc=""@_rowStyleFunc"">
    <Columns>
        <PropertyColumn Property=""x => x.Number"" Title=""Nr"" />
        <PropertyColumn Property=""x => x.Sign"" />
        <PropertyColumn Property=""x => x.Name"" CellStyleFunc=""@_cellStyleFunc"" />
        <PropertyColumn Property=""x => x.Position"" />
        <PropertyColumn Property=""x => x.Molar"" Title=""Molar mass"" />
    </Columns>
</MudDataGrid>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Value=""_hover"" Color=""Color.Primary"">Hover</MudSwitch>
    <MudSwitch @bind-Value=""_dense"" Color=""Color.Secondary"">Dense</MudSwitch>
    <MudSwitch @bind-Value=""_striped"" Color=""Color.Tertiary"">Striped</MudSwitch>
    <MudSwitch @bind-Value=""_bordered"" Color=""Color.Warning"">Bordered</MudSwitch>
</div>

@code {
    private IEnumerable<Element> Elements = new List<Element>();
    private bool _hover;
    private bool _dense;
    private bool _striped;
    private bool _bordered;
    // style the rows where the Element.Position == 0 to have italic text.
    private Func<Element, int, string> _rowStyleFunc => (x, i) =>
    {
        if (x.Position == 0)
            return ""font-style:italic"";

        return """";
    };
    // style the cells according to the element's physical classification and the molar mass.
    private Func<Element, string> _cellStyleFunc => x =>
    {
        string style = """";

        if (x.Number == 1)
            style += ""background-color:#8CED8C"";

        else if (x.Number == 2)
            style += ""background-color:#E5BDE5"";

        else if (x.Number == 3)
            style += ""background-color:#EACE5D"";

        else if (x.Number == 4)
            style += ""background-color:#F1F165"";

        if (x.Molar > 5)
            style += "";font-weight:bold"";

        return style;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string DatePickerActionButtonsExample = @"<MudDatePicker @ref=""_picker"" Label=""With action buttons"" @bind-Date=""_date"" AutoClose=""@_autoClose"">
    <PickerActions>
        <MudButton Class=""mr-auto align-self-start"" OnClick=""@(() => _picker.ClearAsync())"">Clear</MudButton>
        <MudButton OnClick=""@(() => _picker.CloseAsync(false))"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""@(() => _picker.CloseAsync())"">Ok</MudButton>
    </PickerActions>
</MudDatePicker>
<MudSwitch @bind-Value=""_autoClose"" Color=""Color.Secondary"">AutoClose</MudSwitch>

@code {
    private MudDatePicker _picker;
    private DateTime? _date = DateTime.Today;
    private bool _autoClose;
}";

        public const string DatePickerBasicUsageExample = @"<MudDatePicker Label=""Basic example"" @bind-Date=""_date""/>
<MudDatePicker Label=""Editable with Placeholder"" Editable=""true"" @bind-Date=""_date"" Placeholder=""Select Date"" />
<MudDatePicker Label=""Only Calendar"" @bind-Date=""_date"" ShowToolbar=""false"" />
<MudDatePicker Label=""Date Format"" @bind-Date=""_date"" DateFormat=""dd.MM.yyyy"" />
<MudDatePicker Label=""Show week number"" ShowWeekNumbers=""true"" @bind-Date=""_date"" />
<MudDatePicker Label=""Display two months"" DisplayMonths=""2"" TitleDateFormat=""dddd, dd MMMM"" @bind-Date=""_date"" />

@code {
    private DateTime? _date = DateTime.Today;
}";

        public const string DatePickerColorExample = @"<MudDatePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Success"" Rounded=""true"" Date=""@(DateTime.Today.AddDays(1))"" />
<MudDatePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" Rounded=""true"" Date=""@(DateTime.Today.AddDays(1))"" />";

        public const string DatePickerDialogExample = @"<MudDatePicker PickerVariant=""PickerVariant.Dialog"" Label=""Picker example"" Text=""2020-10-19"" />
<MudDatePicker PickerVariant=""PickerVariant.Dialog"" Label=""Only Calendar"" Text=""2020-10-19"" ShowToolbar=""false"" HelperText=""No header"" />
<MudDatePicker PickerVariant=""PickerVariant.Dialog"" Label=""Date Format"" HelperText=""For custom cultures"" DateFormat=""dd/MM/yyyy"" Date=""@(new DateTime(2020,10,19))"" />";

        public const string DatePickerDisableCustomizeDaysExample = @"<MudDatePicker 
    Label=""Not working days, Sunday in red""   
    IsDateDisabledFunc=""@((DateTime dt)=>((int)dt.DayOfWeek > 0 && (int)dt.DayOfWeek < 6))""
    AdditionalDateClassesFunc=""@((DateTime dt)=>((int)dt.DayOfWeek == 0 ? ""red-text text-accent-4"" : """"))""/>";

        public const string DatePickerElevationExample = @"<MudDatePicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""1"" Date=""@(DateTime.Today.AddDays(1))"" />
<MudDatePicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""12"" Date=""@(DateTime.Today.AddDays(1))"" />";

        public const string DatePickerFixedValuesExample = @"<MudDatePicker Label=""Year-Month Picker (Fixed Day)"" HelperText=""@_yearMonth?.ToShortDateString()"" @bind-Date=""_yearMonth"" OpenTo=""OpenTo.Year"" FixDay=""1"" DateFormat=""yyyy/MM"" />
<MudDatePicker Label=""Month-Day Picker (Fixed Year)"" HelperText=""@_monthDay?.ToShortDateString()"" @bind-Date=""_monthDay"" OpenTo=""OpenTo.Month"" FixYear=""2021"" DateFormat=""MM/dd"" />
<MudDatePicker Label=""Year-Day Picker (Fixed Month)"" HelperText=""@_yearDay?.ToShortDateString()"" @bind-Date=""_yearDay"" OpenTo=""OpenTo.Year"" FixMonth=""10"" />
<MudDatePicker Label=""Year Picker (Fixed Month and Day)"" HelperText=""@_year?.ToShortDateString()"" @bind-Date=""_year"" OpenTo=""OpenTo.Year"" FixMonth=""@DateTime.Today.Month"" FixDay=""@DateTime.Today.Day"" DateFormat=""yyyy"" />
<MudDatePicker Label=""Month Picker (Fixed Year and Day)"" HelperText=""@_month?.ToShortDateString()"" @bind-Date=""_month"" OpenTo=""OpenTo.Month"" FixYear=""@DateTime.Today.Year"" FixDay=""@DateTime.Today.Day"" DateFormat=""MMM"" />
<MudDatePicker Label=""Day Picker (Fixed Year and Month)"" HelperText=""@_day?.ToShortDateString()"" @bind-Date=""_day"" FixYear=""@DateTime.Today.Year"" FixMonth=""@DateTime.Today.Month"" DateFormat=""dd"" />

@code { 
    private DateTime? _yearMonth;
    private DateTime? _monthDay;
    private DateTime? _yearDay;
    private DateTime? _year;
    private DateTime? _month;
    private DateTime? _day;
}";

        public const string DatePickerGoToDateExample = @"<MudDatePicker @ref=""_picker"" @bind-Date=""_date"" PickerVariant=""PickerVariant.Static"" MaxDate=""_maxDate"">
    <PickerActions>
        <MudButton Class=""mr-auto align-self-start"" OnClick=""TodayAsync"">Today</MudButton>
    </PickerActions>
</MudDatePicker>

<div class=""d-flex flex-column gap-4"">
    <MudButton Color=""Color.Primary"" Variant=""Variant.Filled"" OnClick=""CurrentDate"">Move To Current Date</MudButton>
    <MudButton Color=""Color.Primary"" Variant=""Variant.Filled"" OnClick=""MudReleaseAsync"">When First Mud Released?</MudButton>
    <MudButton Color=""Color.Primary"" Variant=""Variant.Filled"" OnClick=""GoMaxDateWithoutSubmitAsync"">Go To Max Date Without Submit</MudButton>
</div>

@code {
    private MudDatePicker _picker;
    private DateTime? _date = DateTime.Today.AddDays(210);
    private DateTime _maxDate = new DateTime(2050, 12, 31);

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _picker.GoToDate();
        }
    }

    private Task TodayAsync()
    {
        return _picker.GoToDate(DateTime.Today);
    }

    private void CurrentDate()
    {
        _picker.GoToDate();
    }

    private Task MudReleaseAsync()
    {
        return _picker.GoToDate(new DateTime(2020, 10, 18));
    }

    private Task GoMaxDateWithoutSubmitAsync()
    {
        return _picker.GoToDate(_maxDate, false);
    }
}";

        public const string DatePickerInternationalizationExample = @"@using System.Globalization
@using System.Reflection

<MudDatePicker Label=""Current UI Culture"" @bind-Date=""_date"" />
<MudDatePicker Label=""Persian"" @bind-Date=""_date"" Culture=""@GetPersianCulture()"" TitleDateFormat=""dddd, dd MMMM""/>
<MudDatePicker Label=""Chinese"" @bind-Date=""_date"" Culture=""@CultureInfo.GetCultureInfo(""zh-Hans"")"" TitleDateFormat=""dddd, dd MMMM""/>

@code {
    private DateTime? _date = new DateTime(2021, 02, 14); // 1399-11-26 in Persian calendar

    public CultureInfo GetPersianCulture()
    {
        var culture = new CultureInfo(""fa-IR"");
        DateTimeFormatInfo formatInfo = culture.DateTimeFormat;
        formatInfo.AbbreviatedDayNames = new[] { ""ی"", ""د"", ""س"", ""چ"", ""پ"", ""ج"", ""ش"" };
        formatInfo.DayNames = new[] { ""یکشنبه"", ""دوشنبه"", ""سه شنبه"", ""چهار شنبه"", ""پنجشنبه"", ""جمعه"", ""شنبه"" };
        var monthNames = new[]
        {
            ""فروردین"", ""اردیبهشت"", ""خرداد"", ""تیر"", ""مرداد"", ""شهریور"", ""مهر"", ""آبان"", ""آذر"", ""دی"", ""بهمن"",
            ""اسفند"",
            """",
        };
        formatInfo.AbbreviatedMonthNames =
            formatInfo.MonthNames =
                formatInfo.MonthGenitiveNames = formatInfo.AbbreviatedMonthGenitiveNames = monthNames;
        formatInfo.AMDesignator = ""ق.ظ"";
        formatInfo.PMDesignator = ""ب.ظ"";
        formatInfo.ShortDatePattern = ""yyyy/MM/dd"";
        formatInfo.LongDatePattern = ""dddd, dd MMMM,yyyy"";
        formatInfo.FirstDayOfWeek = DayOfWeek.Saturday;
        Calendar cal = new PersianCalendar();
        FieldInfo fieldInfo = culture.GetType().GetField(""calendar"", BindingFlags.NonPublic | BindingFlags.Instance);
        if (fieldInfo != null)
            fieldInfo.SetValue(culture, cal);
        FieldInfo info = formatInfo.GetType().GetField(""calendar"", BindingFlags.NonPublic | BindingFlags.Instance);
        if (info != null)
            info.SetValue(formatInfo, cal);
        culture.NumberFormat.NumberDecimalSeparator = ""/"";
        culture.NumberFormat.DigitSubstitution = DigitShapes.NativeNational;
        culture.NumberFormat.NumberNegativePattern = 0;
        return culture;
    }
}";

        public const string DatePickerMaskExample = @"<MudDatePicker Label=""dd.MM.yyyy"" Editable=""true"" @bind-Date=""_date1"" Mask=""@(new DateMask(""dd.MM.yyyy""))"" DateFormat=""dd.MM.yyyy"" Placeholder=""de-AT Date"" />
<MudDatePicker Label=""MM/dd/yyyy"" Editable=""true"" @bind-Date=""_date2"" Mask=""@(new DateMask(""MM/dd/yyyy""))"" DateFormat=""MM/dd/yyyy"" Placeholder=""en-US Date"" />
<MudDatePicker Label=""yyyy-MM-dd"" Editable=""true"" @bind-Date=""_date3"" Mask=""@(new DateMask(""0000-00-00""))"" DateFormat=""yyyy-MM-dd"" Placeholder=""ISO Date"" />

@code {
    private DateTime? _date1 = null;
    private DateTime? _date2 = DateTime.Today;
    private DateTime? _date3 = null;
}";

        public const string DatePickerReadOnlyExample = @"<MudDatePicker Label=""Read only"" @bind-Date=""_date"" ReadOnly=""true""/>

@code {
    private DateTime? _date = DateTime.Today;
}";

        public const string DatePickerStaticExample = @"<MudDatePicker PickerVariant=""PickerVariant.Static"" Date=""@(DateTime.Today.AddDays(1))"" />
<MudHidden Breakpoint=""@Breakpoint.Xs"">
    <MudDatePicker PickerVariant=""PickerVariant.Static"" Orientation=""Orientation.Landscape"" Date=""@(DateTime.Today.AddDays(1))"" />
</MudHidden>";

        public const string DatePickerTextParseExample = @"@using System.Globalization

<MudDatePicker Label=""Flexible Date"" Editable=""true"" Date=""_date"" ImmediateText=""true"" Placeholder=""day.month.year"" DateFormat=""@_dateFormat"" TextChanged=""DatePickerTextChanged"" HelperText=""@_bound"" Clearable=""true"" />

@code {
    private DateTime? _date = null;
    private string _dateFormat = ""dd.MM.yyyy"";
    private string _bound = ""not set"";

    private void DatePickerTextChanged(string value)
    {
        if (value == null || value.Length < 6)
        {
            _date = null;
        }
        else
        {
            string[] formats = { ""ddMMyy"", ""dd.MM.yyyy"", ""dd.M.yyyy"", ""d.MM.yyyy"", ""d.M.yyyy"", ""dd.MM.yy"", ""dd.M.yy"", ""d.MM.yy"", ""d.M.yy"" };
            if (DateTime.TryParseExact(value, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime validDate))
            {
                _date = validDate;
            }
            else
            {
                _date = null;
            }
        }

        if (_date.HasValue)
        {
            _bound = _date.Value.ToString(_dateFormat); 
        }
        else
        {
            _bound = ""not set"";
        }
    }
}";

        public const string DatePickerViewsExample = @"<MudDatePicker Label=""Year"" OpenTo=""OpenTo.Year"" Text=""2020-10-19"" />
<MudDatePicker Label=""Month"" OpenTo=""OpenTo.Month"" Text=""2020-10-19"" />
<MudDatePicker Label=""Date"" Text=""2020-10-19"" />";

        public const string DateRangePickerUsageExample = @"<MudStack>
    <MudDateRangePicker Label=""Basic range picker"" @bind-DateRange=""_dateRange"" />
    <MudDateRangePicker Label=""Basic range picker (editable)"" Editable=""true"" @bind-DateRange=""_dateRange"" />
    <MudDateRangePicker Label=""Placeholder"" @bind-DateRange=""_dateRange"" PlaceholderStart=""Start Date"" PlaceholderEnd=""End Date"" />
    <MudDateRangePicker Label=""Clearable"" @bind-DateRange=""_dateRange"" Clearable=""true"" />
    <MudDateRangePicker Label=""Range picker format"" HelperText=""For custom cultures"" DateFormat=""dd/MM/yyyy"" TitleDateFormat=""dddd, dd. MMMM"" @bind-DateRange=""_dateRange"" />
    <MudDateRangePicker Label=""Custom start month"" StartMonth=""@DateTime.Now.AddMonths(-1)"" @bind-DateRange=""_dateRange"" />
    <MudDateRangePicker @ref=""_picker"" Label=""With action buttons"" @bind-DateRange=""_dateRange"" AutoClose=""@_autoClose"">
        <PickerActions>
            <MudButton Class=""mr-auto align-self-start"" OnClick=""@(() => _picker.ClearAsync())"">Clear</MudButton>
            <MudButton OnClick=""@(() => _picker.CloseAsync(false))"">Cancel</MudButton>
            <MudButton Color=""Color.Primary"" OnClick=""@(() => _picker.CloseAsync())"">Ok</MudButton>
        </PickerActions>
    </MudDateRangePicker>
    <MudSwitch @bind-Value=""_autoClose"" Color=""Color.Secondary"">AutoClose</MudSwitch>
</MudStack>

@code { 
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
}";

        public const string DateRangePickerActionButtonsExample = @"<MudStack>
    <MudDateRangePicker @ref=""_picker"" Label=""With action buttons"" @bind-DateRange=""_dateRange"" 
                        AutoClose=""@_autoClose"" PickerVariant=""PickerVariant.Dialog"">
        <PickerActions>
            <MudButton Class=""mr-auto align-self-start"" OnClick=""@(() => _picker.ClearAsync())"">Clear</MudButton>
            <MudButton OnClick=""@(() => _picker.CloseAsync(false))"">Cancel</MudButton>
            <MudButton Color=""Color.Primary"" OnClick=""@(() => _picker.CloseAsync())"">Ok</MudButton>
        </PickerActions>
    </MudDateRangePicker>
    <MudSwitch @bind-Value=""_autoClose"" Color=""Color.Secondary"">AutoClose</MudSwitch>
</MudStack>

@code {
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private bool _autoClose;
}";

        public const string DateRangePickerBasicUsageExample = @"<MudStack AlignItems=""AlignItems.Center"" Style=""width:650px; height:450px"">
    <MudDateRangePicker PickerVariant=""@_variant"" @bind-DateRange=""@_dateRange"" Margin=""Margin.Dense"" />
    <MudSpacer />
    <MudToggleGroup T=""PickerVariant"" SelectionMode=""SelectionMode.SingleSelection"" Value=""@_variant"" ValueChanged=""@OnValueChanged"" 
                    Color=""Color.Primary"" CheckMark=""true"" FixedContent=""true"">
        <MudToggleItem Value=""@(PickerVariant.Inline)"" Text=""Inline"" />
        <MudToggleItem Value=""@(PickerVariant.Dialog)"" Text=""Dialog"" />
        <MudToggleItem Value=""@(PickerVariant.Static)"" Text=""Static"" />
    </MudToggleGroup>
</MudStack>

@code {
    private PickerVariant _variant = PickerVariant.Static;
    private DateRange _dateRange { get; set; }

    private void OnValueChanged(PickerVariant variant)
    {
        _dateRange = null;
        _variant = variant;
    }
}";

        public const string DateRangePickerEditableExample = @"<MudStack>
    <MudDateRangePicker @bind-DateRange=""@_dateRange"" Margin=""Margin.Dense"" ReadOnly=""@(!_editable)"" Clearable=""@_clearable"" 
                        PlaceholderStart=""Start Date"" PlaceholderEnd=""End Date""/>

    <MudStack Row=""true"">
        <MudSwitch @bind-Value=""_editable"" Color=""Color.Secondary"">Editable</MudSwitch>
        <MudSwitch @bind-Value=""_clearable"" Color=""Color.Secondary"">Clearable</MudSwitch>
    </MudStack>
</MudStack>

@code {
    private bool _editable = true;
    private bool _clearable = true;
    private DateRange _dateRange { get; set; }
}";

        public const string DateRangePickerFormatExample = @"<MudStack>
    <MudDateRangePicker @bind-DateRange=""@_dateRange"" DateFormat=""dddd, dd MMMM, yyyy"" TitleDateFormat=""MMMM dd"" Margin=""Margin.Dense"" />
</MudStack>

@code {
    private DateRange _dateRange { get; set; }
}";

        public const string DateRangePickerMinMaxDateExample = @"<MudStack>
    <MudDateRangePicker @bind-DateRange=""@_dateRange"" MinDate=""_minDate"" MaxDate=""@_maxDate"" Margin=""Margin.Dense"" HelperText=""@HelperText""/>
</MudStack>

@code {
    private DateRange _dateRange { get; set; }
    private DateTime _minDate = DateTime.Now.Date;
    private DateTime _maxDate = DateTime.Now.Date.AddMonths(1);

    private string HelperText => $""Range: {_minDate:M} to {_maxDate:M}"";
}";

        public const string DialogBlurryExample = @"@inject IDialogService DialogService


<MudButton @onclick=""OpenDialogAsync"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Simple Dialog
</MudButton>

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

@code {

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { BackgroundClass = ""my-custom-class"" };

        return DialogService.ShowAsync<DialogBlurryExample_Dialog>(""Simple Dialog"", options);
    }
}";

        public const string DialogBlurryExample_Dialog = @"<MudDialog>
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
}";

        public const string DialogConfigurationExample = @"<MudDialogProvider
    FullWidth=""true""
    MaxWidth=""MaxWidth.ExtraSmall""
    CloseButton=""true""
    BackdropClick=""false""
    NoHeader=""true""
    Position=""DialogPosition.Center""
    CloseOnEscapeKey=""true""
    BackgroundClass=""my-custom-class""/>";

        public const string DialogFocusExample = @"@inject IDialogService DialogService


<MudButton @onclick=""OpenDialogAsync"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Dialog
</MudButton>

@code {

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<DialogFocusExample_Dialog>(""Last element focused"", options);
    }
}";

        public const string DialogFocusExample_Dialog = @"<MudDialog DefaultFocus=""DefaultFocus.LastChild"">
    <DialogContent>
        Dialog content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
        <MudButton Color=""Color.Success"" >Focused Button</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
}";

        public const string DialogInlineExample = @"<div class=""d-flex"">
    <MudButton OnClick=""OpenDialog"" Variant=""Variant.Filled"" Color=""Color.Primary"">
        Edit rating
    </MudButton>
    <MudRating SelectedValue=""_rating"" Disabled=""true"" Class=""mt-1 ml-3"" />
</div>

<MudDialog @bind-Visible=""_visible"" Options=""_dialogOptions"">
    <TitleContent>
        <MudText Typo=""Typo.h6"">
            <MudIcon Icon=""@Icons.Material.Filled.Edit"" Class=""mr-3"" /> Edit rating
        </MudText>
    </TitleContent>
    <DialogContent>
        <p>How awesome are inline dialogs?</p>
        <MudRating @bind-SelectedValue=""_rating"" Class=""mt-3"" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""Submit"" Class=""px-10"">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _visible;
    private int _rating;
    private readonly DialogOptions _dialogOptions = new() { FullWidth = true };

    private void OpenDialog() => _visible = true;

    private void Submit() => _visible = false;
}";

        public const string DialogKeyboardNavigationExample = @"@inject IDialogService DialogService


<MudButton @onclick=""OpenDialogAsync"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Select Coffee
</MudButton>
<MudChip T=""string"">@_returnValue</MudChip>

@code {

    string _returnValue = ""Dialog return value (not yet set)"";

    private async Task OpenDialogAsync()
    {    
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogReference = await DialogService.ShowAsync<DialogKeyboardNavigationExample_Dialog>(""Dialog Keyboard Accessibility Demo"", options);
        _returnValue = ""Waiting for dialog to conclude ..."";
        StateHasChanged();
        var dialogResult = await dialogReference.Result;
        if (dialogResult.Canceled) {
            _returnValue = ""Dialog was canceled"";
            StateHasChanged();
        }
        else {
            _returnValue = $""Dialog returned '{dialogResult.Data}'"";
            StateHasChanged();
        }
    }
}";

        public const string DialogKeyboardNavigationExample_Dialog = @"<MudDialog OnKeyDown=""OnKeyDownAsync"">
    <DialogContent>
        <MudText>Select your favourite coffee. Hit Enter to accept or Escape to cancel.</MudText>
        <MudSelect T=""string"" Label=""Favorite Coffee"" @bind-Value=""_returnValue"">
            <MudSelectItem Value=""@(""Cappuccino"")"" />
            <MudSelectItem Value=""@(""Cafe Latte"")"" />
            <MudSelectItem Value=""@(""Espresso"")"" />
            <MudSelectItem Value=""@(""Irish Coffee"")"" />
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] 
    private IDialogService DialogService { get; set; } // for MessageBox

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private string _returnValue;

    private void Submit() => MudDialog.Close(DialogResult.Ok(_returnValue));

    private void Cancel() => MudDialog.Cancel();

    private async Task OnKeyDownAsync(KeyboardEventArgs args)
    {
        switch(args.Key) {
            case ""Enter"":
            case ""NumpadEnter"":
                if (string.IsNullOrEmpty(_returnValue)) {
                    await DialogService.ShowMessageBox(
                        ""Sorry"",
                        @""You must either select a coffee and close with Enter or cancel with Escape!"", 
                        yesText:""Got it"", 
                        options: new DialogOptions() { CloseOnEscapeKey = true });
                    return;
                }
                Submit();
                break;
        }
    }

}";

        public const string DialogNestedExample = @"@inject IDialogService DialogService

<MudButton @onclick=""OpenDialogAsync"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Simple Dialog
</MudButton>

@code {
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<DialogNestedExample_Dialog>(""First Level Dialog"", options);
    }
}";

        public const string DialogNestedExample_Dialog = @"@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""OpenSecondDialogAsync"">Open Second Dialog</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private Task OpenSecondDialogAsync()
    {
        return DialogService.ShowAsync<DialogNestedExample_Dialog2>(""Second Level Dialog"");
    }
}";

        public const string DialogNestedExample_Dialog2 = @"<MudDialog>
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""CancelAll"">Close All</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private void CancelAll() => MudDialog.CancelAll();
}";

        public const string DialogNestedInlineExample = @"@inject IDialogService DialogService

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""Open"">Open Inline</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""Open2Async"">Open With Show</MudButton>

@*Outer inline dialog*@
<MudDialog @bind-Visible=""_visible"">
    <DialogContent>
        <MudText>Hi There, I'm an inline dialog!</MudText>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Tertiary"" OnClick=""OpenNested"">Open Nested</MudButton>
        @*Nested inline dialog*@
        <MudDialog @bind-Visible=""_nestedVisible"">
            <DialogContent>
                <MudText Class=""nested"">Nested inline dialog!</MudText>
            </DialogContent>
            <DialogActions>
                <MudButton Color=""Color.Primary"" OnClick=""CloseNested"">Close</MudButton>
            </DialogActions>
        </MudDialog>
    </DialogContent>
    <DialogActions>
        <MudButton Color=""Color.Primary"" OnClick=""Close"">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _visible;
    private bool _nestedVisible;

    private void Open() => _visible = true;

    private void Close() => _visible = false;

    private void OpenNested() => _nestedVisible = true;

    private void CloseNested() => _nestedVisible = false;

    @*Open a non-inline dialog component that nests an inline dialog*@
    private Task Open2Async() => DialogService.ShowAsync<DialogNestedInlineExample_Dialog>();
}";

        public const string DialogNestedInlineExample_Dialog = @"@*Outer dialog*@
<MudDialog>
    <DialogContent>
        <MudText>Hi There, I'm a regular dialog!</MudText>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Tertiary"" OnClick=""OpenNested"">Open Nested</MudButton>
        @*Nested dialog*@
        <MudDialog @bind-Visible=""_nestedVisible"">
            <DialogContent>
                <MudText Class=""nested"">Nested inline dialog!</MudText>
            </DialogContent>
            <DialogActions>
                <MudButton Color=""Color.Primary"" OnClick=""CloseNested"">Close</MudButton>
            </DialogActions>
        </MudDialog>
    </DialogContent>
    <DialogActions>
        <MudButton Color=""Color.Primary"" OnClick=""(() => MudDialog.Close())"">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _nestedVisible;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void OpenNested() => _nestedVisible = true;

    private void CloseNested() => _nestedVisible = false;
}";

        public const string DialogOptionsExample = @"@inject IDialogService Dialog

<MudButton OnClick=""@(() => OpenDialogAsync(_maxWidth))"">Open MaxWidth Dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_closeButton))"" Color=""Color.Primary"">Close Button Dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_noHeader))"" Color=""Color.Secondary"">No header Dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_backdropClick))"" Color=""Color.Tertiary"">Disable backdrop dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_fullScreen))"" Color=""Color.Info"">Full Screen Dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_topCenter))"" Color=""Color.Success"">Top Center Dialog</MudButton>


@code {
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private readonly DialogOptions _closeButton = new() { CloseButton = true };
    private readonly DialogOptions _noHeader = new() { NoHeader = true };
    private readonly DialogOptions _backdropClick = new() { BackdropClick = false };
    private readonly DialogOptions _fullScreen = new() { FullScreen = true, CloseButton = true };
    private readonly DialogOptions _topCenter = new() { Position = DialogPosition.TopCenter };

    private Task OpenDialogAsync(DialogOptions options)
    {
        return Dialog.ShowAsync<DialogUsageExample_Dialog>(""Custom Options Dialog"", options);
    }
}";

        public const string DialogOptionsExample_Dialog = @"<MudDialog>
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
}";

        public const string DialogPassingDataExample = @"@using MudBlazor.Examples.Data.Models

@inject IDialogService DialogService

<div class=""d-flex flex-wrap"">
    @foreach (var item in Servers)
    {
        <MudPaper Class=""d-flex align-center pa-2 mx-2 my-2"">
            <MudText>@item.Name</MudText>
            <MudButton Variant=""Variant.Text"" Color=""Color.Error"" OnClick=""@((e) => DeleteServerAsync(item))"">Delete</MudButton>
        </MudPaper>
    }
</div>

@code {

    private async Task DeleteServerAsync(Server server)
    {
        var parameters = new DialogParameters<DialogPassingDataExample_Dialog> { { x => x.Server, server } };

        var dialog = await DialogService.ShowAsync<DialogPassingDataExample_Dialog>(""Delete Server"", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            //In a real world scenario we would reload the data from the source here since we ""removed"" it in the dialog already.
            Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }

    //Pretend we are loading this data from a database or API
    public List<Server> Servers { get; } = new List<Server>
    {
        new Server{ Id = Guid.NewGuid(), Name = ""Server1"", Location = ""Denmark"", IpAddress = ""193.254.123.1"" },
        new Server{ Id = Guid.NewGuid(), Name = ""Server2"", Location = ""Sweden"", IpAddress = ""127.0.0.1"" },
        new Server{ Id = Guid.NewGuid(), Name = ""Server3"", Location = ""Russia"", IpAddress = ""173.164.2.1"" },
        new Server{ Id = Guid.NewGuid(), Name = ""Server4"", Location = ""Germany"", IpAddress = ""193.168.1.1"" },
    };
}";

        public const string DialogPassingDataExample_Dialog = @"@using MudBlazor.Examples.Data.Models

@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo=""Typo.h6"">
            <MudIcon Icon=""@Icons.Material.Filled.DeleteForever"" Class=""mr-3 mb-n1""/>
            Delete server?
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Value=""@Server.Id.ToString()"" Label=""Server ID"" ReadOnly=""true""/>
        <MudTextField Value=""@Server.Name"" Label=""Server Name"" ReadOnly=""true""/>
        <MudTextField Value=""@Server.Location"" Label=""Location"" ReadOnly=""true""/>
        <MudTextField Value=""@Server.IpAddress"" Label=""IP Address"" ReadOnly=""true""/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Error"" OnClick=""DeleteServer"">Delete Server</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Server Server { get; set; } = new Server();

    private void Cancel() => MudDialog.Cancel();

    private void DeleteServer()
    {
        //In a real world scenario this bool would probably be a service to delete the item from api/database
        Snackbar.Add(""Server Deleted"", Severity.Success);
        MudDialog.Close(DialogResult.Ok(Server.Id));
    }
}";

        public const string DialogScrollableExample = @"@inject IDialogService DialogService

<MudButton OnClick=""OpenDialogAsync"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Scrollable Dialog
</MudButton>

@code {
    private bool _licenseAccepted = false;

    private async Task OpenDialogAsync()
    {
        var dialog = await DialogService.ShowAsync<DialogScrollableExample_Dialog>(""MudBlazor License"");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _licenseAccepted = (bool)(result.Data ?? false);
        }
    }
}";

        public const string DialogScrollableExample_Dialog = @"<MudDialog Style=""height: 400px"">
    <DialogContent>
        @if (_loading)
        {
            <MudProgressCircular Indeterminate=""true""></MudProgressCircular>
        }
        else
        {
            <MudText Style=""white-space: pre-wrap;"">@_licenseText</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color=""Color.Primary"" OnClick=""Ok"">Accept</MudButton>
    </DialogActions>
</MudDialog>


@code {
    private string _licenseText;
    private bool _loading;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Inject]
    private HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _loading = true;
        var response = await HttpClient.GetAsync(""https://raw.githubusercontent.com/MudBlazor/MudBlazor/master/LICENSE"");
        _licenseText = await response.Content.ReadAsStringAsync();
        _loading = false;
    }

    private void Ok() => MudDialog.Close(DialogResult.Ok(true));
}";

        public const string DialogSetOptionsExample = @"@inject IDialogService DialogService

<MudButton OnClick=""OpenDialogAsync"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Options Dialog
</MudButton>

@code {

    private Task OpenDialogAsync()
    {
        return DialogService.ShowAsync<DialogSetOptionsExample_Dialog>(""Options Dialog"");
    }
}";

        public const string DialogSetOptionsExample_Dialog = @"<MudDialog>
    <DialogContent>
        <div class=""d-flex flex-column py-1"">
            <MudButton OnClick=""ChangeTitleAsync"">Change Title</MudButton>
            <MudButton OnClick=""ToggleCloseButtonAsync"">Toggle Close Button</MudButton>
            <MudButton OnClick=""ToggleFullWidthAsync"">Toggle Full Width</MudButton>
            <MudButton OnClick=""ToggleHeaderAsync"">Toggle Header</MudButton>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color=""Color.Primary"" OnClick=""Close"">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Close() => MudDialog.Close(DialogResult.Ok(true));

    private Task ChangeTitleAsync() => MudDialog.SetTitleAsync($""Current time is: {DateTime.Now}"");

    private Task ToggleCloseButtonAsync()
    {
        var options = MudDialog.Options with
        {
            CloseButton = !(MudDialog.Options.CloseButton ?? false)
        };

        return MudDialog.SetOptionsAsync(options);
    }

    private Task ToggleFullWidthAsync()
    {
        var options = MudDialog.Options with
        {
            FullWidth = !(MudDialog.Options.FullWidth ?? true)
        };

        return MudDialog.SetOptionsAsync(options);
    }

    private Task ToggleHeaderAsync()
    {
        var options = MudDialog.Options with
        {
            NoHeader = !(MudDialog.Options.NoHeader ?? false)
        };

        return MudDialog.SetOptionsAsync(options);
    }
}";

        public const string DialogStylingExample = @"@inject IDialogService DialogService

<MudButton @onclick=""OpenDialogAsync"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Custom Styled Dialog
</MudButton>

@code {
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };

        return DialogService.ShowAsync<DialogStylingExample_Dialog>(""Styling Example Dialog"", options);
    }
}";

        public const string DialogStylingExample_Dialog = @"<MudDialog Class=""blur dialog-background"" TitleClass=""blur dialog-background-title"" ContentClass=""dialog-background-surface py-10"" ActionsClass=""dialog-background-surface"">
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton Color=""Color.Error"" OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .blur {
        backdrop-filter: blur(10px);
    }

    .dialog-background {
        background-color: transparent;
    }

    .dialog-background-title {
        background: rgb(from var(--mud-palette-info-lighten) r g b / 50%);
        color: var(--mud-palette-white);
    }

    .dialog-background-surface {
        background: rgb(from var(--mud-palette-surface) r g b / 75%);
    }
</style>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
}";

        public const string DialogTemplateExample = @"@inject IDialogService DialogService


<MudButton @onclick=""DeleteUserAsync"" Variant=""Variant.Filled"" Color=""Color.Error"">Delete Records</MudButton>
<MudButton @onclick=""ConfirmAsync"" Variant=""Variant.Filled"" Color=""Color.Success"">Remove Email</MudButton>
<MudButton @onclick=""DownloadAsync"" Variant=""Variant.Filled"" Color=""Color.Warning"">Slow Computer</MudButton>

@code {

    private Task DeleteUserAsync()
    {
        var parameters = new DialogParameters<DialogTemplateExample_Dialog>
        {
            { x => x.ContentText, ""Do you really want to delete these records? This process cannot be undone."" },
            { x => x.ButtonText, ""Delete"" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return DialogService.ShowAsync<DialogTemplateExample_Dialog>(""Delete"", parameters, options);
    }

    private Task ConfirmAsync()
    {
        var parameters = new DialogParameters<DialogTemplateExample_Dialog>
        {
            { x => x.ContentText, ""Are you sure you want to remove thisguy@emailz.com from this account?"" },
            { x => x.ButtonText, ""Yes"" },
            { x => x.Color, Color.Success }
        };

        return DialogService.ShowAsync<DialogTemplateExample_Dialog>(""Confirm"", parameters);
    }

    private Task DownloadAsync()
    {
        var parameters = new DialogParameters<DialogTemplateExample_Dialog>
        {
            { x => x.ContentText, ""Your computer seems very slow, click the download button to download free RAM."" },
            { x => x.ButtonText, ""Download"" },
            { x => x.Color, Color.Info }
        };

        return DialogService.ShowAsync<DialogTemplateExample_Dialog>(""Slow Computer Detected"", parameters);
    }
}";

        public const string DialogTemplateExample_Dialog = @"<MudDialog>
    <DialogContent>
        <MudText>@ContentText</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""@Color"" Variant=""Variant.Filled"" OnClick=""Submit"">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string ContentText { get; set; }

    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public Color Color { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
}";

        public const string DialogUsageExample = @"@inject IDialogService DialogService

<MudButton @onclick=""OpenDialogAsync"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Simple Dialog
</MudButton>

@code {

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<DialogUsageExample_Dialog>(""Simple Dialog"", options);
    }
}";

        public const string DialogUsageExample_Dialog = @"<MudDialog>
    <TitleContent>
        Dialog Title
    </TitleContent>
    <DialogContent>
        Dialog Content
    </DialogContent>
    <DialogActions>
        <MudButton OnClick=""Cancel"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""Submit"">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();
}";

        public const string DividerInsertExample = @"<MudPaper Width=""300px"" Square=""true"">
    <MudList T=""string"">
        <MudListItem Icon=""@Icons.Material.Filled.TrendingUp"">
            Trending
        </MudListItem>
        <MudDivider DividerType=""DividerType.Inset"" />
        <MudListItem Icon=""@Icons.Material.Filled.StarRate"">
            Most Stars
        </MudListItem>
        <MudDivider DividerType=""DividerType.Inset"" />
        <MudListItem Icon=""@Icons.Material.Filled.History"">
            History
        </MudListItem>
    </MudList>
</MudPaper>";

        public const string DividerListExample = @"<MudPaper Width=""300px"" Square=""true"">
    <MudList T=""string"">
        <MudListItem>Inbox</MudListItem>
        <MudDivider />
        <MudListItem>Sent</MudListItem>
        <MudDivider />
        <MudListItem>Drafts</MudListItem>
        <MudDivider />
        <MudListItem>Spam</MudListItem>
    </MudList>
</MudPaper>";

        public const string DividerMiddleExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo=""Typo.h5"">Uranium-235</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText>This is the type of uranium used in the RBMK reactors.</MudText>
        <MudDivider DividerType=""DividerType.Middle"" Class=""my-6""/>
        <MudText GutterBottom=""true"">Select Reactor Type</MudText>
        <MudChip T=""string"" Color=""Color.Secondary"">RBMK-1000</MudChip><MudChip T=""string"">RBMK-1500</MudChip><MudChip T=""string"">RBMKP-2400</MudChip>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Read More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string DividerVerticalExample = @"<MudPaper Square=""true"" Class=""d-flex justify-space-around"">
    <MudIconButton Icon=""@Icons.Material.Filled.FormatAlignRight"" Color=""Color.Dark"" Class=""rounded-0"" />
    <MudIconButton Icon=""@Icons.Material.Filled.FormatAlignCenter"" Color=""Color.Dark"" Class=""rounded-0"" />
    <MudIconButton Icon=""@Icons.Material.Filled.FormatAlignLeft"" Color=""Color.Dark"" Class=""rounded-0"" />

    <MudDivider Vertical=""true"" FlexItem=""true"" />

    <MudIconButton Icon=""@Icons.Material.Filled.FormatBold"" Color=""Color.Dark"" Class=""rounded-0"" />
    <MudIconButton Icon=""@Icons.Material.Filled.FormatItalic"" Color=""Color.Dark"" Class=""rounded-0"" />
    <MudIconButton Icon=""@Icons.Material.Filled.FormatUnderlined"" Color=""Color.Dark"" Class=""rounded-0"" />
</MudPaper>";

        public const string DrawerAnchorExample = @"<MudPaper Height=""200px"" Class=""mud-theme-primary"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@_openStart"" Anchor=""Anchor.Start"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Store"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.LocalLibrary"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Forum"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudDrawer @bind-Open=""@_openEnd"" Fixed=""false"" Anchor=""Anchor.End"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">Settings</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.AccountBox"">Profile</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.ShoppingCart"">Orders</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.History"">Order History</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            <MudButton Color=""Color.Inherit"" OnClick=""@ToggleStartDrawer"" StartIcon=""@(Rtl ? Icons.Material.Filled.East : Icons.Material.Filled.West)"" Class=""mx-2"">Toggle start</MudButton>
            <MudButton Color=""Color.Inherit"" OnClick=""@ToggleEndDrawer"" EndIcon=""@(Rtl ? Icons.Material.Filled.West : Icons.Material.Filled.East)"" Class=""mx-2"">Toggle end</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{
    private bool _openStart = false;
    private bool _openEnd = false;

    [CascadingParameter]
    public bool Rtl { get; set; }

    private void ToggleStartDrawer()
    {
        _openStart = !_openStart;
    }

    private void ToggleEndDrawer()
    {
        _openEnd = !_openEnd;
    }
}";

        public const string DrawerBreakpointExample = @"<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" Href=""https://github.com/MudBlazor/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@_open"" Breakpoint=""@_breakpoint"" Elevation=""1"" Variant=""@DrawerVariant.Responsive"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudSelect Label=""Select breakpoint"" @bind-Value=""_breakpoint"">
                <MudSelectItem Value=""@Breakpoint.Sm"">Breakpoint.Sm</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Md"">Breakpoint.Md</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Lg"">Breakpoint.Lg</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Xl"">Breakpoint.Xl</MudSelectItem>
            </MudSelect>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{
    private bool _open = false;
    private Breakpoint _breakpoint = Breakpoint.Lg;

    private void ToggleDrawer()
    {
        _open = !_open;
    }
}";

        public const string DrawerClippingExample = @"<MudLayout>
    <MudAppBar Elevation=""1"" Dense=""@_dense"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" Href=""https://github.com/MudBlazor/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@_open"" ClipMode=""_clipMode"" Elevation=""1"" Variant=""@DrawerVariant.Responsive"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudSelect Label=""Select clip mode"" @bind-Value=""_clipMode"">
                <MudSelectItem Value=""@DrawerClipMode.Never"">Not clipped (DrawerClipMode.Never)</MudSelectItem>
                <MudSelectItem Value=""@DrawerClipMode.Docked"">Drawer is docked (DrawerClipMode.Docked)</MudSelectItem>
                <MudSelectItem Value=""@DrawerClipMode.Always"">Always (DrawerClipMode.Always)</MudSelectItem>
            </MudSelect>
            <MudSwitch @bind-Value=""_dense"" Label=""Dense appbar"" Color=""Color.Primary"" Style=""width:100%;"" />
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{
    private bool _open = false;
    private bool _dense = false;
    private DrawerClipMode _clipMode = DrawerClipMode.Never;

    private void ToggleDrawer()
    {
        _open = !_open;
    }
}";

        public const string DrawerLeftRightExample = @"<MudPaper Height=""200px"" Class=""mud-theme-primary"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@_openLeft"" Anchor=""Anchor.Left"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Store"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.LocalLibrary"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Forum"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudDrawer @bind-Open=""@_openRight"" Fixed=""false"" Anchor=""Anchor.Right"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">Settings</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.AccountBox"">Profile</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.ShoppingCart"">Orders</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.History"">Order History</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            @if (Rtl)
            {
                <MudButton Color=""Color.Inherit"" OnClick=""@ToggleRightDrawer"" StartIcon=""@Icons.Material.Filled.East"" Class=""mx-2"">Toggle right</MudButton>
                <MudButton Color=""Color.Inherit"" OnClick=""@ToggleLeftDrawer"" EndIcon=""@Icons.Material.Filled.West"" Class=""mx-2"">Toggle left</MudButton>
            }
            else
            {
                <MudButton Color=""Color.Inherit"" OnClick=""@ToggleLeftDrawer"" StartIcon=""@Icons.Material.Filled.West"" Class=""mx-2"">Toggle left</MudButton>
                <MudButton Color=""Color.Inherit"" OnClick=""@ToggleRightDrawer"" EndIcon=""@Icons.Material.Filled.East"" Class=""mx-2"">Toggle right</MudButton>
            }
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{
    private bool _openLeft = false;
    private bool _openRight = false;

    [CascadingParameter]
    public bool Rtl { get; set; }

    private void ToggleLeftDrawer()
    {
        _openLeft = !_openLeft;
    }

    private void ToggleRightDrawer()
    {
        _openRight = !_openRight;
    }
}";

        public const string DrawerMiniCustomExample = @"<MudLayout>
    <MudAppBar Elevation=""1"" Dense=""@_dense"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" Href=""https://github.com/MudBlazor/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@_open"" ClipMode=""_clipMode"" Breakpoint=""@_breakpoint"" Elevation=""1"" Variant=""@DrawerVariant.Mini"">
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Store"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.LibraryBooks"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Group"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudSelect Label=""Select clip mode"" @bind-Value=""_clipMode"">
                <MudSelectItem Value=""@DrawerClipMode.Never"">Not clipped (DrawerClipMode.Never)</MudSelectItem>
                <MudSelectItem Value=""@DrawerClipMode.Docked"">Drawer is docked (DrawerClipMode.Docked)</MudSelectItem>
                <MudSelectItem Value=""@DrawerClipMode.Always"">Always (DrawerClipMode.Always)</MudSelectItem>
            </MudSelect>
            <MudSelect Label=""Select breakpoint"" @bind-Value=""_breakpoint"">
                <MudSelectItem Value=""@Breakpoint.Sm"">Breakpoint.Sm</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Md"">Breakpoint.Md</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Lg"">Breakpoint.Lg</MudSelectItem>
                <MudSelectItem Value=""@Breakpoint.Xl"">Breakpoint.Xl</MudSelectItem>
            </MudSelect>
            <MudSwitch @bind-Value=""_dense"" Label=""Dense appbar"" Color=""Color.Primary"" Style=""width:100%;"" />
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{
    private bool _open = false;
    private bool _dense = false;
    private Breakpoint _breakpoint = Breakpoint.Lg;
    private DrawerClipMode _clipMode = DrawerClipMode.Never;

    private void ToggleDrawer()
    {
        _open = !_open;
    }
}";

        public const string DrawerMiniExample = @"<MudPaper Height=""200px"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@_open"" Fixed=""false"" Elevation=""1"" Variant=""@DrawerVariant.Mini"" OpenMiniOnHover=""true"">
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Store"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.LibraryBooks"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Group"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            <MudButton OnClick=""@ToggleDrawer"" Color=""Color.Primary"">Toggle</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{ 
    private bool _open = false;

    private void ToggleDrawer()
    {
        _open = !_open;
    } 
}";

        public const string DrawerOverlayExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@(() => ToggleDrawer())"">Toggle drawer</MudButton>

<MudDrawer @bind-Open=""@_open"" Overlay=""false"" Elevation=""1"" Variant=""@DrawerVariant.Temporary"">
    <MudDrawerHeader>
        <MudText Typo=""Typo.h6"">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
    </MudNavMenu>
</MudDrawer>

@code{ 
    private bool _open;

    private void ToggleDrawer()
    {
        _open = !_open;
    }
}";

        public const string DrawerPersistentExample = @"<MudPaper Height=""200px"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@_open"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"" Color=""Color.Primary"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Dashboard"" IconColor=""Color.Inherit"">Dashboard</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.LocalLibrary"" IconColor=""Color.Inherit"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.People"" IconColor=""Color.Inherit"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            <MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"" OnClick=""@ToggleDrawer"">Persistent drawer</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{
    private bool _open = false;

    private void ToggleDrawer()
    {
        _open = !_open;
    }
}";

        public const string DrawerResponsiveExample = @"<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" Href=""https://github.com/MudBlazor/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@_open"" Elevation=""1"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudAlert Severity=""Severity.Success"" Class=""mt-16"">Text inside MudContainer</MudAlert>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code{
    private bool _open = false;

    private void ToggleDrawer()
    {
        _open = !_open;
    }
}";

        public const string DrawerSizeContainerExample = @"<MudPaper Height=""200px"" Class=""mud-theme-primary"" Style=""overflow:hidden; position:relative;"">
    <MudDrawerContainer Class=""mud-height-full"">
        <MudDrawer @bind-Open=""@_openStart"" Width=""150px"" Fixed=""false"" Anchor=""Anchor.Start"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Store"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.LocalLibrary"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Forum"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <MudDrawer @bind-Open=""@_openEnd"" Width=""300px"" Fixed=""false"" Anchor=""Anchor.End"" Elevation=""0"" Variant=""@DrawerVariant.Persistent"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">Settings</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.AccountBox"">Profile</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.ShoppingCart"">Orders</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.History"">Order History</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
        <div class=""d-flex justify-center align-center mud-height-full"">
            <MudButton Color=""Color.Inherit"" OnClick=""@ToggleStartDrawer"" StartIcon=""@(Rtl ? Icons.Material.Filled.East : Icons.Material.Filled.West)"" Class=""mx-2"">Toggle start</MudButton>
            <MudButton Color=""Color.Inherit"" OnClick=""@ToggleEndDrawer"" EndIcon=""@(Rtl ? Icons.Material.Filled.West : Icons.Material.Filled.East)"" Class=""mx-2"">Toggle end</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>

@code
{
    private bool _openStart = false;
    private bool _openEnd = false;

    [CascadingParameter]
    public bool Rtl { get; set; }

    private void ToggleStartDrawer()
    {
        _openStart = !_openStart;
    }

    private void ToggleEndDrawer()
    {
        _openEnd = !_openEnd;
    } 
}";

        public const string DrawerSizeTemporaryExample = @"<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Start))"">Start</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.End))"">End</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Top))"">Top</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Bottom))"">Bottom</MudButton>

<MudDrawer @bind-Open=""@_open"" Width=""@_width"" Height=""@_height"" Anchor=""@_anchor"" Elevation=""1"" Variant=""@DrawerVariant.Temporary"">
    <MudDrawerHeader>
        <MudText Typo=""Typo.h6"">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
    </MudNavMenu>
</MudDrawer>

@code{ 
    private bool _open;
    private Anchor _anchor;
    private string _width, _height;

    private void OpenDrawer(Anchor anchor)
    {
        _open = true;
        _anchor = anchor;

        switch (anchor)
        {
            case Anchor.Start:
                _width = ""300px"";
                _height = ""100%"";
                break;
            case Anchor.End:
                _width = ""400px"";
                _height = ""100%"";
                break;
            case Anchor.Bottom:
                _width = ""100%"";
                _height = ""200px"";
                break;
            case Anchor.Top:
                _width = ""100%"";
                _height = ""350px"";
                break;
        }
    }
}";

        public const string DrawerTemporaryExample = @"<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Start))"">Start</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.End))"">End</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Top))"">Top</MudButton>
<MudButton Variant=""Variant.Text"" OnClick=""@(() => OpenDrawer(Anchor.Bottom))"">Bottom</MudButton>
<MudSwitch @bind-Value=""_overlayAutoClose"" Label=""Overlay Autoclose"" Color=""Color.Secondary"" />
<MudDrawer @bind-Open=""@_open"" Anchor=""@_anchor"" Elevation=""1"" Variant=""@DrawerVariant.Temporary"" OverlayAutoClose=""@_overlayAutoClose"">
    <MudDrawerHeader>
        <MudText Typo=""Typo.h6"">My App</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        <MudNavLink OnClick=""_ => _open = false"">Close Drawer</MudNavLink>
    </MudNavMenu>
</MudDrawer>

@code{ 
    private bool _open;
    private Anchor _anchor;
    private bool _overlayAutoClose = true;

    private void OpenDrawer(Anchor anchor)
    {
        _open = true;
        _anchor = anchor;
    }
}";

        public const string DropZoneCanDropStylesExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ApplyDropClassesOnDragStarted=""_applyDropClassesOnDragStarted"" ItemsSelector=""@((item,dropzone) => item.Place == dropzone)"" CanDropClass=""mud-border-success"" NoDropClass=""mud-border-error"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-column flex-grow-1"">
    <ChildContent>
        <div class=""d-flex flex-wrap justify-space-between"">
            <MudDropZone T=""DropItem"" Identifier=""Fridge"" CanDrop=""@((item) => false)"" Class=""rounded-lg border-2 border-solid mud-border-lines-default pa-6 ma-8"">
                <MudText Typo=""Typo.h6"" Class=""mb-4"">Fridge</MudText>
            </MudDropZone>
            <MudDropZone T=""DropItem"" Identifier=""Dinner"" CanDrop=""@((item) => item.IsPicked == false && item.IsRotten == false)"" Class=""rounded-lg border-2 border-solid mud-border-lines-default pa-6 ma-8 flex-grow-1"">
                <MudText Typo=""Typo.h6"" Class=""mb-4"">Soup</MudText>
            </MudDropZone>
            <MudDropZone T=""DropItem"" Identifier=""Trash"" CanDrop=""@((item) => item.IsPicked == false && item.IsRotten == true)"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8 flex-grow-1"">
                <MudText Typo=""Typo.h6"" Class=""mb-4"">Trash</MudText>
            </MudDropZone>
        </div>
        <MudToolBar>
            <MudCheckBox @bind-Value=""_applyDropClassesOnDragStarted"" Label=""Apply Drop Classes On Drag Started"" />
            <MudSpacer/>
            <MudButton OnClick=""Reset"">Reset</MudButton>
        </MudToolBar>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Height=""54px"" Width=""54px"" Class=""pa-2"" Elevation=""0"">
            <MudBadge Visible=""@(context.IsRotten ? true : false)"" Overlap=""true"" Icon=""@Icons.Custom.Uncategorized.Bacteria"" Color=""Color.Dark"">
                <MudIcon Icon=""@context.Icon"" Color=""@context.Color"" Size=""Size.Large""/>
            </MudBadge>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
	private bool _applyDropClassesOnDragStarted = false;

	private void Reset()
	{
		foreach (var item in _items)
		{
			item.Place = ""Fridge"";
			item.IsPicked = false;
		}
	}

	private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
	{
		dropItem.Item.IsPicked = true;
		dropItem.Item.Place = dropItem.DropzoneIdentifier;
	}

	private List<DropItem> _items = new()
		{
			new DropItem() { Icon = @Icons.Custom.Uncategorized.FoodApple, Color = Color.Error, IsRotten = false, Place = ""Fridge"" },
		    new DropItem() { Icon = @Icons.Custom.Uncategorized.Baguette, Color = Color.Warning, IsRotten = false, Place = ""Fridge"" },
		    new DropItem() { Icon = @Icons.Custom.Uncategorized.Sausage, Color = Color.Secondary, IsRotten = true, Place = ""Fridge"" },
		    new DropItem() { Icon = @Icons.Custom.Uncategorized.WaterMelon, Color = Color.Success, IsRotten = false, Place = ""Fridge"" },
		    new DropItem() { Icon = @Icons.Custom.Uncategorized.Fish, Color = Color.Info, IsRotten = true, Place = ""Fridge"" },
		};

	public class DropItem
	{
		public string Icon { get; init; }
	    public Color Color { get; init; }
	    public bool IsRotten { get; set; }
		public bool IsPicked { get; set; }
		public string Place { get; set; }
	}
}";

        public const string DropZoneChessBoardExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" CanDropClass=""mud-border-info"" NoDropClass=""mud-border-error"" CanDrop=""@( (item,identifier ) => _items.Count(x => x.Identifier == identifier ) == 0)"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"" Class=""border-2 border-solid mud-border-lines-default"">
    <ChildContent>
        @for(int r = 0; r < 8; r++)
        {
            var row = r.ToString();
            <div class=""d-flex"">
                @for (int c = 0; c < 8; c++)
                {
                    var col = c.ToString();
                    <MudDropZone T=""DropItem"" Identifier=""@($""{row}{col}"")"" DraggingClass=""mud-theme-success"" Class=""d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default"" Style=""height:64px;width:64px;""/>
                }
            </div>
        }
    </ChildContent>
    <ItemRenderer>
        <div class=""d-flex justify-center align-center flex-grow-1"">
            <MudIcon Icon=""@context.Icon"" Color=""@context.Color"" Size=""Size.Large"" />
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessRook, Color = Color.Primary, Identifier = ""00"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKnight, Color = Color.Primary, Identifier = ""01"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessBishop, Color = Color.Primary, Identifier = ""02"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessQueen, Color = Color.Primary, Identifier = ""03"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKing, Color = Color.Primary, Identifier = ""04"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessBishop, Color = Color.Primary, Identifier = ""05"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKnight, Color = Color.Primary, Identifier = ""06"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessRook, Color = Color.Primary, Identifier = ""07"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""10"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""11"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""12"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""13"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""14"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""15"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""16"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Primary, Identifier = ""17"" },
        
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""60"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""61"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""62"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""63"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""64"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""65"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""66"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessPawn, Color = Color.Secondary, Identifier = ""67"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessRook, Color = Color.Secondary, Identifier = ""70"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKnight, Color = Color.Secondary, Identifier = ""71"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessBishop, Color = Color.Secondary, Identifier = ""72"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessQueen, Color = Color.Secondary, Identifier = ""73"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKing, Color = Color.Secondary, Identifier = ""74"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessBishop, Color = Color.Secondary, Identifier = ""75"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessKnight, Color = Color.Secondary, Identifier = ""76"" },
        new DropItem(){ Icon = @Icons.Custom.Uncategorized.ChessRook, Color = Color.Secondary, Identifier = ""77"" },
    };

    public class DropItem
    {
        public string Icon { get; init; }
        public Color Color { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneDisabledExample = @"<MudDropContainer T=""FileItem"" ItemDisabled=""@(item => item.IsLocked)"" Items=""_items""
                  ItemsSelector=""@((item, dropzone) => item.TransferSlot == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap"">
    <ChildContent>
        <MudPaper Class=""ma-4"" Height=""400px"" Width=""300px"">
            <MudList T=""string"" Class=""mud-height-full"">
                <MudDropZone T=""FileItem"" Identifier=""Company"" Class=""mud-height-full"">
                    <MudListSubheader>Company Files</MudListSubheader>
                </MudDropZone>
            </MudList>
        </MudPaper>
        <MudPaper Class=""ma-4"" Height=""400px"" Width=""300px"">
            <MudList T=""string"" Class=""mud-height-full"">
                <MudDropZone T=""FileItem"" Identifier=""External"" Class=""mud-height-full"">
                    <MudListSubheader>External USB</MudListSubheader>
                </MudDropZone>
            </MudList>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem T=""string"" Disabled=""@(context.IsLocked ? true : false)"" Icon=""@Icons.Custom.FileFormats.FileDocument"">
            @context.Name
        </MudListItem>
    </ItemRenderer>
</MudDropContainer>

@code {

    private void ItemUpdated(MudItemDropInfo<FileItem> dropItem)
    {
        dropItem.Item.TransferSlot = dropItem.DropzoneIdentifier;
    }

    private List<FileItem> _items = new()
            {
            new FileItem() { Name = ""File1.txt"", IsLocked = false, TransferSlot = ""Company"" },
            new FileItem() { Name = ""File2.txt"", IsLocked = false, TransferSlot = ""External"" },
            new FileItem() { Name = ""File3.txt"", IsLocked = true, TransferSlot = ""Company"" },
            new FileItem() { Name = ""File4.txt"", IsLocked = true, TransferSlot = ""Company"" },
            new FileItem() { Name = ""File5.txt"", IsLocked = false, TransferSlot = ""External"" },
            new FileItem() { Name = ""File6.txt"", IsLocked = true, TransferSlot = ""Company"" },
        };

    public class FileItem
    {
        public string Name { get; init; }
        public bool IsLocked { get; set; }
        public string TransferSlot { get; set; }
    }
}";

        public const string DropZoneDraggingStyleExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-column flex-grow-1"">
    <ChildContent>
        <div class=""d-flex flex-column flex-grow-1"">
            <MudListSubheader Class=""mt-4 pb-2"">Folders</MudListSubheader>
            <MudDropZone T=""DropItem"" ItemDraggingClass=""mud-info-text"" Identifier=""Folders"" Class=""d-flex flex-wrap flex-grow-1 pa-2 rounded"" />
        </div>
        <div class=""d-flex flex-column flex-grow-1"">
            <MudListSubheader Class=""mt-4 pb-2"">Files</MudListSubheader>
            <MudDropZone T=""DropItem"" DraggingClass=""mud-alert-text-normal"" Identifier=""Files"" Class=""d-flex flex-wrap flex-grow-1 pa-2 rounded"" />
        </div>
        <div class=""d-flex flex-column flex-grow-1"">
            <MudListSubheader Class=""mt-4 pb-2"">MudBlazor Secrets</MudListSubheader>
            <MudDropZone T=""DropItem"" DraggingClass=""mud-alert-text-error"" ItemDraggingClass=""mud-error-text"" Identifier=""MudBlazor"" Class=""d-flex flex-wrap flex-grow-1 pa-2 rounded"" />
        </div>
    </ChildContent>
    <ItemRenderer>
        <div Class=""rounded mud-paper-outlined d-flex align-center pa-3 ma-2"">
            <MudIcon Icon=""@(context.Identifier == ""Folders"" ? Icons.Custom.Uncategorized.Folder : Icons.Custom.FileFormats.FileDocument)"" Color=""Color.Inherit"" Class=""mr-2""/>
            @context.Name
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Wallpapers"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Propaganda"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Funny, Dank, Meme"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Work"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Photos"", Identifier = ""Folders"" },
        new DropItem(){ Name = ""Untitled spreadsheet"", Identifier = ""Files"" },
        new DropItem(){ Name = ""LoseLips.txt"", Identifier = ""Files"" },
        new DropItem(){ Name = ""Untitled document"", Identifier = ""Files"" },
        new DropItem(){ Name = ""GoonSwarmBestSwarm.png"", Identifier = ""Files"" },
        new DropItem(){ Name = ""co2traitors.txt"", Identifier = ""Files"" },
        new DropItem(){ Name = ""import.csv"", Identifier = ""Files"" },
        new DropItem(){ Name = ""planned_components_2022-2023.txt"", Identifier = ""MudBlazor"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneDropRulesExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Place == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-column flex-grow-1"">
    <ChildContent>
        <div class=""d-flex flex-wrap justify-space-between"">
            <MudDropZone T=""DropItem"" Identifier=""Compost"" CanDrop=""@((item) => item.Type == ItemType.Compost)"" Class=""rounded-lg mud-alert-text-success pa-4 ma-4 flex-grow-1"">
                <MudText Typo=""Typo.button"" Class=""ma-2"">Compost Bin</MudText>
            </MudDropZone>
            <MudDropZone T=""DropItem"" Identifier=""Recycle"" CanDrop=""@((item) => item.Type == ItemType.Recycle)"" Class=""rounded-lg mud-alert-text-warning pa-4 ma-4 flex-grow-1"">
                <MudText Typo=""Typo.button"" Class=""ma-2"">Recycle Bin</MudText>
            </MudDropZone>
            <MudDropZone T=""DropItem"" Identifier=""Trash"" CanDrop=""@((item) => item.Type == ItemType.Trash)"" Class=""rounded-lg mud-alert-text-info pa-4 ma-4 flex-grow-1"">
                <MudText Typo=""Typo.button"" Class=""ma-2"">Trash Bin</MudText>
            </MudDropZone>
        </div>
        <MudDropZone T=""DropItem"" Identifier=""Street"" CanDrop=""@((item) => false)"" Class=""rounded-lg mud-alert-text-normal pa-4 mt-6 mx-4 flex-grow-1 d-flex flex-wrap""/>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation=""25"" Class=""pa-4 ma-2"">@context.Name</MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Place = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Apple Core"", Type = ItemType.Compost, Place = ""Street"" },
        new DropItem(){ Name = ""Banana Peel"", Type = ItemType.Compost, Place = ""Street"" },
        new DropItem(){ Name = ""Old Battery"", Type = ItemType.Trash, Place = ""Street"" },
        new DropItem(){ Name = ""Pizza Box"", Type = ItemType.Recycle, Place = ""Street"" },
        new DropItem(){ Name = ""Moldy Bread"", Type = ItemType.Compost, Place = ""Street"" },
        new DropItem(){ Name = ""Paper Bag"", Type = ItemType.Recycle, Place = ""Street"" },
        new DropItem(){ Name = ""Uranium-235"", Type = ItemType.Trash, Place = ""Street"" },
    };
    
    public class DropItem
    {
        public string Name { get; set; }
        public ItemType Type { get; set; }
        public string Place { get; set; }
    }

    public enum ItemType
    {
        Compost,
        Recycle,
        Trash
    }
}";

        public const string DropZoneItemSelectorExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Selector == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
    <ChildContent>
        @for (int i = 1; i < 4; i++) 
         {
             var dropzone = i.ToString();
             <MudPaper Class=""ma-4 flex-grow-1"">
                <MudList T=""string"" Class=""d-flex flex-column mud-height-full"">
                     <MudListSubheader>Drop Zone @dropzone</MudListSubheader>
                     <MudDropZone T=""DropItem"" Identifier=""@dropzone"" Class=""flex-grow-1"" />
                 </MudList>
             </MudPaper>
         }
    </ChildContent>
    <ItemRenderer>
        <MudListItem T=""string"" Text=""@context.Name"" />
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Item 1"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 2"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 3"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 4"", Selector = ""2"" },
        new DropItem(){ Name = ""Item 5"", Selector = ""2"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Selector { get; set; }
    }
}";

        public const string DropZoneItemSelectorOnlyZoneExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-column flex-grow-1"">
    <ChildContent>
        <MudListSubheader Class=""mt-4 pb-2"">Folders</MudListSubheader>
        <div class=""d-flex gap-4 mx-4"">
            <MudDropZone T=""DropItem"" OnlyZone=""true"" Identifier=""Propaganda"">
                <MudPaper Outlined=""true"" Class=""d-flex align-center pa-3 gap-2"">
                    <MudIcon Icon=""@Icons.Custom.Uncategorized.Folder"" Color=""Color.Inherit"" />Propaganda
                </MudPaper>
            </MudDropZone>
           <MudDropZone T=""DropItem"" OnlyZone=""true"" Identifier=""Work"">
                <MudPaper Outlined=""true"" Class=""d-flex align-center pa-3 gap-2"">
                    <MudIcon Icon=""@Icons.Custom.Uncategorized.Folder"" Color=""Color.Inherit"" />Work
                </MudPaper>
            </MudDropZone>
        </div>
        <MudListSubheader Class=""mt-4 pb-2"">Files</MudListSubheader>
        <MudDropZone T=""DropItem"" Identifier=""Files"" Class=""d-flex flex-wrap flex-grow-1 pa-2 rounded"" />
    </ChildContent>
    <ItemRenderer>
        <div Class=""rounded mud-paper-outlined d-flex align-center pa-3 ma-2"">
            <MudIcon Icon=""@(context.Identifier == ""Folders"" ? Icons.Custom.Uncategorized.Folder : Icons.Custom.FileFormats.FileDocument)"" Color=""Color.Inherit"" Class=""mr-2""/>
            @context.Name
        </div>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Untitled document"", Identifier = ""Files"" },
        new DropItem(){ Name = ""GoonSwarmBestSwarm.png"", Identifier = ""Files"" },
        new DropItem(){ Name = ""co2traitors.txt"", Identifier = ""Files"" },
        new DropItem(){ Name = ""import.csv"", Identifier = ""Files"" },
        new DropItem(){ Name = ""planned_components_2022-2023.txt"", Identifier = ""Files"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneItemSelectorReorderingExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Selector == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
    <ChildContent>
        @for (int i = 1; i < 4; i++) 
         {
             var dropzone = i.ToString();
             <MudPaper Class=""ma-4 flex-grow-1"">
                <MudList T=""string"" Class=""d-flex flex-column mud-height-full"">
                     <MudListSubheader>Drop Zone @dropzone</MudListSubheader>
                     <MudDropZone T=""DropItem"" Identifier=""@dropzone"" Class=""flex-grow-1"" AllowReorder=""true"" />
                 </MudList>
             </MudPaper>
         }
    </ChildContent>
    <ItemRenderer>
        <MudListItem T=""string"" Text=""@context.Name"" />
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Item 1"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 2"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 3"", Selector = ""1"" },
        new DropItem(){ Name = ""Item 4"", Selector = ""2"" },
        new DropItem(){ Name = ""Item 5"", Selector = ""2"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Selector { get; set; }
    }
}";

        public const string DropZoneKanbanExample = @"@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

<MudDropContainer T=""KanbanTaskItem"" @ref=""_dropContainer"" Items=""@_tasks"" ItemsSelector=""@((item,column) => item.Status == column)"" ItemDropped=""TaskUpdated"" Class=""d-flex flex-row"">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation=""0"" Width=""224px"" MinHeight=""400px"" Class=""pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg"">
				<MudToolBar Gutters=""false"">
					<MudText Typo=""Typo.subtitle1""><b>@item.Name</b></MudText>
					<MudSpacer />
					<MudMenu Icon=""@Icons.Material.Rounded.MoreHoriz"" AnchorOrigin=""Origin.BottomRight"" TransformOrigin=""Origin.TopRight"" ListClass=""pa-2 d-flex flex-column"" PopoverClass=""mud-elevation-25"">
						<MudButton Size=""Size.Small"" Color=""Color.Error"" StartIcon=""@Icons.Material.Outlined.Delete"" OnClick=""@( () => DeleteSection(item))"">Delete Section</MudButton>
						<MudButton Size=""Size.Small"" Color=""Color.Default"" StartIcon=""@Icons.Material.Rounded.Edit"">Rename Section</MudButton>
					</MudMenu>
				</MudToolBar>
				<MudDropZone T=""KanbanTaskItem"" Identifier=""@item.Name"" Class=""mud-height-full"" />
				@if (item.NewTaskOpen)
				{
					<MudPaper Elevation=""25"" Class=""pa-2 rounded-lg"">
						<MudTextField @bind-Value=""item.NewTaskName"" Placeholder=""New Task"" Underline=""false"" Margin=""Margin.Dense"" Class=""mx-2 mt-n2""></MudTextField>
						<MudButton OnClick=""@(() => AddTask(item))"" Size=""Size.Small"" Color=""Color.Primary"" FullWidth=""true"">Add Task</MudButton>
					</MudPaper>
				}
				else
				{
					<MudButton OnClick=""@(() => item.NewTaskOpen = !item.NewTaskOpen)"" StartIcon=""@Icons.Material.Filled.Add"" FullWidth=""true"" Class=""rounded-lg py-2"">Add Task</MudButton>
				}
			</MudPaper>
		}
		<MudPaper Class=""pa-4"" Elevation=""0"" Width=""224px"">
			@if (_addSectionOpen)
			{
				<MudPaper Elevation=""0"" Width=""224px"" Class=""pa-4 d-flex flex-column mud-background-gray rounded-lg"">
					<EditForm Model=""@newSectionModel"" OnValidSubmit=""OnValidSectionSubmit"">
						<DataAnnotationsValidator />
						<MudTextField @bind-Value=""newSectionModel.Name"" For=""@(() => newSectionModel.Name)"" Placeholder=""New Section"" Underline=""false""></MudTextField>
						<MudButton ButtonType=""ButtonType.Submit"" Size=""Size.Small"" Color=""Color.Primary"" FullWidth=""true"">Add Section</MudButton>
					</EditForm>
				</MudPaper>
			}
			else
			{
				<MudButton OnClick=""OpenAddNewSection"" Variant=""Variant.Outlined"" StartIcon=""@Icons.Material.Filled.Add"" Color=""Color.Primary"" Class=""rounded-lg py-2"" FullWidth=""true"">Add Section</MudButton>
			}
		</MudPaper>
	</ChildContent>
	<ItemRenderer>
		<MudPaper Elevation=""25"" Class=""pa-4 rounded-lg my-3"">@context.Name</MudPaper>
	</ItemRenderer>
</MudDropContainer>

@code {
	private MudDropContainer<KanbanTaskItem> _dropContainer;

	private bool _addSectionOpen;
	/* handling board events */
	private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
	{
		info.Item.Status = info.DropzoneIdentifier;
	}

	/* Setup for board  */
	private List<KanBanSections> _sections = new()
		{
			new KanBanSections(""To Do"", false, String.Empty),
			new KanBanSections(""In Process"", false, String.Empty),
			new KanBanSections(""Done"", false, String.Empty),
		};

	public class KanBanSections
	{
		public string Name { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }

		public KanBanSections(string name, bool newTaskOpen, string newTaskName)
		{
			Name = name;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
		}
	}
	public class KanbanTaskItem
	{
		public string Name { get; init; }
		public string Status { get; set; }

		public KanbanTaskItem(string name, string status)
		{
			Name = name;
			Status = status;
		}
	}

	private List<KanbanTaskItem> _tasks = new()
		{
			new KanbanTaskItem(""Write unit test"", ""To Do""),
			new KanbanTaskItem(""Some docu stuff"", ""To Do""),
			new KanbanTaskItem(""Walking the dog"", ""To Do""),
		};

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = ""Name length can't be more than 10."")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context)
	{
		_sections.Add(new KanBanSections(newSectionModel.Name, false, String.Empty));
		newSectionModel.Name = string.Empty;
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	private void AddTask(KanBanSections section)
	{
		_tasks.Add(new KanbanTaskItem(section.NewTaskName, section.Name));
		section.NewTaskName = string.Empty;
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}

	private void DeleteSection(KanBanSections section)
	{
		if (_sections.Count == 1)
		{
			_tasks.Clear();
			_sections.Clear();
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.Status == section.Name);
			foreach (var item in tasks)
			{
				item.Status = _sections[newIndex].Name;
			}
		}
	}
}";

        public const string DropZoneMailExample = @"@using Microsoft.AspNetCore.Components

<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"">
    <ChildContent>
        <MudPaper MinHeight=""500px"" Class=""d-flex flex-1"">
            <MudList T=""string"" Dense=""true"" @bind-SelectedValue=""_selectedFolder"">
                <MudListSubheader>MailBox</MudListSubheader>
                <MudDropZone T=""DropItem"" Identifier=""Inbox"" OnlyZone=""true"">
                    <MudListItem Text=""Inbox"" Value=""@(""Inbox"")"" Icon=""@Icons.Material.Filled.Inbox""/>
                </MudDropZone>
                <MudDropZone T=""DropItem"" Identifier=""Sent"" OnlyZone=""true"">
                    <MudListItem Text=""Sent"" Value=""@(""Sent"")"" Icon=""@Icons.Material.Filled.Send""/>
                </MudDropZone>
                <MudDropZone T=""DropItem"" Identifier=""Drafts"" OnlyZone=""true"">
                    <MudListItem Text=""Drafts"" Value=""@(""Drafts"")"" Icon=""@Icons.Material.Filled.Drafts""/>
                </MudDropZone>
                <MudListItem Icon=""@Icons.Material.Filled.Label"" Text=""Categories"" Expanded=""true"">
                    <NestedList>
                        <MudDropZone T=""DropItem"" Identifier=""Social"" OnlyZone=""true"">
                            <MudListItem Dense=""true"" Text=""Social"" Value=""@(""Social"")"" Icon=""@Icons.Material.Filled.Group"" Class=""pl-8""/>
                        </MudDropZone>
                        <MudDropZone T=""DropItem"" Identifier=""Forums"" OnlyZone=""true"">
                            <MudListItem Dense=""true"" Text=""Forums"" Value=""@(""Forums"")"" Icon=""@Icons.Material.Filled.Forum"" Class=""pl-8""/>
                        </MudDropZone>
                    </NestedList>
                </MudListItem>
            </MudList>
            <MudDivider Vertical=""true"" FlexItem=""true"" />
            <MudList T=""string"" Dense=""true"" Class=""d-flex flex-column flex-grow-1 py-0"">
                <MudToolBar Gutters=""false"" Dense=""true"">
                    <MudCheckBox @bind-Value=""ToolbarCheckBox""/>
                    <MudIconButton Icon=""@Icons.Material.Filled.Refresh""/>
                    <MudIconButton Icon=""@Icons.Material.Filled.MoreVert""/>
                    <MudSpacer/>
                    <MudIconButton Icon=""@Icons.Material.Filled.ChevronLeft""/>
                    <MudIconButton Icon=""@Icons.Material.Filled.ChevronRight""/>
                </MudToolBar>
                <MudDivider/>
                <MudDropZone T=""DropItem"" Identifier=""@_selectedFolder.ToString()"" Class=""flex-grow-1""/>
            </MudList>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem T=""string"" Text=""@context.Name"" />
        <MudDivider/>
    </ItemRenderer>
</MudDropContainer>

@code {
    public bool ToolbarCheckBox { get; set; } = false;
    string _selectedFolder = ""Inbox"";
    
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Your exchange rate and Klarna benefits here"", Identifier = ""Inbox"" },
        new DropItem(){ Name = ""IKEA - Betalningsbekräftelse för din order"", Identifier = ""Inbox"" },
        new DropItem(){ Name = ""Leverans beställd till dig​"", Identifier = ""Inbox"" },
        new DropItem(){ Name = ""You’ve Got Sales! Cotton Bureau On Demand Report for Thursday, February 24, 2022"", Identifier = ""Inbox"" },
        new DropItem(){ Name = ""Answer: Offer to buy mudblazor"", Identifier = ""Drafts"" },
        new DropItem(){ Name = ""Inloggningsvarning för Facebook Messenger for Android"", Identifier = ""Social"" },
        new DropItem(){ Name = ""Nya privata meddelanden på SweClockers"", Identifier = ""Forums"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneNestedZonesExample = @"<MudDropContainer T=""DropZoneItem"" Items=""_items"" ItemsSelector=""@((item, dropzone) => item.Zone == dropzone)"" ItemDropped=""ItemUpdated"" Class=""4 flex-grow-1"">
    <ChildContent>
        <MudDropContainer T=""DropZone"" Items=""_zones"" ItemsSelector=""@((item, dropzone) => true)"" Class=""5"">
            <ChildContent>
                <MudDropZone T=""DropZone"" AllowReorder Class=""6 rounded mud-background-gray px-4 py-1 ma-4"" />
             </ChildContent>
             <ItemRenderer>
                 <MudPaper Class=""pa-4 my-4"">
                     <MudText Typo=""Typo.h6"">@context.Name</MudText>
                     <MudDropZone T=""DropZoneItem"" Identifier=""@context.Name"" AllowReorder Class=""rounded mud-background-gray px-4 py-1 ma-4"" />
                 </MudPaper>
             </ItemRenderer>
         </MudDropContainer>
     </ChildContent>
     <ItemRenderer>
         <MudPaper Class=""pa-4 my-4"">
             <MudText>@context.Name</MudText>
         </MudPaper>
     </ItemRenderer>
 </MudDropContainer>

 @code {

    private void ItemUpdated(MudItemDropInfo<DropZoneItem> dropItem) => dropItem.Item.Zone = dropItem.DropzoneIdentifier;

    private List<DropZone> _zones = new()
    {
        new() { Name = ""Drop Zone 1"" },
        new() { Name = ""Drop Zone 2"" }
    };

    private List<DropZoneItem> _items = new()
    {
        new() { Zone = ""Drop Zone 1"", Name = ""Item 1"" },
        new() { Zone = ""Drop Zone 1"", Name = ""Item 2"" },
        new() { Zone = ""Drop Zone 2"", Name = ""Item 3"" },
    };

    private class DropZone
    {
        public string Name { get; init; }
    }

    private class DropZoneItem
    {
        public string Zone { get; set; }
        public string Name { get; init; }
    }
}";

        public const string DropZoneOverrideExample = @"<MudDropContainer T=""DropItem"" DraggingClass=""mud-alert-text-warning"" ItemDraggingClass=""mud-alert-text-warning"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" NoDropClass=""mud-border-error"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
    <ChildContent>
        <MudDropZone T=""DropItem"" Identifier=""Enterprise"" DraggingClass=""mud-alert-text-info"" ItemDraggingClass=""mud-alert-text-info"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8"" CanDrop=""@((item) => item.Team == ""BLUE"")"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">USS Enterprise</MudText>
         </MudDropZone>
        <MudDropZone T=""DropItem"" Identifier=""Air Zone 1"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8 flex-grow-1"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Air Zone 1</MudText>
        </MudDropZone>
        <MudDropZone T=""DropItem"" Identifier=""Air Zone 2"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8 flex-grow-1"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Air Zone 2</MudText>
        </MudDropZone>
        <MudDropZone T=""DropItem"" Identifier=""Danger Zone"" DraggingClass=""mud-alert-text-error"" ItemDraggingClass=""mud-alert-text-error"" CanDrop=""@((item) => item.Team == ""RED"")"" Class=""rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Danger Zone</MudText>
        </MudDropZone>
    </ChildContent>
    <ItemRenderer>
        <div class=""mud-elevation-25 pa-4 my-4"">@context.Name</div>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Grumman"", Team = ""BLUE"", Identifier = ""Enterprise"" },
        new DropItem(){ Name = ""Tomcat"", Team = ""BLUE"", Identifier = ""Enterprise"" },
        new DropItem(){ Name = ""McDonnell"", Team = ""BLUE"", Identifier = ""Enterprise"" },
        new DropItem(){ Name = ""Frogfoot"", Team = ""RED"", Identifier = ""Danger Zone"" },
        new DropItem(){ Name = ""Fulcrum"", Team = ""RED"", Identifier = ""Danger Zone"" },
        new DropItem(){ Name = ""Fullback"", Team = ""RED"", Identifier = ""Danger Zone"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Team { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string DropZoneReorderSaveExample = @"@using MudBlazor.Utilities

<div class=""d-flex flex-column mud-width-full mud-height-full"">
	<MudToolBar Class=""gap-4"">
		<MudButton OnClick=""LoadServerData"" Variant=""Variant.Filled"" Color=""Color.Default"">Load Data</MudButton>
		<MudButton OnClick=""SaveData"" Variant=""Variant.Filled"" Color=""Color.Primary"">Save Data</MudButton>
		<MudSpacer />
		<MudButton OnClick=""Reset"" Variant=""Variant.Text"" Color=""Color.Error"">Reset Example</MudButton>
	</MudToolBar>

	<MudDropContainer T=""DropItem"" Items=""@_dropzoneItems"" @ref=""_container"" ItemsSelector=""@((item,dropzone) => item.Selector == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
		<ChildContent>
			@for (int i = 1; i < 3; i++)
			{
				var dropzone = i.ToString();
				<MudPaper Class=""ma-4 flex-grow-1"">
                    <MudList T=""string"" Class=""d-flex flex-column mud-height-full"">
						<MudListSubheader>Drop Zone @dropzone</MudListSubheader>
						<MudDropZone T=""DropItem"" Identifier=""@dropzone"" Class=""flex-grow-1"" AllowReorder=""true"" />
					</MudList>
				</MudPaper>
			}
		</ChildContent>
		<ItemRenderer>
            <MudListItem T=""string"" Text=""@($""{context.Name} ({context.Order})"")"" />
		</ItemRenderer>
	</MudDropContainer>
</div>
@code {
    private MudDropContainer<DropItem> _container;

	private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
	{
		dropItem.Item.Selector = dropItem.DropzoneIdentifier;

		var indexOffset = dropItem.DropzoneIdentifier switch
		{
			""2""  => _dropzoneItems.Count(x => x.Selector == ""1""),
			_ => 0
		};

		_dropzoneItems.UpdateOrder(dropItem, item => item.Order, indexOffset);
	}

	private List<DropItem> _dropzoneItems = new();

	private List<DropItem> _serverData = new()
		{
			new DropItem() { Order = 0, Name = ""Item 1"", Selector = ""1"" },
			new DropItem() { Order = 1, Name = ""Item 2"", Selector = ""1"" },
			new DropItem() { Order = 2, Name = ""Item 3"", Selector = ""1"" },
			new DropItem() { Order = 3, Name = ""Item 4"", Selector = ""1"" },
			new DropItem() { Order = 4, Name = ""Item 5"", Selector = ""1"" },
			new DropItem() { Order = 5, Name = ""Item 6"", Selector = ""1"" },
			new DropItem() { Order = 6, Name = ""Item 7"", Selector = ""2"" },
			new DropItem() { Order = 7, Name = ""Item 8"", Selector = ""2"" },
			new DropItem() { Order = 8, Name = ""Item 9"", Selector = ""2"" },
			new DropItem() { Order = 9, Name = ""Item 10"", Selector = ""2"" },
		};

	private void RefreshContainer()
	{
		//update the binding to the container
		StateHasChanged();

		//the container refreshes the internal state
		_container.Refresh();
	}

	private void LoadServerData()
	{
	    _dropzoneItems = _serverData
	        .OrderBy(x => x.Order)
	        .Select(item => new DropItem
	        {
	            Order = item.Order,
	            Name = item.Name,
	            Selector = item.Selector
	        })
	        .ToList();
		RefreshContainer();
	}

	private void SaveData()
	    => _serverData = _dropzoneItems
	        .OrderBy(x => x.Order)
	        .Select(item => new DropItem
	        {
	            Order = item.Order, Name = item.Name, Selector = item.Selector
	        })
	        .ToList();

	private void Reset()
	{
		_dropzoneItems = new();
		_serverData = new()
			{
				new DropItem() { Order = 0, Name = ""Item 1"", Selector = ""1"" },
				new DropItem() { Order = 1, Name = ""Item 2"", Selector = ""1"" },
				new DropItem() { Order = 2, Name = ""Item 3"", Selector = ""1"" },
				new DropItem() { Order = 3, Name = ""Item 4"", Selector = ""1"" },
				new DropItem() { Order = 4, Name = ""Item 5"", Selector = ""1"" },
				new DropItem() { Order = 5, Name = ""Item 6"", Selector = ""1"" },
				new DropItem() { Order = 6, Name = ""Item 7"", Selector = ""2"" },
				new DropItem() { Order = 7, Name = ""Item 8"", Selector = ""2"" },
				new DropItem() { Order = 8, Name = ""Item 9"", Selector = ""2"" },
				new DropItem() { Order = 9, Name = ""Item 10"", Selector = ""2"" }
			};

		RefreshContainer();
	}
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Selector { get; set; }
        public int Order { get; set; }
    }
}";

        public const string DropZoneUsageExample = @"<MudDropContainer T=""DropItem"" Items=""_items"" ItemsSelector=""@((item,dropzone) => item.Identifier == dropzone)"" ItemDropped=""ItemUpdated"" Class=""d-flex flex-wrap flex-grow-1"">
    <ChildContent>
        <MudDropZone T=""DropItem"" Identifier=""Drop Zone 1"" Class=""rounded mud-background-gray pa-6 ma-8 flex-grow-1"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Drop Zone 1</MudText>
         </MudDropZone>
        <MudDropZone T=""DropItem"" Identifier=""Drop Zone 2"" Class=""rounded mud-background-gray pa-6 ma-8 flex-grow-1"">
            <MudText Typo=""Typo.h6"" Class=""mb-4"">Drop Zone 2</MudText>
        </MudDropZone>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation=""25"" Class=""pa-4 my-4"">@context.Name</MudPaper>
    </ItemRenderer>
</MudDropContainer>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }
    
    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = ""Drag me!"", Identifier = ""Drop Zone 1"" },
        new DropItem(){ Name = ""Or me!"", Identifier = ""Drop Zone 2"" },
        new DropItem(){ Name = ""Just Mud"", Identifier = ""Drop Zone 1"" },
    };
    
    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}";

        public const string MudElementChangingExample = @"<MudElement HtmlTag=""@htmlTag""
            Class=""reset-style""
            href=""https://mudblazor.com""
            value=""@($""The underlying tag is '{htmlTag}'"")"">
    The underlying tag is '@htmlTag'
</MudElement>

<MudButton OnClick=""ChangeTag"" Variant=""Variant.Filled"" Color=""Color.Secondary"">Change tag</MudButton>

@code{
    private string htmlTag = ""a"";
    private string[] tags = new[] { ""a"", ""button"", ""input"" };
    private int index = 0;

    private void ChangeTag()
    {
        index = (index + 1) % tags.Length;
        htmlTag = tags[index];
    }

}

<style>
.reset-style, .reset-style * {
    all: revert;
}
</style>";

        public const string MudElementRefExample = @"<MudElement HtmlTag=""button"" @onclick=""Focus"" Style=""padding: 4px 12px 4px 12px; background-color: #0067b8; color: #fff;"">
    Click to focus
</MudElement>

@*this element is going to be focused through JS via its reference*@

<MudElement @bind-Ref=""myRef"" HtmlTag=""input"" Style=""border: solid 1px #869E9E; padding: 0px 8px; height:28px;""/>

@code{
    ElementReference myRef = new ElementReference();

    async Task Focus()
    {
        //this js snippet does `document.querySelector(myRef).focus();`
       await myRef.FocusAsync();
    }
}";

        public const string MudElementSimpleExample = @"Visit us on 
<MudElement HtmlTag=""a""
            Class=""ms-1""
            Style=""color:red;font-weight:bold;""
            href=""https://github.com/MudBlazor/MudBlazor""
            target=""blank""
            rel=""noopener noreferrer"">
    GitHub
</MudElement>";

        public const string ExpansionPanelAsyncExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Panel with async loaded contents"" MaxHeight=""1000"" ExpandedChanged=""OnExpandedChanged"">
        @_panelContent
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private RenderFragment _panelContent;

    private async Task OnExpandedChanged(bool newVal)
    {
        if (newVal)
        {
            await Task.Delay(600);
            _panelContent = _bigAsyncContent;
        }
        else
        {
            // Reset after a while to prevent sudden collapse.
            Task.Delay(350).ContinueWith(t => _panelContent = null).CatchAndLog(); 
        }
    }

    private RenderFragment _bigAsyncContent = __builder =>
    {
        <div>The expansion of the</div>
        <div>inner panel is done after</div>
        <div>ExpandedChanged</div>
        <div>has completed to allow for</div>
        <div>smooth opening of async data</div>
        <div>of initially unknown height.</div>
    };
}";

        public const string ExpansionPanelDisabledExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Panel One"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"" Disabled=""true"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"">
        Panel Three Content
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelMultiExample = @"<MudExpansionPanels MultiExpansion=""true"">
    <MudExpansionPanel Text=""Panel One"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"">
        Panel Three Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Four"">
        Panel Four Content
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelOutlinedExample = @"<MudExpansionPanels Outlined=""false"" Elevation=""0"">
    <MudExpansionPanel Text=""Panel One"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"">
        Panel Three Content
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelPaddingExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Dense"" Dense Gutters>
        Dense Content with Gutters
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Gutters"" Dense=""false"" Gutters=""false"">
        Content without Gutters
    </MudExpansionPanel>
</MudExpansionPanels>
<MudExpansionPanels Dense Gutters=""false"" Class=""mt-6"">
    <MudExpansionPanel Text=""Dense and Gutters setting inherited from parent"">
        Dense Content without Gutters
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelSimpleExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Panel One"" MaxHeight=""150"" Expanded=""true"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"" MaxHeight=""500"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"" MaxHeight=""1000"">
        Panel Three Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Four"">
        Panel Four Content
    </MudExpansionPanel>
</MudExpansionPanels>";

        public const string ExpansionPanelTitleExample = @"<div class=""mx-auto""  style=""max-width: 400px;"">
    <MudExpansionPanels>
        <MudExpansionPanel>
            <TitleContent>
                <div class=""d-flex"">
                    <MudIcon Icon=""@Icons.Material.Filled.Info"" class=""mr-3""></MudIcon>
                    <MudText>Panel header as <strong>RenderFragment</strong></MudText>
                </div>
            </TitleContent>
            <ChildContent>
                Panel Content
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel Text=""The icon of this panel is hidden"" HideIcon=""true"">
            Panel Content
        </MudExpansionPanel>
        <MudExpansionPanel HideIcon=""true"">
            <TitleContent>
                <div class=""d-flex"">
                    <MudText Class=""mt-1"">Inbox</MudText>
                    <MudBadge Content=""3"" Color=""Color.Primary"" Overlap=""true"" Class=""d-flex ml-auto"">
                        <MudIcon Icon=""@Icons.Material.Filled.Email"" Color=""Color.Default"" />
                    </MudBadge>
                </div>
            </TitleContent>
            <ChildContent>
                Panel Content
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel @bind-Expanded=""@open"" HideIcon=""true"">
            <TitleContent>
                <div class=""d-flex"">
                    <MudText>Overriding standard icon with own icon</MudText>
                    <MudIcon Icon=""@(open ? Icons.Material.Filled.Close : Icons.Material.Filled.Add)"" class=""ml-auto""></MudIcon>
                </div>
            </TitleContent>
            <ChildContent>
                Panel Content
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>

@code
{
    bool open;
}";

        public const string FieldBasicExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Standard"" Variant=""Variant.Text"">Some Content <MudIcon Icon=""@Icons.Material.Filled.Favorite"" Color=""@Color.Warning"" /> follows here</MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Filled"" Variant=""Variant.Filled"">Some Content <MudIcon Icon=""@Icons.Material.Filled.Favorite"" Color=""@Color.Warning"" /> follows here</MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Outlined"" Variant=""Variant.Outlined"">Some Content <MudIcon Icon=""@Icons.Material.Filled.Favorite"" Color=""@Color.Warning"" /> follows here</MudField>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Standard"" Variant=""Variant.Text""></MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Filled"" Variant=""Variant.Filled""></MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Outlined"" Variant=""Variant.Outlined""></MudField>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Standard"" Variant=""Variant.Text"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.CheckCircle"" AdornmentColor=""Color.Success""></MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Filled"" Variant=""Variant.Filled"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Money""></MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Outlined"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Warning"" AdornmentColor=""Color.Warning""></MudField>
    </MudItem>
</MudGrid>";

        public const string FieldLabelPlaceholderExample = @"<MudGrid>
    <MudItem xs=""12"" md=""6"" lg=""4"">       
        <MudField Label=""What am I?"" ChildContent=""@content""
                  Variant=""Variant.Outlined"">            
        </MudField>
        <br/>
        <MudSwitch T=""bool"" Color=""Color.Primary"" ValueChanged=""@((b) => content=b?rf1:null)"" /> Switch between Label and Placeholder
    </MudItem>
    <MudItem xs=""12"" md=""6"" lg=""4"">       
        <MudField Label=""Pick a color"" Variant=""Variant.Outlined"">
            <input type=""color"" @bind-value=""color""/><span class=""ml-3"">@color</span>
        </MudField>
    </MudItem>
</MudGrid>

@code {
    RenderFragment content = null;
    RenderFragment rf1 = @<MudText Typo=""@Typo.h6"">I Am Field</MudText>;
    string color=""#6cf014"";
}";

        public const string FieldMinimizePaddingExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudField Label=""Example with RadioGroup"" Variant=""Variant.Text"" InnerPadding=""false"">
            <MudRadioGroup T=""string"">
                <MudRadio T=""string"">Option 1</MudRadio>
                <MudRadio T=""string"">Option 2</MudRadio>
                <MudRadio T=""string"">Option 3</MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
    <MudItem xs=""12"">
        <MudField Label=""Example with RadioGroup"" Variant=""Variant.Filled"" InnerPadding=""false"">
            <MudRadioGroup T=""string"">
                <MudRadio T=""string"">Option 1</MudRadio>
                <MudRadio T=""string"">Option 2</MudRadio>
                <MudRadio T=""string"">Option 3</MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
    <MudItem xs=""12"">
        <MudField Label=""Example with RadioGroup"" Variant=""Variant.Outlined"" InnerPadding=""false"">
            <MudRadioGroup T=""string"">
                <MudRadio T=""string"">Option 1</MudRadio>
                <MudRadio T=""string"">Option 2</MudRadio>
                <MudRadio T=""string"">Option 3</MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
</MudGrid>";

        public const string DragAndDropFileUploadExample = @"@inject ISnackbar Snackbar

<MudPaper @ondragenter=""@SetDragClass"" @ondragleave=""@ClearDragClass"" @ondragend=""@ClearDragClass"" Height=""300px"" Outlined=""true"" Class=""@_dragClass"">
    @if (!_clearing) 
    {
        <InputFile OnChange=""OnInputFileChanged"" multiple class=""absolute mud-width-full mud-height-full overflow-hidden z-2"" style=""opacity:0;"" />
    }
    <MudText Typo=""Typo.h6"">Drag and drop files here or click</MudText>
    @foreach (var file in _fileNames) 
    {
        <MudChip T=""string"" Color=""Color.Dark"" Text=""@file"" />
    }
</MudPaper>
<MudToolBar Gutters=""false"" Class=""gap-4"">
    <MudButton OnClick=""Upload"" Disabled=""@(!_fileNames.Any())"" Color=""Color.Primary"" Variant=""Variant.Filled"">Upload</MudButton>
    <MudButton OnClick=""ClearAsync"" Disabled=""@(!_fileNames.Any())"" Color=""Color.Error"" Variant=""Variant.Filled"">Clear</MudButton>
</MudToolBar>

@code {
    private bool _clearing = false;
    private static string _defaultDragClass = ""relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full"";
    private string _dragClass = _defaultDragClass;
    private List<string> _fileNames = new List<string>();

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files) {
            _fileNames.Add(file.Name);
        }
    }

    private async Task ClearAsync()
    {
        _clearing = true;
        _fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
        _clearing = false;
    }
    private void Upload()
    {
        //Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add(""TODO: Upload your files!"", Severity.Normal);
    }

    private void SetDragClass()
    {
        _dragClass = $""{_defaultDragClass} mud-border-primary"";
    }

    private void ClearDragClass()
    {
        _dragClass = _defaultDragClass;
    }
}";

        public const string FileUploadAppendMultipleExample = @"<MudFileUpload T=""IReadOnlyList<IBrowserFile>"" AppendMultipleFiles>
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary""
                   StartIcon=""@Icons.Material.Filled.CloudUpload"">
            AppendMultipleFiles = true
        </MudButton>
    </ActivatorContent>
    <SelectedTemplate>
        @if (context != null)
        {
            @foreach (var file in context)
            {
                <MudText>@file.Name</MudText>
            }
        }
        else
        {
            <MudText>No Files</MudText>
        }
    </SelectedTemplate>
</MudFileUpload>

<MudFileUpload T=""IReadOnlyList<IBrowserFile>"" AppendMultipleFiles=""false"">
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary""
                   StartIcon=""@Icons.Material.Filled.CloudUpload"">
            AppendMultipleFiles = false
        </MudButton>
    </ActivatorContent>
    <SelectedTemplate>
        @if (context != null)
        {
            @foreach (var file in context)
            {
                <MudText>@file.Name</MudText>
            }
        }
        else
        {
            <MudText>No Files</MudText>
        }
    </SelectedTemplate>
</MudFileUpload>";

        public const string FileUploadButtonExample = @"<MudFileUpload T=""IBrowserFile"" FilesChanged=""UploadFiles"">
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary""
                   StartIcon=""@Icons.Material.Filled.CloudUpload"">
            Upload Files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

<MudFileUpload T=""IBrowserFile"" FilesChanged=""UploadFiles"">
    <ActivatorContent>
        <MudFab Color=""Color.Secondary""
                StartIcon=""@Icons.Material.Filled.Image""
                Label=""Load picture"" />
    </ActivatorContent>
</MudFileUpload>

<MudFileUpload T=""IBrowserFile"" FilesChanged=""UploadFiles"">
    <ActivatorContent>
        <MudFab Color=""Color.Success""
                StartIcon=""@Icons.Material.Filled.AttachFile"" />
    </ActivatorContent>
</MudFileUpload>

<MudFileUpload T=""IBrowserFile"" FilesChanged=""UploadFiles"">
    <ActivatorContent>
        <MudIconButton Color=""Color.Info""
                       Icon=""@Icons.Material.Filled.PhotoCamera"">
        </MudIconButton>
    </ActivatorContent>
</MudFileUpload>

<MudFileUpload T=""IBrowserFile"" FilesChanged=""UploadFiles"" Disabled>
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary"">
            Disabled Button
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@if (_files != null)
{
    <MudText Typo=""@Typo.h6"">@_files.Count() File@(_files.Count() == 1 ? """" : ""s""):</MudText>
    <MudList T=""string"">
        @foreach (var file in _files)
        {
            <MudListItem Icon=""@Icons.Material.Filled.AttachFile"" @key=""@file"">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}

@code
{
    IList<IBrowserFile> _files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        _files.Add(file);
        //TODO upload the files to the server
    }
}";

        public const string FileUploadDragAndDropCustomScenarioExample = @"@inject ISnackbar Snackbar

<MudStack Style=""width: 100%"">
    <MudFileUpload T=""IReadOnlyList<IBrowserFile>""
                   @ref=""@_fileUpload""
                   OnFilesChanged=""OnInputFileChanged""
                   AppendMultipleFiles
                   Hidden=""@false""
                   InputClass=""absolute mud-width-full mud-height-full overflow-hidden z-10""
                   InputStyle=""opacity:0""
                   tabindex=""-1""
                   @ondrop=""@ClearDragClass""
                   @ondragenter=""@SetDragClass""
                   @ondragleave=""@ClearDragClass""
                   @ondragend=""@ClearDragClass"">
        <ActivatorContent>
            <MudPaper Height=""300px""
                      Outlined=""true""
                      Class=""@_dragClass"">
                <MudText Typo=""Typo.h6"">
                    Drag and drop files here or click
                </MudText>
                @foreach (var file in _fileNames)
                {
                    <MudChip T=""string""
                             Color=""Color.Dark""
                             Text=""@file""
                             tabindex=""-1"" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters=""@false""
                Class=""relative d-flex justify-end gap-4"">
        <MudButton Color=""Color.Primary""
                   OnClick=""@OpenFilePickerAsync""
                   Variant=""Variant.Filled"">
            Open file picker
        </MudButton>
        <MudButton Color=""Color.Primary""
                   Disabled=""@(!_fileNames.Any())""
                   OnClick=""@Upload""
                   Variant=""Variant.Filled"">
            Upload
        </MudButton>
        <MudButton Color=""Color.Error""
                   Disabled=""@(!_fileNames.Any())""
                   OnClick=""@ClearAsync""
                   Variant=""Variant.Filled"">
            Clear
        </MudButton>
    </MudToolBar>
</MudStack>

@code {
#nullable enable
    private const string DefaultDragClass = ""relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full"";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
        }
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add(""TODO: Upload your files!"");
    }

    private void SetDragClass()
        => _dragClass = $""{DefaultDragClass} mud-border-primary"";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}";

        public const string FileUploadDragAndDropWithFormValidationExample = @"@using FluentValidation


@inject ISnackbar Snackbar

<MudStack Style=""width: 100%"">
    <MudForm Model=""@_model""
             @bind-IsValid=""_isValid""
             @bind-IsTouched=""_isTouched""
             Validation=""@_validationRules.ValidateValue"">
        <MudItem xs=""12"">
            <MudFileUpload T=""IReadOnlyList<IBrowserFile>""
                           @ref=""@_fileUpload""
                           @bind-Files=""_model.Files""
                           For=""@(() => _model.Files)""
                           AppendMultipleFiles
                           Hidden=""@false""
                           InputClass=""absolute mud-width-full mud-height-full overflow-hidden z-10""
                           InputStyle=""opacity:0""
                           ErrorText=""@string.Empty""
                           tabindex=""-1""
                           @ondrop=""@ClearDragClass""
                           @ondragenter=""@SetDragClass""
                           @ondragleave=""@ClearDragClass""
                           @ondragend=""@ClearDragClass"">
                <ActivatorContent>
                    <MudPaper Height=""300px""
                              Outlined=""true""
                              Class=""@_dragClass"">
                        <MudText Typo=""Typo.h6"">
                            Drag and drop files here or click
                        </MudText>
                        @foreach (var file in _model.Files?.Select(file => file.Name) ?? Enumerable.Empty<string>())
                        {
                            <MudChip T=""string"" Color=""Color.Dark"" Text=""@file"" />
                        }
                    </MudPaper>
                </ActivatorContent>
            </MudFileUpload>
            <MudToolBar Gutters=""@false""
                        Class=""relative d-flex justify-end gap-4"">
                <MudButton Color=""Color.Primary""
                           OnClick=""@OpenFilePickerAsync""
                           Variant=""Variant.Filled"">
                    Open file picker
                </MudButton>
                <MudButton Color=""Color.Primary""
                           Disabled=""@(!_isValid || !_isTouched || _model.Files is null || !_model.Files.Any())""
                           OnClick=""@Upload""
                           Variant=""Variant.Filled"">
                    Upload
                </MudButton>
                <MudButton Color=""Color.Error""
                           Disabled=""@(_model.Files is null || !_model.Files.Any())""
                           OnClick=""@ClearAsync""
                           Variant=""Variant.Filled"">
                    Clear
                </MudButton>
            </MudToolBar>
        </MudItem>
        <MudItem>
            @if (_fileUpload?.ValidationErrors.Any() ?? false)
            {
                <MudText Color=""Color.Error""
                         Typo=""@Typo.caption"">
                    @_fileUpload?.ValidationErrors[0]
                </MudText>
            }
        </MudItem>
        <MudItem xs=""12"">
            IsValid: @_isValid - IsTouched: @_isTouched
        </MudItem>
    </MudForm>
</MudStack>

@code {
#nullable enable
    public class Model
    {
        public IReadOnlyList<IBrowserFile>? Files { get; set; } = new List<IBrowserFile>();
    }

    private Model _model =  new();
    private ModelFluentValidator _validationRules = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;
    private bool _isValid;
    private bool _isTouched;
    private const string FileContent = ""this is content"";
    private const string DefaultDragClass = ""relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full"";
    private string _dragClass = DefaultDragClass;

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add(""TODO: Upload your files!"");
    }

    private void SetDragClass()
        => _dragClass = $""{DefaultDragClass} mud-border-primary"";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private Task ClearAsync()
        => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    public class ModelFluentValidator : AbstractValidator<Model>
    {
        public ModelFluentValidator()
        {
            RuleFor(x => x.Files)
                .NotEmpty()
                .WithMessage(""There must be at least 1 file."");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Model>.CreateWithOptions((Model)model, x => x.IncludeProperties(propertyName)));
            return result.IsValid ? Array.Empty<string>() : result.Errors.Select(e => e.ErrorMessage);
        };
    }
}";

        public const string FileUploadEventOptionsExample = @"<MudFileUpload T=""IBrowserFile"" FilesChanged=""UploadFiles"">
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary""
                   StartIcon=""@Icons.Material.Filled.CloudUpload"">
            Upload using FileValueChanged
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

<MudFileUpload T=""IBrowserFile"" OnFilesChanged=""UploadFiles"">
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary""
                   StartIcon=""@Icons.Material.Filled.CloudUpload"">
            Upload using OnFilesChanged
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@if (files != null)
{
    <MudText Typo=""@Typo.h6"">@files.Count() File@(files.Count() == 1 ? """" : ""s""):</MudText>
    <MudList T=""string"">
        @foreach (var file in files)
        {
            <MudListItem Icon=""@Icons.Material.Filled.AttachFile"" @key=""@file"">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}

@code
{
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }

    private void UploadFiles(InputFileChangeEventArgs args)
    {
        files.Add(args.File);
        //TODO upload the files to the server
    }
}";

        public const string FileUploadMultipleAcceptExample = @"<MudFileUpload T=""IReadOnlyList<IBrowserFile>"" FilesChanged=""UploadFiles"">
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary""
                   StartIcon=""@Icons.Material.Filled.CloudUpload"">
            Multiple Files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

<MudFileUpload T=""IBrowserFile"" Accept="".pdf"" FilesChanged=""UploadFiles2"" MaximumFileCount=""100"">
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary""
                   StartIcon=""@Icons.Material.Filled.CloudUpload"">
            Only .pdf files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>


<MudFileUpload T=""IBrowserFile"" Accept="".png, .jpg"" FilesChanged=""UploadFiles2"" MaximumFileCount=""100"">
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary""
                   StartIcon=""@Icons.Material.Filled.CloudUpload"">
            Only image files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@if (files != null)
{
    <MudList T=""string"">
        @foreach (var file in files)
        {
            <MudListItem Icon=""@Icons.Material.Filled.AttachFile"">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
    </MudList>
}

@code
{
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            this.files.Add(file);
        }
        //TODO upload the files to the server
    }

    private void UploadFiles2(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }
}";

        public const string FileUploadSelectedTemplateExample = @"<MudFileUpload T=""IBrowserFile"">
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Primary"">
            Single File
        </MudButton>
    </ActivatorContent>
    <SelectedTemplate>
        @if (context != null)
        {
            <MudText>@context.Name</MudText>
        }
        else
        {
            <MudText>No File</MudText>
        }
    </SelectedTemplate>
</MudFileUpload>

<MudFileUpload T=""IReadOnlyList<IBrowserFile>"" multiple>
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled""
                   Color=""Color.Secondary"">
            Multiple Files
        </MudButton>
    </ActivatorContent>
    <SelectedTemplate>
        @if (context != null)
        {
            @foreach (var file in context)
            {
                <MudText>@file.Name</MudText>
            }
        }
        else
        {
            <MudText>No Files</MudText>
        }
    </SelectedTemplate>
</MudFileUpload>";

        public const string FileUploadValidationExample = @"@using FluentValidation
@using Severity = MudBlazor.Severity
@inject ISnackbar Snackbar

<MudCard>
    <MudForm Model=""@model"" @ref=""@form"" Validation=""@(ValidationRules.ValidateValue)"" ValidationDelay=""0"">
        <MudCardContent>
            <MudStack>
                <MudTextField @bind-Value=""model.Name""
                              For=""@(() => model.Name)""
                              Immediate=""true""
                              Label=""Name"" />

                <MudGrid Justify=""@Justify.FlexEnd""
                         Spacing=""1"">
                    <MudItem>
                        <MudFileUpload @ref=""@_fileUpload""
                                       T=""IBrowserFile""
                                       For=""@(() => model.File)""
                                       @bind-Files=""model.File""
                                       OnFilesChanged=""UploadFiles""
                                       SuppressOnChangeWhenInvalid=""SuppressOnChangeWhenInvalid"">
                            <ActivatorContent>
                                <MudButton Variant=""Variant.Filled""
                                           Color=""Color.Primary""
                                           StartIcon=""@Icons.Material.Filled.CloudUpload"">
                                    Upload Files
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </MudItem>
                    <MudItem>
                        <MudButton Variant=""Variant.Filled""
                                   Color=""Color.Primary""
                                   StartIcon=""@Icons.Material.Filled.Clear""
                                   OnClick=""@ClearAsync"">
                            Clear Files
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudStack>
        </MudCardContent>
        <MudCardActions>
            <MudSwitch Color=""Color.Primary"" @bind-Value=""SuppressOnChangeWhenInvalid"">Suppress OnChange When Invalid</MudSwitch>
            <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Class=""ml-auto"" OnClick=""@(async () => await Submit())"">Submit</MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>

@code
{
    private MudForm form;
    private FileModel model = new();
    private FileModelFluentValidator ValidationRules = new();
    private bool SuppressOnChangeWhenInvalid;
    private MudFileUpload<IBrowserFile> _fileUpload;

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        //If SuppressOnChangeWhenInvalid is false, perform your validations here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add($""This file has the extension {model.File.Name.Split(""."").Last()}"", Severity.Info);

        //TODO upload the files to the server
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add(""Submitted!"");
        }
    }

    private Task ClearAsync()
        => _fileUpload?.ClearAsync() ?? Task.CompletedTask;

    public class FileModel
    {
        public string Name { get; set; }
        public IBrowserFile File { get; set; }
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name=""OrderModel""></typeparam>
    public class FileModelFluentValidator : AbstractValidator<FileModel>
    {
        public FileModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 100);
            RuleFor(x => x.File)
            .NotEmpty();
            When(x => x.File != null, () =>
            {
                RuleFor(x => x.File.Size).LessThanOrEqualTo(10485760).WithMessage(""The maximum file size is 10 MB"");
            });
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<FileModel>.CreateWithOptions((FileModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}";

        public const string FocusTrapUsageExample = @"<div class=""d-flex mb-4"">
    <MudCheckBox @bind-Value=""Disabled"" Label=""Disabled""></MudCheckBox>
    <MudSelect @bind-Value=""DefaultFocus"" Label=""Default Focus"" Dense=""true"" Class=""ml-4"">
        <MudSelectItem Value=""DefaultFocus.None"">None</MudSelectItem>
        <MudSelectItem Value=""DefaultFocus.Element"">Element</MudSelectItem>
        <MudSelectItem Value=""DefaultFocus.FirstChild"">FirstChild</MudSelectItem>
        <MudSelectItem Value=""DefaultFocus.LastChild"">LastChild</MudSelectItem>
    </MudSelect>
</div>

<MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>

<MudPaper Class=""pa-4"">
    <MudFocusTrap Disabled=""Disabled"" DefaultFocus=""DefaultFocus"">
        <MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>
        <MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>
        <MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>
    </MudFocusTrap>
</MudPaper>

<MudTextField T=""string"" Variant=""Variant.Outlined""></MudTextField>

@code {

    bool Disabled { get; set; }

    DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;
 }";

        public const string EditFormExample = @"@using System.ComponentModel.DataAnnotations

<EditForm Model=""@model"" OnValidSubmit=""OnValidSubmit"">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs=""12"" sm=""7"">
        <MudCard>
            <MudCardContent>
                <MudTextField Label=""First name"" HelperText=""Max. 8 characters""
                              @bind-Value=""model.Username"" For=""@(() => model.Username)""/>
                <MudTextField Label=""Email"" Class=""mt-3""
                              @bind-Value=""model.Email"" For=""@(() => model.Email)""/>
                <MudTextField Label=""Password"" HelperText=""Choose a strong password"" Class=""mt-3""
                              @bind-Value=""model.Password"" For=""@(() => model.Password)"" InputType=""InputType.Password""/>
                <MudTextField Label=""Password"" HelperText=""Repeat the password"" Class=""mt-3""
                              @bind-Value=""model.Password2"" For=""@(() => model.Password2)"" InputType=""InputType.Password""/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType=""ButtonType.Submit"" Variant=""Variant.Filled"" Color=""Color.Primary"" Class=""ml-auto"">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs=""12"" sm=""5"">
        <MudPaper Class=""pa-4 mud-height-full"">
            <MudText Typo=""Typo.subtitle2"">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color=""Color.Success"">Success</MudText>
            }
            else
            {
                <MudText Color=""@Color.Error"">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"">
        <MudText Typo=""Typo.body2"" Align=""Align.Center"">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>


@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = ""Name length can't be more than 8."")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = ""Password must be at least 8 characters long."", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}";

        public const string FluentValidationComplexExample = @"@using FluentValidation

<MudCard>
	<MudForm Model=""@model"" @ref=""@form"" Validation=""@(orderValidator.ValidateValue)"" ValidationDelay=""0"">
		<MudCardContent>
				<MudTextField @bind-Value=""model.Name""                              
							  For=""@(() => model.Name)""
							  Immediate=""true""
							  Label=""Name"" />

				<MudTextField @bind-Value=""model.Email""
							  For=""@(() => model.Email)""
							  Immediate=""true""
							  Label=""Email"" />

				<MudTextField @bind-Value=""model.CCNumber""
							  For=""@(() => model.CCNumber)""
							  Immediate=""true""
							  Label=""Credit card nr"" />

				<MudTextField @bind-Value=""model.Address.Address""
							  For=""@(() => model.Address.Address)""
							  Immediate=""true""
							  Label=""Address"" />

				<MudTextField @bind-Value=""model.Address.City""
							  For=""@(() => model.Address.City)""
							  Immediate=""true""
							  Label=""City"" />

				<MudTextField @bind-Value=""model.Address.Country""
							  For=""@(() => model.Address.Country)""
							  Immediate=""true""
							  Label=""Country"" />
        </MudCardContent>
		<MudCardContent Class=""pa-0"">

			<MudTable Items=""@model.OrderDetails"" Hover=""true"" Breakpoint=""Breakpoint.None"" Dense=""@true"" Elevation=""0"">
				<HeaderContent>
					<MudTh>Description</MudTh>
					<MudTh>Offer</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel=""Description"">
						<MudForm Model=""@context"" Validation=@(orderDetailsValidator.ValidateValue)>
  							<MudTextField Label=""Enter Description"" 
                              @bind-Value=""context.Description"" 
                              For=""(() => context.Description)"" />
  						</MudForm>
					</MudTd>
					<MudTd DataLabel=""Offer"">
						<MudForm Model=""@context"">
  							<MudNumericField Label=""Enter Offer"" 
                                               @bind-Value=""context.Offer"" 
                                               Validation=@(orderDetailsValidator.ValidateValue)
                                               For=""(() => context.Offer)"" />
  						</MudForm>
					</MudTd>
				</RowTemplate>
			</MudTable>

		</MudCardContent>
	</MudForm>
    <MudCardActions>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Class=""ml-auto"" OnClick=""@(async () => await Submit())"">Order</MudButton>
    </MudCardActions>
</MudCard>

@code {
	[Inject] ISnackbar Snackbar { get; set; }

    MudForm form;

    OrderModelFluentValidator orderValidator = new OrderModelFluentValidator();

	OrderDetailsModelFluentValidator orderDetailsValidator = new OrderDetailsModelFluentValidator();

    OrderModel model = new OrderModel();

    public class OrderModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string CCNumber { get; set; } = ""4012 8888 8888 1881"";
        public AddressModel Address { get; set; } = new AddressModel();
		public List<OrderDetailsModel> OrderDetails = new List<OrderDetailsModel>()
		{
			new OrderDetailsModel()
				{
					Description = ""Perform Work order 1"",
					Offer = 100
				},
			new OrderDetailsModel()
		};
	}

    public class AddressModel
    {
        public string Address { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }

	public class OrderDetailsModel
	{
		public string Description { get; set; }
		public decimal Offer { get; set; }
	}

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add(""Submitted!"");
        }
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name=""OrderModel""></typeparam>
    public class OrderModelFluentValidator : AbstractValidator<OrderModel>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1,100);

            RuleFor(x => x.Email)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .EmailAddress()
                .MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));

            RuleFor(x => x.CCNumber)
                .NotEmpty()
                .Length(1,100)
                .CreditCard();

            RuleFor(x => x.Address.Address)
                .NotEmpty()
                .Length(1,100);

            RuleFor(x => x.Address.City)
                .NotEmpty()
                .Length(1,100);

            RuleFor(x => x.Address.Country)
                .NotEmpty()
                .Length(1,100);

			RuleForEach(x => x.OrderDetails)
				.SetValidator(new OrderDetailsModelFluentValidator());
		}

        private async Task<bool> IsUniqueAsync(string email)
        {
            // Simulates a long running http call
            await Task.Delay(2000);
            return email.ToLower() != ""test@test.com"";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderModel>.CreateWithOptions((OrderModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

	/// <summary>
    /// A standard AbstractValidator for the Collection Object
    /// </summary>
    /// <typeparam name=""OrderDetailsModel""></typeparam>
    public class OrderDetailsModelFluentValidator : AbstractValidator<OrderDetailsModel>
    {
        public OrderDetailsModelFluentValidator()
        {
            RuleFor(x => x.Description)
                .NotEmpty()
                .Length(1,100);

			RuleFor(x => x.Offer)
				.GreaterThan(0)
				.LessThan(999);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderDetailsModel>.CreateWithOptions((OrderDetailsModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}";

        public const string FluentValidationExample = @"@using FluentValidation

<MudPaper Class=""pa-4"">
    <MudForm>
        <MudTextField @bind-Value=""creditCardNr"" Validation=""@ccValidator.Validation"" Immediate=""true"" Label=""Credit card nr"" />
    </MudForm>
</MudPaper>

@code { 
    // This is a valid Visa test card number
    string creditCardNr = ""4012 8888 8888 1881"";

    // The validation rules (overkill, I know, but very fluent):
    FluentValueValidator<string> ccValidator = new FluentValueValidator<string>(x => x
        .NotEmpty()
        .Length(1,100)
        .CreditCard());

    /// <summary>
    /// A glue class to make it easy to define validation rules for single values using FluentValidation
    /// You can reuse this class for all your fields, like for the credit card rules above.
    /// </summary>
    /// <typeparam name=""T""></typeparam>
    public class FluentValueValidator<T> : AbstractValidator<T>
    {
        public FluentValueValidator(Action<IRuleBuilderInitial<T, T>> rule)
        {
            rule(RuleFor(x => x));
        }

        private IEnumerable<string> ValidateValue(T arg)
        {
            var result = Validate(arg);
            if (result.IsValid)
                return new string[0];
            return result.Errors.Select(e => e.ErrorMessage);
        }

        public Func<T, IEnumerable<string>> Validation => ValidateValue;
    }
}";

        public const string FormCustomizationExample = @"@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs=""12"" sm=""7"">
        <MudPaper Class=""pa-4"">
            <MudForm Spacing=""spacing"">
                <MudTextField T=""string"" Label=""Username"" />
                <MudTextField T=""string"" Label=""Email"" />
                <MudTextField T=""string"" Label=""Password"" HelperText=""Choose a strong password"" InputType=""InputType.Password"" />
                <MudTextField T=""string"" Label=""Password"" HelperText=""Repeat the password"" InputType=""InputType.Password"" />
                <div class=""d-flex"">
                    <MudRadioGroup T=""string"">
                        <MudRadio Value=""@(""Personal"")"">Personal</MudRadio>
                        <MudRadio Value=""@(""Professional"")"">Professional</MudRadio>
                    </MudRadioGroup>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" sm=""5"">
        <MudPaper Class=""pa-4 mud-height-full"">
            <MudSlider @bind-Value=""spacing"" Min=""0"" Max=""16"" ValueLabel>Spacing between items</MudSlider>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    int spacing;
}";

        public const string FormReadonlyDisabledExample = @"<MudStack Row>
    <MudCard>
        <MudCardContent>
            <MudText Align=""Align.Center"">ReadOnly Form</MudText>
            <MudForm ReadOnly=""ReadOnly"" Spacing=""2"">
                <MudTextField T=""string"" Label=""Text"" />
                <MudNumericField T=""int"" Label=""Number"" />
                <MudDatePicker Label=""Date"" />
                <MudSwitch T=""bool"" Label=""Switch"" />
                <MudCheckBox T=""bool"" Label=""CheckBox"" />
                <MudRadioGroup T=""string"">
                    <MudRadio Value=""@(""1"")"">1</MudRadio>
                    <MudRadio Value=""@(""2"")"">2</MudRadio>
                </MudRadioGroup>
                <MudForm ReadOnly=""NestedReadOnly"" Spacing=""2"">
                    <MudText Align=""Align.Center"">Nested Form</MudText>
                    <MudTextField T=""string"" Label=""Nested Text"" />
                    <MudNumericField T=""int"" Label=""Nested Number"" />
                </MudForm>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudCheckBox @bind-Value=""ReadOnly"">ReadOnly</MudCheckBox>
            <MudCheckBox @bind-Value=""NestedReadOnly"">Nested</MudCheckBox>
        </MudCardActions>
    </MudCard>
    <MudCard>
        <MudCardContent>
            <MudText Align=""Align.Center"">Disabled Form</MudText>
            <MudForm Disabled=""Disabled"" Spacing=""2"">
                <MudTextField T=""string"" Label=""Text"" />
                <MudNumericField T=""int"" Label=""Number"" />
                <MudDatePicker Label=""Date"" />
                <MudSwitch T=""bool"" Label=""Switch"" />
                <MudCheckBox T=""bool"" Label=""CheckBox"" />
                <MudRadioGroup T=""string"">
                    <MudRadio Value=""@(""1"")"">1</MudRadio>
                    <MudRadio Value=""@(""2"")"">2</MudRadio>
                </MudRadioGroup>
                <MudForm Disabled=""NestedDisabled"" Spacing=""2"">
                    <MudText Align=""Align.Center"">Nested Form</MudText>
                    <MudTextField T=""string"" Label=""Nested Text"" />
                    <MudNumericField T=""int"" Label=""Nested Number"" />
                </MudForm>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudCheckBox @bind-Value=""Disabled"">Disabled</MudCheckBox>
            <MudCheckBox @bind-Value=""NestedDisabled"">Nested</MudCheckBox>
        </MudCardActions>
    </MudCard>
</MudStack>

@code {
    bool ReadOnly = true;
    bool NestedReadOnly;
    bool Disabled = true;
    bool NestedDisabled;
}";

        public const string LabelAttributeExample = @"@using System.ComponentModel.DataAnnotations

<MudCard>
    <MudCardContent>
        <MudForm Spacing=""2"">
            <MudDatePicker For=""@(() => model.Date)"" />
            <MudDatePicker For=""@(() => model.Date)"" Label=""Parameter Label"" />
            <MudSwitch For=""@(() => model.Boolean)"" Color=""Color.Primary"" />
            <MudSwitch For=""@(() => model.Boolean)"" Label=""Parameter Label"" Color=""Color.Primary"" />
            <MudTextField For=""@(() => model.String)"" />
            <MudTextField For=""@(() => model.String)"" Label=""Parameter Label"" />
        </MudForm>
    </MudCardContent>
</MudCard>

@code {
    DisplayNameLabelClass model = new();

    public class DisplayNameLabelClass
    {
        [Label(""Date LabelAttribute"")]
        public DateTime? Date { get; set; }
        [Label(""Boolean LabelAttribute"")]
        public bool Boolean { get; set; }
        [Label(""String LabelAttribute"")]
        public string String { get; set; }
    }
}";

        public const string MudFormExample = @"@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudGrid>
    <MudItem xs=""12"" sm=""7"">
        <MudPaper Class=""pa-4"">
            <MudForm @ref=""form"" @bind-IsValid=""@success"" @bind-Errors=""@errors"">
                <MudTextField T=""string"" Label=""Username"" Required=""true"" RequiredError=""User name is required!"" />
                    <MudTextField T=""string"" Label=""Email"" Required=""true"" RequiredError=""Email is required!""
                              Validation=""@(new EmailAddressAttribute() {ErrorMessage = ""The email address is invalid""})"" />
                    <MudTextField T=""string"" Label=""Password"" HelperText=""Choose a strong password"" @ref=""pwField1""
                                  InputType=""InputType.Password""
                                  Validation=""@(new Func<string, IEnumerable<string>>(PasswordStrength))"" Required=""true""
                                  RequiredError=""Password is required!""/>
                    <MudTextField T=""string""
                                  Label=""Password"" HelperText=""Repeat the password"" InputType=""InputType.Password""
                                  Validation=""@(new Func<string, string>(PasswordMatch))""/>
                    <div class=""d-flex"">
                        <MudRadioGroup T=""string"" Required=""true"" RequiredError=""Account type is required!"">
                            <MudRadio Value=""@(""Personal"")"">Personal</MudRadio>
                            <MudRadio Value=""@(""Professional"")"">Professional</MudRadio>
                        </MudRadioGroup>
                    </div>
                    <div class=""d-flex align-center justify-space-between"">
                        <MudCheckBox T=""bool"" Required=""true"" RequiredError=""You must agree"" Label=""I agree!""  />
                        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Disabled=""@(!success)"" Class=""ml-auto"">Register</MudButton>
                    </div>
            </MudForm>   
        </MudPaper>
        <MudPaper Class=""pa-4 mt-4"">
            <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" DropShadow=""false"" OnClick=""@(()=>form.Validate())"">Validate</MudButton>
            <MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"" DropShadow=""false"" OnClick=""@(()=>form.ResetAsync())"" Class=""mx-2"">Reset</MudButton>
            <MudButton Variant=""Variant.Filled"" DropShadow=""false"" OnClick=""@(()=>form.ResetValidation())"">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" sm=""5"">
        <MudPaper Class=""pa-4 mud-height-full"">
            <MudText Typo=""Typo.subtitle2"">@($""Errors ({errors.Length})"")</MudText>
                @foreach (var error in errors)
                {
                    <MudText Color=""@Color.Error"">@error</MudText>
                }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return ""Password is required!"";
            yield break;
        }
        if (pw.Length < 8)
            yield return ""Password must be at least of length 8"";
        if (!Regex.IsMatch(pw, @""[A-Z]""))
            yield return ""Password must contain at least one capital letter"";
        if (!Regex.IsMatch(pw, @""[a-z]""))
            yield return ""Password must contain at least one lowercase letter"";
        if (!Regex.IsMatch(pw, @""[0-9]""))
            yield return ""Password must contain at least one digit"";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return ""Passwords don't match"";
        return null;
    }

}";

        public const string ValidateIfDirtyExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""pa-4"">
            <MudText><CodeInline>OnlyValidateIfDirty=""false""</CodeInline> (default behavior)</MudText>
            <MudForm >
                <MudTextField T=""string"" Label=""Username"" Required=""true"" RequiredError=""User name is required!""/>
            </MudForm>
        </MudPaper>
    </MudItem>
    
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""pa-4"">
            <MudText><CodeInline>OnlyValidateIfDirty=""true""</CodeInline></MudText>
            <MudForm >
                <MudTextField T=""string"" Label=""Username"" Required=""true"" RequiredError=""User name is required!"" OnlyValidateIfDirty=""true""/>
            </MudForm>
        </MudPaper>
    </MudItem>

</MudGrid>";

        public const string GridBasicExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=12</MudPaper>
    </MudItem>
    <MudItem xs=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6</MudPaper>
    </MudItem>
    <MudItem xs=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=3</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=3</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=3</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=3</MudPaper>
    </MudItem>
</MudGrid>";

        public const string GridBuilderExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudSlider Min=""1"" Max=""20"" Immediate=""true"" Step=""1"" @bind-Value=""papers""></MudSlider>
    </MudItem>
    <MudItem xs=""12"">
        <MudSelect Label=""Justify"" T=""Justify"" @bind-Value=""justification"">
            <MudSelectItem Value=""Justify.FlexStart"">Flex Start</MudSelectItem>
            <MudSelectItem Value=""Justify.FlexEnd"">Flex End</MudSelectItem>
            <MudSelectItem Value=""Justify.Center"">Center</MudSelectItem>
            <MudSelectItem Value=""Justify.SpaceAround"">Space Around</MudSelectItem>
            <MudSelectItem Value=""Justify.SpaceBetween"">Space Between</MudSelectItem>
            <MudSelectItem Value=""Justify.SpaceEvenly"">Space Evenly</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"">
        <MudGrid Justify=""justification"">
            @for (int i = 0; i < papers; i++)
            {
                int localindex = i;
                
                <MudItem xs=""@breaks[localindex]"">
                    <MudPaper Class=""d-flex flex-column align-center justify-center mud-width-full py-8"">
                        <MudIconButton Icon=""@Icons.Material.Filled.KeyboardArrowUp"" OnClick=""(()=>UpdateBreaks(localindex,1))"" Size=""Size.Small"" />
                        <MudText Typo=""Typo.h6"" Align=""Align.Center"">@breaks[localindex]</MudText>
                        <MudIconButton Icon=""@Icons.Material.Filled.KeyboardArrowDown"" OnClick=""(()=>UpdateBreaks(localindex,-1))"" Size=""Size.Small"" />
                    </MudPaper>
                </MudItem>
             }
        </MudGrid>
    </MudItem>
</MudGrid>

@code{

    int _papers = 7;
    int papers { get { return _papers; } set { UpdatePapers(value); } }

    int[] breaks = new int[7] { 3, 4, 2, 3, 3, 2, 4 };

    Justify justification = Justify.FlexStart;

    void UpdatePapers(int value)
    {

        int[] newbreaks = Enumerable.Repeat(3, value).ToArray();

        for (int i = 0; i < newbreaks.Length; i++)
        {
            if ( i < breaks.Length)
            {
                newbreaks[i] = breaks[i];
            }
        }

        breaks = newbreaks;

        _papers = value;

        StateHasChanged();
    }

    void UpdateBreaks(int index,int changeamount)
    {
        List<int> newbreaks = breaks.ToList();
        if (newbreaks[index] + changeamount > 12 || newbreaks[index] + changeamount < 1) return; //don't go above 12 or below 1
        newbreaks[index] += changeamount;

        breaks = newbreaks.ToArray();

        StateHasChanged();
    }

}";

        public const string GridLineBreakExample = @"<MudGrid>
    <MudItem xs=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">One</MudPaper>
    </MudItem>

    <MudFlexBreak />

    <MudItem xs=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">Two</MudPaper>
    </MudItem>
    <MudItem xs=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">Three</MudPaper>
    </MudItem>
</MudGrid>";

        public const string GridSpacingExample = @"<MudSlider @bind-Value=""Spacing"" Min=""0"" Max=""20"" Color=""Color.Info"" Class=""mb-6"">Spacing: @Spacing.ToString()</MudSlider>

<MudGrid Spacing=""@Spacing"" Justify=""Justify.Center"">
    <MudItem>
        <MudPaper Height=""140px"" Width=""140px""/>
    </MudItem>
    <MudItem>
        <MudPaper Height=""140px"" Width=""140px""/>
    </MudItem>
    <MudItem>
        <MudPaper Height=""140px"" Width=""140px"" />
    </MudItem>
</MudGrid>


@code {
    public int Spacing { get; set; } = 6;
}";

        public const string GridWithBreakpointsExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=12</MudPaper>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=12 sm=6</MudPaper>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=12 sm=6</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6 sm=3</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6 sm=3</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6 sm=3</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper Class=""d-flex align-center justify-center mud-width-full py-8"">xs=6 sm=3</MudPaper>
    </MudItem>
</MudGrid>";

        public const string BrowserResizeEventExample = @"@using MudBlazor.Services
@implements IBrowserViewportObserver
@implements IAsyncDisposable

<MudCard Class=""pa-5"">
    <MudText>
        Resize the window and see width and height change:<br />
        Browser window is @(_width)x@(_height)px
    </MudText>
</MudCard>

@code
{
    [Inject]
    private IBrowserViewportService BrowserViewportService { get; set; }

    private int _width = 0;
    private int _height = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    {
        ReportRate = 50,
        NotifyOnBreakpointOnly = false
    };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _width = browserViewportEventArgs.BrowserWindowSize.Width;
        _height = browserViewportEventArgs.BrowserWindowSize.Height;

        return InvokeAsync(StateHasChanged);
    }
}";

        public const string HiddenExample = @"@using MudBlazor.Services

<MudHidden Breakpoint=""Breakpoint.Xxl"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>XXL</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Xl"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>XL</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Lg"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>LG</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Md"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>MD</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Sm"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>SM</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Xs"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>XS</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.XlAndUp"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>XL and Up</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.LgAndUp"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>LG and Up</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.MdAndUp"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>MD and Up</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.SmAndUp"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>SM and Up</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.XlAndDown"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>XL and Down</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.LgAndDown"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>LG and Down</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.MdAndDown"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>MD and Down</MudText>
	</MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.SmAndDown"" Invert=""true"">
	<MudCard Class=""pa-5"">
		<MudText>SM and Down</MudText>
	</MudCard>
</MudHidden>";

        public const string HighlighterUntilNextBoundaryExample = @"<MudTextField Style=""max-width:250px"" @bind-Value=""highlightedText"" Immediate=""true"" Label=""Highlighted Text"" />
<MudPaper Class=""pa-4 mt-4"" Elevation=""0"">
    @foreach (var paragraph in paragraphs)
    {
        <MudText @key=""paragraph"" Class=""ma-2"">
            <MudHighlighter Text=""@paragraph""
                         HighlightedText=""@highlightedText""
                         UntilNextBoundary=""@untilNextBoundary""
                         CaseSensitive=""@caseSensitive""
                         Markup=""@markup""
                         Class=""@(untilNextBoundary ? ""pa-1 mud-elevation-2 mud-theme-primary"":"""")"" />
        </MudText>
    }

</MudPaper>
<MudSwitch @bind-Value=""untilNextBoundary"" Label=""UntilNextBoundary"" Color=""Color.Primary"" />
<MudSwitch @bind-Value=""caseSensitive"" Label=""CaseSensitive"" Color=""Color.Primary"" />
<MudSwitch @bind-Value=""markup"" Label=""Markup"" Color=""Color.Primary"" />

@code{
   string highlightedText = ""mud"";
   bool untilNextBoundary;
   bool caseSensitive;
   bool markup;
   IEnumerable<string> paragraphs = new List<string>
    {
        $""<i>MudBlazor</i> is an ambitious <span style='color:{Colors.Purple.Default}'>Material Design</span> component framework for Blazor with an <span style='color:{Colors.Green.Default}'>emphasis</span> on <em>ease of use and clear structure</em>."",
        $""MudLists are easily <span style='color:{Colors.Orange.Default}'>customizable</span> and <span style='color:{Colors.Red.Default}'>scrollable</span> lists. Make them suit your needs with <i>avatars</i>, <i>icons</i>, or something like <i>checkboxes</i>."",
        $""Use <b>mud</b>-* classes to <span style='color:{Colors.Blue.Default}'>customize your MudBlazor components</span>.""
    };
}";

        public const string HighlighterWithCustomStyleExample = @"<MudPaper Elevation=""0"">
    <MudList T=""string"">
        <MudListSubheader>
            <MudTextField @bind-Value=""searchTerm"" AdornmentIcon=""@Icons.Material.Filled.Brush""
                          Adornment=""Adornment.End"" Immediate=""true"" Variant=""Variant.Outlined"" />
        </MudListSubheader>

        @foreach (var sentence in sentences)
        {
            <MudListItem @key=""sentence"" Icon=""@Icons.Material.Filled.Folder"">
                <MudHighlighter Class=""mud-primary-text""
                             Style=""background-color:transparent;font-weight:bold""
                             Text=""@sentence""
                             HighlightedText=""@searchTerm"" />
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    string searchTerm = ""it"";
    IEnumerable<string> sentences = new List<string>
    {
        ""This is the first item"", ""This is the second item"", ""This is the third item""
    };
}";

        public const string HighlighterWithListExample = @"<MudPaper Elevation=""0"">
    <MudList T=""string"">
        <MudListSubheader>
            <MudTextField @bind-Value=""searchTerm"" AdornmentIcon=""@Icons.Material.Filled.Brush""
                          Adornment=""Adornment.End"" Immediate=""true"" Variant=""Variant.Outlined"" />
        </MudListSubheader>

        @foreach (var sentence in sentences)
        {
            <MudListItem @key=""sentence"" Icon=""@Icons.Material.Filled.Folder"">
                <MudHighlighter Text=""@sentence"" HighlightedText=""@searchTerm"" />
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    string searchTerm = ""item"";
    IEnumerable<string> sentences = new List<string>
    {
        ""This is the first item"", ""This is the second item"", ""This is the third item""
    };
}";

        public const string HighlighterWithListMultipleExample = @"<MudPaper Elevation=""0"">
    <MudList T=""string"">
        <MudListSubheader>
            <MudTextField @bind-Value=""searchTerm"" AdornmentIcon=""@Icons.Material.Filled.People""
                          Adornment=""Adornment.End"" Immediate=""true"" Variant=""Variant.Outlined""
                          Label=""Names to search""/>
        </MudListSubheader>

        @{
            string[] searchTerms = searchTerm.Split(split);
            for (int i = 0; i < searchTerms.Length; i++)
                searchTerms[i] = searchTerms[i].Trim();
        }
        @foreach (var name in names)
        {
            <MudListItem @key=""name"" Icon=""@Icons.Material.Filled.Person"">
                <MudHighlighter Text=""@name"" HighlightedTexts=""@searchTerms"" />
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    string searchTerm = ""William Jordan, Oliver"";
    IEnumerable<string> names = new List<string>
    {
        ""William Jordan"", ""Oliver Jones"", ""William Johnson"", ""Daniel Williams"", ""Oliver Simpson""
    };
    static readonly char[] split = new char[] { ';', ',', '.' };
}";

        public const string HighlighterWithTableExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@GetElements()"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value=""_searchTerm"" Placeholder=""Search"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0"" Immediate=""true""></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Name</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel=""Name"">
            <MudHighlighter Text=""@context.Name"" HighlightedText=""@_searchTerm"" />
        </MudTd>
    </RowTemplate>

</MudTable>

@code {
    private string _searchTerm = ""H"";
    private IEnumerable<Element> _elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        _elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private IEnumerable<Element> GetElements() => _elements.Where(e => e.Name.Contains(_searchTerm));
}";

        public const string IconButtonFontIconExample = @"<link href=""https://use.fontawesome.com/releases/v5.14.0/css/all.css"" rel=""stylesheet"">

<MudIconButton Icon=""fas fa-atom"" Color=""Color.Error"" />
<MudIconButton Icon=""fas fa-fighter-jet"" Color=""Color.Dark"" />
<MudIconButton Icon=""fas fa-globe-europe"" Color=""Color.Tertiary"" />
<MudIconButton Icon=""fas fa-bug"" Disabled=""true"" />";

        public const string IconButtonSimpleExample = @"<MudIconButton Icon=""@Icons.Material.Filled.Delete"" aria-label=""delete"" />
<MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Primary"" aria-label=""github"" />
<MudIconButton Icon=""@Icons.Material.Filled.Favorite"" Color=""Color.Secondary"" aria-label=""add to favorite"" />
<MudIconButton Icon=""@Icons.Material.Filled.Share"" Disabled=""true"" aria-label=""share"" />";

        public const string IconButtonStyleExample = @"<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Outlined"" Color=""Color.Primary"" Size=""Size.Small"" />
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Outlined"" Color=""Color.Primary"" Size=""Size.Medium""/>
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Outlined"" Color=""Color.Primary"" Size=""Size.Large"" />
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Large"" />
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Medium"" />
<MudIconButton Icon=""@Icons.Material.Filled.Delete"" Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Small"" />";

        public const string ChangeIconProgrammaticallyExample = @"<MudIcon Icon=""@icons[index]"" Color=""Color.Primary"" />
<MudButton Variant=""Variant.Filled"" OnClick=""CycleIcons"" DropShadow=""false"" Size=""Size.Small"">Cycle Icon</MudButton>


@code{
    private int index = 0;
    private string[] icons = { Icons.Custom.Brands.MudBlazor, cube, Icons.Custom.Brands.GitHub };

    private void CycleIcons()
    {
        index = (index + 1) % 3;
    }

    const string cube = @""<svg style=""""width:24px;height:24px"""" viewBox=""""0 0 24 24"""">
    <path fill=""""currentColor"""" d=""""M21,16.5C21,16.88 20.79,17.21 20.47,17.38L12.57,21.82C12.41,21.94 12.21,22 12,22C11.79,22 11.59,21.94 11.43,21.82L3.53,17.38C3.21,17.21 3,16.88 3,16.5V7.5C3,7.12 3.21,6.79 3.53,6.62L11.43,2.18C11.59,2.06 11.79,2 12,2C12.21,2 12.41,2.06 12.57,2.18L20.47,6.62C20.79,6.79 21,7.12 21,7.5V16.5M12,4.15L6.04,7.5L12,10.85L17.96,7.5L12,4.15M5,15.91L11,19.29V12.58L5,9.21V15.91M19,15.91V9.21L13,12.58V19.29L19,15.91Z"""" />
</svg>"";
}";

        public const string IconsColorExample = @"<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Default"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Primary"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Secondary"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Success"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Info"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Warning"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Error"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Color=""Color.Dark"" />";

        public const string IconsFontAwesomeExample = @"<link href=""https://use.fontawesome.com/releases/v5.14.0/css/all.css"" rel=""stylesheet"">

<MudIcon Icon=""fas fa-database"" Color=""Color.Primary"" />
<MudIcon Icon=""fas fa-home"" Color=""Color.Secondary"" />
<MudIcon Icon=""fas fa-search"" />
<MudIconButton Icon=""fas fa-sync-alt"" />
<MudButton StartIcon=""fas fa-paper-plane"" Color=""Color.Info"" Variant=""Variant.Filled"">Send</MudButton>";

        public const string IconsFontMaterialSymbolsSyntaxExample = @"<link href=""https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined"" rel=""stylesheet"" />

<MudIcon Icon=""material-symbols-outlined/database"" Color=""Color.Primary""/>
<MudIcon Icon=""material-symbols-outlined/home"" Color=""Color.Secondary""/>
<MudIcon Icon=""material-symbols-outlined/search"" />
<MudIconButton Icon=""material-symbols-outlined/refresh"" aria-label=""refresh""/>
<MudButton StartIcon=""material-symbols-outlined/send"" Color=""Color.Info"" Variant=""Variant.Filled"">Send</MudButton>";

        public const string IconsMaterialVariantsExample = @"<MudIcon Icon=""@Icons.Material.Filled.ThumbUp"" Style=""font-size: 4rem;"" />
<MudIcon Icon=""@Icons.Material.Outlined.ThumbUp""  Style=""font-size: 4rem;"" />
<MudIcon Icon=""@Icons.Material.Rounded.ThumbUp""  Style=""font-size: 4rem;"" />
<MudIcon Icon=""@Icons.Material.Sharp.ThumbUp""  Style=""font-size: 4rem;"" />
<MudIcon Icon=""@Icons.Material.TwoTone.ThumbUp""  Style=""font-size: 4rem;"" />";

        public const string IconsSizeExample = @"<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Size=""Size.Small"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" />
<MudIcon Icon=""@Icons.Custom.Uncategorized.Radioactive"" Size=""Size.Large"" />";

        public const string IconsUsageExample = @"<MudIcon Icon=""@Icons.Material.Filled.Favorite"" Title=""Favorite"" />
<MudIcon Icon=""@Icons.Material.Filled.Api"" Title=""API"" />
<MudIcon Icon=""@Icons.Material.Filled.AddCircle"" Title=""Add"" />
<MudIcon Icon=""@Icons.Custom.Brands.GitHub"" Title=""GitHub"" />
<MudIcon Icon=""@Icons.Custom.Brands.Google"" Title=""Google"" />
<MudIcon Icon=""@Icons.Custom.Brands.Reddit"" Title=""Reddit"" />";

        public const string ImageFitExample = @"<div class=""d-flex justify-center"">
    <MudImage ObjectFit=""@ImageFit"" Height=""200"" Width=""400"" Src=""images/castle.jpg"" Alt=""Örebro Slott""  Elevation=""25"" Class=""rounded-lg""/>
</div>

<MudChipSet T=""string"" CheckMark Class=""mt-12"">
    <MudChip Text=""None"" OnClick=""@(() => SetImageFit(ObjectFit.None))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Cover"" OnClick=""@(() => SetImageFit(ObjectFit.Cover))"" SelectedColor=""Color.Primary"" Default=""true""/>
    <MudChip Text=""Contain"" OnClick=""@(() => SetImageFit(ObjectFit.Contain))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Fill"" OnClick=""@(() => SetImageFit(ObjectFit.Fill))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""ScaleDown"" OnClick=""@(() => SetImageFit(ObjectFit.ScaleDown))"" SelectedColor=""Color.Primary"" />
</MudChipSet>

@code {
    ObjectFit ImageFit = ObjectFit.Cover;

    void SetImageFit(ObjectFit value)
    {
        ImageFit = value;
    }
}";

        public const string ImagePlaygroundExample = @"<MudGrid>
    <MudItem xs=""12"" md=""8"" Class=""d-flex justify-center align-center"" Style=""height:500px;"">
        <MudImage ObjectFit=""ImageFit"" Height=""@(SetHeight ? ImageHeight : null)"" Width=""@(SetWidth ? ImageWidth : null)"" Src=""@($""images/{Image}"")"" Alt=""Mony the dog"" Elevation=""25"" Class=""rounded-lg""/>
    </MudItem>
    <MudItem xs=""12"" md=""4"">
        <MudPaper Class=""pa-4 mt-6 mt-lg-16"" Elevation=""0"">
            <MudText Typo=""Typo.h6"">Options</MudText>
            <MudSelect Label=""Image"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""Image"" Class=""mt-4"">
                <MudSelectItem T=""string"" Value=""@(""tractor.jpg"")"">Tractor</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""door.jpg"")"">Door</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""castle.jpg"")"">Castle</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""iceland.jpg"")"">Iceland</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""pilars.jpg"")"">Pilars</MudSelectItem>
                <MudSelectItem T=""string"" Value=""@(""sweden.jpg"")"">Sweden</MudSelectItem>
            </MudSelect>
            <MudSelect Label=""Image Fit"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""ImageFit"" Class=""mt-4"">
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.None"">None</MudSelectItem>
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.Cover"">Cover</MudSelectItem>
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.Contain"">Contain</MudSelectItem>
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.Fill"">Fill</MudSelectItem>
                <MudSelectItem T=""ObjectFit"" Value=""ObjectFit.ScaleDown"">ScaleDown</MudSelectItem>
            </MudSelect>
            <div class=""d-flex justify-space-between align-center mt-4"">
                <MudText>Width: @(SetWidth ? $""{ImageWidth}px"" : ""Auto"")</MudText>
                <MudSwitch @bind-Value=""SetWidth"" Color=""Color.Primary"" Class=""mr-0"" />
            </div>
            <MudSlider @bind-Value=""ImageWidth"" Disabled=""@(!SetWidth)"" Max=""400"" Color=""Color.Primary""/>
            <div class=""d-flex justify-space-between align-center mt-4"">
                <MudText>Height: @(SetHeight ? $""{ImageHeight}px"" : ""Auto"")</MudText>
                <MudSwitch @bind-Value=""SetHeight"" Color=""Color.Secondary"" Class=""mr-0"" />
            </div>
            <MudSlider @bind-Value=""ImageHeight"" Disabled=""@(!SetHeight)"" Max=""350"" Color=""Color.Secondary""/>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public string Image { get; set; } = ""tractor.jpg"";
    
    public bool SetHeight { get; set; } = false;
    public bool SetWidth { get; set; } = true;
    
    public int ImageHeight { get; set; } = 300;
    public int ImageWidth { get; set; } = 300;

    public ObjectFit ImageFit { get; set; } = ObjectFit.Cover;

}";

        public const string ImagePositionExample = @"<div class=""d-flex justify-center"">
    <MudImage ObjectFit=""ObjectFit.None"" ObjectPosition=""@ImagePosition"" Height=""200"" Width=""400"" Src=""images/iceland.jpg"" Alt=""Öxarárfoss, Iceland""  Elevation=""25"" Class=""rounded-lg""/>
</div>

<MudChipSet T=""string"" CheckMark Class=""mt-12"">
    <MudChip Text=""Center"" OnClick=""@(() => SetImagePosition(ObjectPosition.Center))"" SelectedColor=""Color.Primary"" Default=""true"" />
    <MudChip Text=""Top"" OnClick=""@(() => SetImagePosition(ObjectPosition.Top))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Bottom"" OnClick=""@(() => SetImagePosition(ObjectPosition.Bottom))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Left"" OnClick=""@(() => SetImagePosition(ObjectPosition.Left))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Left Top"" OnClick=""@(() => SetImagePosition(ObjectPosition.LeftTop))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Left Bottom"" OnClick=""@(() => SetImagePosition(ObjectPosition.LeftBottom))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Right"" OnClick=""@(() => SetImagePosition(ObjectPosition.Right))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Right Top"" OnClick=""@(() => SetImagePosition(ObjectPosition.RightTop))"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Right Bottom"" OnClick=""@(() => SetImagePosition(ObjectPosition.RightBottom))"" SelectedColor=""Color.Primary"" />
</MudChipSet>

@code {
    ObjectPosition ImagePosition = ObjectPosition.Center;

    void SetImagePosition(ObjectPosition value)
    {
        ImagePosition = value;
    }
}";

        public const string ImageResponsiveExample = @"<MudImage Fluid=""true"" Src=""images/iceland.jpg"" Alt=""Swedish Farm House"" Class=""rounded-lg""/>";

        public const string ImageSizeExample = @"<MudImage Src=""images/sweden.jpg"" Width=""200"" Height=""150"" Alt=""Swedish Farm House"" Elevation=""25"" Class=""rounded-lg ma-4""/>
<MudImage Src=""images/sweden.jpg"" Width=""332"" Height=""250"" Alt=""Swedish Farm House"" Elevation=""25"" Class=""rounded-lg ma-4""/>";

        public const string ImageUsageExample = @"<MudImage Src=""images/mony.jpg"" Alt=""Mony the dog"" Elevation=""25"" Class=""rounded-lg""/>";

        public const string LinkOnClickExample = @"<MudLink OnClick=""Count"" Href=""/components/link#onclick"">Count and go</MudLink>
<MudLink OnClick=""Count"">Count</MudLink>
<MudText>Counter: @counter</MudText>

@code {
    private int counter = 0;

    private void Count() => counter++;
}";

        public const string LinkSimpleExample = @"<MudLink Href=""#"">Default</MudLink>
<MudLink Href=""#"" Typo=""Typo.body2"">Different Typography</MudLink>
<MudLink Href=""#"" Disabled=""true"">Disabled link</MudLink>";

        public const string LinkUnderlineExample = @"<MudLink Href=""#"">Default</MudLink>
<MudLink Href=""#"" Underline=""Underline.Always"">Always</MudLink>
<MudLink Href=""#"" Underline=""Underline.None"">None</MudLink>";

        public const string ListAvatarExample = @"<MudPaper Width=""300px"">
    <MudList T=""string"">
        <MudListItem>
            <AvatarContent>
                <MudAvatar>
                    <MudImage Src=""images/mony.jpg""/>
                </MudAvatar>
            </AvatarContent>
            <ChildContent>
                Photos
            </ChildContent>
        </MudListItem>
        <MudListItem>
            <AvatarContent>
                <MudAvatar>
                    <MudIcon Icon=""@Icons.Material.Filled.Work"" Color=""Color.Primary"" />
                </MudAvatar>
            </AvatarContent>
            <ChildContent>
                Work
            </ChildContent>            
        </MudListItem>
        <MudListItem>
            <AvatarContent>
                <MudAvatar Color=""Color.Tertiary"">V</MudAvatar>
            </AvatarContent>
            <ChildContent>
                Vacation
            </ChildContent>              
        </MudListItem>
    </MudList>
</MudPaper>";

        public const string ListInteractiveExample = @"<MudGrid>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Width=""100%"">
            <MudList T=""string"" ReadOnly=""@ReadOnly"" Dense=""@Dense"" Gutters=""@Gutters"" Disabled=""@Disabled"" Padding=""@Padding"">
                <MudListSubheader>Important Isotopes</MudListSubheader>
                <MudListItem Text=""Hydrogen (H-1) - stable"" Icon=""@StableIcon"" IconColor=""@StableColor"" Expanded>
                    <NestedList>
                        <MudListItem Text=""Deuterium (H-2) - stable"" Icon=""@StableIcon"" IconColor=""@StableColor"" />
                        <MudListItem Text=""Tritium (H-3) - radioactive"" Icon=""@RadioactiveIcon"" IconColor=""@RadioactiveColor"" />
                    </NestedList>
                </MudListItem>
                <MudListItem Text=""Uranium (U-92) - radioactive"" Icon=""@RadioactiveIcon"" IconColor=""@RadioactiveColor"">
                    <NestedList>
                        <MudListItem Text=""Uranium (U-234) - radioactive"" Icon=""@RadioactiveIcon"" IconColor=""@RadioactiveColor"" />
                        <MudListItem Text=""Uranium (U-235) - radioactive"" Icon=""@RadioactiveIcon"" IconColor=""@RadioactiveColor"" />
                        <MudListItem Text=""Uranium (U-238) - radioactive"" Icon=""@RadioactiveIcon"" IconColor=""@RadioactiveColor"" />
                    </NestedList>
                </MudListItem>
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""12"" Class=""d-flex"">
        <MudCheckBox @bind-Value=""Dense"" Label=""Dense""/>
        <MudCheckBox @bind-Value=""ReadOnly"" Label=""ReadOnly""/>
        <MudCheckBox @bind-Value=""Gutters"" Label=""Gutters""/>
        <MudCheckBox @bind-Value=""Padding"" Label=""Padding""/>
        <MudCheckBox @bind-Value=""Icon"" Label=""Icon""/>
        <MudCheckBox @bind-Value=""IconColor"" Label=""IconColor""/>
        <MudCheckBox @bind-Value=""Disabled"" Label=""Disabled""/>
    </MudItem>
</MudGrid>



@code {
    public bool Dense { get; set; }
    public bool ReadOnly { get; set; }
    public bool Gutters { get; set; } = true;
    public bool Padding { get; set; } = true;
    public bool Disabled { get; set; }
    public bool Icon { get; set; } = true;
    public bool IconColor { get; set; } = true;

    public string StableIcon => Icon ? Icons.Material.Filled.RadioButtonChecked : null;
    public string RadioactiveIcon => Icon ? ""<svg xmlns=\""http://www.w3.org/2000/svg\"" viewBox=\""0 0 24 24\""><title>radioactive-circle-outline</title><path d=\""M12 4C16.4 4 20 7.6 20 12S16.4 20 12 20 4 16.4 4 12 7.6 4 12 4M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M15 17.2L13.2 14.2C12.8 14.4 12.4 14.5 12 14.5S11.1 14.4 10.8 14.2C10.3 15.1 9.6 16.2 9 17.2C9.9 17.7 10.9 18 12 18S14.1 17.7 15 17.2M15 6.8L13.2 9.8C13.9 10.2 14.5 11 14.5 12H18C18 9.8 16.8 7.8 15 6.8M12 13C12.6 13 13 12.6 13 12S12.6 11 12 11 11 11.4 11 12 11.4 13 12 13M6 12H9.5C9.5 11.1 10 10.3 10.8 9.8C10.3 8.9 9.6 7.8 9 6.8C7.2 7.8 6 9.8 6 12Z\"" /></svg>"" : null;

    public Color StableColor => IconColor ? Color.Primary : default;
    public Color RadioactiveColor => IconColor ? Color.Tertiary : default;
}";

        public const string ListMultiSelectionExample = @"<MudPaper Width=""300px"">
    <MudList T=""string"" @bind-SelectedValues=""SelectedValues"" SelectionMode=""SelectionMode.MultiSelection"" ReadOnly=""@ReadOnly"" CheckBoxColor=""Color.Tertiary"">
        <MudListSubheader>
            Select your favourite drinks:
        </MudListSubheader>
        <MudListItem Text=""Milk"" />
        <MudListItem Text=""Sparkling Water"" Value='""Carbonated H²O""' />
        <MudListItem Text=""Teas"">
            <NestedList>
                <MudListItem Text=""English Tea"" Value='""Earl Grey""' />
                <MudListItem Text=""Chinese Tea"" Value='""Gunpowder Tea""' />
                <MudListItem Text=""Bubble Tea"" />
            </NestedList>
        </MudListItem>
        <MudListItem Text=""Coffees"">
            <NestedList>
                <MudListItem Text=""Irish Coffee"" />
                <MudListItem Text=""Double Espresso"" />
                <MudListItem Text=""Cafe Latte"" />
            </NestedList>
        </MudListItem>
    </MudList>
</MudPaper>

<MudStack Row Justify=""Justify.Center"" Style=""width: 100%"" Wrap=""Wrap.Wrap"">
    <MudChipSet T=""string"" @bind-SelectedValues=""SelectedValues"" SelectionMode=""SelectionMode.MultiSelection"" Color=""Color.Tertiary"" Variant=""Variant.Text"">
        <MudChip Text=""Milk""/>
        <MudChip Text=""Carbonated H²O""/>
        <MudChip Text=""Earl Grey""/>
        <MudChip Text=""Gunpowder Tea"" />
        <MudChip Text=""Bubble Tea"" />
        <MudChip Text=""Irish Coffee"" />
        <MudChip Text=""Double Espresso""/>
        <MudChip Text=""Cafe Latte""/>
    </MudChipSet>
    <MudSwitch @bind-Value=""ReadOnly"" Color=""Color.Info"">ReadOnly</MudSwitch>    
</MudStack>

@code
{
    public IReadOnlyCollection<string> SelectedValues = [""Milk"", ""Cafe Latte""];
    public bool ReadOnly;
}";

        public const string ListNestedExample = @"<MudPaper Width=""300px"">
    <MudList T=""string"">
        <MudListSubheader>
            Nested List Items
        </MudListSubheader>
        <MudListItem Icon=""@Icons.Material.Filled.Inbox"" Text=""Inbox"" Expanded>
            <NestedList>
                <MudListItem Icon=""@Icons.Material.Filled.StarRate"">
                    Starred
                </MudListItem>
                <MudListItem Icon=""@Icons.Material.Filled.WatchLater"">
                    Snoozed
                </MudListItem>
            </NestedList>
        </MudListItem>
        <MudListItem Icon=""@Icons.Material.Filled.Send"" Text=""Sent mail"" @bind-Expanded=""_expanded"">
            <NestedList>
                <MudListItem>Re: Meeting tomorrow</MudListItem>
                <MudListItem>Fwd: JavaScript memes xD</MudListItem>
            </NestedList>
        </MudListItem>
        <MudListItem Icon=""@Icons.Material.Filled.Drafts"">
            Drafts
        </MudListItem>
        <MudDivider/>
        <MudListSubheader Class=""mb-n3"">
            <MudSwitch Color=""Color.Primary"" @bind-Value=""_expanded"">""Sent mail"" Expansion</MudSwitch>
        </MudListSubheader>
    </MudList>
</MudPaper>

@code {
    bool _expanded;
}";

        public const string ListSimpleExample = @"<MudPaper Width=""300px"">
    <MudList T=""string"">
        <MudListItem Text=""Inbox"" Icon=""@Icons.Material.Filled.Inbox"" />
        <MudListItem Text=""Sent"" Icon=""@Icons.Material.Filled.Send"" />
        <MudListItem Text=""Drafts"" Disabled=""true"" IconColor=""Color.Info"" Icon=""@Icons.Material.Filled.Drafts"" />
        <MudDivider />
        <MudListItem Text=""Trash"" SecondaryText=""Removed e-mails"" />
        <MudListItem Text=""Spam"" SecondaryText=""E-mails from common providers"" />
    </MudList>
</MudPaper>";

        public const string ListSingleSelectionExample = @"<MudPaper Width=""300px"">
<MudList T=""string"" @bind-SelectedValue=""SelectedValue"" SelectionMode=""@SelectionMode"" ReadOnly=""@ReadOnly"" Color=""@Color.Info"">
        <MudListSubheader>
            Your drink:
        <MudChip Color=""@Color.Info"">
            @(SelectedValue ?? ""You are dry"")
        </MudChip>
        </MudListSubheader>
        <MudListItem Text=""Milk"" />
        <MudListItem Text=""Sparkling Water"" Value='""Carbonated H²O""' />
        <MudListItem Text=""Teas"">
            <NestedList>
                <MudListItem Text=""English Tea"" Value='""Earl Grey""' />
                <MudListItem Text=""Chinese Tea"" Value='""Gunpowder Tea""' />
                <MudListItem Text=""Bubble Tea"" />
            </NestedList>
        </MudListItem>
        <MudListItem Text=""Coffees"">
            <NestedList>
                <MudListItem Text=""Irish Coffee"" />
                <MudListItem Text=""Double Espresso"" />
                <MudListItem Text=""Cafe Latte"" />
            </NestedList>
        </MudListItem>
    </MudList>
</MudPaper>

<MudStack Row Justify=""Justify.Center"" Style=""width: 100%"" Wrap=""Wrap.Wrap"">
    <MudRadioGroup @bind-Value=""SelectionMode"">
        <MudRadio Value=""SelectionMode.SingleSelection"" Color=""Color.Primary"">SingleSelection</MudRadio>
        <MudRadio Value=""SelectionMode.ToggleSelection"" Color=""Color.Primary"">ToggleSelection</MudRadio>
    </MudRadioGroup>
    <MudChipSet T=""string"" @bind-SelectedValue=""SelectedValue"" SelectionMode=""@SelectionMode"" Color=""Color.Info"" Variant=""Variant.Text"">
        <MudChip Text=""Milk"" />
        <MudChip Text=""Carbonated H²O"" />
        <MudChip Text=""Earl Grey"" />
        <MudChip Text=""Gunpowder Tea"" />
        <MudChip Text=""Bubble Tea"" />
        <MudChip Text=""Irish Coffee"" />
        <MudChip Text=""Double Espresso"" />
        <MudChip Text=""Cafe Latte"" />
    </MudChipSet>
    <MudSwitch @bind-Value=""ReadOnly"" Color=""Color.Primary"">ReadOnly</MudSwitch>    
</MudStack>



@code
{
    public string SelectedValue = ""Milk"";
    public SelectionMode SelectionMode = SelectionMode.SingleSelection;
    public bool ReadOnly;
}";

        public const string MenuActivatorExample1 = @"<MudMenu>
    <ActivatorContent>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"">Button</MudButton>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Label=""Profile"" />
        <MudMenuItem Label=""Theme"" />
        <MudMenuItem Label=""Usage"" />
    </ChildContent>
</MudMenu>

<MudMenu>
    <ActivatorContent>
        <MudChip T=""string"" Icon=""@Icons.Material.Filled.Person"" Color=""Color.Primary"">Chip</MudChip>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Label=""Profile"" />
        <MudMenuItem Label=""Theme"" />
        <MudMenuItem Label=""Usage"" />
    </ChildContent>
</MudMenu>

<MudMenu>
    <ActivatorContent>
        <MudAvatar>
            <MudImage Src=""images/toiletvisit.jpg"" />
        </MudAvatar>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Label=""Profile"" />
        <MudMenuItem Label=""Theme"" />
        <MudMenuItem Label=""Usage"" />
    </ChildContent>
</MudMenu>";

        public const string MenuActivatorExample2 = @"<MudMenu FullWidth=""true"" ActivationEvent=""@MouseEvent.LeftClick"">
    <ActivatorContent>
        <MudChip T=""string"" Icon=""@Icons.Material.Filled.Mouse"" Color=""Color.Primary"">Left Click</MudChip>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Label=""Profile"" />
        <MudMenuItem Label=""Theme"" />
        <MudMenuItem Label=""Usage"" />
        <MudMenuItem Label=""Sign Out"" />
    </ChildContent>
</MudMenu>

<MudMenu ActivationEvent=""@MouseEvent.RightClick"">
    <ActivatorContent>
        <MudChip T=""string"" Icon=""@Icons.Material.Filled.Mouse"" Color=""Color.Primary"">Right Click</MudChip>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Label=""Profile"" />
        <MudMenuItem Label=""Theme"" />
        <MudMenuItem Label=""Usage"" />
        <MudMenuItem Label=""Sign Out"" />
    </ChildContent>
</MudMenu>

<MudMenu FullWidth=""true"" ActivationEvent=""@MouseEvent.MouseOver"" AnchorOrigin=""Origin.BottomCenter"" TransformOrigin=""Origin.TopCenter"">
    <ActivatorContent>
        <MudChip T=""string"" Icon=""@Icons.Material.Filled.Mouse"" Color=""Color.Primary"">Mouse Over</MudChip>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Label=""Profile"" />
        <MudMenuItem Label=""Theme"" />
        <MudMenuItem Label=""Usage"" />
        <MudMenuItem Label=""Sign Out"" />
    </ChildContent>
</MudMenu>";

        public const string MenuActivatorOnMouseExample = @"<MudMenu PositionAtCursor=""true"">
    <ActivatorContent>
        <MudCard>
            <MudCardMedia Image=""images/door.jpg"" Height=""200"" />
            <MudCardContent>
                <MudText Typo=""Typo.h5"">Old Paint</MudText>
                <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
                <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
            </MudCardContent>
        </MudCard>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Label=""Undo"" />
        <MudMenuItem Label=""Redo"" Disabled />
        <MudDivider />
        <MudMenuItem Label=""Cut"" />
        <MudMenuItem Label=""Copy"" />
        <MudMenuItem Label=""Paste"" />
    </ChildContent>
</MudMenu>";

        public const string MenuAdvancedPopoverExample = @"<MudGrid>
    <MudItem xs=""3"">
        <MudText Typo=""Typo.h6"">Anchor Origin</MudText>
        <MudRadioGroup T=""Origin"" @bind-Value=""AnchorOrigin"" Class=""d-flex flex-column"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.TopCenter"">Top-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.CenterLeft"">Center-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.CenterCenter"">Center-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.CenterRight"">Center-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.BottomCenter"">Bottom-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""6"" Class=""d-flex justify-center align-center"">
        <MudBadge Origin=""@AnchorOrigin"" Color=""Color.Primary"" Icon=""@GetIcon()"" Overlap=""true"" Elevation=""4"">
            <MudMenu Label=""Advanced Placement"" Variant=""Variant.Filled"" AnchorOrigin=""@AnchorOrigin"" TransformOrigin=""@TransformOrigin"" Color=""Color.Default"" Size=""Size.Large"">
                <MudMenuItem Label=""Enlist"" />
                <MudMenuItem Label=""Barracks"" />
                <MudMenuItem Label=""Armory"" />
            </MudMenu>
        </MudBadge>
    </MudItem>
    <MudItem xs=""3"">
        <MudText Typo=""Typo.h6"">Transform Origin</MudText>
        <MudRadioGroup T=""Origin"" @bind-Value=""TransformOrigin"" Class=""d-flex flex-column"">
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.TopCenter"">Top-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.CenterLeft"">Center-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.CenterCenter"">Center-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.CenterRight"">Center-Right</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.BottomCenter"">Bottom-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
</MudGrid>

@code{ 
    
    public Origin TransformOrigin { get; set; } = Origin.TopLeft;
    public Origin AnchorOrigin { get; set; } = Origin.BottomLeft;

    public string GetIcon()
    {
        string icon = """";

        switch (TransformOrigin)
        {
            case Origin.TopLeft:
                icon = Icons.Material.Filled.SouthEast;
                break;
            case Origin.TopCenter:
                icon = Icons.Material.Filled.South;
                break;
            case Origin.TopRight:
                icon = Icons.Material.Filled.SouthWest;
                break;
            case Origin.CenterLeft:
                icon = Icons.Material.Filled.East;
                break;
            case Origin.CenterCenter:
                icon = Icons.Material.Filled.ZoomOutMap;
                break;
            case Origin.CenterRight:
                icon = Icons.Material.Filled.West;
                break;
            case Origin.BottomLeft:
                icon = Icons.Material.Filled.NorthEast;
                break;
            case Origin.BottomCenter:
                icon = Icons.Material.Filled.North;
                break;
            case Origin.BottomRight:
                icon = Icons.Material.Filled.NorthWest;
                break;
        }
        return icon;
    }

    public string GetLocation()
    {
        string align = """";
        string justify = """";
        string[] pos = TransformOrigin.ToDescriptionString().Split(""-"");

        if (pos[0] == ""center"")
        {
            align = ""align-center"";
        }
        else if (pos[0] == ""top"")
        {
            align = ""align-start"";
        }
        else if (pos[0] == ""bottom"")
        {
            align = ""align-end"";
        }
        if (pos[1] == ""left"")
        {
            justify = ""justify-start"";
        }
        else if (pos[1] == ""right"")
        {
            justify = ""justify-end"";
        }
        else if (pos[1] == ""center"")
        {
            justify = ""justify-center"";
        }

        return $""absolute mud-height-full mud-width-full d-flex ma-n3 {align} {justify}"";
    }
    
}";

        public const string MenuAnchorOriginExample = @"<MudGrid>
    <MudItem xs=""12"" md=""3"">
        <MudText Typo=""Typo.h6"">Anchor Origin</MudText>
        <MudRadioGroup T=""Origin"" @bind-Value=""AnchorOrigin"" Class=""d-flex flex-column my-2"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
        <MudText Typo=""Typo.h6"">Transform Origin</MudText>
        <MudRadioGroup T=""Origin"" @bind-Value=""TransformOrigin"" Class=""d-flex flex-column  my-2"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.TopCenter"" Disabled=""true"">Top-Center</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""9"" Class=""d-flex align-center justify-center flex-column"">
        <MudMenu Label=""Change Anchor Origin"" Variant=""Variant.Filled"" Color=""Color.Info"" AnchorOrigin=""@AnchorOrigin"" TransformOrigin=""@TransformOrigin"">
            <MudMenuItem Label=""1"" />
            <MudMenuItem Label=""2"" />
            <MudMenuItem Label=""3"" />
        </MudMenu>
        <MudText Typo=""Typo.overline"">Click the button to see effect</MudText>
    </MudItem>
</MudGrid>

@code {
    public Origin AnchorOrigin { get; set; } = Origin.TopLeft;
    public Origin TransformOrigin { get; set; } = Origin.TopCenter;
}";

        public const string MenuContextMenuExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo=""Typo.body1"">Istra Croatia</MudText>
            <MudText Typo=""Typo.body2"">Peninsula in Europe</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <div @onclick=""@(OpenContextMenu)"" @oncontextmenu=""@(OpenContextMenu)"" @oncontextmenu:preventDefault>
        <MudCardMedia Image=""images/pilars.jpg"" Height=""250""/>
    </div>
    <MudCardContent>
        <MudText Typo=""Typo.body2"">Try left clicking or right clicking the image to open the menu.</MudText>
    </MudCardContent>
</MudCard>

<MudMenu PositionAtCursor @ref=""_contextMenu"">
    <MudMenuItem Label=""Undo"" />
    <MudMenuItem Label=""Redo"" Disabled />
    <MudDivider />
    <MudMenuItem Label=""Cut"" />
    <MudMenuItem Label=""Copy"" />
    <MudMenuItem Label=""Paste"" />
</MudMenu>

@code {
#nullable enable
    private MudMenu _contextMenu = null!;

    private async Task OpenContextMenu(MouseEventArgs args)
    {
        await _contextMenu.OpenMenuAsync(args);
    }
}";

        public const string MenuCustomizationExample = @"<MudMenu Label=""Open Menu"" Color=""Color.Primary"" Size=""Size.Large"" Variant=""Variant.Filled"">
    <MudMenuItem Label=""Item 1"" />
    <MudMenuItem Label=""Item 2"" />
    <MudMenuItem Label=""Item 3"" />
</MudMenu>

<MudMenu Label=""Open Menu"" Color=""Color.Secondary"" Size=""Size.Medium"" Variant=""Variant.Text"">
    <MudMenuItem Label=""Item 1"" />
    <MudMenuItem Label=""Item 2"" />
    <MudMenuItem Label=""Item 3"" />
</MudMenu>

<MudMenu Label=""Open Menu"" Color=""Color.Tertiary"" Size=""Size.Small"" Variant=""Variant.Outlined"">
    <MudMenuItem Label=""Item 1"" />
    <MudMenuItem Label=""Item 2"" />
    <MudMenuItem Label=""Item 3"" />
</MudMenu>

<MudMenu Label=""EndIcon"" Variant=""Variant.Filled"" EndIcon=""@Icons.Material.Filled.KeyboardArrowDown"">
    <MudMenuItem Label=""Item 1"" />
    <MudMenuItem Label=""Item 2"" />
    <MudMenuItem Label=""Item 3"" />
</MudMenu>

<MudMenu Label=""EndIcon + IconColor"" Variant=""Variant.Filled"" EndIcon=""@Icons.Material.Filled.KeyboardArrowDown"" IconColor=""Color.Secondary"">
    <MudMenuItem Label=""Item 1"" />
    <MudMenuItem Label=""Item 2"" />
    <MudMenuItem Label=""Item 3"" />
</MudMenu>

<MudMenu Label=""StartIcon + EndIcon"" Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.Translate"" EndIcon=""@Icons.Material.Filled.KeyboardArrowDown"">
    <MudMenuItem Label=""Item 1"" />
    <MudMenuItem Label=""Item 2"" />
    <MudMenuItem Label=""Item 3"" />
</MudMenu>";

        public const string MenuDenseExample = @"<MudMenu Label=""Open Dense Menu"" Dense=""true"">
    <MudMenuItem Label=""Item 1"" />
    <MudMenuItem Label=""Item 2"" />
    <MudMenuItem Label=""Item 3"" />
</MudMenu>";

        public const string MenuDividerExample = @"<MudMenu Label=""Open Menu with Divider"">
    <MudMenuItem Label=""Preview"" Icon=""@Icons.Material.Filled.Visibility"" />
    <MudMenuItem Label=""Share"" Icon=""@Icons.Material.Filled.Share"" />
    <MudMenuItem Label=""Get Link"" Icon=""@Icons.Material.Filled.Link"" />
    <MudDivider />
    <MudMenuItem Label=""Remove"" Icon=""@Icons.Material.Filled.Delete"" />
</MudMenu>";

        public const string MenuIconButtonsExample = @"<MudMenu Icon=""@Icons.Material.Filled.MoreVert""
         AriaLabel=""Open user menu"">
    <MudMenuItem Label=""Profile"" />
    <MudMenuItem Label=""My account"" />
    <MudMenuItem Label=""Logout"" />
</MudMenu>

<MudMenu Icon=""@Icons.Material.Filled.Settings""
         Color=""Color.Primary""
         AriaLabel=""Open user menu"">
    <MudMenuItem Label=""Profile"" />
    <MudMenuItem Label=""My account"" />
    <MudMenuItem Label=""Logout"" />
</MudMenu>

<MudMenu Icon=""@Icons.Material.Filled.Favorite""
         Color=""Color.Secondary""
         AriaLabel=""Open user menu"">
    <MudMenuItem Label=""Profile"" />
    <MudMenuItem Label=""My account"" />
    <MudMenuItem Label=""Logout"" />
</MudMenu>";

        public const string MenuItemCustomizationExample = @"<MudMenu Label=""Open Menu with Icons"">
    <MudMenuItem Icon=""@Icons.Material.Filled.Chair"" Label=""Chair"" />
    <MudMenuItem Icon=""@Icons.Material.Filled.DoorFront"" IconColor=""Color.Secondary"" Label=""Door"" />
    <MudMenuItem Icon=""@Icons.Material.Filled.Window"" IconColor=""Color.Tertiary"" Label=""Window"" />
</MudMenu>

<MudMenu Label=""Open Menu with Dense Icons"" Dense>
    <MudMenuItem Icon=""@Icons.Material.Filled.Chair"" Label=""Chair"" />
    <MudMenuItem Icon=""@Icons.Material.Filled.DoorFront"" IconColor=""Color.Secondary"" Label=""Door"" />
    <MudMenuItem Icon=""@Icons.Material.Filled.Window"" IconColor=""Color.Tertiary"" Label=""Window"" />
</MudMenu>";

        public const string MenuMaxHeightExample = @"<MudMenu Label=""Open Scrollable Menu"" MaxHeight=""200"" FullWidth=""true"">
    <MudMenuItem Label=""Long"" />
    <MudMenuItem Label=""List"" />
    <MudMenuItem Label=""Is"" />
    <MudMenuItem Label=""To"" />
    <MudMenuItem Label=""Long"" />
    <MudMenuItem Label=""Lets"" />
    <MudMenuItem Label=""Limit"" />
    <MudMenuItem Label=""Height"" />
</MudMenu>";

        public const string MenuSimpleExample = @"<MudMenu Label=""Open Menu"">
    <MudMenuItem Label=""Item 1"" />
    <MudMenuItem Label=""Item 2"" />
    <MudMenuItem Label=""Item 3"" />
</MudMenu>";

        public const string MenuTwoWayBindingExample = @"<MudMenu Label=""Open Menu"" @bind-Open=""_open"">
    <MudMenuItem Label=""Item 1"" />
    <MudMenuItem Label=""Item 2"" />
    <MudMenuItem Label=""Item 3"" />
</MudMenu>

<MudButton Color=""Color.Primary"" OnClick=""OnOpen"">Open for 1 Second</MudButton>
<MudSwitch Color=""Color.Primary"" @bind-Value=""_open"" Label=""Open Menu Switch"" />

@code {
    private bool _open;

    private async Task OnOpen()
    {
        _open = true;
        await Task.Delay(1000);
        _open = false;
    }
}";

        public const string MenuWithNestingExample = @"<MudMenu Label=""Open Nested Menu"" Dense>
    <MudMenuItem Label=""Add reaction"" />
    <MudMenuItem Label=""Add bookmark"" />

    <MudMenu Label=""Format"">
        <MudMenu Label=""Text"" StartIcon=""@Icons.Material.Filled.FormatBold"">
            <MudMenuItem Label=""Bold"" Icon=""@Icons.Material.Filled.FormatBold"" />
            <MudMenuItem Label=""Italic"" Icon=""@Icons.Material.Filled.FormatItalic"" />
            <MudMenuItem Label=""Underline"" Icon=""@Icons.Material.Filled.FormatUnderlined"" />

            <MudMenu Label=""Size"">
                <MudMenuItem Label=""Increase font size"" />
                <MudMenuItem Label=""Decrease font size"" />
            </MudMenu>
        </MudMenu>

        <MudMenu Label=""Points"">
            <MudMenuItem Label=""Bullet"" Icon=""@Icons.Material.Filled.FormatListBulleted"" IconColor=""Color.Secondary"" />
            <MudMenuItem Label=""Number"" Icon=""@Icons.Material.Filled.FormatListNumbered"" IconColor=""Color.Secondary"" />
        </MudMenu>

        <MudMenu Label=""Alignment"">
            <MudMenuItem Label=""Left"" Icon=""@Icons.Material.Filled.FormatAlignLeft"" IconColor=""Color.Tertiary"" />
            <MudMenuItem Label=""Right"" Icon=""@Icons.Material.Filled.FormatAlignRight"" IconColor=""Color.Tertiary"" />
        </MudMenu>

        <MudMenuItem Label=""Clear formatting"" />
        <MudMenuItem Label=""Headers and footers"" />
    </MudMenu>
</MudMenu>";

        public const string MessageBoxInlineExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Error"" OnClick=""OnButtonClickedAsync"">Delete</MudButton>
<MudChip T=""string"">@_state</MudChip>

<MudMessageBox @ref=""_mudMessageBox"" Title=""Warning"" CancelText=""Cancel"">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Error"" StartIcon=""@Icons.Material.Filled.DeleteForever"">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code
{
    private MudMessageBox _mudMessageBox;
    private string _state = ""Message box hasn't been opened yet"";

    private async Task OnButtonClickedAsync()
    {
        bool? result = await _mudMessageBox.ShowAsync();
        _state = result is null ? ""Canceled"" : ""Deleted!"";
        StateHasChanged();
    }
}";

        public const string MessageBoxMarkupContentExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Info"" OnClick=""OnButtonClicked"">I am Balrog</MudButton>

<MudChip T=""string"">@state</MudChip>

@code
{
    [Inject] private IDialogService DialogService { get; set; }

    string state = ""Message box hasn't been opened yet"";

    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            ""Secure The Ring"", 
            (MarkupString) $""You <br /> Shall <br /> not <br /> <b>Pass!<b/>"",
            yesText:""Fire Whip!"", cancelText:""Smash Ground"");
        state= result==null ? ""Returned to Moria"" : ""Fighting With Gandalf!"";
        StateHasChanged();
    }
}";

        public const string MessageBoxOptionsExample = @"<MudButton OnClick=""@(() => OpenDialogAsync(_maxWidth))"">Open MaxWidth Dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_closeOnEscape))"" Color=""Color.Primary"">Close On Escape Dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_noHeader))"" Color=""Color.Secondary"">No header Dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_backdropClick))"" Color=""Color.Tertiary"">Disable backdrop dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_fullScreen))"" Color=""Color.Info"">Full Screen Dialog</MudButton>
<MudButton OnClick=""@(() => OpenDialogAsync(_topCenter))"" Color=""Color.Success"">Top Center Dialog</MudButton>
<br />
<MudSwitch @bind-Value=""_isInline"" Label=""Inline"" LabelPlacement=""Placement.End"" Color=""Color.Primary"" />
<MudChip T=""string"">@_state</MudChip>
<br />

<MudMessageBox @ref=""_mudMessageBox"" Title=""Warning"" CancelText=""Cancel"">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Error"" StartIcon=""@Icons.Material.Filled.DeleteForever"">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code
{
    [Inject]
    private IDialogService DialogService { get; set; }

    private MudMessageBox _mudMessageBox;
    private string _state = ""Message box hasn't been opened yet"";
    private bool _isInline = true;

    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private readonly DialogOptions _closeOnEscape = new() { CloseOnEscapeKey = true };
    private readonly DialogOptions _noHeader = new() { NoHeader = true };
    private readonly DialogOptions _backdropClick = new() { BackdropClick = false };
    private readonly DialogOptions _fullScreen = new() { FullScreen = true, CloseButton = true };
    private readonly DialogOptions _topCenter = new() { Position = DialogPosition.TopCenter };

    private async Task OpenDialogAsync(DialogOptions options)
    {
        bool? result;
        if (_isInline)
        {
            result = await _mudMessageBox.ShowAsync(options);
        }
        else
        {
            result = await DialogService.ShowMessageBox(
                        ""Warning"",
                        (MarkupString)""Deleting can <b><i>not</i></b> be undone!"",
                        yesText: ""Delete!"", cancelText: ""Cancel"", options: options);
        }
        _state = result is null ? ""Canceled"" : ""Deleted!"";
        StateHasChanged();
    }
}";

        public const string MessageBoxSimpleExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Error"" OnClick=""OnButtonClicked"" >Delete</MudButton>

<MudChip T=""string"">@state</MudChip>

@code
{
    [Inject] private IDialogService DialogService { get; set; }

    string state = ""Message box hasn't been opened yet"";


    private async void OnButtonClicked()
    {
        bool? result = await DialogService.ShowMessageBox(
            ""Warning"", 
            ""Deleting can not be undone!"", 
            yesText:""Delete!"", cancelText:""Cancel"");
        state = result == null ? ""Canceled"" : ""Deleted!"";
        StateHasChanged();
    }
}";

        public const string NavMenuBorderedExample = @"<MudPaper Width=""250px"" Elevation=""0"" Class=""py-3"">
    <MudNavMenu Bordered=""true"">
        <MudNavLink Href=""/dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuColorExample = @"<MudPaper Width=""250px"" Elevation=""0"" Class=""py-3"">
    <MudNavMenu Color=""Color.Info"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/components/navmenu"" Match=""NavLinkMatch.Prefix"" Icon=""@Icons.Material.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Elevation=""0"" Class=""py-3"">
    <MudNavMenu Color=""Color.Success"" Bordered=""true"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/components/navmenu"" Match=""NavLinkMatch.Prefix"" Icon=""@Icons.Material.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuDenseExample = @"<MudPaper Width=""250px"" Class=""py-3"" Elevation=""0"">
    <MudNavMenu Dense=""true"" Color=""Color.Info"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
            <MudNavLink Href=""/components/navmenu"" Match=""NavLinkMatch.Prefix"" Icon=""@Icons.Material.Filled.Storage"">Servers</MudNavLink>
            <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
            <MudNavGroup Title=""Settings"" Expanded=""true"">
                <MudNavLink Href=""/users"">Users</MudNavLink>
                <MudNavLink Href=""/security"">Security</MudNavLink>
            </MudNavGroup>
            <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Class=""py-3"" Elevation=""0"">
    <MudNavMenu Dense=""true"" Rounded=""true"" Margin=""Margin.Dense"" Color=""Color.Secondary"" Class=""pa-2"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/components/navmenu"" Match=""NavLinkMatch.Prefix"" Icon=""@Icons.Material.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuExample = @"<MudPaper Width=""250px"" Class=""py-3"" Elevation=""0"">
    <MudNavMenu>
        <MudText Typo=""Typo.h6"" Class=""px-4"">My Application</MudText>
        <MudText Typo=""Typo.body2"" Class=""px-4 mud-text-secondary"">Secondary Text</MudText>
        <MudDivider Class=""my-2""/>
        <MudNavLink Href=""/dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/servers"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuGroupTitleExample = @"<MudPaper Width=""250px"" Class=""py-3"" Elevation=""0"">
    <MudNavMenu>
        <MudText Typo=""Typo.h6"" Class=""px-4"">My Application</MudText>
        <MudText Typo=""Typo.body2"" Class=""px-4 mud-text-secondary"">Secondary Text</MudText>
        <MudDivider Class=""my-2"" />
        <MudNavLink Href=""/dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/servers"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" HeaderClass=""settings-error"" Expanded=""true"">
            <TitleContent>
                <MudBadge Icon=""@Icons.Material.Filled.ErrorOutline"" 
                          Color=""Color.Error"" 
                          Origin=""@(RightToLeft ? Origin.CenterLeft : Origin.CenterRight)"" 
                          BadgeClass=""mx-2"">
                    Settings
                </MudBadge>
            </TitleContent>
            <ChildContent>
                <MudNavLink Href=""/users"">Users</MudNavLink>
                <MudNavLink Href=""/security"">
                    <MudBadge Content=""3"" 
                              Color=""Color.Error"" 
                              Origin=""@(RightToLeft ? Origin.CenterLeft : Origin.CenterRight)"" 
                              BadgeClass=""mx-2"">
                        Security
                    </MudBadge>
                </MudNavLink>
            </ChildContent>
        </MudNavGroup>
        <MudNavLink Href=""/about"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>

@code {
    [CascadingParameter(Name = ""RightToLeft"")] public bool RightToLeft { get; set; }
}

<style>    
    .settings-error {
        color: red;
    }
</style>";

        public const string NavMenuIconExample = @"<link href=""https://use.fontawesome.com/releases/v5.14.0/css/all.css"" rel=""stylesheet"">


<MudPaper Width=""250px"" Class=""d-inline-flex py-3"" Elevation=""0"">
    <MudNavMenu Class=""mud-width-full"">
        <MudText Typo=""Typo.h6"" Class=""px-4"">Material</MudText>
        <MudText Typo=""Typo.body2"" Class=""px-4 mud-text-secondary"">Icons</MudText>
        <MudDivider Class=""my-2"" />
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Href=""/servers"" Icon=""@Icons.Material.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Icon=""@Icons.Material.Filled.Receipt"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Icon=""@Icons.Material.Filled.Settings"" Expanded=""true"">
            <MudNavLink Href=""/users"" Icon=""@Icons.Material.Filled.People"" IconColor=""Color.Success"">Users</MudNavLink>
            <MudNavLink Href=""/security"" Icon=""@Icons.Material.Filled.Security"" IconColor=""Color.Info"">Security</MudNavLink>
        </MudNavGroup>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Class=""d-inline-flex py-3"" Elevation=""0"">
    <MudNavMenu Class=""mud-width-full"">
        <MudText Typo=""Typo.h6"" Class=""px-4"">Font Awesome</MudText>
        <MudText Typo=""Typo.body2"" Class=""px-4 mud-text-secondary"">Icons</MudText>
        <MudDivider Class=""my-2"" />
        <MudNavLink Href=""/dashboard"" Icon=""fas fa-chart-line"">Dashboard</MudNavLink>
        <MudNavLink Href=""/servers"" Icon=""fas fa-server"">Servers</MudNavLink>
        <MudNavLink Href=""/billing"" Icon=""fas fa-receipt"" Disabled=""true"">Billing</MudNavLink>
        <MudNavGroup Title=""Settings"" Icon=""fas fa-cogs"" Expanded=""true"">
            <MudNavLink Href=""/users"" Icon=""fas fa-users"" IconColor=""Color.Success"">Users</MudNavLink>
            <MudNavLink Href=""/security"" Icon=""fas fa-user-shield"" IconColor=""Color.Info"">Security</MudNavLink>
        </MudNavGroup>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuMarginExample = @"<MudPaper Width=""250px"" Elevation=""0"" Class=""py-1"">
    <MudNavMenu Margin=""Margin.Dense"" Color=""Color.Warning"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"" Icon=""@Icons.Material.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/thelab"" Icon=""@Icons.Material.Filled.Science"">The Lab</MudNavLink>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Elevation=""0"" Class=""py-1"">
    <MudNavMenu Margin=""Margin.Normal"" Color=""Color.Error"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"" Icon=""@Icons.Material.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/thelab"" Icon=""@Icons.Material.Filled.Science"">The Lab</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuOnClickExample = @"@inject ISnackbar Snackbar

<MudPaper Width=""250px"" Class=""py-3"" Elevation=""0"">
    <MudNavMenu Dense>
        <MudNavGroup Title=""Settings"" Expanded=""true"">
            <MudNavLink OnClick=""@(() => GoTo(""Settings/Users""))"">Users</MudNavLink>
            <MudNavLink OnClick=""@(() => GoTo(""Settings/Security""))"">Security</MudNavLink>
        </MudNavGroup>
        <MudNavLink OnClick=""@(() => GoTo(""About""))"">About</MudNavLink>
    </MudNavMenu>
</MudPaper>

@code {
    private void GoTo(string page) => Snackbar.Add($""Clicked {page}"");
}";

        public const string NavMenuRoundedExample = @"<MudPaper Width=""250px"" Elevation=""0"">
    <MudNavMenu Rounded=""true"" Margin=""Margin.Dense"" Color=""Color.Primary"" Class=""pa-2"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"" Icon=""@Icons.Material.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/thelab"" Icon=""@Icons.Material.Filled.Science"">The Lab</MudNavLink>
    </MudNavMenu>
</MudPaper>
<MudPaper Width=""250px"" Elevation=""0"">
    <MudNavMenu Rounded=""true"" Margin=""Margin.Normal"" Color=""Color.Tertiary"" Class=""pa-2"">
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavLink Match=""NavLinkMatch.Prefix"" Href=""/components/navmenu"" Icon=""@Icons.Material.Filled.Storage"">Servers</MudNavLink>
        <MudNavLink Href=""/thelab"" Icon=""@Icons.Material.Filled.Science"">The Lab</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuSubGroupExample = @"<MudPaper Width=""250px"" Class=""d-inline-flex py-3"" Elevation=""0"">
    <MudNavMenu Class=""mud-width-full"">
        <MudText Typo=""Typo.h6"" Class=""px-4"">My Application</MudText>
        <MudText Typo=""Typo.body2"" Class=""px-4 mud-text-secondary"">Secondary Text</MudText>
        <MudDivider Class=""my-2"" />
        <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Filled.Dashboard"">Dashboard</MudNavLink>
        <MudNavGroup Title=""Level 0"" Icon=""@Icons.Material.Filled.Settings"" Expanded=""true"">
            <MudNavGroup Title=""Level 1"" Icon=""@Icons.Material.Filled.AdminPanelSettings"" Expanded=""true"">
                <MudNavGroup Title=""Level 2"" Icon=""@Icons.Material.Filled.People"" Expanded=""true"">
                    <MudNavGroup Title=""Level 3"" Icon=""@Icons.Material.Filled.Lock"" Expanded=""true"">
                        <MudNavLink Href=""/delete"" Icon=""@Icons.Material.Filled.DeleteForever"">Delete Password</MudNavLink>
                    </MudNavGroup>
                </MudNavGroup>
            </MudNavGroup>
        </MudNavGroup>
        <MudNavLink Href=""/billing"" Icon=""@Icons.Material.Filled.Receipt"">Billing</MudNavLink>
    </MudNavMenu>
</MudPaper>";

        public const string NavMenuTwoWayBindableExample = @"<MudPaper Width=""250px"" Class=""py-3 mb-4"" Elevation=""0"">
    <MudNavMenu>
        <MudNavGroup Title=""Settings"" @bind-Expanded=_expanded>
            <MudNavLink Href=""/users"">Users</MudNavLink>
            <MudNavLink Href=""/security"">Security</MudNavLink>
        </MudNavGroup>
    </MudNavMenu>
</MudPaper>

<MudText>
    The MudNavGroup is
    @if (_expanded)
    {
        <b class=""mud-theme-tertiary rounded pa-2 ml-2"">expanded</b>
    }
    else
    {
        <b class=""mud-theme-error rounded pa-2 ml-2"">collapsed</b>
    }
</MudText>

@code{
    bool _expanded = true;
}";

        public const string ChangeTheValueWithTheMouseWheelExample = @"<MudNumericField @bind-Value=""_normal"" InvertMouseWheel=""@_invertMouseWheel"" Label=""Use Shift + Mouse Wheel"" Variant=""Variant.Outlined"" />
<MudCheckBox Class=""mt-3"" @bind-Value=""_invertMouseWheel"" Label=""Revert Mouse Wheel"" Color=""Color.Primary"" />

@code {
    double _normal = 0;
    bool _invertMouseWheel = false;
}";

        public const string DebouncedNumericFieldExample = @"<MudNumericField @bind-Value=""_normal"" Label=""Normal"" HelperText=""@_normal.ToString()"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""_immediate"" Immediate=""true"" Label=""Immediate"" HelperText=""@_immediate.ToString()"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""_debounced"" DebounceInterval=""500"" OnDebounceIntervalElapsed=""HandleIntervalElapsed"" Label=""Debounced"" HelperText=""@_debounced.ToString()"" Variant=""Variant.Outlined""  />

@code {
    double _normal;
    double _immediate;
    double _debounced;

    void HandleIntervalElapsed(string debouncedText)
    {
        // At this stage, interval has elapsed.
    }
}";

        public const string NumericFieldBasicExample = @"<MudNumericField @bind-Value=""IntValue"" Label=""Standard"" Variant=""Variant.Text"" Min=""0"" Max=""10"" />
<MudNumericField @bind-Value=""DoubleValue"" Label=""Filled"" Variant=""Variant.Filled"" Min=""0.0"" />
<MudNumericField @bind-Value=""DecimalValue"" Label=""Outlined"" Variant=""Variant.Outlined"" Step="".2M"" />

@code {
    public int IntValue { get; set; }
    public double DoubleValue { get; set; }
    public decimal DecimalValue { get; set; }
}";

        public const string NumericFieldBindingValueTypesExample = @"<MudNumericField @bind-Value=""intValue"" Label=""Enter an int"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""doubleValue"" Label=""Enter a double"" Format=""F1"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""nullableInt"" Label=""Enter an int"" Variant=""Variant.Outlined"" />
<MudNumericField @bind-Value=""nullableDouble"" Label=""Enter a double"" Format=""F1"" Variant=""Variant.Outlined"" />

@code { 
    int intValue;
    double doubleValue;
    int? nullableInt;
    double? nullableDouble;
}";

        public const string NumericFieldCultureExample = @"@using System.Globalization

<MudNumericField Immediate=""false"" Label=""de-DE"" Format=""N2"" Culture=""@_de"" T=""double?"" @bind-Value=""_valueDe"" HelperText=""@_valueDe.ToString()""/>
<MudNumericField Immediate=""false"" Label=""en-US"" Format=""N2"" Culture=""@_en"" T=""double?"" @bind-Value=""_valueEn"" HelperText=""@_valueEn.ToString()""/>

@code {
    public CultureInfo _de = CultureInfo.GetCultureInfo(""de-DE"");
    public CultureInfo _en = CultureInfo.GetCultureInfo(""en-US"");

    public double? _valueDe = 1234.56;
    public double? _valueEn = 1234.56;
}";

        public const string NumericFieldHideButtonsExample = @"<MudNumericField HideSpinButtons=""true"" @bind-Value=""IntValue"" Label=""Standard"" Variant=""Variant.Text"" Min=""0"" Max=""10"" />
<MudNumericField HideSpinButtons=""true"" @bind-Value=""DoubleValue"" Label=""Filled"" Variant=""Variant.Filled"" Min=""0.0"" />
<MudNumericField HideSpinButtons=""true"" @bind-Value=""DecimalValue"" Label=""Outlined"" Variant=""Variant.Outlined"" Step="".2M"" />

@code {
    public int IntValue { get; set; }
    public double DoubleValue { get; set; }
    public decimal DecimalValue { get; set; }
}";

        public const string OverlayAbsoluteExample = @"<MudPaper Class=""pa-8"" Style=""height: 300px; position: relative;"">
    <MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"" OnClick=""@(e => ToggleOverlay(true))"">Show Overlay</MudButton>

    <MudOverlay Visible=""visible"" DarkBackground=""true"" Absolute=""true"">
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary""  OnClick=""@(e => ToggleOverlay(false))"">Hide Overlay</MudButton>
    </MudOverlay>
</MudPaper>



@code {
    private bool visible;

    public void ToggleOverlay(bool value)
    {
        visible = value;
    }
}";

        public const string OverlayColorsExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""pa-4 my-2"" Style=""position:relative;"">
            <MudOverlay Visible=""lightVisible"" LightBackground=""true"" Absolute=""true"" />
            <MudText>
                Det var en gång en spindel, som hette laban. Laban tyckte om kebab pizza, men det gjorde inte hans kompis åke.
                Åke och Laban skulle en dag ut och fiska. På vägen dit skrek Laban till, faaan du åke!!! det luktar kebab!!!
            </MudText>
            <MudButton Variant=""Variant.Filled"" Class=""mt-2"">Action</MudButton>
        </MudPaper>
        <MudSwitch @bind-Value=""lightVisible"" Label=""Light Overlay"" Color=""Color.Primary""/>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper Class=""pa-4 my-2"" Style=""position:relative;"">
            <MudOverlay Visible=""darkVisible"" DarkBackground=""true"" Absolute=""true"" />
            <MudText>
                Det var en gång en spindel, som hette laban. Laban tyckte om kebab pizza, men det gjorde inte hans kompis åke.
                Åke och Laban skulle en dag ut och fiska. På vägen dit skrek Laban till, faaan du åke!!! det luktar kebab!!!
            </MudText>
            <MudButton Variant=""Variant.Filled"" Class=""mt-2"">Action</MudButton>
        </MudPaper>
        <MudSwitch @bind-Value=""darkVisible"" Label=""Dark Overlay"" Color=""Color.Secondary"" />
    </MudItem>
</MudGrid>


@code {
    private bool lightVisible;
    private bool darkVisible;
}";

        public const string OverlayLoaderExample = @"<MudCard Class=""my-2"" Style=""position:relative;"">
    @if (!dataLoaded)
    {
        <MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Height=""200px"" />
        <MudCardContent>
            <MudSkeleton Width=""30%"" Height=""42px;"" />
            <MudSkeleton Width=""80%"" />
            <MudSkeleton Width=""100%"" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width=""64px"" Height=""40px"" Class=""ml-2"" />
            <MudSkeleton Width=""105px"" Height=""40px"" Class=""ml-3"" />
        </MudCardActions>
        <MudOverlay Visible=""visible"" DarkBackground=""true"" Absolute=""true"">
            <MudProgressCircular Color=""Color.Secondary"" Indeterminate=""true"" />
        </MudOverlay>
    }
    else
    {
        <MudCardMedia Image=""images/door.jpg"" Height=""200"" />
        <MudCardContent>
            <MudText Typo=""Typo.h5"">Old Paint</MudText>
            <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
            <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Share</MudButton>
            <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
        </MudCardActions>
    }
</MudCard>

<MudToolBar Gutters=""false"">
    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""OpenOverlay"" EndIcon=""@Icons.Material.Filled.Refresh"">Refresh Data</MudButton>
    <MudSpacer/>
    <MudButton Variant=""Variant.Filled"" OnClick=""ResetExample"">Reset Example</MudButton>
</MudToolBar>

@code { 
    private bool visible;
    private bool dataLoaded;

    public async void OpenOverlay()
    {
        visible = true;
        dataLoaded = false;
        await Task.Delay(3000);
        dataLoaded = true;
        visible = false;
        StateHasChanged();
    }

    public void ResetExample()
    {
        dataLoaded = false;
    }
}";

        public const string OverlayUsageExample = @"@inject ISnackbar Snackbar
 
<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""OpenOverlay"">Show Overlay</MudButton>

<MudOverlay @bind-Visible=""_visible"" DarkBackground AutoClose=""true"" OnClosed=""OnOverlayClosed"" />

@code {
    private bool _visible;

    public void OpenOverlay()
    {
        _visible = true;
        StateHasChanged();
    }
    
    public void OnOverlayClosed()
    {
        Snackbar.Add(""Random message"", Severity.Normal);
    }
}";

        public const string OverlayZIndexExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Tertiary"" OnClick=""OpenOverlay"">Show Overlay</MudButton>

<MudOverlay @bind-Visible=""visible"" DarkBackground=""true"" ZIndex=""9999"" AutoClose=""true""/>


@code {
    private bool visible;

    public void OpenOverlay()
    {
        visible = true;
        StateHasChanged();
    }
}";

        public const string PaginationControlButtonsExample = @"<div class=""d-flex flex-column align-center"">
    <MudPagination ShowPreviousButton=""false"" ShowNextButton=""false"" Count=""11""/>
    <MudPagination ShowFirstButton=""true"" ShowLastButton=""true"" Count=""11"" Class=""mt-4""/>
</div>";

        public const string PaginationDisabledExample = @"<MudPagination Disabled=""true"" Count=""3"" />";

        public const string PaginationHidePagesExample = @"<div class=""d-flex flex-column align-center gap-4"">
    <MudPagination ShowPageButtons=""false"" Count=""0""/>
    <MudPagination ShowPageButtons=""false"" Count=""11""/>
    <MudPagination ShowPageButtons=""false"" ShowFirstButton=""true"" ShowLastButton=""true"" Count=""11"" />
</div>";

        public const string PaginationItemCountExample = @"<div class=""d-flex flex-column align-center"">
    <MudPagination BoundaryCount=""1"" MiddleCount=""1"" Count=""22"" @bind-Selected=""@_selected"" />
    <MudPagination BoundaryCount=""2"" MiddleCount=""5"" Count=""22"" @bind-Selected=""@_selected"" Class=""mt-4"" />
</div>

@code {
    private int _selected = 11;
}";

        public const string PaginationRectangularExample = @"<div class=""d-flex flex-column align-center"">
    <MudPagination Rectangular=""true"" Variant=""Variant.Text"" Count=""6"" />
    <MudPagination Rectangular=""true"" Variant=""Variant.Filled"" Count=""6"" Class=""my-4"" />
    <MudPagination Rectangular=""true"" Variant=""Variant.Outlined"" Count=""6"" />
</div>";

        public const string PaginationSimpleExample = @"<MudPagination Color=""Color.Primary"" Count=""4"" @bind-Selected=""@_selected""/>

<MudText Align=""Align.Center"">Selected page: @_selected</MudText>

@code {
    private int _selected = 1;
}";

        public const string PaginationSizesExample = @"<div class=""d-flex flex-column align-center"">
    <MudPagination Size=""Size.Small"" Variant=""Variant.Filled"" Count=""6""/>
    <MudPagination Size=""Size.Medium"" Variant=""Variant.Filled"" Count=""6"" Class=""my-4""/>
    <MudPagination Size=""Size.Large"" Variant=""Variant.Filled"" Count=""6""/>
</div>";

        public const string PaginationTableExample = @"@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient
@using System.Net.Http.Json

<MudTable @ref=""@_table"" Items=""@_elements"" RowsPerPage=""4"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" LoadingProgressColor=""Color.Info"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination SelectedChanged=""PageChanged"" Count=""@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)"" Class=""pa-4""/>
    </PagerContent>
</MudTable>

@code {
    private MudTable<Element> _table;
    private IEnumerable<Element> _elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        _elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
}";

        public const string PaginationVariantsFilledExample = @"<MudPagination Variant=""Variant.Filled"" Count=""4""/>";

        public const string PaginationVariantsOutlinedExample = @"<MudPagination Variant=""Variant.Outlined"" Count=""4"" />";

        public const string PaperComponentExample = @"<MudPaper Class=""pa-16 ma-2"" Elevation=""0""></MudPaper>
<MudPaper Class=""pa-16 ma-2""></MudPaper>
<MudPaper Class=""pa-16 ma-2"" Elevation=""3""></MudPaper>";

        public const string PaperVariantsExample = @"<MudPaper Class=""pa-16 ma-2"" Outlined=""true""></MudPaper>
<MudPaper Class=""pa-16 ma-2"" Outlined=""true"" Square=""true""></MudPaper>
<MudPaper Class=""pa-16 ma-2"" Square=""true""></MudPaper>";

        public const string PopoverComplexContentExample = @"<div class=""d-flex"">
	<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@ToggleOpen"">
		@(_open? ""Close"" : ""Open"")
	</MudButton>
	<MudPopover Open=""@_open"" AnchorOrigin=""Origin.BottomCenter"" TransformOrigin=""Origin.TopCenter"">
		<div class=""d-flex flex-column pa-1"">
			<PopoverDynamicContentExample />
		</div>
	</MudPopover>
</div>

@code {

	public bool _open;

	public void ToggleOpen()
	{
		if (_open)
			_open = false;
		else
			_open = true;
	}
}";

        public const string PopoverDropdownSettingsExample = @"<MudGrid>
    <MudItem md=""4"">
        <MudSelect T=""string""
                   Label=""MudSelect""
                   DropdownSettings=""@_dropdownSettings""
                   AnchorOrigin=""@_anchor""
                   TransformOrigin=""@_transform""
                   RelativeWidth=""_dropdownWidth""
                   Variant=""Variant.Outlined""
                   AdornmentIcon=""@Icons.Material.Filled.Search""
                   AdornmentColor=""Color.Primary"">
            <MudSelectItem Value=""@(""foo"")"">Foo</MudSelectItem>
            <MudSelectItem Value=""@(""bar"")"">Bar</MudSelectItem>
            <MudSelectItem Value=""@(""bar"")"">Lorem ipsum dolor sit amet, consectetur adipiscing elit</MudSelectItem>
        </MudSelect>
    </MudItem>

    <MudItem md=""4""
             Class=""d-flex justify-center align-center"">
        <MudMenu Label=""MudMenu""
                 Variant=""Variant.Filled""
                 Color=""Color.Primary""
                 DropdownSettings=""@_dropdownSettings""
                 AnchorOrigin=""@_anchor""
                 TransformOrigin=""@_transform""
                 RelativeWidth=""_dropdownWidth"">
            <MudMenuItem Label=""Enlist"" />
            <MudMenuItem Label=""Barracks"" />
            <MudMenuItem Label=""Armory"" />
            <MudMenuItem Label=""The quick brown fox jumps over the lazy dog"" />
        </MudMenu>
    </MudItem>

    <MudItem md=""4"">
        <MudAutocomplete SearchFunc=""Search""
                         Variant=""Variant.Outlined""
                         Label=""MudAutocomplete""
                         DropdownSettings=""@_dropdownSettings""
                         AnchorOrigin=""@_anchor""
                         TransformOrigin=""@_transform""
                         RelativeWidth=""_dropdownWidth"" />
    </MudItem>

    <MudItem md=""1"" />

    <MudItem md=""2""
             Class=""d-flex align-center justify-center"">
        <MudSwitch @bind-Value=""@_fixed""
                   Label=""Fixed""
                   LabelPlacement=""Placement.Right"" />
    </MudItem>

    <MudItem md=""2"">
        <MudSelect T=""Origin""
                   Label=""Anchor Origin""
                   @bind-Value=""@_anchor""
                   DropdownSettings=""@_dropdownSettings"">
            <MudSelectItem Value=""@Origin.TopLeft"">Top Left</MudSelectItem>
            <MudSelectItem Value=""@Origin.TopCenter"">Top Center</MudSelectItem>
            <MudSelectItem Value=""@Origin.TopRight"">Top Right</MudSelectItem>
            <MudSelectItem Value=""@Origin.BottomLeft"">Bottom Left</MudSelectItem>
            <MudSelectItem Value=""@Origin.BottomCenter"">Bottom Center</MudSelectItem>
            <MudSelectItem Value=""@Origin.BottomRight"">Bottom Right</MudSelectItem>
            <MudSelectItem Value=""@Origin.CenterLeft"">Center Left</MudSelectItem>
            <MudSelectItem Value=""@Origin.CenterCenter"">Center Center</MudSelectItem>
            <MudSelectItem Value=""@Origin.CenterRight"">Center Right</MudSelectItem>
        </MudSelect>
    </MudItem>

    <MudItem md=""2"">
        <MudSelect T=""Origin""
                   Label=""Transform Origin""
                   @bind-Value=""@_transform"">
            <MudSelectItem Value=""@Origin.TopLeft"">Top Left</MudSelectItem>
            <MudSelectItem Value=""@Origin.TopCenter"">Top Center</MudSelectItem>
            <MudSelectItem Value=""@Origin.TopRight"">Top Right</MudSelectItem>
            <MudSelectItem Value=""@Origin.BottomLeft"">Bottom Left</MudSelectItem>
            <MudSelectItem Value=""@Origin.BottomCenter"">Bottom Center</MudSelectItem>
            <MudSelectItem Value=""@Origin.BottomRight"">Bottom Right</MudSelectItem>
            <MudSelectItem Value=""@Origin.CenterLeft"">Center Left</MudSelectItem>
            <MudSelectItem Value=""@Origin.CenterCenter"">Center Center</MudSelectItem>
            <MudSelectItem Value=""@Origin.CenterRight"">Center Right</MudSelectItem>
        </MudSelect>
    </MudItem>

    <MudItem md=""2"">
        <MudSelect T=""OverflowBehavior""
                   Label=""Overflow Behavior""
                   @bind-Value=""@_overflowBehavior"">
            <MudSelectItem Value=""@OverflowBehavior.FlipNever"">Flip Never</MudSelectItem>
            <MudSelectItem Value=""@OverflowBehavior.FlipOnOpen"">Flip On Open</MudSelectItem>
            <MudSelectItem Value=""@OverflowBehavior.FlipAlways"">Flip Always</MudSelectItem>
        </MudSelect>
    </MudItem>

    <MudItem md=""2"">
        <MudSelect T=""DropdownWidth""
                   Label=""Dropdown Width""
                   @bind-Value=""@_dropdownWidth"">
            <MudSelectItem Value=""@DropdownWidth.Relative"">Relative (equal to activator width)</MudSelectItem>
            <MudSelectItem Value=""@DropdownWidth.Adaptive"">Adaptive (min = activator width)</MudSelectItem>
            <MudSelectItem Value=""@DropdownWidth.Ignore"">Ignore (independent width)</MudSelectItem>
        </MudSelect>
    </MudItem>

</MudGrid>


@code {

    private Origin _anchor = Origin.BottomLeft;
    private Origin _transform = Origin.TopLeft;
    private bool _fixed = false;
    private OverflowBehavior _overflowBehavior = OverflowBehavior.FlipOnOpen;
    private DropdownWidth _dropdownWidth = DropdownWidth.Relative;

    private DropdownSettings _dropdownSettings => new DropdownSettings() { Fixed = _fixed, OverflowBehavior = _overflowBehavior, };

    private string[] _states =
    {
        ""Alabama"", ""Alaska"", ""Arizona"", ""Arkansas"", ""California"",
        ""Colorado"", ""Connecticut"", ""Delaware"", ""Florida"", ""Georgia"",
        ""Hawaii"", ""Idaho"", ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"",
        ""Kentucky"", ""Louisiana"", ""Maine"", ""Maryland"", ""Massachusetts"",
        ""Michigan"", ""Minnesota"", ""Mississippi"", ""Missouri"", ""Montana"",
        ""Nebraska"", ""Nevada"", ""New Hampshire"", ""New Jersey"", ""New Mexico"",
        ""New York"", ""North Carolina"", ""North Dakota"", ""Ohio"", ""Oklahoma"",
        ""Oregon"", ""Pennsylvania"", ""Rhode Island"", ""South Carolina"", ""South Dakota"",
        ""Tennessee"", ""Texas"", ""Utah"", ""Vermont"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming""
    };

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5, token);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return _states;

        return _states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}";

        public const string PopoverDynamicContentExample = @"<MudButton OnClick=""@AddMoreContent"" Color=""Color.Error"">Add another line</MudButton>
@foreach (var item in _content)
{
	<MudText Class=""pa-2"" Align=""Align.Center"">@item</MudText>
}

@code {

	private List<String> _content = new();

	public void AddMoreContent()
	{
		_content.Add(""line of text"");
	}
}";

        public const string PopoverInceptionExampleExample = @"<MudMenu Class="""" Label=""A menu with tooltip"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    <div class=""d-flex align-center"">
        <MudText Class=""ml-4"">1</MudText>
        <MudTooltip Text=""1 is good option"">
            <MudIconButton Class=""mx-2"" Icon=""@Icons.Material.Outlined.Info"" />
        </MudTooltip>
    </div>
    <div class=""d-flex align-center"">
        <MudText Class=""ml-4"">2</MudText>
        <MudMenu Icon=""@Icons.Material.Outlined.Mouse"" ActivationEvent=""@MouseEvent.MouseOver"" Class=""mx-2"">
            <ChildContent>
                <MudMenuItem Label=""Profile"" />
                <MudMenuItem Label=""Theme"" />
                <MudMenuItem Label=""Usage"" />
                <MudMenuItem Label=""Sign Out"" />
            </ChildContent>
        </MudMenu>
        <MudTooltip Text=""2 can be a better option"">
            <MudIconButton Class=""mx-2"" Icon=""@Icons.Material.Outlined.Info"" />
        </MudTooltip>
    </div>
    <div class=""d-flex align-center"">
        <MudText Class=""ml-4"">3</MudText>
        <MudTooltip Text=""3 is one more than 2"">
            <MudIconButton Class=""mx-2"" Icon=""@Icons.Material.Outlined.Info"" />
        </MudTooltip>
    </div>
</MudMenu>";

        public const string PopoverLocationExample = @"<MudGrid>
    <MudItem xs=""3"">
        <MudText Typo=""Typo.h6"">Anchor Origin</MudText>
        <MudRadioGroup T=""Origin"" @bind-Value=""AnchorOrigin"" Class=""d-flex flex-column"">
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.TopCenter"">Top-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.CenterLeft"">Center-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.CenterCenter"">Center-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.CenterRight"">Center-Right</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.BottomCenter"">Bottom-Center</MudRadio>
            <MudRadio Color=""Color.Primary"" Dense=""true"" Value=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""6"" Class=""d-flex justify-center align-center"">
            <MudBadge Origin=""@AnchorOrigin"" Color=""Color.Primary"" Dot=""true"" Overlap=""true"" Elevation=""4"" BadgeClass=""ma-2"">
                <MudPaper Elevation=""0"" Outlined=""true"" Class=""pa-12"">
                    <MudPopover OverflowBehavior=""OverflowBehavior.FlipNever"" Open=""true"" AnchorOrigin=""@AnchorOrigin"" TransformOrigin=""@TransformOrigin"" Class=""pa-4"">
                        <MudText Typo=""Typo.body2"" Class=""px-4 py-1"">The content of the popover</MudText>
                        <div class=""@GetLocation()"" style=""top:0; left:0;"">
                            <MudIcon Icon=""@GetIcon()"" Color=""Color.Secondary"" Class="""" />
                        </div>
                    </MudPopover>
                </MudPaper>
            </MudBadge>
    </MudItem>
    <MudItem xs=""3"">
        <MudText Typo=""Typo.h6"">Transform Origin</MudText>
        <MudRadioGroup T=""Origin"" @bind-Value=""TransformOrigin"" Class=""d-flex flex-column"">
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.TopLeft"">Top-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.TopCenter"">Top-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.TopRight"">Top-Right</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.CenterLeft"">Center-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.CenterCenter"">Center-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.CenterRight"">Center-Right</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.BottomLeft"">Bottom-Left</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.BottomCenter"">Bottom-Center</MudRadio>
            <MudRadio Color=""Color.Secondary"" Dense=""true"" Value=""Origin.BottomRight"">Bottom-Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
</MudGrid>

@code{
    public Origin TransformOrigin { get; set; } = Origin.TopLeft;
    public Origin AnchorOrigin { get; set; } = Origin.BottomLeft;

    public string GetIcon()
    {
        string icon = """";

        switch(TransformOrigin)
        {
            case Origin.TopLeft:
                icon = Icons.Material.Filled.SouthEast;
                break;
            case Origin.TopCenter:
                icon = Icons.Material.Filled.South;
                break;
            case Origin.TopRight:
                icon = Icons.Material.Filled.SouthWest;
                break;
            case Origin.CenterLeft:
                icon = Icons.Material.Filled.East;
                break;
            case Origin.CenterCenter:
                icon = Icons.Material.Filled.ZoomOutMap;
                break;
            case Origin.CenterRight:
                icon = Icons.Material.Filled.West;
                break;
            case Origin.BottomLeft:
                icon = Icons.Material.Filled.NorthEast;
                break;
            case Origin.BottomCenter:
                icon = Icons.Material.Filled.North;
                break;
            case Origin.BottomRight:
                icon = Icons.Material.Filled.NorthWest;
                break;
        }
        return icon;
    }

    public string GetLocation()
    {
        string align = """";
        string justify = """";
        string[] pos = TransformOrigin.ToDescriptionString().Split(""-"");

        if(pos[0] == ""center"")
        {
            align = ""align-center"";
        }
        else if(pos[0] == ""top"")
        {
            align = ""align-start"";
        }
        else if (pos[0] == ""bottom"")
        {
            align = ""align-end"";
        }
        if(pos[1] == ""left"")
        {
            justify = ""justify-start"";
        }
        else if (pos[1] == ""right"")
        {
            justify = ""justify-end"";
        }
        else if (pos[1] == ""center"")
        {
            justify = ""justify-center"";
        }

        return $""absolute mud-height-full mud-width-full d-flex {align} {justify}"";
    }
}";

        public const string PopoverOverflowBehaviorExample = @"<MudPaper Outlined=""true"" Class=""px-12 py-6"">
    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" DropShadow=""false"" OnClick=""@ToggleOpen"">@(_open? ""Close"" : ""Open"")</MudButton>
	<MudPopover Open=""_open"" OverflowBehavior=""OverflowBehavior.FlipAlways"" AnchorOrigin=""Origin.BottomCenter"" TransformOrigin=""Origin.TopCenter"" Paper=""false"">
        <MudPaper Outlined=""true"" Class=""px-4 py-8"">
            <MudText>Scroll your browser to see effect.</MudText>
        </MudPaper>
	</MudPopover>
</MudPaper>

@code {
    private bool _open = true;

    private void ToggleOpen() => _open = !_open;
}";

        public const string PopoverRelativeWidthExample = @"<div style=""width: 250px;"">
    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" FullWidth OnClick=""@ToggleOpen"">Open</MudButton>
    <MudPopover Open=""@_open"" Class=""pa-4"" Fixed=""true"" RelativeWidth=""@_dropdownWidth"" AnchorOrigin=""Origin.BottomLeft"" TransformOrigin=""Origin.TopLeft"">
        <MudText>Content of the popover can be anything.</MudText>
        <MudButton OnClick=""@ToggleOpen"" Class=""ml-auto mr-n3 mb-1"" Color=""Color.Error"">Close</MudButton>
    </MudPopover>
</div>

<div style=""width: 250px; margin-left: 150px;"">
    <MudSelect T=""DropdownWidth"" Label=""Dropdown Width"" @bind-Value=""@_dropdownWidth"">
        <MudSelectItem Value=""@DropdownWidth.Relative"">Relative</MudSelectItem>
        <MudSelectItem Value=""@DropdownWidth.Adaptive"">Adaptive</MudSelectItem>
        <MudSelectItem Value=""@DropdownWidth.Ignore"">Ignore</MudSelectItem>
    </MudSelect>
</div>

@code{
    private bool _open;

    private DropdownWidth _dropdownWidth = DropdownWidth.Ignore;

    private void ToggleOpen() => _open = !_open;
}";

        public const string PopoverSimpleExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@ToggleOpen"">Open</MudButton>
<MudSwitch @bind-Value=""_open"" Color=""Color.Primary"" />
<MudToggleIconButton @bind-Toggled=""@_open"" Icon=""@Icons.Material.Filled.Fullscreen"" Color=""@Color.Primary"" ToggledIcon=""@Icons.Material.Filled.FullscreenExit"" ToggledColor=""@Color.Secondary"" />

<MudPopover Open=""@_open"" Fixed=""true"" Class=""px-4 pt-4"">
    <div class=""d-flex flex-column"">
        <MudText>Content of the popover can be anything.</MudText>
        <MudButton OnClick=""@ToggleOpen"" Class=""ml-auto mr-n3 mb-1"" Color=""Color.Error"">Close</MudButton>
    </div>
</MudPopover>

@code{
    private bool _open;

    private void ToggleOpen() => _open = !_open;
}";

        public const string ProgressCircularDeterminateExample = @"@using System;
@using System.Threading;

@implements IDisposable

<MudProgressCircular Color=""Color.Default"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Primary"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Secondary"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Success"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Info"" Value=""@Value"" />

@code {
    private bool _disposed;

    public int Value { get; set; }

    public async Task SimulateProgressAsync()
    {
        Value = 0;
        do
        {
            if (_disposed)
            {
                return;
            }

            Value += 4;
            StateHasChanged();
            await Task.Delay(500);

        } while (Value < 100);

        await SimulateProgressAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SimulateProgressAsync();
    }

    public void Dispose() => _disposed = true;
}";

        public const string ProgressCircularInterminateExample = @"<MudProgressCircular Color=""Color.Default"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Primary"" Indeterminate=""true""/>
<MudProgressCircular Color=""Color.Secondary"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Success"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Info"" Indeterminate=""true"" />";

        public const string ProgressCircularRoundedExample = @"<MudProgressCircular Color=""Color.Error"" Rounded=""true"" Size=""Size.Large"" StrokeWidth=""4"" Value=""25"" />
<MudProgressCircular Color=""Color.Warning"" Rounded=""true"" Size=""Size.Large"" StrokeWidth=""4"" Value=""50"" />
<MudProgressCircular Color=""Color.Success"" Rounded=""true"" Size=""Size.Large"" StrokeWidth=""4"" Value=""75"" />";

        public const string ProgressCircularSizesExample = @"<MudProgressCircular Color=""Color.Primary"" Size=""Size.Small"" Indeterminate=""true""/>
<MudProgressCircular Color=""Color.Primary"" Size=""Size.Medium"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Primary"" Size=""Size.Large"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Primary"" Style=""height:70px;width:70px;"" Indeterminate=""true"" />";

        public const string ProgressLinearBufferExample = @"<MudProgressLinear Color=""Color.Primary"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Secondary"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Tertiary"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Info"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Warning"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Error"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" Class=""my-7"" />
@code {
    private bool _disposed;

    public int Value { get; set; }

    public int BufferValue { get; set; }

    public async Task SimulateProgressAsync()
    {
        Value = 5;
        BufferValue = 10;

        do
        {
            if (_disposed)
            {
                return;
            }

            Value += 4;
            BufferValue += 5;
            StateHasChanged();
            await Task.Delay(500);

        } while (Value < 100);

        await SimulateProgressAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SimulateProgressAsync();
    }

    public void Dispose() => _disposed = true;
}";

        public const string ProgressLinearDeterminateExample = @"<MudProgressLinear Color=""Color.Primary"" Value=""@Value"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Secondary"" Value=""@Value"" Class=""my-7"" />

@code {
    private bool _disposed;

    public int Value { get; set; }

    public async Task SimulateProgressAsync()
    {
        Value = 0;
        do
        {
            if (_disposed)
            {
                return;
            }

            Value += 4;
            StateHasChanged();
            await Task.Delay(500);

        } while (Value < 100);

        await SimulateProgressAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SimulateProgressAsync();
    }

    public void Dispose() => _disposed = true;
}";

        public const string ProgressLinearInterminateExample = @"<MudProgressLinear Color=""Color.Primary"" Indeterminate=""true"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Secondary"" Indeterminate=""true"" Class=""my-7""/>";

        public const string ProgressLinearLabelsExample = @"<MudProgressLinear Color=""Color.Info"" Size=""Size.Large"" Value=""25"" Class=""my-7"">
    <MudText Typo=""Typo.subtitle1"" Color=""Color.Dark"">
        <b>25%</b>
    </MudText>
</MudProgressLinear>";

        public const string ProgressLinearMinMaxExample = @"<MudProgressLinear Value=""-2"" Min=""-7"" Max=""7"" />
<MudProgressLinear Value=""17.75"" Min=""17.0"" Max=""18.0"" Class=""my-7"" />
<MudProgressLinear Value=""100"" Min=""0"" Max=""100"" />";

        public const string ProgressLinearRoundedExample = @"<MudProgressLinear Color=""Color.Error"" Rounded=""true"" Size=""Size.Small"" Value=""25"" />
<MudProgressLinear Color=""Color.Warning"" Rounded=""true"" Size=""Size.Medium"" Value=""50"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Success"" Rounded=""true"" Size=""Size.Large"" Value=""75"" />";

        public const string ProgressLinearSizeExample = @"<MudProgressLinear Color=""Color.Dark"" Size=""Size.Small"" Value=""25"" />
<MudProgressLinear Color=""Color.Info"" Size=""Size.Medium"" Value=""50"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Tertiary"" Size=""Size.Large"" Value=""75"" />";

        public const string ProgressLinearStripedExample = @"<MudProgressLinear Color=""Color.Secondary"" Striped=""true"" Size=""Size.Medium"" Value=""50"" Class=""my-7"" />
<MudProgressLinear Color=""Color.Primary"" Striped=""true"" Size=""Size.Large"" Value=""75"" Class=""my-7"" />";

        public const string ProgressLinearVerticalExample = @"<MudPaper Height=""360px"" Class=""d-flex justify-space-around mud-width-full"" Elevation=""0"">
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Size=""Size.Small"" Indeterminate=""true"" />
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Size=""Size.Medium"" Value=""@Value"" />
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Size=""Size.Medium"" Value=""25"">
        <MudText Typo=""Typo.subtitle1"" Color=""Color.Dark""><b>25</b></MudText>
    </MudProgressLinear>
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Size=""Size.Small"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" />
    <MudProgressLinear Vertical=""true"" Color=""Color.Primary"" Striped=""true"" Size=""Size.Large"" Value=""@Value"" />
</MudPaper>

@code {
    private bool _disposed;

    public int Value { get; set; }

    public int BufferValue { get; set; }

    public async Task SimulateProgressAsync()
    {
        Value = 5;
        BufferValue = 10;

        do
        {
            if (_disposed)
            {
                return;
            }

            Value += 4;
            BufferValue += 5;
            StateHasChanged();
            await Task.Delay(500);

        } while (Value < 100);

        await SimulateProgressAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SimulateProgressAsync();
    }

    public void Dispose() => _disposed = true;
}";

        public const string RadioContentPlacementExample = @"<MudGrid>
    <MudItem xs=""12"" md=""1"">
        <MudRadioGroup @bind-Value=""Placement"">
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Top)"">Top</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Bottom)"">Bottom</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Start)"">Start</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.End)"">End</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Left)"">Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Right)"">Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""9"" Class=""d-flex justify-center align-center my-auto"">
        <MudRadioGroup T=""string"">
            <MudRadio T=""string"" LabelPlacement=""@Placement"" Color=""Color.Secondary"">Content Placement</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""2"" Style=""width:100%""></MudItem>
</MudGrid>

@code {
    public Placement Placement { get; set; } = Placement.Right;
}";

        public const string RadioDenseExample = @"<MudRadioGroup @bind-Value=""Dense_Radio"">
    <MudRadio Value=""true"" Color=""Color.Primary"" Dense=""true"">Dense</MudRadio>
    <MudRadio Value=""false"" Color=""Color.Secondary"" Dense=""false"">Normal</MudRadio>
</MudRadioGroup>

@code {
    public bool Dense_Radio { get; set; } = true;
}";

        public const string RadioGroupColorExample = @"<MudRadioGroup T=""int"">
    <MudRadio Value=""1"" Color=""Color.Primary"" UncheckedColor=""Color.Default"">One</MudRadio>
    <MudRadio Value=""2"" Color=""Color.Secondary"" UncheckedColor=""Color.Default"">Two</MudRadio>
    <MudRadio Value=""3"" Color=""Color.Success"" UncheckedColor=""Color.Error"">Three</MudRadio>
    <MudRadio Value=""4"" Color=""Color.Primary"" Disabled=""true"">Four</MudRadio>
</MudRadioGroup>";

        public const string RadioGroupExample = @"<MudForm>
    <MudRadioGroup @bind-Value=""SelectedOption"">
        <MudRadio Value=""@(""Radio 1"")"" Color=""Color.Primary"">Primary</MudRadio>
        <MudRadio Value=""@(""Radio 2"")"" Color=""Color.Secondary"">Secondary</MudRadio>
        <MudRadio Value=""@(""Radio 3"")"">Default</MudRadio>
        <MudRadio Value=""@(""Radio 4"")"" Color=""Color.Primary"" Disabled=""true"">Disabled</MudRadio>
    </MudRadioGroup>
</MudForm>

<div class=""d-flex align-center"">
    <MudButton Variant=""Variant.Outlined"" OnClick=""Reset"">Reset</MudButton>
    <MudText Class=""ml-4"">Selected Option: @SelectedOption</MudText>
</div>

@code {
    public string SelectedOption { get; set; }

    private void Reset()
    {
        SelectedOption = null;
    }
}";

        public const string RadioKeyboardNavigationExample = @"<MudForm>
    <MudRadioGroup @bind-Value=""SelectedOption"">
        <MudRadio Value=""@(""Radio 1"")"" Color=""Color.Primary"">Primary</MudRadio>
        <MudRadio Value=""@(""Radio 2"")"" Color=""Color.Secondary"">Secondary</MudRadio>
        <MudRadio Value=""@(""Radio 3"")"" Color=""Color.Tertiary"">Tertiary</MudRadio>
        <MudRadio Value=""@(""Radio 4"")"">Default</MudRadio>
        <MudRadio Value=""@(""Radio 4"")"" Color=""Color.Primary"" Disabled=""true"">Disabled</MudRadio>
    </MudRadioGroup>
</MudForm>

@code {
    public string SelectedOption { get; set; }
}";

        public const string RadioReadOnlyDisabledExample = @"<MudGrid>
    <MudItem sm=""12"" md=""6"">
        <MudRadioGroup @bind-Value=""SelectedOption1"" ReadOnly=""ReadOnly"">
            <MudRadio Value=""@(""Radio 1"")"">Radio 1</MudRadio>
            <MudRadio Value=""@(""Radio 2"")"">Radio 2</MudRadio>
            <MudRadio Value=""@(""Radio 3"")"">Radio 3</MudRadio>
            <MudRadio Value=""@(""Radio 4"")"">Radio 4</MudRadio>
        </MudRadioGroup>
        <MudSwitch @bind-Value=""ReadOnly"" Color=""Color.Primary"" Label=""ReadOnly"" />
        <MudText>Selected Option 1: @SelectedOption1</MudText>
    </MudItem>
    <MudItem sm=""12"" md=""6"">
        <MudRadioGroup @bind-Value=""SelectedOption2"" Disabled=""Disabled"">
            <MudRadio Value=""@(""Radio 1"")"">Radio 1</MudRadio>
            <MudRadio Value=""@(""Radio 2"")"">Radio 2</MudRadio>
            <MudRadio Value=""@(""Radio 3"")"">Radio 3</MudRadio>
            <MudRadio Value=""@(""Radio 4"")"">Radio 4</MudRadio>
        </MudRadioGroup>
        <MudSwitch @bind-Value=""Disabled"" Color=""Color.Primary"" Label=""Disabled"" />
        <MudText>Selected Option 2: @SelectedOption2</MudText>
    </MudItem>
</MudGrid>

@code {
    public string SelectedOption1 { get; set; }
    public string SelectedOption2 { get; set; }
    public bool Disabled { get; set; }
    public bool ReadOnly { get; set; }
}";

        public const string RadioSizeExample = @"<MudRadioGroup @bind-Value=""Radio_Size"">
    <MudRadio Value=""1"" Color=""Color.Primary"" Size=""Size.Small"">Small</MudRadio>
    <MudRadio Value=""2"" Color=""Color.Secondary"" Size=""Size.Medium"">Medium</MudRadio>
    <MudRadio Value=""3"" Color=""Color.Tertiary"" Size=""Size.Large"">Large</MudRadio>
</MudRadioGroup>

@code { 
    public int Radio_Size { get; set; } = 2;
}";

        public const string BasicRatingExample = @"<MudRating SelectedValue=""2"" />";

        public const string RatingBindingsExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating @bind-SelectedValue=""selectedVal"" HoveredValueChanged=""HandleHoveredValueChanged"" />
    <MudText Typo=""Typo.subtitle2"" Class=""deep-purple-text mt-2"">@LabelText</MudText>
</div>


@code {
    private int selectedVal = 0;
    private int? activeVal;

    private void HandleHoveredValueChanged(int? val) => activeVal = val;

    private string LabelText => (activeVal ?? selectedVal) switch
    {
        1 => ""Very bad"",
        2 => ""Bad"",
        3 => ""Sufficient"",
        4 => ""Good"",
        5 => ""Awesome!"",
        _ => ""Rate our product!""
    };
}";

        public const string RatingDisabledExample = @"<MudRating Disabled=""true"" SelectedValue=""2"" />";

        public const string RatingIconsAndColorExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Filled.Visibility"" EmptyIcon=""@Icons.Material.Filled.VisibilityOff"" />
    <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Filled.Favorite"" EmptyIcon=""@Icons.Material.Filled.FavoriteBorder"" Color=""Color.Secondary"" />
    <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Filled.Square"" EmptyIcon=""@Icons.Material.Filled.Square"" FullIconColor=""Color.Primary"" EmptyIconColor=""Color.Tertiary"" />
</div>";

        public const string RatingKeyboardNavigationExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating SelectedValue=""2"" />
    <MudRating SelectedValue=""3"" MaxValue=""10"" />
</div>";

        public const string RatingMaxValueExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating SelectedValue=""1"" MaxValue=""3"" />
    <MudRating SelectedValue=""2"" />
    <MudRating SelectedValue=""3"" MaxValue=""10"" />
</div>";

        public const string RatingReadonlyExample = @"<MudRating ReadOnly=""true"" SelectedValue=""2"" />";

        public const string RatingSizesExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating SelectedValue=""2"" Size=""Size.Small"" />
    <MudRating SelectedValue=""2"" Size=""Size.Medium"" />
    <MudRating SelectedValue=""2"" Size=""Size.Large"" />
</div>";

        public const string RatingTestExample = @"@*I delete this file later*@

<MudForm>

    <h3>Default</h3>
    <MudRating SelectedValue=""2"" />
    <h3>More Values</h3>
    <MudRating SelectedValue=""5"" MaxValue=""10"" />
    <h3>Disabled</h3>
    <MudRating SelectedValue=""2"" Disabled=""true"" />
    <h3>Custom Icons, Color</h3>
    <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Filled.Favorite"" EmptyIcon=""@Icons.Material.Filled.FavoriteBorder"" Color=""Color.Secondary"" />
    <div class=""d-flex flex-column my-6"">
        <h3>Size</h3>
        <MudRating Size=""Size.Small"" />
        <MudRating Size=""Size.Medium"" />
        <MudRating Size=""Size.Large"" />
    </div>
    <div class=""d-flex flex-column align-center my-6"">
        <h3>Hover feedback</h3>
        <MudRating @bind-SelectedValue=""selectedVal"" HoveredValueChanged=""HandleHoveredValueChanged"" />
        <MudText Typo=""Typo.subtitle1"" Class=""deep-purple-text"">@GetLabelText()</MudText>
    </div>

    <div class=""d-flex flex-column align-center my-12"">
        <h3>Normal</h3>
        <MudRating SelectedValue=""2"" />
    </div>

    <div class=""d-flex flex-column align-center my-12"">
        <h3>Custom styles</h3>
        <MudRating SelectedValue=""2"" Style=""transform: rotate(25deg);"" RatingItemsStyle=""padding: 0 15px; box-sizing: content-box;"" />
    </div>

</MudForm>

@code {
    private int selectedVal = 0;
    private int? activeVal;

    private void HandleSelectedValueChanged(int val) => selectedVal = val;

    private void HandleHoveredValueChanged(int? val) => activeVal = val;

    private string GetLabelText() => (activeVal ?? selectedVal) switch
    {
        1 => ""Very bad"",
        2 => ""Bad"",
        3 => ""Sufficient"",
        4 => ""Good"",
        5 => ""Awesome!"",
        _ => ""Rate our product!""
    };
}";

        public const string CustomScrollToTopExample = @"<div id=""another_unique_identifier"" class=""ma-0"" style=""height:300px;overflow: auto;"">
    <MudPaper Elevation=""0"" Height=""3500px"" Class=""d-flex flex-column justify-space-between py-6"">
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Scroll inside this container</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Some initial long text</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Middle text</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Bottom text</MudText>
        <MudScrollToTop TopOffset=""100"" Selector=""#another_unique_identifier"" Style=""z-index:2001;"">
            <div class=""mud-theme-secondary px-3 py-6 mud-elevation-16 rounded-xl fixed"" style=""bottom:20px;left:20px;"">Scroll to top custom button</div>
        </MudScrollToTop>
    </MudPaper>
</div>";

        public const string DefaultScrollToTopExample = @"<MudScrollToTop>
    <MudFab Color=""Color.Tertiary"" StartIcon=""@Icons.Material.Filled.ArrowCircleUp"" />
</MudScrollToTop>";

        public const string ScrollToTopExample = @"<div id=""unique_id_scroll_section"" class=""ma-0"" style=""height:300px;overflow: auto;"">
    <MudPaper Elevation=""0"" Height=""3500px"" Class=""d-flex flex-column justify-space-between py-6"">
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Scroll inside this container</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Some initial long text</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Middle text</MudText>
        <MudText Typo=""Typo.h3"" Align=""Align.Center"">Bottom text</MudText>
        <MudScrollToTop TopOffset=""100""
                        OnScroll=""OnScroll""
                        Selector=""#unique_id_scroll_section""
                        VisibleCssClass=""visible absolute""
                        HiddenCssClass=""invisible"">
            <MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Filled.ArrowUpward"" Color=""Color"">Go to top</MudButton>
        </MudScrollToTop>
    </MudPaper>
</div>

@code{
    Color Color = Color.Success;
    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top*-1) switch
        {
            var x when x<  500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _=>Color.Error
        };
    }
}";

        public const string MultiSelectComplexExample = @"<MudSelect T=""State"" Label=""US States"" MultiSelection=""true"" @bind-SelectedValues=""_options"">
    @foreach (var state in _states)
    {
        <MudSelectItem T=""State"" Value=""@state"">@state</MudSelectItem>
    }
</MudSelect>

<MudGrid Class=""mt-6 px-4"">
    <MudItem xs=""6"">
        <MudText Typo=""Typo.subtitle2"">SelectedValues: HashSet&lt;State&gt;</MudText>
        <MudText Typo=""Typo.subtitle2"">{</MudText>
        <MudText Typo=""Typo.body2"" Class=""pl-4"">@(string.Join("", "", _options.Select(x=>$""\""{x}\"""")))</MudText>
        <MudText Typo=""Typo.subtitle2"">}</MudText>
    </MudItem>
</MudGrid>

@code {
#nullable enable
    private IEnumerable<State> _options = new HashSet<State> { new(""Alaska"") };

    private readonly State[] _states =
    [
        new(""Alabama""), new(""Alaska""), new(""Arizona""), new(""Arkansas""), new(""California""),
        new(""Colorado""), new(""Connecticut""), new(""Delaware""), new(""Florida""), new(""Georgia""),
        new(""Hawaii""), new(""Idaho""), new(""Illinois""), new(""Indiana""), new(""Iowa""), new(""Kansas""),
        new(""Kentucky""), new(""Louisiana""), new(""Maine""), new(""Maryland""), new(""Massachusetts""),
        new(""Michigan""), new(""Minnesota""), new(""Mississippi""), new(""Missouri""), new(""Montana""),
        new(""Nebraska""), new(""Nevada""), new(""New Hampshire""), new(""New Jersey""), new(""New Mexico""),
        new(""New York""), new(""North Carolina""), new(""North Dakota""), new(""Ohio""), new(""Oklahoma""),
        new(""Oregon""), new(""Pennsylvania""), new(""Rhode Island""), new(""South Carolina""), new(""South Dakota""),
        new(""Tennessee""), new(""Texas""), new(""Utah""), new(""Vermont""), new(""Virginia""),
        new(""Washington""), new(""West Virginia""), new(""Wisconsin""), new(""Wyoming"")
    ];

    public class State(string name) : IEquatable<State>
    {
        // IEquatable is required for complex objects, because otherwise the framework will compare the references
        // Which will not be equal when comparing the list of items and the selected item.
        // Alternatively you can implement IEqualityComparer separately and pass it to Comparer in MudSelect if you have no control over the object

        public string Name { get; } = name;

        public bool Equals(State? other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Name == other.Name;
        }

        public override bool Equals(object? obj) => obj is State state && Equals(state);

        public override int GetHashCode() => Name.GetHashCode();

        // Also important to override ToString, otherwise the object will be displayed as the full class name
        // Alternatively you can use ToStringFunc=""x => x.Name"" in MudSelect
        public override string ToString() => Name;
    }
}";

        public const string MultiSelectCustomizedExample = @"@using System.Linq

<MudSelect MultiSelectionTextFunc=""@(new Func<List<string>, string>(GetMultiSelectionText))"" MultiSelection=""true"" @bind-Value=""value"" @bind-SelectedValues=""options"" T=""string"" Label=""US States"" AdornmentIcon=""@Icons.Material.Filled.Search"">
    @foreach (var state in states)
    {
        <MudSelectItem T=""string"" Value=""@state"">@state</MudSelectItem>
    }
</MudSelect>

<MudSwitch @bind-Value=""multiselectionTextChoice"" Class=""mud-width-full"" Color=""Color.Primary"">MultiSelection Text choice</MudSwitch>  

<MudGrid Class=""mt-3 px-4"">
    <MudItem xs=""6"">
        <MudText Typo=""Typo.subtitle2"">Value:</MudText>
        <MudText Typo=""Typo.subtitle2"">""</MudText>
        <MudText Typo=""Typo.body2"" Class=""pl-4"">@value</MudText>
        <MudText Typo=""Typo.subtitle2"">""</MudText>
    </MudItem>
    <MudItem xs=""6"">
        <MudText Typo=""Typo.subtitle2"">SelectedValues: HashSet&lt;string&gt;</MudText>
        <MudText Typo=""Typo.subtitle2"">{</MudText>
        <MudText Typo=""Typo.body2"" Class=""pl-4"">@(string.Join("", "", options.Select(x=>$""\""{x}\"""")))</MudText>
        <MudText Typo=""Typo.subtitle2"">}</MudText>
    </MudItem>
</MudGrid>

@code {
    private bool multiselectionTextChoice;
    private string value { get; set; } = ""Nothing selected"";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { ""Alaska"" };

    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (multiselectionTextChoice)
        {
            return $""Selected state{(selectedValues.Count > 1 ? ""s"" : """")}: {string.Join("", "", selectedValues.Select(x => x))}"";
        }
        else
        {
            return $""{selectedValues.Count} state{(selectedValues.Count > 1 ? ""s have"":"" has"")} been selected"";
        }
    }
}";

        public const string MultiSelectExample = @"<MudSelect T=""string"" Label=""US States"" MultiSelection=""true"" @bind-Value=""_value"" @bind-SelectedValues=""_options"">
    @foreach (var state in _states)
    {
        <MudSelectItem T=""string"" Value=""@state"">@state</MudSelectItem>
    }
</MudSelect>

<MudGrid Class=""mt-6 px-4"">
    <MudItem xs=""6"">
        <MudText Typo=""Typo.subtitle2"">Value:</MudText>
        <MudText Typo=""Typo.subtitle2"">""</MudText>
        <MudText Typo=""Typo.body2"" Class=""pl-4"">@_value</MudText>
        <MudText Typo=""Typo.subtitle2"">""</MudText>
    </MudItem>
    <MudItem xs=""6"">
        <MudText Typo=""Typo.subtitle2"">SelectedValues: HashSet&lt;string&gt;</MudText>
        <MudText Typo=""Typo.subtitle2"">{</MudText>
        <MudText Typo=""Typo.body2"" Class=""pl-4"">@(string.Join("", "", _options.Select(x=>$""\""{x}\"""")))</MudText>
        <MudText Typo=""Typo.subtitle2"">}</MudText>
    </MudItem>
</MudGrid>

@code {
    private string _value = ""Nothing selected"";
    private IEnumerable<string> _options = new HashSet<string> { ""Alaska"" };
    private readonly string[] _states =
    [
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming""
    ];
}";

        public const string MultiSelectSelectAllExample = @"@using System.Linq


<MudSelect T=""string"" MultiSelection=""true"" SelectAll=""true"" SelectAllText=""Select all felines"" HelperText=""@value"" @bind-Value=""value"" @bind-SelectedValues=""options"" MultiSelectionTextFunc=""@(new Func<List<string>, string>(GetMultiSelectionText))"" Label=""Felines"" AdornmentIcon=""@Icons.Material.Filled.Search"">
    @foreach (var feline in felines)
    {
        <MudSelectItem T=""string"" Value=""@feline"">@feline</MudSelectItem>
    }
</MudSelect>

@code { 
    private string value { get; set; } = ""Nothing selected"";
    private IEnumerable<string> options { get; set; } = new HashSet<string>() { ""Lion"" };

    private string[] felines =
    {
        ""Jaguar"", ""Leopard"", ""Lion"", ""Lynx"", ""Panther"", ""Puma"", ""Tiger""
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $""{selectedValues.Count} feline{(selectedValues.Count > 1 ? ""s have"" : "" has"")} been selected"";
    }
}";

        public const string SelectAdvancedPopoverExample = @"<MudSelect T=""string"" Label=""Search"" AnchorOrigin=""Origin.CenterLeft"" TransformOrigin=""Origin.CenterRight"" Variant=""Variant.Outlined"" AdornmentIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Primary"">
    <MudSelectItem Value=""@(""foo"")"">Foo</MudSelectItem>
    <MudSelectItem Value=""@(""bar"")"">Bar</MudSelectItem>
</MudSelect>

<MudSelect T=""string"" Label=""Open Warnings"" AnchorOrigin=""Origin.CenterCenter"" TransformOrigin=""Origin.CenterCenter"" Variant=""Variant.Outlined"" AdornmentIcon=""@Icons.Material.Filled.OpenWith"" Adornment=""Adornment.Start"" AdornmentColor=""Color.Warning"">
    <MudSelectItem Value=""@(""foo"")"">Foo</MudSelectItem>
    <MudSelectItem Value=""@(""bar"")"">Bar</MudSelectItem>
</MudSelect>

<MudSelect T=""string"" Label=""Check Code"" AnchorOrigin=""Origin.BottomLeft"" TransformOrigin=""Origin.TopRight"" Variant=""Variant.Outlined"" AdornmentIcon=""@Icons.Material.Filled.Code"" CloseIcon=""@Icons.Material.Filled.SouthWest"" Adornment=""Adornment.Start"" AdornmentColor=""Color.Dark"">
    <MudSelectItem Value=""@(""foo"")"">Foo</MudSelectItem>
    <MudSelectItem Value=""@(""bar"")"">Bar</MudSelectItem>
</MudSelect>";

        public const string SelectCustomConverterExample = @"<MudText Typo=""Typo.h6"" Class=""mud-width-full"">@(pizza == null ? ""Nothing selected."" : $""Pizza: {pizza.Name}"")</MudText>

<MudSelect T=""Pizza"" @bind-Value=""pizza"" ToStringFunc=""@converter"" Label=""Select your pizza"" Variant=""Variant.Outlined"" Clearable>
    <MudSelectItem Value=""@(new Pizza() { Name=""Cardinale""})"" />
    <MudSelectItem Value=""@(new Pizza() { Name=""Diavolo""})"" />
    <MudSelectItem Value=""@(new Pizza() { Name=""Margarita""})"" />
    <MudSelectItem Value=""@(new Pizza() { Name=""Spinaci""})"" />
</MudSelect>

@code {
    Pizza pizza = new Pizza { Name = ""Diavolo"" };

    public class Pizza
    {
        public string Name { get; set; }

        // Note: this is important so the select can compare pizzas
        public override bool Equals(object o) {
            var other = o as Pizza;
            return other?.Name==Name;
        }

        // Note: this is important so the select can compare pizzas
        public override int GetHashCode() => Name.GetHashCode();
    }

    Func<Pizza,string> converter = p => p?.Name;
}";

        public const string SelectDenseExample = @"<MudSelect Dense=""true"" T=""string"" Label=""Coffee"" Variant=""Variant.Text"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Mike Rex"")"" />
</MudSelect>
<MudSelect Dense=""true"" T=""string"" Label=""Coffee"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Henon Rex"")"" />
</MudSelect>
<MudSelect Dense=""true"" T=""string"" Label=""Coffee"" Variant=""Variant.Filled"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Benno Rex"")"" />
</MudSelect>";

        public const string SelectKeyboardNavigationExample = @"<MudSelect T=""string"" Label=""Select Coffee With Keys"">
    <MudSelectItem Value=""@(""Cappuccino"")"" />
    <MudSelectItem Value=""@(""Cafe Latte"")"" />
    <MudSelectItem Value=""@(""Espresso"")"" />
    <MudSelectItem Value=""@(""Irish Coffee"")"" />
</MudSelect>

<MudSelect T=""string"" Label=""US States"" HelperText=""Pick your favorite states with keys"" MultiSelection=""true"" @bind-Value=""value"" @bind-SelectedValues=""options"">
    @foreach (var state in states)
    {
        <MudSelectItem T=""string"" Value=""@state"">@state</MudSelectItem>
    }
</MudSelect>

@code {

    private string value { get; set; } = ""Nothing selected"";
    private IEnumerable<string> options { get; set; } = new List<string>() { ""Alaska"" };

    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };
}";

        public const string SelectMarginExample = @"<MudSelect Margin=""Margin.Dense"" T=""string"" Label=""Coffee"" Variant=""Variant.Text"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Mike Rex"")"" />
</MudSelect>
<MudSelect Margin=""Margin.Dense"" T=""string"" Label=""Coffee"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Henon Rex"")"" />
</MudSelect>
<MudSelect Margin=""Margin.Dense"" T=""string"" Label=""Coffee"" Variant=""Variant.Filled"">
    <MudSelectItem Value=""@(""Tyrannosaur"")"" />
    <MudSelectItem Value=""@(""Triceratops"")"" />
    <MudSelectItem Value=""@(""Benno Rex"")"" />
</MudSelect>";

        public const string SelectNumericCollectionExample = @"<MudSelect T=""double"" Label=""Price (Datatype: double)"" Clearable=""true"" Required=""true"">
    @foreach (var price in prices)
    {
    <MudSelectItem Value=""@price"" />
    }
</MudSelect>

<MudSelect T=""double?"" Label=""Price (Datatype: double?)"" Clearable=""true"" Required=""true"">
    @foreach (double? price in prices)
    {
    <MudSelectItem Value=""@price"" />
    }
</MudSelect>

@code
{
    private double[] prices = { 4.50, 4.99, 3.60, 21.99 };
}";

        public const string SelectPlaygroundExample = @"@using MudBlazor

<MudStack Row Class=""justify-space-between mud-width-full"">
    <MudStack Style=""width: 300px"">
        @foreach (var variant in Enum.GetValues(typeof(Variant)).Cast<Variant>())
        {
            <MudSelect @bind-Value=""_value""
                       Variant=""variant""
                       Label=""@variant.ToString()""
                       Margin=""_margin""
                       Dense=""_dense""
                       Disabled=""_disabled""
                       ReadOnly=""_readonly""
                       Placeholder=""@(_placeholder ? ""Placeholder"" : null)""
                       HelperText=""@(_helperText ? ""Helper Text"" : null)""
                       HelperTextOnFocus=""_helperTextOnFocus""
                       Clearable=""_clearable"">
                @foreach (var state in _states)
                {
                    <MudSelectItem Value=""state"">@state</MudSelectItem>
                }
            </MudSelect>
        }
    </MudStack>

    <MudStack>
        <MudSelect @bind-Value=""_margin"" Label=""Margin"">
            @foreach (var margin in Enum.GetValues(typeof(Margin)).Cast<Margin>())
            {
                <MudSelectItem Value=""margin"">@margin</MudSelectItem>
            }
        </MudSelect>

        <MudSwitch @bind-Value=""_dense"" Label=""Dense"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_readonly"" Label=""ReadOnly"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_disabled"" Label=""Disabled"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_placeholder"" Label=""Placeholder"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_helperText"" Label=""HelperText"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_helperTextOnFocus"" Label=""HelperTextOnFocus"" Color=""Color.Primary"" />
        <MudSwitch @bind-Value=""_clearable"" Label=""Clearable"" Color=""Color.Primary"" />
    </MudStack>
</MudStack>

@code {
    string _value;
    Margin _margin;
    bool _dense;
    bool _disabled;
    bool _readonly;
    bool _placeholder;
    bool _helperText;
    bool _helperTextOnFocus;
    bool _clearable;

    private string[] _states =
    {
        ""Alabama"", ""Alaska"", ""Arizona"", ""Arkansas"", ""California"",
        ""Colorado"", ""Connecticut"", ""Delaware"", ""Florida"", ""Georgia"",
        ""Hawaii"", ""Idaho"", ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"",
        ""Kentucky"", ""Louisiana"", ""Maine"", ""Maryland"", ""Massachusetts"",
        ""Michigan"", ""Minnesota"", ""Mississippi"", ""Missouri"", ""Montana"",
        ""Nebraska"", ""Nevada"", ""New Hampshire"", ""New Jersey"", ""New Mexico"",
        ""New York"", ""North Carolina"", ""North Dakota"", ""Ohio"", ""Oklahoma"",
        ""Oregon"", ""Pennsylvania"", ""Rhode Island"", ""South Carolina"", ""South Dakota"",
        ""Tennessee"", ""Texas"", ""Utah"", ""Vermont"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming""
    };
}";

        public const string SelectPresentationExample = @"<MudSelect @bind-Value=""country"" Label=""With render fragements"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Austria"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg"" height=""14"" class=""mr-1"" /> Austria
    </MudSelectItem>
    <MudSelectItem Value=""@(""Hungary"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/0/00/Flag_of_Hungary.png"" height=""14"" class=""mr-1"" /> Hungary
    </MudSelectItem>
    <MudSelectItem Value=""@(""Sweden"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/4/4b/Flag_of_Sweden_fixed.svg"" height=""14"" class=""mr-1"" /> Sweden
    </MudSelectItem>
</MudSelect>

<MudSelect @bind-Value=""country"" Label=""Without render fragements"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Austria"")"" />
    <MudSelectItem Value=""@(""Hungary"")"" />
    <MudSelectItem Value=""@(""Sweden"")"" />
</MudSelect>

<MudSelect @bind-Value=""country"" Label=""Austria not representable"" Variant=""Variant.Outlined"">
    <MudSelectItem Value=""@(""Germany"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/en/b/ba/Flag_of_Germany.svg"" height=""14"" class=""mr-1"" /> Germany
    </MudSelectItem>
    <MudSelectItem Value=""@(""Hungary"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/0/00/Flag_of_Hungary.png"" height=""14"" class=""mr-1"" /> Hungary
    </MudSelectItem>
    <MudSelectItem Value=""@(""Sweden"")"">
        <img src=""https://upload.wikimedia.org/wikipedia/commons/4/4b/Flag_of_Sweden_fixed.svg"" height=""14"" class=""mr-1"" /> Sweden
    </MudSelectItem>
</MudSelect>

@code {
    string country=""Austria"";
}";

        public const string SelectUsageExample = @"@using Microsoft.AspNetCore.Components
@using System.Globalization;

<MudSelect @bind-Value=""stringValue"" Label=""Select fast-food"" HelperText=""String"" Placeholder=""Please Select"" AdornmentIcon=""@Icons.Material.Filled.Fastfood"" AdornmentColor=""Color.Primary"">
    <MudSelectItem Value=""@(""Pizza"")"" Disabled=""true"">Pizza (Disabled)</MudSelectItem>
    <MudSelectItem Value=""@(""Burger"")"">Burger</MudSelectItem>
    <MudSelectItem Value=""@(""Hotdog"")"">Hot Dog</MudSelectItem>
</MudSelect>

<MudSelect @bind-Value=""enumValue"" Label=""Select drink"" HelperText=""Enum"" OpenIcon=""@Icons.Material.Filled.LocalDrink"" AdornmentColor=""Color.Secondary"">
    @foreach (Drink item in Enum.GetValues(typeof(Drink))) {
        <MudSelectItem Value=""@item"">@item</MudSelectItem>
    }
</MudSelect>

<MudSelect Placeholder=""Select culture"" @bind-Value=""cultureValue"" HelperText=""CultureInfo"" ToStringFunc=""@convertFunc"" CloseIcon=""@Icons.Material.Filled.Flag"" AdornmentColor=""Color.Tertiary"">
    <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""en-US""))"" />
    <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""de-AT""))"" />
    <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""pt-BR""))"" />
    <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""zh-CN""))"" />
</MudSelect>

<div class=""d-flex mud-width-full align-center mt-8"">
    <MudText Typo=""Typo.subtitle1"" Class=""mr-2"">Selected values: </MudText>
    <MudChip T=""string"">@(stringValue ?? ""Select fast-food"")</MudChip>
    <MudChip T=""string"" Color=""Color.Primary"">@enumValue</MudChip>
    <MudChip T=""string"" Color=""Color.Secondary"">@(cultureValue?.DisplayName ?? ""Select culture"")</MudChip>
</div>

@code {
    private string stringValue { get; set; }
    private Drink enumValue { get; set; } = Drink.HotWater;
    public enum Drink { Tea, SparklingWater, SoftDrink, Cider, Beer, Wine, Moonshine, Wodka, Cola, GreeTea, FruitJuice, Lemonade, HotWater, SpringWater, IceWater, }
    private CultureInfo cultureValue { get; set; }
    private Func<CultureInfo, string> convertFunc = ci => ci?.DisplayName;
}";

        public const string SimpleTableExample = @"<MudSimpleTable Style=""overflow-x: auto;"">
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in rows)
        {
            <tr>
                @foreach (var x in row.Split())
                {
                    <td>@x</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    string[] headings = { ""ID"", ""Name"", ""Email"", ""Gender"", ""IP Address"" };
    string[] rows = {
        @""1 Krishna kpartner0@usatoday.com Male 28.25.250.202"",
        @""2 Webb wstitle1@ning.com Male 237.168.134.114"",
        @""3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175"",
        @""4 Adara alockwood3@patch.com Female 182.174.217.152"",
        @""5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18"",
        @""6 Cicely cemerine9@soup.io Female 138.94.191.43"",
    };
}";

        public const string SimpleTableFixedHeaderExample = @"<MudSimpleTable Hover=""true"" Dense=""true"" FixedHeader=""@fixedheader"" Style=""@(fixedheader?""height:300px;"":"""")"">
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in rows)
        {
            <tr>
                @foreach (var x in row.Split())
                {
                    <td>@x</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudSwitch @bind-Value=""fixedheader"" Color=""Color.Primary"">Fixed Header</MudSwitch>

@code {
    bool fixedheader = true;
    string[] headings = { ""ID"", ""Name"", ""Email"", ""Gender"", ""IP Address"" };
    string[] rows = {
        @""1 Krishna kpartner0@usatoday.com Male 28.25.250.202"",
        @""2 Webb wstitle1@ning.com Male 237.168.134.114"",
        @""3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175"",
        @""4 Adara alockwood3@patch.com Female 182.174.217.152"",
        @""5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18"",
        @""6 Cicely cemerine9@soup.io Female 138.94.191.43"",
        @""7 Caleb cwebber0@usatoday.com Male 28.25.250.202"",
        @""8 Grayson gcarlyle@bt.com Male 173.174.94.114"",
        @""9 Lori lo@independentweek.com Female 134.16.20.191"",
        @""10 Natasha nkerensky@ilclan.com Female 217.217.18.15"",
        @""11 Andrew aredburn@shinystat.com Male 20.114.244.58"",
        @""12 Katherine ksteiner@fedsun.io Female 122.64.153.22"",
    };
}";

        public const string SimpleTableHoverDenseExample = @"<MudSimpleTable Dense=""@dense"" Hover=""@hover"" Bordered=""@bordered"" Striped=""@striped"" Style=""overflow-x: auto;"">
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in rows)
        {
            <tr>
                @foreach (var x in row.Split())
                {
                    <td>@x</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudToolBar>
    <MudSwitch @bind-Value=""hover"" Color=""Color.Primary"">Hover</MudSwitch>
    <MudSwitch @bind-Value=""dense"" Color=""Color.Secondary"">Dense</MudSwitch>
    <MudSwitch @bind-Value=""striped"" Color=""Color.Tertiary"">Striped</MudSwitch>
    <MudSwitch @bind-Value=""bordered"" Color=""Color.Warning"">Bordered</MudSwitch>
</MudToolBar>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    string[] headings = { ""ID"", ""Name"", ""Email"", ""Gender"", ""IP Address"" };
    string[] rows = {
        @""1 Krishna kpartner0@usatoday.com Male 28.25.250.202"",
        @""2 Webb wstitle1@ning.com Male 237.168.134.114"",
        @""3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175"",
        @""4 Adara alockwood3@patch.com Female 182.174.217.152"",
        @""5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18"",
        @""6 Cicely cemerine9@soup.io Female 138.94.191.43"",
    };
}";

        public const string SkeletonAnimationsExample = @"<MudSkeleton />
<MudSkeleton Animation=""Animation.False"" />
<MudSkeleton Animation=""Animation.Wave"" />";

        public const string SkeletonPulsateExample = @"<MudCard>
    <MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Height=""200px""/>
    <MudCardContent>
        <MudSkeleton Width=""30%"" Height=""42px;"" />
        <MudSkeleton Width=""80%"" />
        <MudSkeleton Width=""100%"" />
    </MudCardContent>
    <MudCardActions>
        <MudSkeleton Width=""64px"" Height=""40px"" Class=""ml-2"" />
        <MudSkeleton Width=""105px"" Height=""40px"" Class=""ml-3"" />
    </MudCardActions>
</MudCard>

<MudCard>
    <MudCardMedia Image=""images/door.jpg"" Height=""200"" />
    <MudCardContent>
        <MudText Typo=""Typo.h5"">Old Paint</MudText>
        <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Share</MudButton>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

        public const string SkeletonVariantsExample = @"<MudSkeleton />
<MudSkeleton SkeletonType=""SkeletonType.Circle"" Width=""50px"" Height=""50px"" />
<MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Width=""200px"" Height=""110px"" />";

        public const string SkeletonWaveExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudSkeleton SkeletonType=""SkeletonType.Circle"" Animation=""Animation.Wave"" Height=""40px"" Width=""40px""/>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudSkeleton Animation=""Animation.Wave"" Width=""40%"" />
            <MudSkeleton Animation=""Animation.Wave"" Width=""60%"" />
        </CardHeaderContent>
    </MudCardHeader>
    <MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Animation=""Animation.Wave"" Height=""250px"" />
    <MudCardContent>
        <MudSkeleton Animation=""Animation.Wave"" />
    </MudCardContent>
    <MudCardActions>
        <MudSkeleton SkeletonType=""SkeletonType.Circle"" Animation=""Animation.Wave"" Height=""30px"" Width=""30px"" Class=""ml-2 mb-2"" />
        <MudSkeleton SkeletonType=""SkeletonType.Circle"" Animation=""Animation.Wave"" Height=""30px"" Width=""30px"" Class=""ml-3 mb-2"" />
    </MudCardActions>
</MudCard>


<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar>I</MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo=""Typo.body1"">Istra Croatia</MudText>
            <MudText Typo=""Typo.body2"">Peninsula in Europe</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon=""@Icons.Material.Filled.Settings"" Color=""Color.Default"" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardMedia Image=""images/pilars.jpg"" Height=""250"" />
    <MudCardContent>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon=""@Icons.Material.Filled.Favorite"" Color=""Color.Default"" />
        <MudIconButton Icon=""@Icons.Material.Filled.Share"" Color=""Color.Default"" />
    </MudCardActions>
</MudCard>";

        public const string SliderBasicExample = @"<MudSlider Value=""@value"">Volume</MudSlider>
<MudSlider Disabled=""true"" Value=""@(20)"">Disabled Slider</MudSlider>


@code {
    double value = 50.0;
}";

        public const string SliderFilledExample = @"<MudSlider Value=""@value"" Variant=""Variant.Filled"">Volume</MudSlider>

@code {
    double value = 50.0;
}";

        public const string SliderMinMaxExample = @"<MudSlider @bind-Value=""value1"" Min=""20"" Max=""80"" Color=""Color.Info"">Value: @value1.ToString()</MudSlider>
<MudSlider @bind-Value=""value2"" Min=""-1"" Max=""1"" Step=""0.05"" Color=""Color.Error"">Value: @value2.ToString(""F2"")</MudSlider>


@code {
    public double value1 = 50;
    public double value2 = -0.75;
}";

        public const string SliderNullableExample = @"<MudSlider T=""int"" @bind-Value=""@_value"" @bind-NullableValue=""@_nullableValue"" />
<div class=""d-flex flex-column align-center"">
    <MudText Class=""pb-4"">@_value</MudText>
    <MudText Class=""pb-4"">Nullable Value: @(_nullableValue is null ? ""null"" : _nullableValue)</MudText>
    <MudButton @onclick=""Reset"" Variant=""Variant.Filled"" Color=""Color.Primary"">Reset to Null</MudButton>
</div>

@code {
    private int _value;
    private int? _nullableValue;

    private void Reset() => _nullableValue = null;
}";

        public const string SliderSizeExample = @"<MudSlider Size=""Size.Small"" Value=""@value""/>
<MudSlider Size=""Size.Medium"" Value=""@value""/>
<MudSlider Size=""Size.Large"" Value=""@value""/>

@code {
    int value = 50;
}";

        public const string SliderStepsExample = @"<MudSlider Step=""10"" Value=""70"" Color=""Color.Success"" />
<MudSlider Step=""25"" Value=""50"" Color=""Color.Warning"" />";

        public const string SliderTickLabelExample = @"<MudSlider TickMarks=""true"" TickMarkLabels=""@labels"" Step=""10"" Value=""@value"" />
<MudSlider TickMarks=""true"" TickMarkLabels=""@labels"" Step=""25"" Value=""@value""/>

@code {
    int value = 50;
    string[] labels = new string[] { ""Korv"", ""Fisk"", ""Äpple"", ""Groda"", ""Köttbullar"", ""Pizza"" };
}";

        public const string SliderTickMarkExample = @"<MudSlider TickMarks=""true"" Step=""10"" Value=""@value"" />

@code {
    int value = 50;
}";

        public const string SliderValueLabelExample = @"@using System.Globalization

<MudSlider T=""decimal"" Value=""@_value"" ValueLabel=""true"" Step=""0.5m"" Culture=""@_selectedCulture"" ValueLabelFormat=""@_selectedFormat"" />

<MudSelect T=""CultureInfo"" @bind-Value=""_selectedCulture"">
    @foreach (var availableCulture in _availableCultures)
    {
        <MudSelectItem T=""CultureInfo"" Value=""@availableCulture"">@availableCulture.EnglishName</MudSelectItem>
    }
</MudSelect>

<MudSelect T=""string"" @bind-Value=""_selectedFormat"">
    <MudSelectItem Value=""@(""C"")"" />
    <MudSelectItem Value=""@(""00.00"")"" />
    <MudSelectItem Value=""@(""P1"")"" />
</MudSelect>

@code {
    private decimal _value = 50.0m;
    private string _selectedFormat = ""C"";
    private CultureInfo _selectedCulture = EnglishMoneyCulture;
    private List<CultureInfo> _availableCultures = new()
    {
        EnglishMoneyCulture,
        GermanMoneyCulture,
    };

    private static CultureInfo EnglishMoneyCulture
    {
        get
        {
            var culture = (CultureInfo)CultureInfo.GetCultureInfo(""en"").Clone();
            culture.NumberFormat.CurrencySymbol = ""$"";
            return culture;
        }
    }

    private static CultureInfo GermanMoneyCulture
    {
        get
        {
            var culture = (CultureInfo)CultureInfo.GetCultureInfo(""de"").Clone();
            culture.NumberFormat.CurrencySymbol = ""€"";
            return culture;
        }
    }
}";

        public const string SliderVerticalExample = @"<MudSlider Value=""@value"" Vertical=""true"">Vertical</MudSlider>
<MudSlider Value=""@value"" Vertical=""true""/>


@code {
    double value = 50.0;
}";

        public const string SnackbarActionButtonExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@Show"">
    Open Action Snackbar
</MudButton>

@code {

    void Show()
    {
        Snackbar.Add(""Ooops. Something really bad happened!"", Severity.Normal, config =>
        {
            config.Action = ""Help"";
            config.ActionColor = Color.Primary;
            config.OnClick = snackbar =>
            {
                Help();
                return Task.CompletedTask;
            };
        });
    }

    public void Help()
    {
        Snackbar.Add(""Please check the reactor temperature and try again"");
    }
}";

        public const string SnackbarConfigurationExample = @"@inject ISnackbar Snackbar

<MudButton @onclick=""@(() => Snackbar.Add(""My Close button is gone!"", Severity.Normal, config => { config.ShowCloseIcon = false; }))"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Modified Snackbar
</MudButton>";

        public const string SnackbarCustomIconExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@(() =>
    Snackbar.Add(""Snackbar with a custom icon, color and size."", Severity.Info, config =>
        {
            config.Icon = Icons.Custom.Brands.GitHub;
            config.IconColor = Color.Warning;
            config.IconSize = Size.Large;
        }))"">

    Open Snackbar
</MudButton>";

        public const string SnackbarFromCustomComponentExample = @"@inject ISnackbar SnackbarService

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@OnClick"">Show a snackbar with a custom component</MudButton>

@code {
    private void OnClick()
    {
        SnackbarService.Add<MudChip<T>>(new Dictionary<string, object>() {
            { ""Text"", ""This is a snackbar with a chip!"" },
            { ""Color"", Color.Primary }
        });
    }
}";

        public const string SnackbarFromRenderFragmentExample = @"@inject ISnackbar SnackbarService

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@OnClick"">Show a RenderFragment snackbar</MudButton>

@code {
    private void OnClick()
    {
        SnackbarService.Add
        (
            @<div>
                <h3>Hi from a RenderFragment</h3>
                <ul>
                    <li>Here's a regular item</li>
                    <li>Here's a <strong>bold item</strong></li>
                    <li>Here's an <em>italicized item</em></li>
                </ul>
            </div>
        );
    }
}";

        public const string SnackbarHtmlInMessageExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@(() => Snackbar.Add(new MarkupString($""<ul><li>Item {++count}</li><li>Item {++count}</li></ul>"")))"">
    Open Snackbar
</MudButton>

@code
{
    private int count = 0;
}";

        public const string SnackbarNavigationExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@AddCloseAfterNavSnackbar"">
   Closes After Navigation
</MudButton>

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@AddSnackbar"">
    Default Snackbar
</MudButton>

@code{
    public void AddSnackbar()
    {
        Snackbar.Add(""Remains open after navigation."", Severity.Normal);
    }

    public void AddCloseAfterNavSnackbar()
    {
        Snackbar.Add(""Will close after navigation."", Severity.Normal, (options) =>
        {
            options.CloseAfterNavigation = true;
        });
    }
}";

        public const string SnackbarNoIconExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@(() => Snackbar.Add(""Snackbar with no icon."", Severity.Success, config => { config.HideIcon = true; }))"">
    Open Snackbar
</MudButton>";

        public const string SnackbarOnClickExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@Show"">
    Open Clickable Snackbar
</MudButton>

@code {

    void Show()
    {
        Snackbar.Add(""I got a message for you"", Severity.Normal, config =>
        {
            config.OnClick = snackbar =>
            {
                SayHello();
                return Task.CompletedTask;
            };
        });
    }

    public void SayHello()
    {
        Snackbar.Add(""Hello World!"");
    }
}";

        public const string SnackbarOnCloseExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""Show"">
    Do something on close
</MudButton>

@code {
    private void Show()
    {
        Snackbar.Add(""Close me using the close button."", Severity.Normal, config =>
        {
            config.RequireInteraction = true;
            config.CloseButtonClickFunc = SayGoodbye;
        });
    }

    private Task SayGoodbye(Snackbar snackbar)
    {
        Snackbar.Add(""Sorry to see you go!"");
        return Task.CompletedTask;
    }
}";

        public const string SnackbarPositionExample = @"@inject ISnackbar Snackbar

<MudButton @onclick=""@(() => ChangePosition(""Top-Start"", Defaults.Classes.Position.TopStart))"" Color=""Color.Primary"" >Top-Start</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-Left"", Defaults.Classes.Position.TopLeft))"" Color=""Color.Primary"" >Top-Left</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-Center"", Defaults.Classes.Position.TopCenter))"" Color=""Color.Primary"" >Top-Center</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-Right"", Defaults.Classes.Position.TopRight))"" Color=""Color.Primary"" >Top-Right</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-End"", Defaults.Classes.Position.TopEnd))"" Color=""Color.Primary"" >Top-End</MudButton>
<MudDivider />
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Start"", Defaults.Classes.Position.BottomStart))"" Color=""Color.Default"" >Bottom-Start</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Left"", Defaults.Classes.Position.BottomLeft))"" Color=""Color.Default"" >Bottom-Left</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Center"", Defaults.Classes.Position.BottomCenter))"" Color=""Color.Default"" >Bottom-Center</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Right"", Defaults.Classes.Position.BottomRight))"" Color=""Color.Default"" >Bottom-Right</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-End"", Defaults.Classes.Position.BottomEnd))"" Color=""Color.Default"" >Bottom-End</MudButton>

@code {
    void ChangePosition(string message, string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, Severity.Normal);
    }
}";

        public const string SnackbarPreventDuplicatesExample = @"@inject ISnackbar SnackbarService

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@OnClick"">Prevent duplicate Snackbars</MudButton>

@code {
    private void OnClick()
    {
        // We'll set all three of these snackbars to prevent duplicates and give them
        // all the same key (""mudblazor"")
        var config = (SnackbarOptions options) =>
        {
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };

        // Then we try to show all three in quick succession, but only the first pops!
        SnackbarService.Add(""This is the only snackbar that will be shown"", configure: config, key: ""mudblazor"");
        SnackbarService.Add(@<span>This one has the same key</span>, configure: config, key: ""mudblazor"");
        SnackbarService.Add<MudChip<T>>(new Dictionary<string, object>() {
            { ""Text"", ""This one also has the same key"" }
        }, configure: config, key: ""mudblazor"");
    }
}";

        public const string SnackbarRemoveByKeyExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@Show"">
    Open Snackbar
</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Error"" OnClick=""@Hide"">
    Hide Snackbar
</MudButton>

@code {
    private const string Key = ""Same"";

    void Show()
    {
        var config = (SnackbarOptions options) =>
        {
            options.VisibleStateDuration = int.MaxValue;
            options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Allow;
        };

        Snackbar.Add($""Now click hide snackbar. Key: {Key}"", Severity.Normal, config, Key);
        Snackbar.Add($""Now click hide snackbar. Key: {Key}"", Severity.Normal, config, Key);
    }

    void Hide()
    {
        Snackbar.RemoveByKey(Key);
    }
}";

        public const string SnackbarRemoveExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@Show"">
    Open Snackbar
</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Error"" OnClick=""@Hide"">
    Hide snackbar
</MudButton>

@code {
    private Snackbar _snackbar;

    void Show()
    {
        _snackbar = Snackbar.Add(""Now click hide snackbar"", Severity.Normal, config =>
        {
            config.VisibleStateDuration = int.MaxValue;
        });
    }

	void Hide() {
        if (_snackbar is null) return;
        Snackbar.Remove(_snackbar);
	}
}";

        public const string SnackbarRequireInteractionExample = @"@inject ISnackbar Snackbar

<div class=""pa-0 ma-0"">
    <MudAlert Severity=""Severity.Warning"" Dense=""true"" Class=""rounded-0 rounded-t"">The reactor temperature exceeds the optimal range</MudAlert>
    <MudAlert Severity=""Severity.Error"" Dense=""true"" Class=""rounded-0"">Reactor meltdown is imminent!</MudAlert>
    <div class=""d-flex flex-column"" style=""height: 200px;"">
        <div class=""align-self-center mt-12"">
            <MudText Typo=""Typo.h6"">Fuel Rod Temperature: @FuelRodTemperature.ToString()C</MudText>
        </div>
        <div class=""align-self-center mt-6"">
            <MudTooltip Text=""Reactor Shutdown"">
                <MudButton Variant=""Variant.Filled"" DropShadow=""false"" Color=""Color.Error"" @onclick=""@(() => ShutDown())"">Scram Button</MudButton>
            </MudTooltip>
        </div>
    </div>
    <MudAlert Severity=""Severity.Info"" Dense=""true"" Class=""rounded-0 rounded-b"">The reactor is about to have a meltdown deputy chief-engineer! You must act now!</MudAlert>
</div>

@code {

    public int FuelRodTemperature { get; set; } = 600;

    void ShutDown()
    {
        string message = ""Scram Initiated!"";
        Snackbar.Add(message, Severity.Success, config =>
        {
            config.RequireInteraction = true;
            config.ShowCloseIcon = false;
            config.OnClick = snackbar =>
            {
                UpdateTemperature();
                return Task.CompletedTask;
            };
        });
    }

    public void UpdateTemperature()
    {
        FuelRodTemperature += 100;
        Snackbar.Add(""Temperature is still going up!"", Severity.Warning);
        StateHasChanged();
    }
}";

        public const string SnackbarSeverityExample = @"@inject ISnackbar Snackbar


<MudButton Color=""Color.Dark"" @onclick=""@(() => Snackbar.Add(""The reactor type is RBMK-1000"", Severity.Normal))"">Normal Snackbar</MudButton>
<MudButton Color=""Color.Info"" @onclick=""@(() => Snackbar.Add(""The reactor was fired up successfully"", Severity.Info))"">Info Snackbar</MudButton>
<MudButton Color=""Color.Success"" @onclick=""@(() => Snackbar.Add(""The reactor is running at optimum temperature"", Severity.Success))"">Success Snackbar</MudButton>
<MudButton Color=""Color.Warning"" @onclick=""@(() => Snackbar.Add(""The reactor temperature exceeds the optimal range"", Severity.Warning))"">Warning Snackbar</MudButton>
<MudButton Color=""Color.Error"" @onclick=""@(() => Snackbar.Add(""Reactor meltdown is imminent"", Severity.Error))"">Error Snackbar</MudButton>";

        public const string SnackbarUsageExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@(() => Snackbar.Add(""Simple Snackbar""))"">
    Open Snackbar
</MudButton>";

        public const string SnackbarVariantsExample = @"@inject ISnackbar Snackbar

<MudButton @onclick=""@(() => ShowVariant(""Text Snackbar"", Variant.Text))"" Color=""Color.Primary"">Open Text Snackbar Variants</MudButton>
<MudButton @onclick=""@(() => ShowVariant(""Filled Snackbar"", Variant.Filled))"" Color=""Color.Secondary"">Open Filled Snackbar Variants</MudButton>
<MudButton @onclick=""@(() => ShowVariant(""Outlined Snackbar"", Variant.Outlined))"" Color=""Color.Tertiary"">Open Outlined Snackbar Variants</MudButton>

@code {
    void ShowVariant(string message, Variant variant)
    {
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($""Normal {message}"", Severity.Normal, c => c.SnackbarVariant = variant);
        Snackbar.Add($""Info {message}"", Severity.Info, c => c.SnackbarVariant = variant);
        Snackbar.Add($""Success {message}"", Severity.Success, c => c.SnackbarVariant = variant);
        Snackbar.Add($""Warning {message}"", Severity.Warning, c => c.SnackbarVariant = variant);
        Snackbar.Add($""Error {message}"", Severity.Error, c => c.SnackbarVariant = variant);
    }
}";

        public const string SpacerBasicExample = @"<MudPaper Class="" pa-4 align-start d-flex"" Style=""width: 250px;"" Outlined=""true"">
    <MudPaper Class=""pa-3"" Elevation=""6"">Item 1</MudPaper>
    <MudSpacer />
    <MudPaper Class=""pa-3"" Elevation=""6"">Item 2</MudPaper>
</MudPaper>

@*
    MudSpacer is shorthand for: <div class=""flex-grow-1"" />
*@";

        public const string StackAlignExample = @"<MudPaper Outlined=""true"" Class=""border-dashed"">
    <MudStack AlignItems=""_align"" Row=""true"" Style=""height:200px;"">
        <MudPaper Class=""py-1 px-3 mud-theme-primary"">Item 1</MudPaper>
        <MudPaper Class=""py-3 px-3 mud-theme-primary"">Item 2</MudPaper>
        <MudPaper Class=""py-5 px-3 mud-theme-primary"">Item 3</MudPaper>
    </MudStack>
</MudPaper>

<MudChipSet T=""string"" CheckMark Class=""d-flex justify-center mt-12"">
    <MudChip Text=""Start"" OnClick=""@(() => _align = AlignItems.Start)"" SelectedColor=""Color.Primary"" Default=""true"" />
    <MudChip Text=""Center"" OnClick=""@(() => _align = AlignItems.Center)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""End"" OnClick=""@(() => _align = AlignItems.End)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Stretch"" OnClick=""@(() => _align = AlignItems.Stretch)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Baseline"" OnClick=""@(() => _align = AlignItems.Baseline)"" SelectedColor=""Color.Primary"" />
</MudChipSet>


@code {
    AlignItems _align = AlignItems.Start;
}";

        public const string StackBasicExample = @"<MudStack>
    <MudPaper Class=""pa-3"">Item 1</MudPaper>
    <MudPaper Class=""pa-3"">Item 2</MudPaper>
    <MudPaper Class=""pa-3"">Item 3</MudPaper>
</MudStack>";

        public const string StackBreakExample = @"<MudPaper Outlined=""true"" Class=""border-dashed pa-4"">
    <MudStack Wrap=""Wrap.Wrap"" Spacing=""4"" Row Style=""width: 500px"" AlignItems=""AlignItems.Start"">
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""">Button 1</MudButton>
        <MudFlexBreak />
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""">Button 2</MudButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""">Button 3</MudButton>
        <MudFlexBreak />
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""">Button 4</MudButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""">Button 5</MudButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""">Button 6</MudButton>
    </MudStack>
</MudPaper>";

        public const string StackCombinedExample = @"<MudPaper Outlined=""true"" Class=""border-dashed"">
    <MudStack Justify=""_justify"" AlignItems=""_align"" Row=""_row"" Style=""height:200px;"">
        <MudPaper Class=""py-1 px-3 mud-theme-primary"">Item 1</MudPaper>
        <MudPaper Class=""py-3 px-3 mud-theme-primary"">Item 2</MudPaper>
        <MudPaper Class=""py-5 px-3 mud-theme-primary"">Item 3</MudPaper>
    </MudStack>
</MudPaper>

<MudStack Row=""true"" Justify=""Justify.Center"">
    <MudRadioGroup T=""bool"" @bind-Value=""@_row"">
        <MudRadio Value=""false"" Dense=""true"">Column</MudRadio>
        <MudRadio Value=""true"" Dense=""true"">Row</MudRadio>
    </MudRadioGroup>
</MudStack>

<MudStack Row=""true"">
    <MudChipSet T=""string"" CheckMark Class=""d-flex justify-center"">
        <MudChip Text=""Justify Start"" OnClick=""@(() => _justify = Justify.FlexStart)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" Default=""true"" />
        <MudChip Text=""Justify End"" OnClick=""@(() => _justify = Justify.FlexEnd)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
    </MudChipSet>
    <MudChipSet T=""string"" CheckMark Class=""d-flex justify-center"">
        <MudChip Text=""Align Start"" OnClick=""@(() => _align = AlignItems.Start)"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" Default=""true"" />
        <MudChip Text=""Align End"" OnClick=""@(() => _align = AlignItems.End)"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
    </MudChipSet>
</MudStack>


@code {
    bool _row = true;
    Justify _justify = Justify.FlexStart;
    AlignItems _align = AlignItems.Start;
}";

        public const string StackDirectionExample = @"<MudStack Row=""true"">
    <MudPaper Class=""pa-3"">Item 1</MudPaper>
    <MudPaper Class=""pa-3"">Item 2</MudPaper>
    <MudPaper Class=""pa-3"">Item 3</MudPaper>
</MudStack>";

        public const string StackInteractiveExample = @"<MudPaper Outlined=""true"" Class=""border-dashed"">
    <MudStack Justify=""@justify"" AlignItems=""@align"" StretchItems=""@stretch"" Row=""@row"" Reverse=""@reverse"" Spacing=""@spacing"" Style=""height:300px;"">
        <MudPaper Class=""py-1 px-3 mud-theme-primary"">Item 1</MudPaper>
        <MudPaper Class=""py-3 px-3 mud-theme-primary"">Item 2</MudPaper>
        <MudPaper Class=""py-5 px-3 mud-theme-primary"">Item 3</MudPaper>
    </MudStack>
</MudPaper>

<MudStack Row=""true"" AlignItems=""AlignItems.Center"">
    <MudSwitch @bind-Value=""row"" Label=""Row"" Color=""Color.Primary"" />
    <MudSwitch @bind-Value=""reverse"" Label=""Reverse"" Color=""Color.Primary"" />
    <MudText>Spacing:</MudText>
    <MudSlider @bind-Value=""spacing"" Min=""0"" Max=""16""/>
</MudStack>

<MudStack>
    <MudChipSet @bind-SelectedValue=""@justify"" CheckMark>
        <MudChip Value=""Justify.FlexStart"" Text=""Justify Start"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
        <MudChip Value=""Justify.Center"" Text=""Justify Center"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" Default=""true"" />
        <MudChip Value=""Justify.FlexEnd"" Text=""Justify End"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
        <MudChip Value=""Justify.SpaceAround"" Text=""Justify Space Around"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
        <MudChip Value=""Justify.SpaceBetween"" Text=""Justify Space Between"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
        <MudChip Value=""Justify.SpaceEvenly"" Text=""Justify Space Evenly"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
    </MudChipSet>

    <MudChipSet @bind-SelectedValue=""@align"" CheckMark>
        <MudChip Value=""AlignItems.Start"" Text=""Align Start"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
        <MudChip Value=""AlignItems.Center"" Text=""Align Center"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" Default=""true"" />
        <MudChip Value=""AlignItems.End"" Text=""Align End"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
        <MudChip Value=""AlignItems.Stretch"" Text=""Align Stretch"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
        <MudChip Value=""AlignItems.Baseline"" Text=""Align Baseline"" SelectedColor=""Color.Secondary"" Variant=""Variant.Text"" />
    </MudChipSet>

    <MudChipSet @bind-SelectedValue=""@stretch"" CheckMark>
        <MudChip Value=""StretchItems.None"" Text=""Do Not Stretch"" SelectedColor=""Color.Tertiary"" Variant=""Variant.Text"" Default=""true"" />
        <MudChip Value=""StretchItems.Start"" Text=""Stretch First"" SelectedColor=""Color.Tertiary"" Variant=""Variant.Text"" />
        <MudChip Value=""StretchItems.End"" Text=""Stretch Last"" SelectedColor=""Color.Tertiary"" Variant=""Variant.Text"" />
        <MudChip Value=""StretchItems.StartAndEnd"" Text=""Stretch First and Last"" SelectedColor=""Color.Tertiary"" Variant=""Variant.Text"" />
        <MudChip Value=""StretchItems.Middle"" Text=""Stretch Middle"" SelectedColor=""Color.Tertiary"" Variant=""Variant.Text"" />
        <MudChip Value=""StretchItems.All"" Text=""Stretch All"" SelectedColor=""Color.Tertiary"" Variant=""Variant.Text"" />
    </MudChipSet>
</MudStack>

@code {
    Justify justify = Justify.Center;
    AlignItems align = AlignItems.Center;
    StretchItems stretch = StretchItems.None;
    bool row = false;
    bool reverse = false;
    int spacing = 3;
}";

        public const string StackJustifyExample = @"<MudPaper Outlined=""true"" Class=""border-dashed"">
    <MudStack Justify=""@_justify"" Row=""true"">
        <MudPaper Class=""pa-3 mud-theme-primary"">Item 1</MudPaper>
        <MudPaper Class=""pa-3 mud-theme-primary"">Item 2</MudPaper>
        <MudPaper Class=""pa-3 mud-theme-primary"">Item 3</MudPaper>
    </MudStack>
</MudPaper>

<MudChipSet T=""string"" CheckMark Class=""d-flex justify-center mt-12"">
    <MudChip Text=""Start"" OnClick=""@(() => _justify = Justify.FlexStart)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Center"" OnClick=""@(() => _justify = Justify.Center)"" SelectedColor=""Color.Primary"" Default=""true"" />
    <MudChip Text=""End"" OnClick=""@(() => _justify = Justify.FlexEnd)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Space Around"" OnClick=""@(() => _justify = Justify.SpaceAround)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Space Between"" OnClick=""@(() => _justify = Justify.SpaceBetween)"" SelectedColor=""Color.Primary"" />
    <MudChip Text=""Space Evenly"" OnClick=""@(() => _justify = Justify.SpaceEvenly)"" SelectedColor=""Color.Primary"" />
</MudChipSet>


@code {
    Justify _justify = Justify.Center;
}";

        public const string StackLayoutExample = @"<MudStack AlignItems=""AlignItems.Center"">

    <MudStack Spacing=""0"" StretchItems=""StretchItems.Middle"" Class=""stack-main mud-elevation-25 stack-adorner"">

        @* Title Bar *@
        <MudStack Row AlignItems=""AlignItems.Center"" Justify=""Justify.SpaceBetween"" Class=""mud-paper mud-paper-square stack-adorner"">
            <MudIcon Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""Color.Primary"" Class=""ml-3 my-1 hideable"" />
            <MudText Class=""hideable"">MudBlazor</MudText>
            <MudButton Color=""Color.Error"" Variant=""Variant.Filled"" Class=""rounded-0 hideable"" Style=""min-width: 0;"" DropShadow=""false"" OnClick=""()=>counter=0"">✕</MudButton>
        </MudStack>

        @* Middle Section *@
        <MudStack Row StretchItems=""StretchItems.End"" AlignItems=""AlignItems.Stretch"" Spacing=""0"" Style=""height: 0px;"" Class=""stack-adorner"">
            @* Side Menu *@
            <MudStack Justify=""Justify.SpaceBetween"" Spacing=""0"" Class=""mud-theme-dark stack-adorner"">
                <MudStack Spacing=""0"" Class=""stack-adorner"">
                    <MudButton Color=""Color.Inherit"" Class=""pa-3 rounded-0 hideable"" Style=""min-width: 0;"" OnClick=""Count""><MudIcon Icon=""@Icons.Material.Outlined.FileCopy"" /></MudButton>
                    <MudButton Color=""Color.Inherit"" Class=""pa-3 rounded-0 hideable"" Style=""min-width: 0;"" OnClick=""Count""><MudIcon Icon=""@Icons.Material.Filled.Search"" /></MudButton>
                    <MudButton Color=""Color.Inherit"" Class=""pa-3 rounded-0 hideable"" Style=""min-width: 0;"" OnClick=""Count""><MudIcon Icon=""@Icons.Material.Outlined.AltRoute"" /></MudButton>
                </MudStack>
                <MudStack Spacing=""0"" Class=""stack-adorner"">
                    <MudButton Color=""Color.Inherit"" Class=""pa-3 rounded-0 hideable"" Style=""min-width: 0;"" OnClick=""Count""><MudIcon Icon=""@Icons.Material.Outlined.AccountCircle"" /></MudButton>
                    <MudButton Color=""Color.Inherit"" Class=""pa-3 rounded-0 hideable"" Style=""min-width: 0;"" OnClick=""Count""><MudIcon Icon=""@Icons.Material.Outlined.Settings"" /></MudButton>
                </MudStack>
            </MudStack>
            @* Main *@
            <MudStack Class=""mud-background-gray stack-adorner"" Style=""overflow-x: auto;"">
                <MudText Class=""ma-6 hideable"">
                    The MudStack provides flexibility in layout management, enabling the creation of elegant and responsive designs with minimal effort. Despite its simple design, it is powerful, making it perfect for both - simple and complex layouts. MudStack can perfectly complement and enhance your application's UI.
                </MudText>
            </MudStack>
        </MudStack>

        @* Status Bar *@
        <MudStack Row Spacing=""0"" Justify=""Justify.SpaceBetween"" Class=""mud-theme-info stack-adorner"">
            <MudButton Size=""Size.Small"" Color=""Color.Inherit"" StartIcon=""@Icons.Material.Outlined.MarkChatRead"" Class=""hideable"" OnClick=""Count"">Ready</MudButton>
            <MudStack Row Spacing=""0"" AlignItems=""AlignItems.Center"" Class=""stack-adorner"">
                <MudButton Size=""Size.Small"" Color=""Color.Inherit"" Class=""hideable"" OnClick=""Count"">MudBlazor</MudButton>
                <MudBadge Content=""@counter"" Overlap Class=""mr-3 hideable"">
                    <MudIconButton Size=""Size.Small"" Color=""Color.Inherit"" Icon=""@Icons.Material.Outlined.Notifications"" OnClick=""Count"" />
                </MudBadge>
            </MudStack>
        </MudStack>

    </MudStack>

    <MudStack Row>
        <MudSwitch @bind-Value=""showAdorners"" Color=""Color.Primary"">Inspect MudStacks</MudSwitch>
        <MudSwitch @bind-Value=""hideContent"" Color=""Color.Primary"">Hide content</MudSwitch>
    </MudStack>

</MudStack>

<style>
    .stack-main {
        width: 380px;
        height: 320px;
        min-height: 310px;
        min-width: 300px;
        max-height: 420px;
        max-width: 520px;
        resize: both;
        overflow: hidden;
    }

    .mud-badge {
        font-size: 10px;
        height: 11px;
        min-width: 11px;
        padding: 1px 4px;
    }
</style>
@if (showAdorners)
{
    <style>
        .stack-adorner:hover {
            outline: 2px dashed var(--mud-palette-secondary);
            z-index: 100;
        }
    </style>
}
@if (hideContent)
{
    <style>
        .hideable {
            opacity: 0;
        }
    </style>
}
@code {
    bool showAdorners;
    bool hideContent;
    int counter = 2;
    void Count()
    {
        counter++;
    }
}";

        public const string StackSpacingExample = @"<MudStack Spacing=""@_spacing"" Row=""true"">
    <MudPaper Class=""pa-3"">Item 1</MudPaper>
    <MudPaper Class=""pa-3"">Item 2</MudPaper>
    <MudPaper Class=""pa-3"">Item 3</MudPaper>
</MudStack>

<MudSlider @bind-Value=""_spacing"" Min=""0"" Max=""16"">Spacing: @_spacing.ToString()</MudSlider>

@code {
    private int _spacing { get; set; } = 3;
}";

        public const string StackStretchItemsExample = @"<MudPaper Outlined Class=""border-dashed"">
    <MudStack StretchItems=""@stretch"" Row>
        <MudPaper Class=""pa-3 mud-theme-primary"">Item 1</MudPaper>
        <MudPaper Class=""pa-3 mud-theme-primary"">Item 2</MudPaper>
        <MudPaper Class=""pa-3 mud-theme-primary"">Item 3</MudPaper>
    </MudStack>
</MudPaper>

<MudChipSet @bind-SelectedValue=""@stretch"" Class=""mt-12"" >
    <MudChip Value=""StretchItems.None"" Text=""Do Not Stretch"" SelectedColor=""Color.Primary"" />
    <MudChip Value=""StretchItems.Start"" Text=""Stretch First"" SelectedColor=""Color.Primary"" Default=""true"" />
    <MudChip Value=""StretchItems.StartAndEnd"" Text=""Stretch First and Last"" SelectedColor=""Color.Primary"" />
    <MudChip Value=""StretchItems.End"" Text=""Stretch Last"" SelectedColor=""Color.Primary"" />
    <MudChip Value=""StretchItems.Middle"" Text=""Stretch Middle"" SelectedColor=""Color.Primary"" />
    <MudChip Value=""StretchItems.All"" Text=""Stretch All"" SelectedColor=""Color.Primary"" />
</MudChipSet>

@code {
    StretchItems stretch = StretchItems.Start;
}";

        public const string StackUsageFormExample = @"<MudStack>
    <MudPaper Class=""pa-4"">
        <MudStack Row=""true"">
            <MudAvatar Size=""Size.Large"">
                <MudImage Src=""images/mony.jpg"" />
            </MudAvatar>
            <MudStack Justify=""Justify.Center"" Spacing=""0"">
                <MudText Typo=""Typo.body1"">Mony Larsson</MudText>
                <MudText Typo=""Typo.body2"">onebiteonekill@mony.dog</MudText>
            </MudStack>
        </MudStack>
    </MudPaper>

    <MudPaper Class=""pa-4"">
        <MudStack Spacing=""4"">
            <MudTextField T=""string"" Label=""Card number"" Mask=""@(new PatternMask(""0000 0000 0000 0000""))"" />
            <MudStack Row=""true"">
                <MudTextField T=""string"" Label=""Expires"" Mask=""@(new DateMask(""MM/YY"", 'Y', 'M'))"" />
                <MudTextField T=""string"" Label=""CVC"" Mask=""@(new PatternMask(""000""))"" />
            </MudStack>
            <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" DropShadow=""false"">Pay Now</MudButton>
        </MudStack>
    </MudPaper>
</MudStack>";

        public const string StackWrappingExample = @"<MudPaper Outlined=""true"" Class=""border-dashed pa-4"">
    <MudStack Wrap=""@_wrap"" Spacing=""4"" Row=""@_row"" Style=""@_size"" AlignItems=""AlignItems.Start"">
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""" >Button 1</MudButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""" >Button 2</MudButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""" >Button 3</MudButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""" >Button 4</MudButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Style="""" >Button 5</MudButton>
    </MudStack>
</MudPaper>

<MudSlider @bind-Value=""_width"" Min=""100"" Max=""800"">Width: @_width.ToString()px</MudSlider>
<MudSlider @bind-Value=""_height"" Min=""100"" Max=""800"">Height: @_height.ToString()px</MudSlider>

<MudStack Row AlignItems=""AlignItems.Center"">
    <MudSwitch @bind-Value=""_row"" Color=""Color.Primary"">Row</MudSwitch>
    <MudChipSet T=""Wrap"" CheckMark @bind-SelectedValue=""_wrap"">
        <MudChip T=""Wrap"" Text=""No Wrap"" Value=""@(Wrap.NoWrap)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" Default=""true""/>
        <MudChip T=""Wrap"" Text=""Wrap"" Value=""@(Wrap.Wrap)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
        <MudChip T=""Wrap"" Text=""Wrap Reverse"" Value=""@(Wrap.WrapReverse)"" SelectedColor=""Color.Primary"" Variant=""Variant.Text"" />
    </MudChipSet>
</MudStack>

@code {
    private Wrap _wrap = Wrap.NoWrap;

    private int _width { get; set; } = 200;
    private int _height { get; set; } = 200;
    private bool _row { get; set; } = true;

    private string _size => $""width: {_width}px; height: {_height}px;"";
}";

        public const string StepperBasicAlternativeLabelExample = @"<MudPaper Style=""width: 800px"">
    <MudStepper CenterLabels=""true"" ShowResetButton>
        <MudStep Title=""Select campaign settings"">Select campaign settings content</MudStep>
        <MudStep Title=""Create an ad group"" SecondaryText=""Optional"" Skippable=""true"">Create an ad group content</MudStep>
        <MudStep Title=""Create an ad"">Create an ad content</MudStep>
    </MudStepper>
</MudPaper>";

        public const string StepperBasicExample = @"<MudPaper Style=""width: 800px"">
    <MudStepper ShowResetButton>
        <MudStep Title=""Select campaign settings"">Select campaign settings content</MudStep>
        <MudStep Title=""Create an ad group"" SecondaryText=""Optional"" Skippable=""true"">Create an ad group content</MudStep>
        <MudStep Title=""Create an ad"">Create an ad content</MudStep>
    </MudStepper>
</MudPaper>";

        public const string StepperBasicVerticalExample = @"<MudPaper Style=""width: 400px"">
    <MudStepper Vertical ShowResetButton NonLinear=""_nonLinear"">
        <ChildContent>
            <MudStep Title=""Select campaign settings"">For each ad campaign that you create, you can control how much you're willing to spend on clicks and conversions, which networks and geographical locations you want your ads to show on, and more.</MudStep>
            <MudStep Title=""Create an ad group"" SecondaryText=""Optional"" Skippable=""true"">An ad group contains one or more ads which target a shared set of keywords.</MudStep>
            <MudStep Title=""Create an ad"">Try out different ad text to see what brings in the most customers, and learn how to enhance your ads using features like ad extensions. If you run into any problems with your ads, find out how to tell if they're running and how to resolve approval issues.</MudStep>
        </ChildContent>
        <CompletedContent>
            Thank you for wasting your money on clicks!
        </CompletedContent>
    </MudStepper>
</MudPaper>
<br/>
<MudSwitch @bind-Value=""_nonLinear"" Color=""Color.Primary"">NonLinear</MudSwitch>


@code {
    bool _nonLinear;
}";

        public const string StepperControlledNavigationExample = @"<MudPaper Style=""width: 800px"">
    <MudStepper NonLinear ShowResetButton OnPreviewInteraction=""OnPreviewInteraction"">
        <MudStep Title=""Step 1"" SecondaryText=""Flip the switch"" HasError=""@(_step1Complete==false)"">
            <MudSwitch @bind-Value=""_step1Complete"" Color=""Color.Primary"">Flip the switch to be able to advance to step 2</MudSwitch>
        </MudStep>
        <MudStep Title=""Step 2"" SecondaryText=""Enter some text"" HasError=""@(_step2TextInput=="""")"">
            <MudTextField Label=""Enter some text"" @bind-Value=""_step2TextInput"" Variant=""Variant.Filled"" Clearable/>
        </MudStep>
        <MudStep Title=""Step 3"">This step can only be visited if the other steps are completed.</MudStep>
    </MudStepper>
</MudPaper>

@code {

    [Inject] 
    IDialogService DialogService { get; set; }

    private bool? _step1Complete;
    private string _step2TextInput;

    private async Task OnPreviewInteraction(StepperInteractionEventArgs arg)
    {
        if (arg.Action == StepAction.Complete) 
        {
            // occurrs when clicking next
            await ControlStepCompletion(arg);
        }
        else if (arg.Action == StepAction.Activate) 
        {
            // occurrs when clicking a step header with the mouse
            await ControlStepNavigation(arg);
        }
    }

    private async Task ControlStepCompletion(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex) {
            case 0:
                if (_step1Complete != true) 
                {
                    await DialogService.ShowMessageBox(""Error"", ""You have not flipped the switch in step 1"");
                    arg.Cancel = true;
                }
                break;
            case 1:
                if ((_step2TextInput?.Length ?? 0) == 0) 
                {
                    await DialogService.ShowMessageBox(""Error"", ""You have not entered text in step 2"");
                    arg.Cancel = true;
                }
                break;
        }
    }

    private async Task ControlStepNavigation(StepperInteractionEventArgs arg)
    {
        switch (arg.StepIndex) {
            case 1:
                if (_step1Complete != true) 
                {
                    await DialogService.ShowMessageBox(""Error"", ""Finish step 1 first"");
                    arg.Cancel = true;
                }
                break;
            case 2:
                if (_step1Complete != true || (_step2TextInput?.Length ?? 0) == 0) 
                {
                    await DialogService.ShowMessageBox(""Error"", ""Finish step 1 and 2 first"");
                    arg.Cancel = true;
                }
                break;
        }
    }
}";

        public const string StepperCustomizationExample = @"<MudPaper Style=""width: 800px"">
    <MudStepper @bind-ActiveIndex=""_index"" CompletedStepColor=""Color.Success"" CurrentStepColor=""Color.Primary"" NavClass=""border-b mud-border-lines-default"" StepClass=""pt-4"" ShowResetButton>
        <TitleTemplate>@*This empty template prevents rendering the title*@</TitleTemplate>
        <ConnectorTemplate Context=""step"">
            <div class=""mud-stepper-nav-connector"">
                @{
                    int value = step.Completed ? 100 : 0;
                    <MudProgressLinear Indeterminate=""@(step.IsActive)"" Striped Value=""value"" Min=""0"" Max=""100"" Color=""Color.Success"" Style=""height: 2px; background-color: #d4ddeb; border-radius: 2px;"" />
                }
            </div>
        </ConnectorTemplate>
        <LabelTemplate>
            @if (context.IsActive) {
                <MudIcon Icon=""@Icons.Material.Filled.AirplanemodeActive"" Style=""rotate: 90deg;"" Color=""context.Completed ? Color.Success : Color.Primary""></MudIcon>
            }
            else if (context.Completed) {
                <div style=""height: 10px; width:10px; background-color: var(--mud-palette-success); border-radius: 50%;""></div>
            }
            else {
                <div style=""height: 10px; width:10px; background-color: #d4ddeb; border-radius: 50%;""></div>
            }
        </LabelTemplate>
        <ChildContent>
            <MudStep Title=""Verify passenger data"">Check-in Step 1: Verify passenger data</MudStep>
            <MudStep Title=""Upgrade to first class"" Skippable=""true"">Check-in Step 2: Upgrade to first class (optional)</MudStep>
            <MudStep Title=""Select seat"">Check-in Step 3: Select seat</MudStep>
            <MudStep Title=""Complete check-in"" @bind-Completed=""_completed"">Check-in Final Step: Complete check-in</MudStep>
        </ChildContent>
        <CompletedContent>
            <MudStack Row Class=""ma-3"">
                <MudIcon Icon=""@Icons.Material.Filled.Done"" Color=""Color.Success""/>
                <MudText>
                    You are checked-in, your ticket will be sent by email.
                </MudText>
            </MudStack>
        </CompletedContent>
        <ActionContent Context=""stepper"">
            <MudButton OnClick=""@(() => stepper.ResetAsync())"">Reset</MudButton>
            @if (!_completed) {
                <MudIconButton OnClick=""@(() => stepper.PreviousStepAsync())"" Icon=""@Icons.Material.Filled.ArrowBack"" Color=""Color.Primary"" Disabled=""@(_index <= 0)"" />
                <MudSpacer />
                @if (stepper.Steps[_index].Skippable == true)
                {
                    <MudIconButton OnClick=""@(() => stepper.SkipCurrentStepAsync())"" Icon=""@stepper.SkipButtonIcon"" Color=""Color.Primary"" />
                }
                <MudIconButton OnClick=""@(() => stepper.NextStepAsync())"" Icon=""@Icons.Material.Filled.ArrowForward"" Color=""Color.Primary"" />
            }
        </ActionContent>
    </MudStepper>
</MudPaper>


@code {
    private int _index;
    private bool _completed;
}";

        public const string StepperDynamicExample = @"<MudPaper Style=""width: 800px"">
    <MudStepper @bind-ActiveIndex=""_index"" ShowResetButton>
        <ChildContent>
            @foreach (var step in _steps)
            {
                <MudStep Title=""@step"">Select campaign settings content @step</MudStep>
            }
        </ChildContent>
        <CompletedContent>
            Well done!!!
        </CompletedContent>
    </MudStepper>
</MudPaper>

<MudDivider/>

<MudButton OnClick=""Remove"" Color=""Color.Error"">Remove</MudButton>
<MudText>@_steps.Count</MudText>
<MudButton OnClick=""Add"" Color=""Color.Primary"">Add</MudButton>

<MudDivider/>

<p>Current step index: @_index</p>


@code {
    List<string> _steps = new() { ""First"" ,  ""Second"" };
    int _index;

    private void Add()
    {
        Random rnd = new Random();
        _steps.Add( $""Step {rnd.Next(0, 10000)}"" );
    }

    private void Remove()
    {
        _steps.Remove(_steps[^1]);
    }

}";

        public const string StepperNonLinearExample = @"<MudPaper Style=""width: 800px"">
    <MudStepper NonLinear ShowResetButton Ripple=""Ripple"">
        <MudStep Title=""Write the code"">Most programmers first start writing the code but some experts write the tests first</MudStep>
        <MudStep Title=""Write the tests"">If you write the tests first you will design a better API when you write the code</MudStep>
        <MudStep Title=""Write the documentation"" SecondaryText=""... or not"">Some consider writing readable code more important than writing documentation.</MudStep>
    </MudStepper>
</MudPaper>

<MudDivider />

<MudSwitch @bind-Value=""@Ripple"" Color=""Color.Primary"" Label=""Ripple""></MudSwitch>

@code {
    public bool Ripple { get; set; } = true;
}";

        public const string StepperStepBindingExample = @"<MudPaper Style=""width: 800px"">
    <MudStepper @bind-ActiveIndex=""_index"" ShowResetButton>
        <MudStep Title=""Select campaign settings"" HasError=""_error"">Select campaign settings content</MudStep>
        <MudStep Title=""Create an ad group"" @bind-Completed=""_completed"">Create an ad group content</MudStep>
        <MudStep Title=""Create an ad"" Disabled=""_disabled"">Create an ad content</MudStep>
    </MudStepper>
</MudPaper>

<MudDivider/>

<p>_index: @_index</p>

<MudDivider/>

<MudSwitch @bind-Value=""@_error"" Color=""Color.Primary"" Label=""Step 1 error""></MudSwitch>
<MudSwitch @bind-Value=""@_completed"" Color=""Color.Primary"" Label=""Step 2 completed""></MudSwitch>
<MudSwitch @bind-Value=""@_disabled"" Color=""Color.Primary"" Label=""Step 3 disabled"" />

<MudNumericField @bind-Value=""_index"" Label=""Current index"" Variant=""Variant.Text"" Min=""0"" Max=""5"" />

@code {
    private bool _error;
    private bool _completed;
    private bool _disabled;

    private int _index;
}";

        public const string SwipeDatePickerExample = @"@using System.Globalization

<MudSwipeArea OnSwipeEnd=""@OnSwipeEnd"">
    <div style=""user-select: none;"">
        <MudDatePicker PickerVariant=""PickerVariant.Static"" Date=""@(DateTime.Today.AddDays(1))"" @bind-PickerMonth=""@_pickerMonth""/>
    </div>
</MudSwipeArea>

@code {
    private DateTime? _pickerMonth = DateTime.Now.StartOfMonth(CultureInfo.CurrentCulture);

    public void OnSwipeEnd(SwipeEventArgs e)
    {
        if (e.SwipeDirection == SwipeDirection.LeftToRight)
        {
            _pickerMonth = _pickerMonth?.AddMonths(-1);
            StateHasChanged();
        }
        else if (e.SwipeDirection == SwipeDirection.RightToLeft)
        {
            _pickerMonth = _pickerMonth?.AddMonths(1);
            StateHasChanged();
        }
    }
}";

        public const string SwipeDirectionsExample = @"<MudSwipeArea OnSwipeEnd=""@(e => _swipeDirection = e.SwipeDirection)"" Style=""width: 100%; height: 300px"">
    <MudText Style=""user-select: none;"" Typo=""@Typo.body1"">@_swipeDirection</MudText>
</MudSwipeArea>

@code {
    private SwipeDirection _swipeDirection;
}";

        public const string SwipeDirectionsPreventDefaultExample = @"<MudSwipeArea @ref=""_swipeArea"" OnSwipeEnd=""HandleSwipeEnd"" Style=""width: 100%; height: 300px"" Sensitivity=""_sensitivity"" PreventDefault=""@_preventDefault"">
    <MudText Style=""user-select: none;"" Typo=""@Typo.body1"">@($""{_swipeDirection} - Swiped: {_swipeDelta}px"")</MudText>
</MudSwipeArea>
<MudSwitch @bind-Value=""_preventDefault"" Color=""Color.Primary"">Prevent Default</MudSwitch>
<MudNumericField @bind-Value=""_sensitivity"" Label=""Sensitivity"" Min=""0"" />

@code {
    private MudSwipeArea _swipeArea;
    private SwipeDirection _swipeDirection;
    private bool _preventDefault = true;
    private int _sensitivity = 100;
    private double? _swipeDelta;

    private void HandleSwipeEnd(SwipeEventArgs args)
    {
        _swipeDirection = args.SwipeDirection;
        _swipeDelta = args.SwipeDelta;
    }
}";

        public const string SwipeDrawerExample = @"<MudSwipeArea OnSwipeEnd=""@OnSwipeEnd"" Style=""width: 100%;"">
    <MudPaper Height=""200px"" Style=""overflow:hidden; position:relative;"">
        <MudDrawer @bind-Open=""@_drawerOpen"" Fixed=""false"" Elevation=""1"" Variant=""@DrawerVariant.Persistent"" Color=""Color.Primary"">
            <MudDrawerHeader>
                <MudText Typo=""Typo.h6"">My App</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Dashboard"" IconColor=""Color.Inherit"">Store</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Dashboard"" IconColor=""Color.Inherit"">Library</MudNavLink>
                <MudNavLink Match=""NavLinkMatch.All"" Icon=""@Icons.Material.Filled.Dashboard"" IconColor=""Color.Inherit"">Community</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
    </MudPaper>
</MudSwipeArea>

@code {
    private bool _drawerOpen;

    public void OnSwipeEnd(SwipeEventArgs e)
    {
        if (e.SwipeDirection == SwipeDirection.LeftToRight && !_drawerOpen)
        {
            _drawerOpen = true;
            StateHasChanged();
        }
        else if (e.SwipeDirection == SwipeDirection.RightToLeft && _drawerOpen)
        {
            _drawerOpen = false;
            StateHasChanged();
        }
    }
}";

        public const string SwitchBasicExample = @"<MudSwitch @bind-Value=""Basic_Switch1"" />
<MudSwitch @bind-Value=""Basic_Switch2"" Color=""Color.Primary"" />
<MudSwitch @bind-Value=""Basic_Switch3"" Color=""Color.Secondary"" />
<MudSwitch T=""bool"" Disabled=""true"" />

@code{
    public bool Basic_Switch1 { get; set; } = false;
    public bool Basic_Switch2 { get; set; } = true;
    public bool Basic_Switch3 { get; set; } = true;
}";

        public const string SwitchColorExample = @"<MudSwitch @bind-Value=""Basic_Switch1"" Color=""Color.Success"" UncheckedColor=""Color.Error"" />
<MudSwitch @bind-Value=""Basic_Switch2"" Color=""Color.Primary"" UncheckedColor=""Color.Secondary"" />
<MudSwitch @bind-Value=""Basic_Switch3"" Color=""Color.Info"" UncheckedColor=""Color.Warning"" />
<MudSwitch T=""bool"" Disabled=""true"" UncheckedColor=""Color.Dark"" />

@code{
    public bool Basic_Switch1 { get; set; } = false;
    public bool Basic_Switch2 { get; set; } = true;
    public bool Basic_Switch3 { get; set; } = true;
}";

        public const string SwitchContentPlacementExample = @"<MudGrid>
    <MudItem xs=""12"" md=""1"">
        <MudRadioGroup @bind-Value=""Placement"">
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Top)"">Top</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Bottom)"">Bottom</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Start)"">Start</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.End)"">End</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Left)"">Left</MudRadio>
            <MudRadio Color=""Color.Primary"" Value=""@(Placement.Right)"">Right</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""9"" Class=""d-flex justify-center align-center my-auto"">
        <MudRadioGroup T=""string"">
            <MudSwitch T=""bool"" LabelPlacement=""@Placement"" Color=""Color.Secondary"">Content Placement</MudSwitch>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""2"" Style=""width:100%""></MudItem>
</MudGrid>

@code {
    public Placement Placement { get; set; } = Placement.Right;
}";

        public const string SwitchConversionExample = @"<MudSwitch @bind-Value=""boolean"">bool: @boolean</MudSwitch>
<MudSwitch @bind-Value=""nullable"" Color=""Color.Primary"">bool?: @nullable</MudSwitch>
<MudSwitch @bind-Value=""integer"" Color=""Color.Secondary"">int: @integer</MudSwitch>
<MudSwitch @bind-Value=""str"" Color=""Color.Tertiary"">string: ""@(str)""</MudSwitch>
<MudSwitch @bind-Value=""customstr"" Color=""Color.Error"" Converter=""@(new CustomStringToBoolConverter())""> custom string: ""@(customstr)""</MudSwitch>
<MudSwitch @bind-Value=""customobj"" Color=""Color.Dark"" Converter=""@(new ObjectToBoolConverter())"">object: ""@(customobj.ToString())""</MudSwitch>

@code{
    public bool boolean { get; set; } = true;
    public bool? nullable { get; set; } = true;
    public int integer { get; set; } = 1;
    public string str { get; set; } = ""on"";
    public string customstr { get; set; } = ""no, at all"";
    public object customobj { get; set; } = false;

    public class ObjectToBoolConverter : BoolConverter<object>
    {

        public ObjectToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        private object OnGet(bool? value)
        {
            try
            {
                return value == true;
            }
            catch (Exception e)
            {
                UpdateGetError(""Conversion error: "" + e.Message);
                return default;
            }
        }

        private bool? OnSet(object arg)
        {
            if (arg == null)
                return null;
            try
            {
                if (arg is bool)
                    return (bool)arg;
                else if (arg is bool?)
                    return (bool?)arg;
                else
                {
                    UpdateSetError(""Unable to convert to bool? from type object"");
                    return null;
                }
            }
            catch (FormatException e)
            {
                UpdateSetError(""Conversion error: "" + e.Message);
                return null;
            }
        }

    }

    public class CustomStringToBoolConverter : BoolConverter<string>
    {

        public CustomStringToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        private string TrueString = ""yes, please"";
        private string FalseString = ""no, at all"";
        private string NullString = ""I don't know"";

        private string OnGet(bool? value)
        {
            try
            {
                return (value == true) ? TrueString : FalseString;
            }
            catch (Exception e)
            {
                UpdateGetError(""Conversion error: "" + e.Message);
                return NullString;
            }
        }

        private bool? OnSet(string arg)
        {
            if (arg == null)
                return null;
            try
            {
                if (arg == TrueString)
                    return true;
                if (arg == FalseString)
                    return false;
                else
                    return null;
            }
            catch (FormatException e)
            {
                UpdateSetError(""Conversion error: "" + e.Message);
                return null;
            }
        }

    } }";

        public const string SwitchKeyboardNavigationExample = @"<MudSwitch @bind-Value=""Label_Switch1"" Label=""Switch With Key Navigation"" />

@code{
    bool Label_Switch1 = false;
}";

        public const string SwitchReadOnlyExample = @"<div class=""d-flex flex-column align-center"">
    <MudSwitch ReadOnly=""@ReadOnly"" @bind-Value=""SwitchValue"" Color=""Color.Primary"" Class=""mr-n2 mb-6""/>
    <MudButton OnClick=""@ToggleValue"" Variant=""Variant.Filled"" DropShadow=""false"">Toggle Value</MudButton>
    <MudCheckBox @bind-Value=""ReadOnly"" Label=""@(ReadOnly ? ""readonly-mode"" : ""edit-mode"")"" />
</div>

@code {
    public bool SwitchValue { get; set; } = true;
    public bool ReadOnly { get; set; } = true;

    void ToggleValue()
    {
        SwitchValue = !SwitchValue;
    }
}";

        public const string SwitchSizeExample = @"<MudSwitch T=""bool"" Label=""Small"" Size=""Size.Small""/>
<MudSwitch T=""bool"" Label=""Medium""/>
<MudSwitch T=""bool"" Label=""Large"" Size=""Size.Large""/>
<MudSwitch @bind-Value=""Label_Switch"" T=""bool"" Label=""Switches from small to large"" Size=""@(Label_Switch ? Size.Small : Size.Large)"" ThumbIcon=""@Icons.Material.Filled.Favorite"" ThumbIconColor=""Color.Error"" />

@code{
    public bool Label_Switch { get; set; } = false;
}";

        public const string SwitchWithIconExample = @"<MudSwitch @bind-Value=""_checked1"" ThumbIcon=""@Icons.Custom.Brands.MudBlazor"">Basic</MudSwitch>
<MudSwitch @bind-Value=""_checked2"" ThumbIcon=""@Icons.Custom.Brands.MudBlazor"" ThumbIconColor=""Color.Info"">Colored</MudSwitch>
<MudSwitch @bind-Value=""_checked3"" ThumbIcon=""@(_checked3==true ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)"" ThumbIconColor=""@(_checked3==true ? Color.Success : Color.Error)"">Changing</MudSwitch>

@code{
    bool _checked1 = false;
    bool _checked2 = false;
    bool _checked3 = false;
}";

        public const string SwitchWithLabelExample = @"<MudSwitch @bind-Value=""Label_Switch1"" Label=""Info"" Color=""Color.Info"" />
<MudSwitch @bind-Value=""Label_Switch2"" Label=""Success"" Color=""Color.Success"" />
<MudSwitch @bind-Value=""Label_Switch3"" Label=""Warning!"" LabelPlacement=""Placement.Start"" Color=""Color.Warning"" />
<MudSwitch T=""bool"" Disabled=""true"" Label=""Disabled"" LabelPlacement=""Placement.Start"" />

@code{
    public bool Label_Switch1 { get; set; } = false;
    public bool Label_Switch2 { get; set; } = true;
    public bool Label_Switch3 { get; set; } = true;
}";

        public const string TableBasicExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements.Take(4)"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" Loading=""@_loading"" LoadingProgressColor=""Color.Info"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"" HideSmall=""_hidePosition"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
</MudTable>

<MudSwitch @bind-Value=""_hidePosition"" Color=""Color.Primary"">Hide <b>position</b> when Breakpoint=Xs</MudSwitch>
<MudSwitch @bind-Value=""_loading"" Color=""Color.Primary"">Show Loading</MudSwitch>

@code { 
    private bool _hidePosition;
    private bool _loading;
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

}";

        public const string TableBasicGroupingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudTable Hover=""true"" Breakpoint=""Breakpoint.Sm"" Height=""500px"" FixedHeader=""true""
          Items=""@Elements""
          Virtualize=""@_virtualize""
          GroupBy=""@_groupDefinition""
          GroupHeaderStyle=""background-color:var(--mud-palette-background-gray)""
          GroupFooterClass=""mb-4""
          Dense=""_dense""
          MultiSelection=""_multiSelect"">
    <ColGroup>
        @if (_multiSelect)
        {
            <col style=""width: 60px;"" />
        }
        @if (_groupDefinition.Expandable)
        {
            <col style=""width: 60px;"" />
        }
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class=""mud-table-cell-custom-group"" colspan=""5"">@($""{context.GroupName}: {context.Key}"")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd Style=""text-align: right"" DataLabel=""Molar mass"">@context.Molar""</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class=""mud-table-cell-custom-group mud-table-cell-custom-group-footer"" colspan=""5"">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
    </GroupFooterTemplate>
</MudTable>

<MudSwitch @bind-Value=""_dense"" Color=""Color.Primary"">Dense</MudSwitch>
<MudSwitch @bind-Value=""_multiSelect"" Color=""Color.Primary"">MultiSelect</MudSwitch>
<MudSwitch @bind-Value=""_virtualize"" Color=""Color.Primary"">Virtualize</MudSwitch>
<MudSwitch @bind-Value=""_groupDefinition.Indentation"" Color=""Color.Primary"">Indentation</MudSwitch>
<MudSwitch @bind-Value=""_groupDefinition.Expandable"" Color=""Color.Primary"">Expandable</MudSwitch>

@code { 
    private bool _dense = false;
    private bool _multiSelect = true;
    private bool _virtualize = false;    

    private TableGroupDefinition<Element> _groupDefinition = new()
    {
        GroupName = ""Group"",
        Indentation = false,
        Expandable = false,
        Selector = (e) => e.Group
    };

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableBasicGroupingInitiallyCollapsedExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudTable Hover=""true"" Breakpoint=""Breakpoint.Sm"" Height=""500px"" FixedHeader=""true""
          Items=""@Elements""
          GroupBy=""@_groupDefinition""
          GroupHeaderStyle=""background-color:var(--mud-palette-background-gray)""
          GroupFooterClass=""mb-4""
          Dense=""true""
          @ref=""_tableRef"">
    <ColGroup>
        <col style=""width: 60px;"" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class=""mud-table-cell-custom-group"" colspan=""5"">@($""{context.GroupName}: {context.Key}"") </MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd Style=""text-align: right"" DataLabel=""Molar mass"">@context.Molar""</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class=""mud-table-cell-custom-group mud-table-cell-custom-group-footer"" colspan=""5"">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
    </GroupFooterTemplate>
</MudTable>

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Class=""mt-3"" OnClick=""@((args) => _tableRef?.ExpandAllGroups())"">Expand all groups</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"" Class=""mt-3 ml-3"" OnClick=""@((args) => _tableRef?.CollapseAllGroups())"">Collapse all groups</MudButton>

@code {
    private MudTable<Element> _tableRef;

    private TableGroupDefinition<Element> _groupDefinition = new()
        {
            GroupName = ""Group"",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.Group
        };

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableColGroupExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"">
    <ColGroup>
        <col style=""width: 60px;"" />
        <col />
        <col style=""width: 60%;"" />
        <col style=""width: 60px;"" />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh Style=""text-align:center"">Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"" Style=""text-align:right"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    } 
}";

        public const string TableExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"" Dense=""@dense"" Hover=""@hover"" Bordered=""@bordered"" Striped=""@striped"" Filter=""new Func<Element,bool>(FilterFunc1)"" @bind-SelectedItem=""selectedItem1"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value=""searchString1"" Placeholder=""Search"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class=""d-flex flex-wrap mt-4"">
    <MudSwitch @bind-Value=""hover"" Color=""Color.Primary"">Hover</MudSwitch>
    <MudSwitch @bind-Value=""dense"" Color=""Color.Secondary"">Dense</MudSwitch>
    <MudSwitch @bind-Value=""striped"" Color=""Color.Tertiary"">Striped</MudSwitch>
    <MudSwitch @bind-Value=""bordered"" Color=""Color.Warning"">Bordered</MudSwitch>
    <MudSpacer />
    <div style=""min-width:200px;"">
        <MudText Class=""align-self-center d-inline"">Selected1: @selectedItem1?.Name</MudText>
    </div>
</div>

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = """";
    private Element selectedItem1 = null;
    private HashSet<Element> selectedItems = new HashSet<Element>();

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private bool FilterFunc1(Element element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Element element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($""{element.Number} {element.Position} {element.Molar}"".Contains(searchString))
            return true;
        return false;
    }
}";

        public const string TableFixedHeaderExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"" FixedHeader=""@fixed_header"" FixedFooter=""@fixed_footer"" Height=""@(fixed_header || fixed_footer ?""400px"":"""")"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTd>Nr</MudTd>
        <MudTd>Sign</MudTd>
        <MudTd>Name</MudTd>
        <MudTd>Position</MudTd>
        <MudTd>Molar mass</MudTd>
    </FooterContent>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[]{50, 100}"" />
    </PagerContent>
</MudTable>

<MudSwitch @bind-Value=""fixed_header"" Color=""Color.Primary"">Fixed Header</MudSwitch>
<MudSwitch @bind-Value=""fixed_footer"" Color=""Color.Primary"">Fixed Footer</MudSwitch>

@code {
    bool fixed_header = true;
    bool fixed_footer = false;

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableHeaderAndFooterExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style type=""text/css"">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

   .mud-table-foot .bold-text .mud-table-cell {
       font-weight: 500;
   }
</style>

<MudTable Items=""@Elements.Take(10)"" MultiSelection=""true"" @bind-SelectedItems=""selectedItems"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" Striped=""true"" Bordered=""true""
          CustomHeader=""true"" CustomFooter=""true"" HeaderClass=""table-head-bordered"" FooterClass=""table-foot-bordered"">
    <HeaderContent>
        <MudTHeadRow IgnoreCheckbox=""true"" Class=""header-centered"">
            <MudTh colspan=""6"">Periodic Elements Info</MudTh>
        </MudTHeadRow>
        <MudTHeadRow Class=""header-centered"">
            <MudTh colspan=""2"">Basic</MudTh>
            <MudTh colspan=""3"">Extended</MudTh>
        </MudTHeadRow>
        <MudTHeadRow Checkable=""true"">
            <MudTh>Nr</MudTh> 
            <MudTh>Sign</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Position</MudTh>
            <MudTh>Molar mass</MudTh>
        </MudTHeadRow>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"" HideSmall=""_hidePosition"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <FooterContent>
        <MudTFootRow Class=""bold-text"">
            <MudTd>Nr</MudTd>
            <MudTd>Sign</MudTd>
            <MudTd>Name</MudTd>
            <MudTd>Position</MudTd>
            <MudTd>Molar mass</MudTd>
        </MudTFootRow>
        <MudTFootRow Checkable=""true"">
            <MudTd colspan=""5"">Selected: @selectedItems.Count</MudTd>
        </MudTFootRow>
    </FooterContent>
</MudTable>
<MudSwitch @bind-Value=""_hidePosition"" Color=""Color.Primary"">Hide <b>position</b> when Breakpoint=Xs</MudSwitch>

@code {
    private bool _hidePosition;
    private IEnumerable<Element> Elements = new List<Element>();
    private HashSet<Element> selectedItems = new HashSet<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableHorizontalScrollExample = @"<MudTable Items=""_items"" Height=""350px"" Breakpoint=""Breakpoint.Sm"" HorizontalScrollbar=""true"">
    <HeaderContent>
        <MudTh>Column1</MudTh>
        <MudTh>Column2</MudTh>
        <MudTh>Column3</MudTh>
        <MudTh>Column4</MudTh>
        <MudTh>Column5</MudTh>
        <MudTh>Column6</MudTh>
        <MudTh>Column7</MudTh>
        <MudTh>Column8</MudTh>
        <MudTh>Column9</MudTh>
        <MudTh>Column10</MudTh>
        <MudTh>Column11</MudTh>
        <MudTh>Column12</MudTh>
        <MudTh>Column13</MudTh>
        <MudTh>Column14</MudTh>
        <MudTh>Column15</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Column1"">@context.Column1</MudTd>
        <MudTd DataLabel=""Column2"">@context.Column2</MudTd>
        <MudTd DataLabel=""Column3"">@context.Column3</MudTd>
        <MudTd DataLabel=""Column4"">@context.Column4</MudTd>
        <MudTd DataLabel=""Column5"">@context.Column5</MudTd>
        <MudTd DataLabel=""Column6"">@context.Column6</MudTd>
        <MudTd DataLabel=""Column7"">@context.Column7</MudTd>
        <MudTd DataLabel=""Column8"">@context.Column8</MudTd>
        <MudTd DataLabel=""Column9"">@context.Column9</MudTd>
        <MudTd DataLabel=""Column10"">@context.Column10</MudTd>
        <MudTd DataLabel=""Column11"">@context.Column11</MudTd>
        <MudTd DataLabel=""Column12"">@context.Column12</MudTd>
        <MudTd DataLabel=""Column13"">@context.Column13</MudTd>
        <MudTd DataLabel=""Column14"">@context.Column14</MudTd>
        <MudTd DataLabel=""Column15"">@context.Column15</MudTd>
    </RowTemplate>
</MudTable>

@code {
    public class TestItem{
        public string Column1 {get;set;}
        public string Column2 {get;set;}
        public string Column3 {get;set;}
        public string Column4 {get;set;}
        public string Column5 {get;set;}
        public string Column6 {get;set;}
        public string Column7 {get;set;}
        public string Column8 {get;set;}
        public string Column9 {get;set;}
        public string Column10 {get;set;}
        public string Column11 {get;set;}
        public string Column12 {get;set;}
        public string Column13 {get;set;}
        public string Column14 {get;set;}
        public string Column15 {get;set;}
    }
    
    
    private List<TestItem> _items;

    protected override void OnInitialized() {
        _items = new List<TestItem>();
        for (int i = 0; i < 20; i++) {
            _items.Add(new TestItem {
                Column1 = $""Value_{i}"",
                Column2 = $""Value_{i}"",
                Column3 = $""Value_{i}"",
                Column4 = $""Value_{i}"",
                Column5 = $""Value_{i}"",
                Column6 = $""Value_{i}"",
                Column7 = $""Value_{i}"",
                Column8 = $""Value_{i}"",
                Column9 = $""Value_{i}"",
                Column10 = $""Value_{i}"",
                Column11 = $""Value_{i}"",
                Column12 = $""Value_{i}"",
                Column13 = $""Value_{i}"",
                Column14 = $""Value_{i}"",
                Column15 = $""Value_{i}""
            });
        }
    }
}";

        public const string TableInlineEditExample = @"@using System.Net.Http.Json
@using MudBlazor
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient
@inject ISnackbar Snackbar

<MudTable Items=""@Elements"" Dense=""@dense"" Hover=""@hover"" ReadOnly=""@ronly"" CanCancelEdit=""@canCancelEdit"" Filter=""new Func<Element,bool>(FilterFunc)""
          @bind-SelectedItem=""selectedItem1"" SortLabel=""Sort By"" CommitEditTooltip=""Commit Edit""
          OnCommitEditClick=""@(() => Snackbar.Add(""Commit Edit Handler Invoked""))"" RowEditPreview=""BackupItem"" RowEditCancel=""ResetItemToOriginalValues""
          RowEditCommit=""ItemHasBeenCommitted"" IsEditRowSwitchingBlocked=""@blockSwitch"" ApplyButtonPosition=""@applyButtonPosition"" EditButtonPosition=""@editButtonPosition"" EditTrigger=""@editTrigger"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value=""searchString"" Placeholder=""Search"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style=""width:50px;"" />
        }
        <col style=""width:50px;"" />
        <col style=""width:80px;"" />
        <col style=""width:50%;"" />
        <col />
        <col />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style=""width:50px;"" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Number)"">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Sign)"">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection=""SortDirection.Ascending"" SortBy=""new Func<Element, object>(x=>x.Name)"">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Position)"">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Molar)"">Mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">
            <MudTextField @bind-Value=""context.Sign"" Required />
        </MudTd>
        <MudTd DataLabel=""Name"">
            <MudTextField @bind-Value=""context.Name"" Required />
        </MudTd>
        <MudTd DataLabel=""Position"">
            <MudNumericField @bind-Value=""context.Position"" Required Min=""1"" />
        </MudTd>
        <MudTd DataLabel=""Molar mass"">
            <MudTextField @bind-Value=""context.Molar"" Required />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context=""button"">
        <MudIconButton Size=""@Size.Small"" Icon=""@Icons.Material.Outlined.Edit"" Class=""pa-0"" OnClick=""@button.ButtonAction"" Disabled=""@button.ButtonDisabled"" />
    </EditButtonContent>
</MudTable>

<MudSwitch @bind-Value=""hover"" Color=""Color.Primary"">Hover</MudSwitch>
<MudSwitch @bind-Value=""dense"" Color=""Color.Secondary"">Dense</MudSwitch>
<MudSwitch @bind-Value=""ronly"" Color=""Color.Tertiary"">Read Only</MudSwitch>
<MudSwitch @bind-Value=""canCancelEdit"" Color=""Color.Info"">Can Cancel Edit</MudSwitch>
<MudSwitch @bind-Value=""blockSwitch"" Color=""Color.Success"">Block Edit Row Switching</MudSwitch>
<MudGrid>
    <MudItem xs=""12"" md=""4"">
        <MudSelect Label=""Edit Trigger"" T=""TableEditTrigger"" @bind-Value=""editTrigger"">
            <MudSelectItem Value=""TableEditTrigger.RowClick"">Row Click</MudSelectItem>
            <MudSelectItem Value=""TableEditTrigger.EditButton"">Edit Button</MudSelectItem>
        </MudSelect>
    </MudItem>
    @if (editTrigger == TableEditTrigger.EditButton)
    {
        <MudItem xs=""12"" md=""4"">
            <MudSelect Label=""Edit Button Position"" T=""TableEditButtonPosition"" @bind-Value=""editButtonPosition"">
                <MudSelectItem Value=""TableEditButtonPosition.Start"">Start</MudSelectItem>
                <MudSelectItem Value=""TableEditButtonPosition.End"">End</MudSelectItem>
                <MudSelectItem Value=""TableEditButtonPosition.StartAndEnd"">Start and End</MudSelectItem>
            </MudSelect>
        </MudItem>
    }
    <MudItem xs=""12"" md=""4"">
        <MudSelect Label=""Apply Button Position"" T=""TableApplyButtonPosition"" @bind-Value=""applyButtonPosition"">
            <MudSelectItem Value=""TableApplyButtonPosition.Start"">Start</MudSelectItem>
            <MudSelectItem Value=""TableApplyButtonPosition.End"">End</MudSelectItem>
            <MudSelectItem Value=""TableApplyButtonPosition.StartAndEnd"">Start and End</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

<MudText HtmlTag=""span"">Selected1: @selectedItem1?.Name</MudText>

<MudExpansionPanels Style=""flex: 1;"">
    <MudExpansionPanel Text=""Show inline-edit event log"">
        @foreach (var message in editEvents)
        {
            <MudText>@message</MudText>
        }
        @if (editEvents.Count > 0)
        {
            <div class=""d-flex"">
                <MudSpacer />
                <MudButton Class=""mt-3"" ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" OnClick=""ClearEventLog"">Clear event log</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private List<string> editEvents = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = """";
    private Element selectedItem1 = null;
    private Element elementBeforeEdit;
    private HashSet<Element> selectedItems1 = new HashSet<Element>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private void ClearEventLog()
    {
        editEvents.Clear();
    }

    private void AddEditionEvent(string message)
    {
        editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Sign = ((Element)element).Sign,
                Name = ((Element)element).Name,
                Molar = ((Element)element).Molar,
                Position = ((Element)element).Position
            };
        AddEditionEvent($""RowEditPreview event: made a backup of Element {((Element)element).Name}"");
    }

    private void ItemHasBeenCommitted(object element)
    {
        AddEditionEvent($""RowEditCommit event: Changes to Element {((Element)element).Name} committed"");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Element)element).Sign = elementBeforeEdit.Sign;
        ((Element)element).Name = elementBeforeEdit.Name;
        ((Element)element).Molar = elementBeforeEdit.Molar;
        ((Element)element).Position = elementBeforeEdit.Position;
        AddEditionEvent($""RowEditCancel event: Editing of Element {((Element)element).Name} canceled"");
    }

    private bool FilterFunc(Element element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($""{element.Number} {element.Position} {element.Molar}"".Contains(searchString))
            return true;
        return false;
    }
}";

        public const string TableMultiGroupingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudText>Total items: @Elements?.Count() - Selected items: @selectedItems?.Count</MudText>

<MudTable Hover=""true"" Breakpoint=""Breakpoint.Sm"" Height=""500px"" FixedHeader=""true""
          Items=""@Elements""
          GroupBy=""@_groupDefinition""
          GroupHeaderStyle=""background-color:var(--mud-palette-background-gray)""
          GroupFooterClass=""mb-4""
          Dense=""_dense""
          MultiSelection=""_multiSelect""
          @bind-SelectedItems=""selectedItems"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Group</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class=""mud-table-cell-custom-group"" colspan=""6"">@($""{context.GroupName}: {context.Key}"")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Group"">@context.Group</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd Style=""text-align:right"" DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <GroupFooterTemplate>
        <MudTh Class=""mud-table-cell-custom-group mud-table-cell-custom-group-footer"" colspan=""6"">Total Mass: @context.Items.Sum((e) => e.Molar)</MudTh>
    </GroupFooterTemplate>
</MudTable>
<MudSwitch @bind-Value=""_dense"" Color=""Color.Primary"">Dense</MudSwitch>
<MudSwitch @bind-Value=""_multiSelect"" Color=""Color.Primary"">MultiSelect</MudSwitch>
<MudSwitch @bind-Value=""_groupDefinition.Indentation"" Color=""Color.Primary"">Indentation</MudSwitch>
<MudSwitch @bind-Value=""_groupDefinition.Expandable"" Color=""Color.Primary"">Expandable (Root Level)</MudSwitch>
<MudSwitch @bind-Value=""_groupDefinition.InnerGroup.Expandable"" Color=""Color.Primary"">Expandable (Second Level)</MudSwitch>

@code {
    private bool _dense = false;
    private bool _multiSelect = true;
    private HashSet<Element> selectedItems = new HashSet<Element>();

    private TableGroupDefinition<Element> _groupDefinition = new TableGroupDefinition<Element>()
    {
        GroupName = ""Group"",
        Indentation = false,
        Expandable = false,
        Selector = (e) => e.Group,
        InnerGroup = new TableGroupDefinition<Element>()
        {
            GroupName = ""Position"",
            Expandable = false,
            Selector = (e) => e.Position
        }

    };


    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

}";

        public const string TableMultiSelectExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudText HtmlTag=""span"">Item: @_selectedItemText</MudText>
<MudText>Selected items (@selectedItems?.Count): @(selectedItems == null ? """" : string.Join("", "", selectedItems.OrderBy(x => x.Sign).Select(x => x.Sign)))</MudText>

<MudTable @ref=""_table"" T=""Element"" Items=""@Elements"" MultiSelection=""true"" SelectionChangeable=""_selectionChangeable"" Hover=""true""
          @bind-SelectedItems=""selectedItems"" OnRowClick=""@OnRowClick"" SelectOnRowClick=""@_selectOnRowClick"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[] { 10, 25, 50, 100 }"" />
    </PagerContent>
    <FooterContent>
        <MudTd colspan=""5"">Select All</MudTd>
    </FooterContent>
</MudTable>
<MudSwitch @bind-Value=""_selectOnRowClick"" Color=""Color.Primary"">Select on row click</MudSwitch>
<MudSwitch @bind-Value=""_selectionChangeable"" Color=""Color.Primary"">Selection is changeable</MudSwitch>

@code {
    private HashSet<Element> selectedItems = new HashSet<Element>();
    private IEnumerable<Element> Elements = new List<Element>();
    private bool _selectOnRowClick = true;
    private bool _selectionChangeable = true;
    private MudTable<Element> _table;
    private string _selectedItemText = ""No row clicked"";

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    void OnRowClick(TableRowClickEventArgs<Element> args)
    {
        _selectedItemText = $""{args.Item.Name} ({args.Item.Sign})"";
    }
}";

        public const string TablePagerExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
            <MudTablePager PageSizeOptions=""new int[] { 10, 25, 50, 100, int.MaxValue }""
                           RowsPerPageString=""@rowsPerPageString""
                           InfoFormat=""@infoFormat""
                           AllItemsText=""@allItemsText""
                           HorizontalAlignment=""@horizontalAlignment""
                           HideRowsPerPage=""@hideRowsPerPage""
                           HidePageNumber=""@hidePageNumber""
                           HidePagination=""@hidePagination"" />
    </PagerContent>
</MudTable>

<div class=""d-flex flex-wrap mt-4"">
    <MudSelect T=""HorizontalAlignment"" Label=""HorizontalAlignment"" @bind-Value=""horizontalAlignment"">
        <MudSelectItem Value=""HorizontalAlignment.Center"" />
        <MudSelectItem Value=""HorizontalAlignment.Left"" />
        <MudSelectItem Value=""HorizontalAlignment.Right"" />
        <MudSelectItem Value=""HorizontalAlignment.Start"" />
        <MudSelectItem Value=""HorizontalAlignment.End"" />
    </MudSelect>
</div>
<div class=""d-flex flex-wrap mt-4"">
    <MudTextField Label=""RowsPerPageString"" @bind-Value=""rowsPerPageString"" Immediate/>
     <MudTextField Class=""ml-4"" Label=""AllItemsText"" @bind-Value=""allItemsText"" Immediate />
     <MudTextField Class=""ml-4"" Label=""InfoFormat"" @bind-Value=""infoFormat"" Immediate />
</div>
<div class=""d-flex flex-wrap mt-4"">
     <MudSwitch @bind-Value=""hideRowsPerPage"" Color=""Color.Tertiary"">HideRowsPerPage</MudSwitch>
     <MudSwitch @bind-Value=""hidePageNumber"" Color=""Color.Primary"">HidePageNumber</MudSwitch>
     <MudSwitch @bind-Value=""hidePagination"" Color=""Color.Secondary"">HidePagination</MudSwitch>
</div>

@code {
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = ""Rows per page:"";
    private string infoFormat = ""{first_item}-{last_item} of {all_items}"";
    private string allItemsText = ""All"";

    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableRecordComparerExample = @"@using System.Net.Http.Json
@using System.Text.Json.Serialization;
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"" MultiSelection=""true"" T=""Element"" SelectedItemsChanged=""OnSelectedItemsChanged"" Comparer=""Comparer"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[] { 10, 25, 50, 100 }"" />
    </PagerContent>
    <FooterContent>
        <MudTd colspan=""5"">Select All</MudTd>
    </FooterContent>
</MudTable>

<MudText HtmlTag=""span"">Selected items: @(selectedItems1 == null ? """" : string.Join("", "", selectedItems1.OrderBy(x => x.Sign).Select(x => x.Sign)))</MudText>

@code {
    private HashSet<Element> selectedItems1 = new HashSet<Element>();

    private List<Element> Elements = new List<Element>();

    private ElementComparer Comparer = new();

    private void OnSelectedItemsChanged(HashSet<Element> elements)
    {
        if (elements.Any())
            elements.First().Name = ""Changed"";
    }

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    class ElementComparer : IEqualityComparer<Element>
    {
        public bool Equals(Element a, Element b) => a?.Number == b?.Number;
        public int GetHashCode(Element x) => HashCode.Combine(x?.Number);
    }

    public record Element
    {
        public string Group { get; set; }
        public int Position { get; set; }
        public string Name { get; set; }
        public int Number { get; set; }

        [JsonPropertyName(""small"")]
        public string Sign { get; set; }
        public double Molar { get; set; }
        public IList<int> Electrons { get; set; }

        public override string ToString() => $""{Sign} - {Name}"";
    }
}";

        public const string TableRelationalExample = @"<MudTable Items=""@People"" Hover=""true"" Breakpoint=""Breakpoint.Sm"">
	<ColGroup>
		<col style=""width:300px;"" />
		<col style=""width:100px;"" />
		<col />
		<col style=""width:100px;"" />
	</ColGroup>
	<HeaderContent>
		<MudTh></MudTh>
		<MudTh>Nr</MudTh>
		<MudTh>Name</MudTh>
		<MudTh>Age</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd><MudButton Variant=""Variant.Outlined"" Size=""Size.Small"" OnClick=""@(() => ShowBtnPress(context.Number))"">@((context.ShowDetails == true)? ""Hide"" : ""Show"") Address Details</MudButton></MudTd>
		<MudTd DataLabel=""Nr"">@context.Number</MudTd>
		<MudTd DataLabel=""Name"">@context.Name</MudTd>
		<MudTd DataLabel=""Age"">@context.Age</MudTd>
	</RowTemplate>
	<ChildRowContent>
		@if (context.ShowDetails)
				{
  <MudTr>
   <td colspan=""4"">
	<MudCard Elevation=""0"">
	 <MudCardHeader>
	  <CardHeaderContent>
	   <MudText Typo=""Typo.body1"">Address Details for <strong>@context.Name</strong></MudText>
	  </CardHeaderContent>
	 </MudCardHeader>
	 <MudCardContent Class=""pa-0"">
	  <MudTable Items=""@context.Addresses"" Context=""AddressContext"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" Elevation=""0"">
	   <ColGroup>
		<col />
		<col />
		<col style=""width:200px;"" />
	   </ColGroup>
	   <HeaderContent>
		<MudTh>Address Line 1</MudTh>
		<MudTh>Address Line 2</MudTh>
		<MudTh>Postal Code</MudTh>
	   </HeaderContent>
	   <RowTemplate>
		<MudTd DataLabel=""Address Line 1"">@AddressContext.Address_Line_1</MudTd>
		<MudTd DataLabel=""Address Line 2"">@AddressContext.Address_Line_2</MudTd>
		<MudTd DataLabel=""Postal Code"">@AddressContext.Postal_Code</MudTd>
	   </RowTemplate>
	  </MudTable>
	 </MudCardContent>
	</MudCard>
   </td>
  </MudTr>
		}
	</ChildRowContent>
</MudTable>

@code
{
	protected override void OnInitialized()
	{
		FillPeople();
	}

	public class Address
	{
		public string Address_Line_1 { get; set; }
		public string Address_Line_2 { get; set; }
		public int Postal_Code { get; set; }
	}
	public class Person
	{
		public bool ShowDetails { get; set; }
		public int Number { get; set; }
		public string Name { get; set; }
		public int Age { get; set; }
		public IList<Address> Addresses { get; set; }
	}
	private void FillPeople()
	{
		IList<Person> people = new List<Person>();
		IList<Address> addresses = new List<Address>();
		addresses.Add(new Address { Address_Line_1 = ""4 Privet Drive"", Address_Line_2 = ""Little Whinging"", Postal_Code = 111 });
		addresses.Add(new Address { Address_Line_1 = ""12 Grimmauld Place"", Address_Line_2 = ""The Burrow"", Postal_Code = 333 });
		people.Add(new Person
		{
			ShowDetails = false,
			Number = 1,
			Name = ""Harry Potter"",
			Age = 11,
			Addresses = addresses
		});

		addresses = new List<Address>();
		addresses.Add(new Address { Address_Line_1 = ""123 Pikachu Lane"", Address_Line_2 = ""Pallet Town"", Postal_Code = 777 });
		addresses.Add(new Address { Address_Line_1 = ""456 Mew Street"", Address_Line_2 = ""Pallet Town"", Postal_Code = 999 });
		people.Add(new Person
		{
			ShowDetails = false,
			Number = 2,
			Name = ""Ash Ketchum"",
			Age = 18,
			Addresses = addresses
		});
		People = people;

		addresses = new List<Address>();
		addresses.Add(new Address { Address_Line_1 = ""123 Shire Lane"", Address_Line_2 = ""Bag End"", Postal_Code = 223 });
		addresses.Add(new Address { Address_Line_1 = ""456 Shire Street"", Address_Line_2 = ""Bag End"", Postal_Code = 445 });
		addresses.Add(new Address { Address_Line_1 = ""789 Shire Avenue"", Address_Line_2 = ""Bag End"", Postal_Code = 667 });
		people.Add(new Person
		{
			ShowDetails = true,
			Number = 3,
			Name = ""Frodo Baggins"",
			Age = 24,
			Addresses = addresses
		});
		People = people;
	}
	private static IEnumerable<Person> People { get; set; }

	private void ShowBtnPress(int nr)
	{
		Person tmpPerson = People.First(f => f.Number == nr);
		tmpPerson.ShowDetails = !tmpPerson.ShowDetails;
	}
}";

        public const string TableRowClassFuncExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<style>
    .selected {
        background-color: #1E88E5 !important;
    }
    .selected > td {
        color: white !important;
    }
    .selected > td .mud-input {
        color: white !important;
    }
</style>

<MudTable T=""Element"" Items=""@Elements.Take(4)"" Hover=""true"" Breakpoint=""Breakpoint.Sm"" @ref=""mudTable""
          RowClass=""cursor-pointer"" RowClassFunc=""@SelectedRowClassFunc"" OnRowClick=""RowClickEvent"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
</MudTable>
<MudExpansionPanels Style=""flex: 1;"">
    <MudExpansionPanel Text=""Show inline-clicked event log"">
        @foreach (var message in clickedEvents)
        {
            <MudText>@message</MudText>
        }
        @if(clickedEvents.Count > 0) {
            <div class=""d-flex"">
                <MudSpacer/>
                <MudButton Class=""mt-3"" ButtonType=""ButtonType.Button"" Variant=""Variant.Filled"" OnClick=""@(() => clickedEvents.Clear())"">Clear events</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private int selectedRowNumber = -1;
    private MudTable<Element> mudTable;
    private List<string> clickedEvents = new();
    private IEnumerable<Element> Elements = new List<Element>()
    {
        new Element() { Number = 1, Sign = ""H"", Name = ""Hydrogen"", Position = 0, Molar = 1.00794 },
        new Element() { Number = 2, Sign = ""He"", Name = ""Helium"", Position = 17, Molar = 4.002602 },
        new Element() { Number = 3, Sign = ""Li"", Name = ""Lithium"", Position = 0, Molar = 6.941 }
    };

    private void RowClickEvent(TableRowClickEventArgs<Element> tableRowClickEventArgs)
    {
        clickedEvents.Add(""Row has been clicked"");
    }

    private string SelectedRowClassFunc(Element element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add(""Selected Row: None"");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($""Selected Row: {rowNumber}"");
            return ""selected"";
        }
        else
        {
            return string.Empty;
        }
    }
}";

        public const string TableRowHoverEventsExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable T=""Element"" Items=""@elements.Take(3)"" Hover=""true"" OnRowMouseEnter=""RowMouseEnterEvent"" OnRowMouseLeave=""RowMouseLeaveEvent"" Breakpoint=""Breakpoint.Sm"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
</MudTable>

<MudText>Currently hovered: @(currentlyHoveredElement)</MudText>
<MudText>Last hovered: @(lastHoveredElement)</MudText>

@code {
    private IEnumerable<Element> elements = new List<Element>();

    private string currentlyHoveredElement;
    private string lastHoveredElement;

    protected override async Task OnInitializedAsync()
    {
        elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }

    private void RowMouseEnterEvent(TableRowHoverEventArgs<Element> eventArgs)
    {
        currentlyHoveredElement = eventArgs.Item.Name;
    }

    private void RowMouseLeaveEvent(TableRowHoverEventArgs<Element> eventArgs)
    {
        currentlyHoveredElement = """";
        lastHoveredElement = eventArgs.Item.Name;
    }
}";

        public const string TableServerSideCancellationTokenExample = @"@using MudBlazor.Examples.Data.Models
@using System.Net.Http.Json
@using System.Threading
@inject HttpClient httpClient

<MudTable ServerData=""ServerReload"" Dense=""true"" Hover=""true"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel=""nr_field"" T=""Element"">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""sign_field"" T=""Element"">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""name_field"" T=""Element"">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""position_field"" T=""Element"">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""mass_field"" T=""Element"">Molar mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server, with a token for canceling this request
    /// </summary>
    private async Task<TableData<Element>> ServerReload(TableState state, CancellationToken token)
    {
        // Forward the provided token to methods which support it
        var data = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"", token);
        // Simulate a long-running operation
        await Task.Delay(300, token);
        // Get the total count
        var totalItems = data.Count();
        // Get the paged data
        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        // Return the data
        return new TableData<Element>() { TotalItems = totalItems, Items = pagedData };
    }
}";

        public const string TableServerSidePaginateExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@using System.Threading
@inject HttpClient httpClient

<MudTable ServerData=""ServerReload"" Dense=""true"" Hover=""true"" @ref=""table"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField T=""string"" ValueChanged=""@(s=>OnSearch(s))"" Placeholder=""Search"" Adornment=""Adornment.Start""
                      AdornmentIcon=""@Icons.Material.Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel=""nr_field"" T=""Element"">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""sign_field"" T=""Element"">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""name_field"" T=""Element"">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""position_field"" T=""Element"">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel=""mass_field"" T=""Element"">Molar mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Element> pagedData;
    private MudTable<Element> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<Element>> ServerReload(TableState state, CancellationToken token)
    {
        IEnumerable<Element> data = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"", token);
        await Task.Delay(300, token);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($""{element.Number} {element.Position} {element.Molar}"".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case ""nr_field"":
                data = data.OrderByDirection(state.SortDirection, o => o.Number);
                break;
            case ""sign_field"":
                data = data.OrderByDirection(state.SortDirection, o => o.Sign);
                break;
            case ""name_field"":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case ""position_field"":
                data = data.OrderByDirection(state.SortDirection, o => o.Position);
                break;
            case ""mass_field"":
                data = data.OrderByDirection(state.SortDirection, o => o.Molar);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Element>() {TotalItems = totalItems, Items = pagedData};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}";

        public const string TableSortingExample = @"@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@inject HttpClient httpClient

<MudTable Items=""@Elements"" Hover=""true"" SortLabel=""Sort By"">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Number)"">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled=""@enabled"" SortBy=""new Func<Element, object>(x=>x.Sign)"">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection=""SortDirection.Ascending"" SortBy=""new Func<Element, object>(x=>x.Name)"">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Position)"">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Molar)"">Mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[] { 10, 25, 50, 100 }"" />
    </PagerContent>
</MudTable>

<MudSwitch @bind-Value=""enabled"" Color=""Color.Info"">Enable sorting on the Sign Column</MudSwitch>

@code {
    private bool enabled = true;
    private IEnumerable<Element> Elements = new List<Element>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>(""webapi/periodictable"");
    }
}";

        public const string TableVirtualizationExample = @"<MudTable Items=""_items"" Height=""350px"" Breakpoint=""Breakpoint.Sm"" Virtualize=""true"" FixedHeader=""true"">
    <HeaderContent>
        <MudTh>Column1</MudTh>
        <MudTh>Column2</MudTh>
        <MudTh>Column3</MudTh>
        <MudTh>Column4</MudTh>
        <MudTh>Column5</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Column1"">@context.Column1</MudTd>
        <MudTd DataLabel=""Column2"">@context.Column2</MudTd>
        <MudTd DataLabel=""Column3"">@context.Column3</MudTd>
        <MudTd DataLabel=""Column4"">@context.Column4</MudTd>
        <MudTd DataLabel=""Column5"">@context.Column5</MudTd>
    </RowTemplate>
</MudTable>

@code {
    public class TestItem
    {
        public string Column1 { get; set; }
        public string Column2 { get; set; }
        public string Column3 { get; set; }
        public string Column4 { get; set; }
        public string Column5 { get; set; }
    }


    private List<TestItem> _items;

    protected override void OnInitialized()
    {
        _items = new List<TestItem>();
        for (int i = 0; i < 20000; i++)
        {
            _items.Add(new TestItem
            {
                Column1 = $""Value_{i}"",
                Column2 = $""Value_{i}"",
                Column3 = $""Value_{i}"",
                Column4 = $""Value_{i}"",
                Column5 = $""Value_{i}"",
            });
        }
    }

}";

        public const string CustomDynamicTabsExample = @"<MudTabs @bind-ActivePanelIndex=""_index"" Border=""true"" Outlined=""true"" PanelClass=""px-4 py-6"" ApplyEffectsToContainer=""true"">
	<ChildContent>
		@foreach (var item in _tabs)
		{
			 <MudTabPanel Text=""@item.Name"" Tag=""@item.Id"">@item.Content</MudTabPanel>
		}
	</ChildContent>
	<Header>
		<MudButtonGroup>
			<MudTooltip Text=""Prepend a tab"">
				<MudIconButton Icon=""@Icons.Material.Filled.ChevronLeft"" OnClick=""@( () => AddTabCallback(false) )"" />
			</MudTooltip>
			<MudTooltip Text=""Append a tab"">
				<MudIconButton Icon=""@Icons.Material.Filled.ChevronRight"" OnClick=""@( () => AddTabCallback(true) )""  />
			</MudTooltip>
		</MudButtonGroup>
	</Header>
	<TabPanelHeader>
		@if(context.Text.StartsWith(""Tab"") == false)
		{
			<MudTooltip Text=""only dynamic tabs can be closed"">
				<MudIconButton Class=""ml-2 pa-1"" Color=""Color.Error"" Icon=""@Icons.Material.Filled.Remove"" OnClick=""(_) => RemoveTab(context)"" />
			</MudTooltip>
		}
  </TabPanelHeader>
</MudTabs>

@code {

	private class TabView
	{
		public String Name { get; set; }
		public String Content { get; set; }
		public Guid Id { get; set; }
	}

	private List<TabView> _tabs = new();
	private int _index = 0;
	private int? _nextIndex = null;

	private void RemoveTab(MudTabPanel tabPanel)
	{
		var tab = _tabs.FirstOrDefault(x => x.Id == (Guid)tabPanel.Tag);
		if(tab != null)
		{
			_tabs.Remove(tab);
		}
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();

		_tabs.Add(new TabView { Content = ""First tab content"", Name = ""Tab A"", Id = Guid.NewGuid() });
		_tabs.Add(new TabView { Content = ""Second tab content"", Name = ""Tab B"", Id = Guid.NewGuid() });
		_tabs.Add(new TabView { Content = ""Third tab content"", Name = ""Tab C"", Id = Guid.NewGuid() });
	}

	private void AddTabCallback(Boolean append)
	{
		var tabView = new TabView { Name = ""Dynamic content"", Content = ""A new tab"", Id = Guid.NewGuid() };
		
		//the tab becomes available after it is rendered. Hence, we can't set the index here
		if(append == true)
		{
			_tabs.Add(tabView);
			_nextIndex = _tabs.Count - 1;
		}
		else
		{
			_tabs.Insert(0, tabView);
			_nextIndex = 0;
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if(_nextIndex.HasValue == true)
		{
			_index = _nextIndex.Value;
			_nextIndex = null;
			StateHasChanged();
		}
	}
}";

        public const string DynamicTabsSimpleExample = @"<MudDynamicTabs @ref=""@DynamicTabs"" @bind-ActivePanelIndex=""@UserIndex""
                AddTab=""@AddTabCallback"" CloseTab=""@CloseTabCallback""
                AddIconToolTip=""Click to add a new tab"" CloseIconToolTip=""Close tab. All data will be lost""
                PanelClass=""px-4 py-6"" Elevation=""4"" Rounded ApplyEffectsToContainer>
    @foreach (var tab in UserTabs)
    {
        <MudTabPanel ID=""@tab.Id"" Text=""@tab.Label"" ShowCloseIcon=""@tab.ShowCloseIcon"">@tab.Content</MudTabPanel>
    }
</MudDynamicTabs>
<MudButton OnClick=""@RestoreUserTabs"">Restore</MudButton>
<MudSwitch T=""bool"" Color=""Color.Primary"" Value=""@_showCloseIcon"" ValueChanged=""@ToggleShowCloseIcon"">@($""Show {_closeToggableTab}'s close icon"")</MudSwitch>
<MudText>UserTabs index: @UserIndex / DynamicTabs ActivePanelIndex: @DynamicTabs.ActivePanelIndex</MudText>
<MudText>UserTabs.Count: @UserTabs.Count / DynamicTabs Panels.Count: @DynamicTabs.Panels.Count</MudText>

    @code {

    public class TabView
    {
        public string Label { get; set; }
        public string Content { get; set; }
        public Guid Id { get; set; }
        public bool ShowCloseIcon { get; set; } = true;
    }

    public MudDynamicTabs DynamicTabs;
    public List<TabView> UserTabs = new();
    public int UserIndex;
    bool _stateHasChanged;
    bool _showCloseIcon = false;
    string _closeToggableTab = ""Tab B"";

    void RestoreUserTabs()
    {
        UserTabs.Clear();
        UserTabs.Add(new TabView {Id = Guid.NewGuid(), Label = ""Tab A"", Content = ""Tab A content""});
        UserTabs.Add(new TabView {Id = Guid.NewGuid(), Label = _closeToggableTab, Content = $""{_closeToggableTab} content"", ShowCloseIcon = _showCloseIcon });
        UserTabs.Add(new TabView {Id = Guid.NewGuid(), Label = ""Tab C"", Content = ""Tab C content""});
        UserIndex = 1; // Start on 2nd tab: ""Tab B""
        _stateHasChanged = true;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RestoreUserTabs();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (_stateHasChanged)
        {
            _stateHasChanged = false;
            StateHasChanged();
        }
    }

    private void ToggleShowCloseIcon(bool show)
    {
        var tab = UserTabs?.SingleOrDefault(t => t.Label.Equals(_closeToggableTab));
        if (tab is not null) tab.ShowCloseIcon = show;
        _showCloseIcon = show;
    }

    public void AddTab(Guid id)
    {
        UserTabs.Add(new TabView {Id = id, Label = ""dynamic tab"", Content = $""Tab ID: {id}""});
        UserIndex = UserTabs.Count - 1; // Automatically switch to the new tab.
        _stateHasChanged = true;
    }

    public void RemoveTab(Guid id)
    {
        var tabView = UserTabs.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            UserTabs.Remove(tabView);
            _stateHasChanged = true;
        }
    }

    void AddTabCallback() => AddTab(Guid.NewGuid());
    void CloseTabCallback(MudTabPanel panel) => RemoveTab((Guid)panel.ID);
}";

        public const string TabsBindingExample = @"<MudTabs Elevation=""0"" Outlined=""true"" @bind-ActivePanelIndex=""activeIndex"">
    <MudTabPanel Text=""Item One"" ID='""pn_one""'></MudTabPanel>
    <MudTabPanel Text=""Item Two"" ID='""pn_two""'></MudTabPanel>
    <MudTabPanel Text=""Item Three"" ID='""pn_three""'></MudTabPanel>
</MudTabs>
<MudText>@($""Active Index: {activeIndex}"")</MudText>

@code
 { 
    int activeIndex = 2;
}";

        public const string TabsCenteredExample = @"<MudTabs Centered=""_centered"" Color=""Color.Primary"">
    <MudTabPanel Text=""One""/>
    <MudTabPanel Text=""Two""/>
    <MudTabPanel Text=""Three""/>
</MudTabs>

<MudSwitch @bind-Value=""_centered"" Color=""Color.Primary"">Centered</MudSwitch>

@code{
    bool _centered = true;
}";

        public const string TabsContentExample = @"<MudTabs Elevation=""1"" Rounded=""true"" PanelClass=""pa-6"" ActiveTabClass=""border-solid border-2 mud-border-primary"">
    <MudTabPanel>
        <ChildContent>
            <MudText>Custom tab content only</MudText>
        </ChildContent>
        <TabContent>
            Item One
        </TabContent>
    </MudTabPanel>
    <MudTabPanel>
        <ChildContent>
            <MudText>Both custom tab and wrapper content</MudText>
        </ChildContent>
        <TabWrapperContent>
            <MudTooltip Text=""ToolTip Two"">
                @context
            </MudTooltip>
        </TabWrapperContent>
        <TabContent>
            <MudText Typo=""Typo.h6"">Item Two</MudText>
        </TabContent>
    </MudTabPanel>
    <MudTabPanel Text=""Item Three"">
        <ChildContent>
            <MudText>Custom wrapper content only</MudText>
        </ChildContent>
        <TabWrapperContent>
            <MudTooltip Text=""ToolTip Three"">
                @context
            </MudTooltip>
        </TabWrapperContent>
    </MudTabPanel>
</MudTabs>";

        public const string TabsCustomScrollIconsExample = @"<MudTabs Elevation=""4"" Color=""@Color.Success"" PrevIcon=""@Icons.Material.Filled.SkipPrevious"" NextIcon=""@Icons.Material.Filled.SkipNext"">
    <MudTabPanel Text=""One"" />
    <MudTabPanel Text=""Two"" />
    <MudTabPanel Text=""Three"" />
    <MudTabPanel Text=""Four"" />
    <MudTabPanel Text=""Five"" />
    <MudTabPanel Text=""Six"" />
    <MudTabPanel Text=""Seven"" />
    <MudTabPanel Text=""Eight"" />
    <MudTabPanel Text=""Nine"" />
    <MudTabPanel Text=""Ten"" />
    <MudTabPanel Text=""Eleven"" />
    <MudTabPanel Text=""Thirteen"" />
</MudTabs>";

        public const string TabsIconAndTextExample = @"<MudTabs Outlined=""true"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Filled.Api""/>
    <MudTabPanel Icon=""@Icons.Material.Filled.Build""/>
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.Filled.BugReport""/>
</MudTabs>";

        public const string TabsMinimumTabWidthExample = @"<MudStack>
    <MudTabs Outlined=""true"" MinimumTabWidth=""20px"">
        <MudTabPanel Icon=""@Icons.Material.Filled.Build"" />
        <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Filled.Api"" />
        <MudTabPanel Icon=""@Icons.Material.Filled.Settings"" />
    </MudTabs>


    <MudTabs Outlined=""true"" MinimumTabWidth=""20px"" Position=""Position.Left"">
        <MudTabPanel Icon=""@Icons.Material.Filled.Build"" />
        <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Filled.Api"" />
        <MudTabPanel Icon=""@Icons.Material.Filled.Settings"" />
    </MudTabs>
</MudStack>";

        public const string TabsPositionExample = @"<MudTabs Outlined=""true"" Position=""@Position"" Rounded=""true"" Border=""true""
    ApplyEffectsToContainer=""true"" Class=""mt-8"" PanelClass=""pa-6"">
    <MudTabPanel Text=""Item One"">
        <MudText>Content One</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Two"">
        <MudText>Content Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Three"">
        <MudText>Content Three</MudText>
    </MudTabPanel>
</MudTabs>

<MudSelect Label=""Tabs Position"" @bind-Value=""Position"" Variant=""Variant.Outlined"">
    <MudSelectItem T=""Position"" Value=""@Position.Top"">Top</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.Start"">Start</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.Left"">Left</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.Right"">Right</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.End"">End</MudSelectItem>
    <MudSelectItem T=""Position"" Value=""@Position.Bottom"">Bottom</MudSelectItem>
</MudSelect>

@code {
    public Position Position { get; set; } = Position.Left;

    private void OnSelectedValue(Position value)
    {
        switch (value)
        {
            case Position.Top:
                Position = Position.Top;
                break;
            case Position.Start:
                Position = Position.Start;
                break;
            case Position.Left:
                Position = Position.Left;
                break;
            case Position.Right:
                Position = Position.Right;
                break;
            case Position.End:
                Position = Position.End;
                break;
            case Position.Bottom:
                Position = Position.Bottom;
                break;
        }
    }
}";

        public const string TabsScrollExample = @"<MudTabs Elevation=""4"" Color=""@Color.Secondary"">
    <MudTabPanel Text=""One"" />
    <MudTabPanel Text=""Two"" />
    <MudTabPanel Text=""Three"" />
    <MudTabPanel Text=""Four"" />
    <MudTabPanel Text=""Five"" />
    <MudTabPanel Text=""Six"" />
    <MudTabPanel Text=""Seven"" />
    <MudTabPanel Text=""Eight"" />
    <MudTabPanel Text=""Nine"" />
    <MudTabPanel Text=""Ten"" />
    <MudTabPanel Text=""Eleven"" />
    <MudTabPanel Text=""Thirteen"" />
</MudTabs>

<MudTabs Elevation=""4"" AlwaysShowScrollButtons=""true"" Color=""@Color.Info"" Class=""mt-4"">
    <MudTabPanel Text=""One"" />
    <MudTabPanel Text=""Two"" />
    <MudTabPanel Text=""Three"" />
</MudTabs>";

        public const string TabsSetActiveExample = @"<MudTabs Elevation=""1"" Rounded=""true"" @ref=""tabs"">
    <MudTabPanel Text=""One"" @ref=""panel01"" ID=""@(""pn_one"")"" />
    <MudTabPanel Text=""Two"" @ref=""panel02"" ID=""@(""pn_two"")"" />
    <MudTabPanel Text=""Three"" @ref=""panel03"" ID=""@(""pn_three"")"" />
</MudTabs>


<MudText GutterBottom=""true"" Align=""Align.Center"" Class=""mt-8""><b>Set Active by Index</b></MudText>
<div class=""d-flex justify-center"">
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(0)"">Index 0</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(1)"" Class=""mx-2"">Index 1</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(2)"">Index 2</MudButton>
</div>
<MudText GutterBottom=""true"" Align=""Align.Center"" Class=""mt-4""><b>Set Active by Instance</b></MudText>
<div class=""d-flex justify-center"">
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(panel01)"">Item One</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(panel02)"" Class=""mx-2"">Item Two</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick=""() => Activate(panel03)"">Item Three</MudButton>
</div>
<MudText GutterBottom=""true"" Align=""Align.Center"" Class=""mt-4""><b>Set Active by TabPanel ID</b></MudText>
<div class=""d-flex justify-center"">
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick='() => Activate(""pn_one"")'>Item One</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick='() => Activate(""pn_two"")' Class=""mx-2"">Item Two</MudButton>
    <MudButton Variant=""@Variant.Filled"" Color=""Color.Primary"" OnClick='() => Activate(""pn_three"")'>Item Three</MudButton>
</div>

@code {
    MudTabs tabs;
    MudTabPanel panel01;
    MudTabPanel panel02;
    MudTabPanel panel03;

    void Activate(int index)
    {
        tabs.ActivatePanel(index);
    }

    void Activate(MudTabPanel panel)
    {
        tabs.ActivatePanel(panel);
    }

    void Activate(object id)
    {
        tabs.ActivatePanel(id);
    }
}";

        public const string TabsSimpleExample = @"<MudTabs Elevation=""2"" Rounded=""true"" ApplyEffectsToContainer=""true"" PanelClass=""pa-6"">
    <MudTabPanel Text=""Tab One"">
        <MudText>Content One</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Tab Two"">
        <MudText>Content Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Tab Three"">
        <MudText>Content Three</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Tab Disabled"" Disabled=""true"">
        <MudText>Content Disabled</MudText>
    </MudTabPanel>
</MudTabs>";

        public const string TabsToolTipExample = @"<MudTabs>
    <MudTabPanel Text=""Item One"" ToolTip=""ToolTip One"" />
    <MudTabPanel Text=""Item Two"" ToolTip=""ToolTip Two"" />
    <MudTabPanel Text=""Item Three"" ToolTip=""ToolTip Three"" />
    <MudTabPanel Text=""Item Disabled"" ToolTip=""ToolTip Disabled"" Disabled=""true"" />
</MudTabs>";

        public const string TabsWithBagdesExample = @"<MudTabs Elevation=""2"" Rounded=""true"" Centered=""true"">
    <MudTabPanel Icon=""@Icons.Material.Filled.Api"" BadgeData='""live""' BadgeColor=""Color.Info"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.Build"" BadgeData='""...""' />
    <MudTabPanel Icon=""@Icons.Material.Filled.BugReport"" BadgeData='""99+""' BadgeColor=""Color.Error"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.AccessTime"" BadgeData='string.Empty' BadgeDot=""true"" BadgeColor=""Color.Success"" />
</MudTabs>

<MudTabs Elevation=""2"" Rounded=""true"" Centered=""true"" Class=""my-6"" Color=""Color.Dark"">
    <MudTabPanel Icon=""@Icons.Material.Filled.Api"" Text=""API"" BadgeData='""!""' BadgeColor=""Color.Error"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.Build"" Text=""Build"" BadgeData=""1"" BadgeColor=""Color.Success"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.BugReport"" Text=""Bugs"" BadgeData=""0"" />
    <MudTabPanel Icon=""@Icons.Material.Filled.AccessTime"" Text=""Timing"" BadgeDot=""true"" BadgeColor=""Color.Error"" />
</MudTabs>

<MudTabs Elevation=""2"" Rounded=""true"" Centered=""true"">
    <MudTabPanel Text=""API"" BadgeData='""S""' />
    <MudTabPanel Text=""Build"" BadgeData='""...""' BadgeColor=""Color.Dark"" />
    <MudTabPanel Text=""Bugs"" BadgeData='""N""' />
    <MudTabPanel Text=""Timing"" BadgeDot=""true"" BadgeColor=""Color.Primary"" />
</MudTabs>";

        public const string TemplateExample = @"";

        public const string DebouncedTextFieldExample = @"<MudTextField @bind-Value=""_normalText"" HelperText=""@_normalText"" Label=""Normal"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Search""/>
<MudTextField Immediate=""true"" @bind-Value=""_immediateText"" HelperText=""@_immediateText"" Label=""Immediate"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Search"" />
<MudTextField DebounceInterval=""500"" OnDebounceIntervalElapsed=""HandleIntervalElapsed"" @bind-Value=""_debouncedText"" HelperText=""@_debouncedText"" Label=""Debounced"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Search"" />

@code {
    string _normalText = ""w"";
    string _immediateText = ""t"";
    string _debouncedText = ""f"";

    void HandleIntervalElapsed(string debouncedText)
    {
        // at this stage, interval has elapsed
    }
}";

        public const string TextFieldAdornmentColorExample = @"<MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Outlined"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.AttachMoney"" AdornmentColor=""Color.Warning"" />
<MudTextField @bind-Value=""Weight"" Label=""Weight"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentText=""Kg"" AdornmentColor=""Color.Info"" />
<MudTextField  @bind-Value=""Search"" Label=""Search"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Search"" AdornmentColor=""Color.Secondary"" />

@code {
    public double? Amount { get; set; }
    public int? Weight { get; set; }
    public string Search { get; set;}
}";

        public const string TextFieldAdornmentsExample = @"<div class=""d-flex"">
    <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Text"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.AttachMoney"" />
    <MudTextField @bind-Value=""Weight"" HelperText=""Weight"" Variant=""Variant.Text"" Adornment=""Adornment.End"" AdornmentText=""Kg"" Class=""mx-8"" />
    <MudTextField @bind-Value=""Password"" Label=""Password"" Variant=""Variant.Text"" InputType=""@PasswordInput"" Adornment=""Adornment.End"" AdornmentIcon=""@PasswordInputIcon"" OnAdornmentClick=""ButtonTestclick"" AdornmentAriaLabel=""Show Password"" />
</div>
<div class=""d-flex"">
    <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Filled"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.AttachMoney"" />
    <MudTextField @bind-Value=""Weight"" HelperText=""Weight"" Variant=""Variant.Filled"" Adornment=""Adornment.End"" AdornmentText=""Kg"" Class=""mx-8"" />
    <MudTextField  @bind-Value=""Password"" Label=""Password""  Variant=""Variant.Filled"" InputType=""@PasswordInput"" Adornment=""Adornment.End"" AdornmentIcon=""@PasswordInputIcon"" OnAdornmentClick=""ButtonTestclick"" AdornmentAriaLabel=""Show Password"" />
</div>
<div class=""d-flex"">
    <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Outlined"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.AttachMoney"" />
    <MudTextField @bind-Value=""Weight"" HelperText=""Weight"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentText=""Kg"" Class=""mx-8"" />
    <MudTextField  @bind-Value=""Password"" Label=""Password"" Variant=""Variant.Outlined"" InputType=""@PasswordInput"" Adornment=""Adornment.End"" AdornmentIcon=""@PasswordInputIcon"" OnAdornmentClick=""ButtonTestclick"" AdornmentAriaLabel=""Show Password"" />
</div>

@code {
    public double? Amount { get; set; }
    public int? Weight { get; set; }
    public string Password { get; set;} = ""superstrong123"";

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}";

        public const string TextFieldAutoGrowExample = @"<MudTextField T=""string"" Label=""AutoGrow"" Variant=""Variant.Text"" Text=""@sampleText"" AutoGrow HelperText=""This field grows when you enter new lines"" />
<MudTextField T=""string"" Label=""AutoGrow with Lines"" Variant=""Variant.Text"" Text=""@sampleText"" AutoGrow Lines=""3"" HelperText=""This field has always at least 3 lines"" />
<MudTextField T=""string"" Label=""AutoGrow with MaxLines"" Variant=""Variant.Text"" Text=""@sampleText"" AutoGrow MaxLines=""4"" HelperText=""This field grows to a maximum of 4 lines"" />

 @code
 {
    string sampleText;

    protected override void OnInitialized()
    {
        sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor."";
    }
}";

        public const string TextFieldBasicExample = @"<MudTextField @bind-Value=""TextValue"" Label=""Standard"" Variant=""Variant.Text""></MudTextField>
<MudTextField @bind-Value=""TextValue"" Label=""Filled"" Variant=""Variant.Filled""></MudTextField>
<MudTextField @bind-Value=""TextValue"" Label=""Outlined"" Variant=""Variant.Outlined""></MudTextField>

@code {
    public string TextValue { get; set; }
}";

        public const string TextFieldBindingExample = @"<MudTextField @bind-Value=""element.Name"" Label=""Name"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""/>
<MudTextField @bind-Value=""element.Mass"" Label=""Mass"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""/>
<MudTextField @bind-Value=""element.Electrons"" Label=""Electrons"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""/>
<MudTextField @bind-Value=""element.Changed"" Format=""yyyy/MM/dd"" Label=""Last Update"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""/>

<div class=""d-flex align-end justify-space-between mud-width-full"">
    <div class=""d-flex flex-column"">
        <MudText><b>Name:</b> @element.Name</MudText>
        <MudText><b>Mass:</b> @element.Mass u</MudText>
        <MudText><b>Electrons:</b> @element.Electrons</MudText>
        <MudText><b>Last Update:</b> @element.Changed.ToShortDateString()</MudText>
    </div>
    <MudButton Variant=""Variant.Filled"" DropShadow=""false"" OnClick=""Reset"">Reset Model</MudButton>
</div>

@code {
    Atom element = new Atom { Name = ""Hydrogen"", Mass = 1.00794, Electrons = 1, Changed=DateTime.Today };

    // A typical POCO
    public class Atom
    {
        public string Name { get; set; }
        public double Mass { get; set; }
        public int Electrons { get; set; }
        public DateTime Changed { get; set; }
    }

    private void Reset()
    {
        element = new Atom { Name = ""Hydrogen"", Mass = 1.00794, Electrons = 1, Changed = DateTime.Today };
        StateHasChanged();
    }

}";

        public const string TextFieldBindingValueTypesExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""intValue"" Label=""Enter an int"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""doubleValue"" Label=""Enter a double"" Format=""F1""/>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""enumValue"" Label=""Enum (Yes|No|Maybe)"" />
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""nullableInt"" HelperText=""Enter an int"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""nullableDouble"" HelperText=""Enter a double"" Format=""F1"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""nullableEnum"" HelperText=""Enum (Yes|No|Maybe)"" />
    </MudItem>
</MudGrid>


@code { 
    int intValue;
    double doubleValue;
    YesNoMaybe enumValue;
    int? nullableInt;
    double? nullableDouble;
    YesNoMaybe? nullableEnum;

    public enum YesNoMaybe { Maybe, Yes, No }
}";

        public const string TextFieldCharacterCountExample = @"<MudTextField T=""string"" Counter=""25"" HelperText=""This field uses Counter prop"" Immediate=""true"" Validation=""@(new Func<string, IEnumerable<string>>(MaxCharacters))"" Label=""Regular"" Variant=""Variant.Text"" />
<MudTextField T=""string"" Counter=""25"" MaxLength=""25"" HelperText=""This field uses Counter and MaxLength prop"" Immediate=""true"" Validation=""@(new Func<string, IEnumerable<string>>(MaxCharacters))"" Label=""Limited"" Variant=""Variant.Text"" />
<MudTextField T=""string"" Counter=""0"" HelperText=""This field has Counter set to 0"" Immediate=""true"" Label=""Counter"" Variant=""Variant.Text"" />
<MudTextField T=""string"" MaxLength=""10"" HelperText=""This field uses MaxLength prop"" Immediate=""true"" Label=""Max Length"" Variant=""Variant.Text"" />

@code {
    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return ""Max 25 characters"";
    }
}";

        public const string TextFieldClearableAndInputTypeExample = @"<MudTextField @bind-Value=""_string"" Label=""Clearable Standard"" Variant=""Variant.Text"" Clearable=""true"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Custom.Brands.MudBlazor"" AdornmentColor=""Color.Primary"" Immediate=""true"" />
<MudTextField @bind-Value=""_string"" Label=""Clearable Filled"" Variant=""Variant.Filled"" Clearable=""true"" Immediate=""true"" />
<MudTextField @bind-Value=""_string"" Label=""Clearable Outlined"" Variant=""Variant.Outlined"" Clearable=""true"" />

@code {
    string _string;
}";

        public const string TextFieldDenseExample = @"<MudTextField @bind-Value=""TextValue"" Label=""Standard"" Variant=""Variant.Text"" Margin=""Margin.Dense""></MudTextField>
<MudTextField @bind-Value=""TextValue"" Label=""Filled"" Variant=""Variant.Filled"" Margin=""Margin.Dense""></MudTextField>
<MudTextField @bind-Value=""TextValue"" Label=""Outlined"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""></MudTextField>

@code {
    public string TextValue { get; set; }
}";

        public const string TextFieldFocusExample = @"<MudTextField @ref=""multilineReference"" T=""string"" Label=""Manual focus"" Variant=""Variant.Filled"" Text=""@sampleText"" Lines=""3"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.CenterFocusWeak"" OnAdornmentClick=""@(() => multilineReference.FocusAsync())""  />
<MudTextField @ref=""singleLineReference"" T=""string"" Label=""Manual focus"" Variant=""Variant.Filled"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.CenterFocusWeak"" OnAdornmentClick=""@(() => singleLineReference.FocusAsync())"" />

@code
{
    private MudTextField<string> multilineReference;
    private MudTextField<string> singleLineReference;

    string sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."";
}";

        public const string TextFieldFormPropsDisabledExample = @"<MudTextField @bind-Value=""Disabled"" Label=""Disabled"" Variant=""Variant.Text"" Disabled=""true"" />
<MudTextField @bind-Value=""Disabled"" Label=""Disabled"" Variant=""Variant.Filled"" Disabled=""true"" />
<MudTextField @bind-Value=""Disabled"" Label=""Disabled"" Variant=""Variant.Outlined"" Disabled=""true"" />

@code {
    public string Disabled { get; set; }
}";

        public const string TextFieldFormPropsHelperTextExample = @"<MudTextField @bind-Value=""HelperText"" Label=""With Helper"" HelperText=""Some helping Text"" Variant=""Variant.Text"" />
<MudTextField @bind-Value=""HelperText"" Label=""With Helper"" HelperText=""Some helping Text"" Variant=""Variant.Filled"" />
<MudTextField @bind-Value=""HelperText"" Label=""With Helper"" HelperText=""Some helping Text"" Variant=""Variant.Outlined"" />

@code {
    public string HelperText { get; set; }
}";

        public const string TextFieldFormPropsReadOnlyExample = @"<MudTextField @bind-Value=""ReadOnly"" Label=""Read Only"" ReadOnly=""true"" Variant=""Variant.Text"" />
<MudTextField @bind-Value=""ReadOnly"" Label=""Read Only"" ReadOnly=""true"" Variant=""Variant.Filled"" />
<MudTextField @bind-Value=""ReadOnly"" Label=""Read Only"" ReadOnly=""true"" Variant=""Variant.Outlined"" />

@code {
    public string ReadOnly { get; set; } = ""Can't change me"";
}";

        public const string TextFieldHelperTextExample = @"<MudTextField T=""string"" Label=""OnFocus Helper"" HelperText=""Some helping text"" HelperTextOnFocus=""true"" Variant=""Variant.Text"" />
<MudTextField T=""string"" Label=""With Helper"" HelperText=""Some helping text"" Variant=""Variant.Text"" />";

        public const string TextFieldInputsExample = @"<MudInput Value=""@(""Basic Input"")"" />
<MudInput T=""string"" Placeholder=""Placeholder"" />
<MudInput Value=""@(""Disabled"")"" Disabled=""true"" />
<MudInput Value=""@(""Error"")"" Error=""true"" />";

        public const string TextFieldMultilineExample = @"<MudTextField T=""string"" Label=""Multiline"" Variant=""Variant.Text"" Text=""@sampleText"" Lines=""5"" />
<MudTextField T=""string"" Label=""Filled"" Variant=""Variant.Filled"" Text=""@sampleText"" Lines=""3"" />
<MudTextField T=""string"" Label=""Outlined"" Variant=""Variant.Outlined"" Text=""@sampleText"" Lines=""3"" />


@code
{
    string sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."";
}";

        public const string TextFieldNativeInputsExample = @"<MudTextField T=""string"" Label=""Color""  InputType=""InputType.Color"" />
<MudTextField T=""DateTime?"" Format=""yyyy-MM-dd"" Label=""Date""  InputType=""InputType.Date""/>
<MudTextField T=""DateTime?"" Format=""s"" Label=""DateTimeLocal"" InputType=""InputType.DateTimeLocal""/>
<MudTextField T=""string"" Label=""Month"" InputType=""InputType.Month""/>
<MudTextField T=""string"" Label=""Time"" InputType=""InputType.Time""/>
<MudTextField T=""string"" Label=""Week"" InputType=""InputType.Week""/>";

        public const string TextFieldSelectExample = @"<MudTextField @ref=""multilineReference"" T=""string"" Label=""Multiline Select"" Lines=""3"" Variant=""Variant.Outlined"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Api"" OnAdornmentClick=""@(() => multilineReference.SelectAsync())"" />
<MudTextField @ref=""singleLineReference"" T=""string"" Label=""Single Select"" Variant=""Variant.Outlined"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Api"" OnAdornmentClick=""@(() => singleLineReference.SelectAsync())"" />

@code
{
    private MudTextField<string> multilineReference;
    private MudTextField<string> singleLineReference;

    string sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."";
}";

        public const string TextFieldSelectRangeExample = @"<MudTextField @ref=""multilineReference"" T=""string"" Label=""Multiline Select"" Lines=""3"" Variant=""Variant.Outlined"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Api"" OnAdornmentClick=""@(() => multilineReference.SelectRangeAsync(5, 10))"" />
<MudTextField @ref=""singleLineReference"" T=""string"" Label=""Single Select"" Variant=""Variant.Outlined"" Text=""@sampleText"" Adornment=""Adornment.End"" AdornmentIcon=""@Icons.Material.Filled.Api"" OnAdornmentClick=""@(() => singleLineReference.SelectRangeAsync(5, 10))"" />

@code
{
    private MudTextField<string> multilineReference;
    private MudTextField<string> singleLineReference;

    string sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.""; 
}";

        public const string TextFieldShrinkLabelExample = @"<MudTextField ShrinkLabel @bind-Value=""TextValue"" Label=""Standard"" Variant=""Variant.Text""></MudTextField>
<MudTextField ShrinkLabel @bind-Value=""TextValue"" Label=""Filled"" Variant=""Variant.Filled""></MudTextField>
<MudTextField ShrinkLabel @bind-Value=""TextValue"" Label=""Outlined"" Variant=""Variant.Outlined""></MudTextField>

@code {
    public string TextValue { get; set; }
}";

        public const string TextFieldTypoExample = @"<MudTextField T=""string"" Text=""Lorem ipsum dolor"" Label=""Typo.subtitle1"" Typo=""Typo.subtitle1""></MudTextField>
<MudTextField T=""string"" Text=""Lorem ipsum dolor"" Label=""Typo.caption"" Typo=""Typo.caption""></MudTextField>
<MudTextField T=""string"" Text=""Lorem ipsum dolor"" Label=""Typo.h5"" Typo=""Typo.h5""></MudTextField>";

        public const string TimePickerActionButtonsExample = @"<MudTimePicker @ref=""_picker"" Label=""With action buttons"" AutoClose=""@_autoClose"">
    <PickerActions>
        <MudButton Class=""mr-auto align-self-start"" OnClick=""@(() => _picker.ClearAsync())"">Clear</MudButton>
        <MudButton OnClick=""@(() => _picker.CloseAsync(false))"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""@(() => _picker.CloseAsync())"">Ok</MudButton>
    </PickerActions>
</MudTimePicker>
<MudSwitch @bind-Value=""_autoClose"" Color=""Color.Secondary"">AutoClose</MudSwitch>

@code{
    private MudTimePicker _picker;
    private readonly TimeSpan? _time = new TimeSpan(00, 45, 00);
    private bool _autoClose;
}";

        public const string TimePickerBasicUsageExample = @"<MudTimePicker Label=""12 hours"" AmPm=""true"" @bind-Time=""_time"" />
<MudTimePicker Label=""12 hours custom format"" AmPm=""true"" TimeFormat=""h:mm tt"" @bind-Time=""_time"" />
<MudTimePicker Label=""24 hours"" @bind-Time=""_time"" />
<MudTimePicker Label=""24 hours (editable)"" Editable=""true"" @bind-Time=""_time"" />

@code{
    private TimeSpan? _time = new TimeSpan(00, 45, 00);
}";

        public const string TimePickerColorExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Success"" Rounded=""true"" Text=""03:37 PM"" AmPm=""true"" />
<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" Rounded=""true"" Text=""13:37""/>";

        public const string TimePickerDialogExample = @"<MudTimePicker PickerVariant=""PickerVariant.Dialog"" Label=""12 hours"" AmPm=""true"" @bind-Time=""_time"" />
<MudTimePicker PickerVariant=""PickerVariant.Dialog"" Label=""24 hours"" @bind-Time=""_time"" />

@code{
    private TimeSpan? _time = new TimeSpan(00, 45, 00);
}";

        public const string TimePickerElevationExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Success"" Rounded=""true"" Elevation=""1"" Text=""03:37 PM"" AmPm=""true"" />
<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" Rounded=""true"" Elevation=""12"" Text=""13:37"" />";

        public const string TimePickerKeyboardNavigationExample = @"<MudTimePicker Label=""12 hours"" AmPm=""true"" @bind-Time=""_time"" />
<MudTimePicker Label=""24 hours"" @bind-Time=""_time"" />
<MudTimePicker Label=""With action buttons"">
    <PickerActions>
        <MudButton Class=""mr-auto align-self-start"" OnClick=""@(() => context.ClearAsync())"">Clear</MudButton>
        <MudButton OnClick=""@(() => context.CloseAsync(false))"">Cancel</MudButton>
        <MudButton Color=""Color.Primary"" OnClick=""@(() => context.CloseAsync())"">Ok</MudButton>
    </PickerActions>
</MudTimePicker>

@code{
    private TimeSpan? _time = new TimeSpan(00, 45, 00);
}";

        public const string TimePickerReadOnlyExample = @"<MudTimePicker Label=""12 hours"" AmPm=""true"" @bind-Time=""_time"" ReadOnly=""@_readOnly"" />
<MudSwitch @bind-Value=""_readOnly"" Color=""Color.Tertiary"">ReadOnly</MudSwitch>

@code{
    private TimeSpan? _time = new TimeSpan(00, 45, 00);
    private bool _readOnly;

}";

        public const string TimePickerStaticExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" @bind-Time=""_time"" AmPm=""true"" />
<MudHidden Breakpoint=""@Breakpoint.Xs"">
    <MudTimePicker PickerVariant=""PickerVariant.Static"" Orientation=""Orientation.Landscape"" @bind-Time=""_time"" />
</MudHidden>

@code{
    private TimeSpan? _time = new TimeSpan(13, 37, 00);
}";

        public const string TimePickerStepExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Primary"" MinuteSelectionStep=""1"" Text=""03:37 PM"" OpenTo=""OpenTo.Minutes"" />
<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" MinuteSelectionStep=""5"" Text=""03:35 PM"" OpenTo=""OpenTo.Minutes"" />
<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Tertiary"" MinuteSelectionStep=""15"" Text=""03:45 PM"" OpenTo=""OpenTo.Minutes"" />";

        public const string TimePickerTimeEditModeExample = @"<MudTimePicker Label=""Normal"" @bind-Time=""_time"" TimeEditMode=""TimeEditMode.Normal"" />
<MudTimePicker Label=""OnlyHours"" @bind-Time=""_time"" TimeEditMode=""TimeEditMode.OnlyHours"" />
<MudTimePicker Label=""OnlyMinutes"" @bind-Time=""_time"" TimeEditMode=""TimeEditMode.OnlyMinutes"" />

@code{

    private TimeSpan? _time = new TimeSpan(13, 37, 00);
}";

        public const string TimePickerViewsExample = @"<MudTimePicker Label=""Minutes"" Text=""13:37"" OpenTo=""OpenTo.Minutes"" />";

        public const string TimelineAlignExample = @"<MudSelect T=""TimelineAlign"" @bind-Value=""_timelineAlign"" Label=""Timeline Align"" Dense=""true"" Variant=""Variant.Outlined"">
    <MudSelectItem T=""TimelineAlign"" Value=""TimelineAlign.Start"">Start</MudSelectItem>
    <MudSelectItem T=""TimelineAlign"" Value=""TimelineAlign.Default"">Default</MudSelectItem>
    <MudSelectItem T=""TimelineAlign"" Value=""TimelineAlign.End"">End</MudSelectItem>
</MudSelect>

<MudTimeline TimelineAlign=""_timelineAlign"">
    <MudTimelineItem Color=""Color.Dark"" Elevation=""25"">
        <ItemOpposite>
            <MudText Color=""Color.Dark"" Typo=""Typo.h6"">Aug 2020</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudPaper Elevation=""0"" Class=""mt-n1"">
                <MudText Color=""Color.Dark"" Typo=""Typo.h6"" GutterBottom=""true"">MudBlazor Emerges</MudText>
                <MudText Typo=""Typo.body2"">A repository pops up on GitHub named MudBlazor.</MudText>
                <MudText Typo=""Typo.body2"">The development has already started and the most common components can be found already.</MudText>
            </MudPaper>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Primary"" Elevation=""25"" TimelineAlign=""TimelineAlign.End"">
        <ItemOpposite>
            <MudText Color=""Color.Primary"" Typo=""Typo.h6"">Oct 2020</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudPaper Elevation=""0"" Class=""mt-n1"">
                <MudText Color=""Color.Primary"" Typo=""Typo.h6"" GutterBottom=""true"">MudBlazor Unleashed!</MudText>
                <MudText Typo=""Typo.body2"">The first version is released and uploaded as v1.0.7.</MudText>
            </MudPaper>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Secondary"" Elevation=""25"">
        <ItemOpposite>
            <MudText Color=""Color.Secondary"" Typo=""Typo.h6"" GutterBottom=""true"">Nov 2020</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudPaper Elevation=""0"" Class=""mt-n1"">
                <MudText Color=""Color.Secondary"" Typo=""Typo.h6"" GutterBottom=""true"">First Minor</MudText>
                <MudText Typo=""Typo.body2"">MudBlazor gets its first minor with version 1.1.0.</MudText>
                <MudText Typo=""Typo.body2"">TimerPicker, AutoComplete and Charts join the library as well as T versions of our inputs and selects.</MudText>
            </MudPaper>
        </ItemContent>
    </MudTimelineItem>
</MudTimeline>

@code{
    private TimelineAlign _timelineAlign { get; set; } = TimelineAlign.Start;
  
}";

        public const string TimelineBasicExample = @"<MudTimeline>
    <MudTimelineItem>
        <MudText>Item A</MudText>
    </MudTimelineItem>
    <MudTimelineItem>
        <MudText Align=""Align.End"">Item B</MudText>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Primary"">
        <MudText>Item C</MudText>
    </MudTimelineItem>
</MudTimeline>";

        public const string TimelineChatExample = @"<MudTimeline>
    <MudTimelineItem Color=""Color.Dark"" Elevation=""25"" TimelineAlign=""TimelineAlign.End"" Style=""width: 100%;"">
        <MudChat ChatPosition=""ChatBubblePosition.Start"">
            <MudChatHeader Name=""Obi-Wan Kenobi"" Time=""12:45"" />
            <MudAvatar>
                <MudImage Src=""images/jonny.jpg""/>
            </MudAvatar>
            <MudChatBubble>You were the Chosen One!</MudChatBubble>
            <MudChatFooter Text=""Delivered"" />
        </MudChat>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Primary"" Elevation=""25"" TimelineAlign=""TimelineAlign.Start"">
        <MudChat ChatPosition=""ChatBubblePosition.End"">
            <MudChatHeader Name=""Anakin"" Time=""12:46"" />
            <MudAvatar>
                <MudImage Src=""images/toiletvisit.jpg""/>
            </MudAvatar>
            <MudChatBubble>I hate you!</MudChatBubble>
            <MudChatFooter Text=""Seen at 12:46"" />
        </MudChat>
    </MudTimelineItem>
</MudTimeline>";

        public const string TimelineDotsExample = @"<MudGrid>
    <MudItem xs=""12"" md=""8"" Class=""my-auto"">
        <MudTimeline Reverse=""true"">
            <MudTimelineItem>
                <MudText Align=""Align.End"">Static dot</MudText>
            </MudTimelineItem>
            <MudTimelineItem Color=""@DotColor"" Size=""@DotSize"" Variant=""@DotVariant"" Elevation=""@DotElevation"" HideDot=""@HideDot"">
                <ItemDot>
                    @if(DotConfig == 1)
                    {
                        <MudIcon Size=""@DotSize"" Icon=""@Icons.Custom.Brands.MudBlazor""/>
                    }
                    else if(DotConfig == 2)
                    {
                        <MudAvatar Size=""@DotSize"">
                            <MudImage Src=""images/mony.jpg"" />
                        </MudAvatar>
                    }
                </ItemDot>
            </MudTimelineItem>
            <MudTimelineItem>
                <MudText Align=""Align.End"">Static dot</MudText>
            </MudTimelineItem>
        </MudTimeline>
    </MudItem>
    <MudItem xs=""12"" md=""4"">
        <MudPaper Class=""pa-4"" Elevation=""0"">
            <MudText Typo=""Typo.h6"">Dot Options</MudText>
            <MudSelect Label=""Color"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""DotColor"" Class=""mt-4"">
                <MudSelectItem T=""Color"" Value=""Color.Default"">Default</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Primary"">Primary</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Secondary"">Secondary</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Tertiary"">Tertiary</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Info"">Info</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Success"">Success</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Warning"">Warning</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Error"">Error</MudSelectItem>
                <MudSelectItem T=""Color"" Value=""Color.Dark"">Dark</MudSelectItem>
            </MudSelect>
            <MudSelect Label=""Size"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""DotSize"" Class=""mt-4"">
                <MudSelectItem T=""Size"" Value=""Size.Small"">Small</MudSelectItem>
                <MudSelectItem T=""Size"" Value=""Size.Medium"">Medium</MudSelectItem>
                <MudSelectItem T=""Size"" Value=""Size.Large"">Large</MudSelectItem>
            </MudSelect>
            <MudSelect Label=""Variant"" Dense=""true"" Margin=""Margin.Dense"" @bind-Value=""DotVariant"" Class=""mt-4"">
                <MudSelectItem T=""Variant"" Value=""Variant.Outlined"">Outlined</MudSelectItem>
                <MudSelectItem T=""Variant"" Value=""Variant.Filled"">Filled</MudSelectItem>
            </MudSelect>
            <MudSlider @bind-Value=""DotElevation"" Step=""1"" Min=""0"" Max=""25"" Class=""mt-2"">Dot Elevation</MudSlider>
            <MudRadioGroup T=""int"" ValueChanged=""DotConfigChanged"">
                <MudRadio Value=""0"" Color=""Color.Primary"">Default</MudRadio>
                <MudRadio Value=""1"" Color=""Color.Secondary"">Icon</MudRadio>
                <MudRadio Value=""2"" Color=""Color.Tertiary"">Avatar</MudRadio>
                <MudRadio Value=""3"" Color=""Color.Default"">Hide</MudRadio>
            </MudRadioGroup>
        </MudPaper>
    </MudItem>
</MudGrid>


@code{
    public Size DotSize { get; set; } = Size.Medium;
    public Color DotColor { get; set; } = Color.Primary;
    public Variant DotVariant { get; set; } = Variant.Outlined;
    public int DotElevation { get; set; } = 1;
    public bool HideDot { get; set; }
    public int DotConfig;

    void DotConfigChanged(int value)
    {
        switch(value)
        {
            case 3:
                DotConfig = value;
                HideDot = true;
                break;
            default:
                DotConfig = value;
                HideDot = false;
                break;
        }
    }
}";

        public const string TimelineDotsStyleExample = @"<MudItem>
    <MudTimeline Reverse=""true"">
        <MudTimelineItem>
            <MudText Align=""Align.End"">Static dot</MudText>
        </MudTimelineItem>
        <MudTimelineItem DotStyle=""background-color: #ff0000"">
            <MudText Align=""Align.End"">Red dot</MudText>
        </MudTimelineItem>
        <MudTimelineItem>
            <MudText Align=""Align.End"">Static dot</MudText>
        </MudTimelineItem>
    </MudTimeline>
</MudItem>";

        public const string TimelineItemAlignExample = @"<MudTimeline>
    <MudTimelineItem Color=""Color.Info"">
        <MudText Typo=""Typo.button"">Packaging Process Started</MudText>
        <MudText Typo=""Typo.body2"" Class=""mud-text-secondary"">Yesterday: 16:33</MudText>
    </MudTimelineItem>
    <MudTimelineItem TimelineAlign=""TimelineAlign.End"">
        <MudText Typo=""Typo.body2"">Packaging complete</MudText>
        <MudText Typo=""Typo.body2"" Class=""mud-text-secondary"">Yesterday: 17:10</MudText>
    </MudTimelineItem>
    <MudTimelineItem TimelineAlign=""TimelineAlign.End"">
        <MudText Typo=""Typo.body2"">Waiting for pickup</MudText>
        <MudText Typo=""Typo.body2"" Class=""mud-text-secondary"">Yesterday: 17:15</MudText>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Error"">
        <MudAlert Severity=""Severity.Error"">Package missed last pickup time.</MudAlert>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Success"">
        <MudText Typo=""Typo.button"">Package picked up by driver</MudText>
        <MudText Typo=""Typo.body2"" Class=""mud-text-secondary"">Today: 17:00</MudText>
    </MudTimelineItem>
    <MudTimelineItem TimelineAlign=""TimelineAlign.End"">
        <MudText Typo=""Typo.button"">Package In Transit</MudText>
    </MudTimelineItem>
</MudTimeline>";

        public const string TimelineItemModifiersExample = @"<MudSwitch @bind-Value=""Outlined"" Label=""Outlined Card"" Color=""Color.Primary"" />
<MudSwitch @bind-Value=""Modifiers"" Label=""Modifiers"" Color=""Color.Secondary"" />

<MudTimeline TimelinePosition=""TimelinePosition.Start"" Modifiers=""@Modifiers"">
    <MudTimelineItem Size=""Size.Medium"" Color=""Color.Info"" Elevation=""@(Outlined ? 0 : 25)"">
        <MudCard Outlined=""@Outlined"" Elevation=""25"">
            <MudCardContent>
                <MudText Typo=""Typo.h6"">Kopparberg</MudText>
                <MudText Typo=""Typo.body2"">Kopparberg is a locality and the seat of Ljusnarsberg, Örebro County, Sweden, with 4,200 inhabitants in 2015.</MudText>
                <MudText Typo=""Typo.body2"">It is famous for Kopparberg Cider, now one of the best selling ciders in the UK and worldwide.</MudText>
            </MudCardContent>
        </MudCard>
    </MudTimelineItem>
</MudTimeline>

@code{
    public bool Modifiers { get; set; } = true;
    public bool Outlined { get; set; }
}";

        public const string TimelineOppositeExample = @"<MudTimeline>
    <MudTimelineItem Color=""Color.Info"" Size=""Size.Small"">
        <ItemOpposite>
            <MudText Color=""Color.Info"" Typo=""Typo.h5"">1970</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudText Color=""Color.Info"" Typo=""Typo.h6"" GutterBottom=""true"">Atom Towns</MudText>
            <MudText>Construction of the town of Pripyat, one of 9 “atom towns” begins, to be inhabited by future employees of the nuclear power plants.</MudText>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Success"" Size=""Size.Small"">
        <ItemOpposite>
            <MudText Color=""Color.Success"" Typo=""Typo.h5"">1977</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudText Color=""Color.Success"" Typo=""Typo.h6"" GutterBottom=""true"">Operational</MudText>
            <MudText>The first of the Chernobyl Nuclear Power Plants four reactors is ready to operate followed by number 2 in 1978.</MudText>
        </ItemContent>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Error"" Size=""Size.Small"">
        <ItemOpposite>
            <MudText Color=""Color.Error"" Typo=""Typo.h5"">1979</MudText>
        </ItemOpposite>
        <ItemContent>
            <MudText Color=""Color.Error"" Typo=""Typo.h6"" GutterBottom=""true"">Pripyat</MudText>
            <MudText>Pripyat officially proclaimed as a city.<br />The Chernobyl Atomic Power Station reaches its first 10 billion kilowatt-hours of electical output.</MudText>
        </ItemContent>
    </MudTimelineItem>
</MudTimeline>";

        public const string TimelineOrientationPositionExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""5"">
        <MudSelect T=""TimelineOrientation"" ValueChanged=""OnOrientationChange"" Label=""TimelineOrientation"" Dense=""true"" Variant=""Variant.Outlined"">
            <MudSelectItem T=""TimelineOrientation"" Value=""TimelineOrientation.Vertical"">Vertical</MudSelectItem>
            <MudSelectItem T=""TimelineOrientation"" Value=""TimelineOrientation.Horizontal"">Horizontal</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""5"">
        <MudSelect T=""TimelinePosition"" @bind-Value=""_position"" Label=""TimelinePosition"" Dense=""true"" Variant=""Variant.Outlined"">
            @if(_orientation == TimelineOrientation.Vertical)
            {
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Start"">Start</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Left"">Left</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Alternate"">Alternate</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Right"">Right</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.End"">End</MudSelectItem>
            }
            else if(_orientation == TimelineOrientation.Horizontal)
            {
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Top"">Top</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Alternate"">Alternate</MudSelectItem>
                <MudSelectItem T=""TimelinePosition"" Value=""TimelinePosition.Bottom"">Bottom</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""2"">
        <MudSwitch Label=""Reverse"" @bind-Value=""_reverse"" Disabled=""IsSwitchDisabled()"" Color=""Color.Primary"" />
    </MudItem>
</MudGrid>

<MudTimeline TimelineOrientation=""_orientation"" TimelinePosition=""_position"" Reverse=""_reverse"">
    <MudTimelineItem Color=""Color.Success"" Variant=""Variant.Filled"">
        <ItemContent>
            <MudAlert Severity=""Severity.Success"">The reactor is running at optimum temperature</MudAlert>
        </ItemContent>
        <ItemOpposite>
            <MudText Color=""Color.Success"">13:37</MudText>
        </ItemOpposite>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Warning"" Variant=""Variant.Filled"">
        <ItemContent>
            <MudAlert Severity=""Severity.Warning"">The reactor temperature exceeds the optimal range</MudAlert>
        </ItemContent>
        <ItemOpposite>
            <MudText Color=""Color.Warning"">14:08</MudText>
        </ItemOpposite>
    </MudTimelineItem>
    <MudTimelineItem Color=""Color.Error"" Variant=""Variant.Filled"">
        <ItemContent>
            <MudAlert Severity=""Severity.Error"">Meltdown is imminent</MudAlert>
        </ItemContent>
        <ItemOpposite>
            <MudText Color=""Color.Error"">15:00</MudText>
        </ItemOpposite>
    </MudTimelineItem>
</MudTimeline>


@code {
    private TimelinePosition _position { get; set; } = TimelinePosition.Start;
    private TimelineOrientation _orientation { get; set; } = TimelineOrientation.Vertical;
    private bool _reverse { get; set; }

    private void OnOrientationChange(TimelineOrientation value)
    {
        _orientation = value;
        switch (value)
        {
            case TimelineOrientation.Vertical:
                if (_position is TimelinePosition.Top or TimelinePosition.Bottom)
                    _position = TimelinePosition.Start;
                break;
            case TimelineOrientation.Horizontal:
                if (_position is TimelinePosition.Start or TimelinePosition.Left or TimelinePosition.Right or TimelinePosition.End)
                    _position = TimelinePosition.Top;
                break;
        }
    }

    bool IsSwitchDisabled()
    {
        if (_position == TimelinePosition.Alternate)
            return false;
        else
            _reverse = false;
        return true;
    }
}";

        public const string ToggleBasicsExample = @"<MudStack>
    <MudStack Row Class=""flex-wrap"">
        <MudStack Spacing=""16"" AlignItems=""@AlignItems.Start"">
            <MudToggleGroup T=""string"" Outlined=""@_outlined"" Delimiters=""@_delimiters"" Size=""@_size"" Color=""@_color"" CheckMark=""@_checkMark"" FixedContent=""@_fixedContent"" Disabled=""@_disabled"" Style=""width: 30rem"">
                <MudToggleItem Value=""@(""One"")"" />
                <MudToggleItem Value=""@(""Two"")"" />
                <MudToggleItem Value=""@(""Three"")"" />
            </MudToggleGroup>

            <MudToggleGroup T=""string"" Outlined=""@_outlined"" Delimiters=""@_delimiters"" Size=""@_size"" Color=""@_color"" CheckMark=""@_checkMark"" FixedContent=""@_fixedContent"" Disabled=""@_disabled"">
                <MudToggleItem Value=""@(""left"")"">
                    <MudIcon Icon=""@Icons.Material.Filled.FormatAlignLeft"" />
                </MudToggleItem>
                <MudToggleItem Value=""@(""center"")"">
                    <MudIcon Icon=""@Icons.Material.Filled.FormatAlignCenter"" />
                </MudToggleItem>
                <MudToggleItem Value=""@(""right"")"">
                    <MudIcon Icon=""@Icons.Material.Filled.FormatAlignRight"" />
                </MudToggleItem>
                <MudToggleItem Value=""@(""justify"")"">
                    <MudIcon Icon=""@Icons.Material.Filled.FormatAlignJustify"" />
                </MudToggleItem>
            </MudToggleGroup>
        </MudStack>

        <MudSpacer />

        <MudToggleGroup T=""string"" Vertical Outlined=""@_outlined"" Delimiters=""@_delimiters"" Size=""@_size"" Color=""@_color"" CheckMark=""@_checkMark"" FixedContent=""@_fixedContent"" Disabled=""@_disabled"">
            <MudToggleItem Value=""@(""left"")"">
                <MudIcon Icon=""@Icons.Material.Filled.FormatAlignLeft"" />
            </MudToggleItem>
            <MudToggleItem Value=""@(""center"")"">
                <MudIcon Icon=""@Icons.Material.Filled.FormatAlignCenter"" />
            </MudToggleItem>
            <MudToggleItem Value=""@(""right"")"">
                <MudIcon Icon=""@Icons.Material.Filled.FormatAlignRight"" />
            </MudToggleItem>
            <MudToggleItem Value=""@(""justify"")"">
                <MudIcon Icon=""@Icons.Material.Filled.FormatAlignJustify"" />
            </MudToggleItem>
        </MudToggleGroup>
    </MudStack>

    <MudStack Row Class=""flex-wrap align-center"">
        <MudSelect @bind-Value=""_size"">
            @foreach (var size in Enum.GetValues(typeof(Size)).Cast<Size>())
            {
                <MudSelectItem Value=""@size"">@size</MudSelectItem>
            }
        </MudSelect>

        <MudSelect @bind-Value=""_color"">
            @foreach (var color in Enum.GetValues(typeof(Color)).Cast<Color>())
            {
                <MudSelectItem Value=""@color"">@color</MudSelectItem>
            }
        </MudSelect>

        <MudCheckBox @bind-Value=""_checkMark"" Label=""CheckMark"" />
        <MudCheckBox @bind-Value=""_fixedContent"" Label=""FixedContent"" />
        <MudCheckBox @bind-Value=""_outlined"" Label=""Outlined"" />
        <MudCheckBox @bind-Value=""_delimiters"" Label=""Delimiters"" />
        <MudCheckBox @bind-Value=""_disabled"" Label=""Disabled"" />
    </MudStack>
</MudStack>

@code {
    Size _size = Size.Medium;
    Color _color = Color.Primary;
    bool _checkMark = false;
    bool _outlined = true;
    bool _delimiters = true;
    bool _fixedContent = false;
    bool _disabled = false;
}";

        public const string ToggleCustomContentExample = @"<MudToggleGroup  Class=""mud-width-full"" T=""string"" SelectedClass=""black white-text"">
    <MudToggleItem Value=""@(""Basic Edition"")"">
        <div class=""mud-width-full mud-height-full"">
            <div class=""d-flex align-center justify-space-between flex-wrap"">
                <MudText Class=""ellipsis"">Indie Developer</MudText>
                <MudChip Color=""@(context ? Color.Success : Color.Primary)"" Icon=""@(context ? Icons.Material.Filled.Check : """")"">Basic</MudChip>
            </div>
            <MudText Typo=""Typo.subtitle2"">Perfect for lone wolves</MudText>
        </div>
    </MudToggleItem>
    <MudToggleItem Value=""@(""Pro Edition"")"">
        <div class=""mud-width-full mud-height-full"">
            <div class=""d-flex align-center justify-space-between flex-wrap"">
                <MudText Class=""ellipsis"">Small Team</MudText>
                <MudChip Color=""@(context ? Color.Success : Color.Primary)"" Icon=""@(context ? Icons.Material.Filled.Check : """")"">Pro</MudChip>
            </div>
            <MudText Typo=""Typo.subtitle2"">Up to five devs and two interns</MudText>
        </div>
    </MudToggleItem>
    <MudToggleItem Value=""@(""Enterprise Edition"")"">
        <div class=""mud-width-full mud-height-full"">
            <div class=""d-flex align-center justify-space-between flex-wrap"">
                <MudText Class=""ellipsis"">Corporation</MudText>
                <MudChip Color=""@(context ? Color.Success : Color.Primary)"" Icon=""@(context ? Icons.Material.Filled.Check : """")"">Enterprise</MudChip>
            </div>
            <MudText Typo=""Typo.subtitle2"">Unlimited edition</MudText>
        </div>
    </MudToggleItem>
</MudToggleGroup>

<style>
    .ellipsis {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis
    }
</style>";

        public const string ToggleCustomSelectionStyleExample = @"<MudStack>
    <MudToggleGroup T=""string"" SelectedClass=""@_style"" @bind-Value=""_value"">
        <MudToggleItem Value=""@(""Antimatter"")"" />
        <MudToggleItem Value=""@(""Dark Matter"")"" />
        <MudToggleItem Value=""@(""Dark Energy"")"" />
    </MudToggleGroup>

    <MudSelect T=""string"" @bind-Value=""_style"" Variant=""Variant.Outlined"">
        <MudSelectItem Value=""@(""mud-theme-primary"")"" />
        <MudSelectItem Value=""@(""mud-theme-secondary"")"" />
        <MudSelectItem Value=""@(""custom-gradient"")"" />
        <MudSelectItem Value=""@(""custom-striped"")"" />
    </MudSelect>
</MudStack>

<style>
    .custom-gradient {
        background-image: linear-gradient(to right top, #051937, #004d7a, #008793, #00bf72, #a8eb12);
        color: white !important;
    }

    .custom-striped {
        background: repeating-linear-gradient( 45deg, #606dbc, #606dbc 10px, #465298 10px, #465298 20px );
        color: white !important;
    }
</style>

@code {
    private string _style = ""custom-striped"";
    private string _value = ""Antimatter"";
}";

        public const string ToggleSelectionsExample = @"<MudStack>
    <MudStack>
        <MudText>Single Selection</MudText>
        <MudText>Value: @_value1</MudText>
        <MudToggleGroup T=""string"" SelectionMode=""SelectionMode.SingleSelection"" @bind-Value=""_value1"" Color=""Color.Primary"" CheckMark FixedContent>
            <MudToggleItem Value=""@(""Yes"")"" Text=""Yes"" />
            <MudToggleItem Value=""@(""No"")"" Text=""No"" />
            <MudToggleItem Value=""@(""Don't know"")"" Text=""Don't know"" />
        </MudToggleGroup>
    </MudStack>

    <MudDivider />

    <MudStack>
        <MudText>Multi Selection</MudText>
        <MudText>Values: @string.Join("", "", _value2 ?? new List<string>())</MudText>
        <MudToggleGroup T=""string"" SelectionMode=""SelectionMode.MultiSelection"" @bind-Values=""_value2"" Color=""Color.Secondary"" CheckMark>
            <MudToggleItem Value=""@(""Extra Bag"")"" UnselectedIcon=""@Icons.Material.Filled.CheckBoxOutlineBlank"" SelectedIcon=""@Icons.Material.Filled.CheckBox""/>
            <MudToggleItem Value=""@(""Vegan Menu"")"" UnselectedIcon=""@Icons.Material.Filled.CheckBoxOutlineBlank"" SelectedIcon=""@Icons.Material.Filled.CheckBox"" />
            <MudToggleItem Value=""@(""Carbon Offset"")"" UnselectedIcon=""@Icons.Material.Filled.CheckBoxOutlineBlank"" SelectedIcon=""@Icons.Material.Filled.CheckBox"" />
        </MudToggleGroup>
    </MudStack>

    <MudDivider />

    <MudStack>
        <MudText>Toggle Selection</MudText>
        <MudText>Value: @(_value3 == null ? ""null"" : _value3.ToString())</MudText>
        <MudToggleGroup T=""int?"" SelectionMode=""SelectionMode.ToggleSelection"" @bind-Value=""_value3"" Color=""Color.Tertiary"" CheckMark>
            <MudToggleItem Value=""@((int?)1)"" Text=""Coffee (1)"" />
            <MudToggleItem Value=""@((int?)2)"" Text=""Tee (2)"" />
            <MudToggleItem Value=""@((int?)3)"" Text=""Water (3)"" />
        </MudToggleGroup>
    </MudStack>
</MudStack>

@code {
    private string _value1 = ""Yes"";
    private IEnumerable<string> _value2 = new []{ ""Vegan Menu"", ""Carbon Offset""};
    private int? _value3;
}";

        public const string ToggleIconButtonEventCallbackExample = @"<MudToggleIconButton Toggled=""AlarmOn"" 
                     ToggledChanged=""OnToggledChanged""
                     Icon=""@Icons.Material.Filled.AlarmOff"" 
                     Color=""@Color.Error"" 
                     ToggledIcon=""@Icons.Material.Filled.AlarmOn"" 
                     ToggledColor=""@Color.Success""
                     title=""@(AlarmOn ? ""On"" : ""Off"")"" />

<span>Alarm is @(AlarmOn ? ""On"" : ""Off"")</span>
<span>@($""I have been switched on {SwitchedOnCount} times (Remaining: {MaxCount - SwitchedOnCount})"")</span>

@code {
    public bool AlarmOn { get; set; }
    public int SwitchedOnCount { get; set; }

    private const int MaxCount = 5;

    public void OnToggledChanged(bool toggled)
    {
        // Because variable is not two-way bound, we need to update it ourselves.
        AlarmOn = toggled;

        if (AlarmOn)
        {
            if (SwitchedOnCount < MaxCount)
                SwitchedOnCount++;
            else
                AlarmOn = false; // We can force a state under specific condition (max count reached).
        }
    }
}";

        public const string ToggleIconButtonTwoWayBindingExample = @"<MudToggleIconButton @bind-Toggled=""AlarmOn""
                     Icon=""@Icons.Material.Filled.AlarmOff""
                     Color=""@Color.Error""
                     ToggledIcon=""@Icons.Material.Filled.AlarmOn""
                     ToggledColor=""@Color.Success""
                     title=""@(AlarmOn ? ""On"" : ""Off"")"" />

<span>Alarm is @(AlarmOn ? ""On"" : ""Off"")</span>

@code {
    public bool AlarmOn { get; set; }
}";

        public const string ToolBarExample = @"<MudPaper Elevation=""25"">
    <MudToolBar>
        <MudIconButton Icon=""@Icons.Material.Outlined.Menu"" Color=""Color.Inherit"" Class=""mr-5"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Add"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Edit"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Remove"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Notifications"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.PeopleAlt"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.MoreVert"" Color=""Color.Inherit"" />
    </MudToolBar>

    <MudToolBar>
        <MudIconButton Icon=""@Icons.Material.Outlined.Menu"" Color=""Color.Inherit"" Class=""mr-5"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Add"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Edit"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Remove"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Outlined.Notifications"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.PeopleAlt"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.MoreVert"" Color=""Color.Inherit"" />
    </MudToolBar>

    <MudToolBar Class=""justify-space-between"">
        <MudIconButton Icon=""@Icons.Material.Outlined.Menu"" Color=""Color.Inherit"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Add"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Edit"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Remove"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Notifications"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.PeopleAlt"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.MoreVert"" Color=""Color.Inherit"" />
    </MudToolBar>
</MudPaper>";

        public const string ToolBarWrapContentExample = @"<MudPaper Elevation=""25"" MaxWidth=""250px"">
    <MudToolBar WrapContent=""true"">
        <MudIconButton Icon=""@Icons.Material.Outlined.Menu"" Color=""Color.Inherit"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Add"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Edit"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Remove"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.Notifications"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.PeopleAlt"" />
        <MudIconButton Icon=""@Icons.Material.Outlined.MoreVert"" Color=""Color.Inherit"" />
    </MudToolBar>
</MudPaper>";

        public const string TooltipActivationExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""9"" Class=""d-flex flex-column align-center justify-center"">
        <MudButton Class=""mb-4"" tabindex=""-1"" Variant=""Variant.Outlined"" OnClick=""@(async() => await _iconButton1.FocusAsync())"">Focus The Element</MudButton>
        <MudTooltip ShowOnClick=""_click"" ShowOnFocus=""_focus"" ShowOnHover=""_hover"" Text=""Im Mud Tooltip"">
            <MudIconButton @ref=""_iconButton1"" Icon=""@Icons.Custom.Brands.MudBlazor"" Color=""Color.Primary"" Size=""Size.Large"" />
        </MudTooltip>
    </MudItem>

    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudCheckBox @bind-Value=""_focus"" Label=""Show On Focus"" Color=""Color.Primary"" />
        <MudCheckBox @bind-Value=""_hover"" Label=""Show On Hover"" Color=""Color.Primary"" />
        <MudCheckBox @bind-Value=""_click"" Label=""Click"" Color=""Color.Primary"" />
    </MudItem>
</MudGrid>


@code {

    bool _click = false;
    bool _hover = true;
    bool _focus = true;

    MudIconButton _iconButton1;
}";

        public const string TooltipArrowExample = @"<MudTooltip Text=""Arrow Left"" Arrow=""true"" Placement=""Placement.Left"">
    <MudButton>Arrow Left</MudButton>
</MudTooltip>
<MudTooltip Text=""Arrow Top"" Arrow=""true"" Placement=""Placement.Top"">
    <MudButton>Arrow Top</MudButton>
</MudTooltip>
<MudTooltip Text=""Arrow Bottom"" Arrow=""true"" Placement=""Placement.Bottom"">
    <MudButton>Arrow Bottom</MudButton>
</MudTooltip>
<MudTooltip Text=""Arrow Right"" Arrow=""true"" Placement=""Placement.Right"">
    <MudButton>Arrow Right</MudButton>
</MudTooltip>";

        public const string TooltipColorExample = @"<MudTooltip Text=""Secondary"" Color=""Color.Secondary"" Placement=""Placement.Top"">
    <MudButton>Secondary</MudButton>
</MudTooltip>
<MudTooltip Text=""Tertiary"" Color=""Color.Tertiary"" Placement=""Placement.Bottom"" Arrow=""true"">
    <MudButton>Tertiary</MudButton>
</MudTooltip>
<MudTooltip Text=""Primary"" Color=""Color.Primary"" Placement=""Placement.Top"">
    <MudButton>Primary</MudButton>
</MudTooltip>";

        public const string TooltipHtmlExample = @"<MudTooltip>
    <ChildContent>
        <MudIconButton Icon=""@Icons.Material.Filled.Delete"" />
    </ChildContent>
    <TooltipContent>
        <MudText Typo=""Typo.h6"">h6 title</MudText>
        <MudText Typo=""Typo.body2"">body2 content</MudText>
        <MudIcon Icon=""@Icons.Material.Filled.Star"" />
    </TooltipContent>
</MudTooltip>";

        public const string TooltipSimpleExample = @"<MudTooltip Text=""Delete"">
    <MudIconButton Icon=""@Icons.Material.Filled.Delete"" />
</MudTooltip>
<MudTooltip Text=""Add"">
    <MudFab StartIcon=""@Icons.Material.Filled.Add"" Color=""Color.Secondary"" />
</MudTooltip>";

        public const string TooltipTransitionsExample = @"<MudTooltip Delay=""600"" Text=""Delayed: 600"">
    <MudButton Color=""Color.Primary"">Delayed</MudButton>
</MudTooltip>
<MudTooltip Duration=""1000"" Text=""Duration: 1000"">
    <MudButton Color=""Color.Primary"">Duration</MudButton>
</MudTooltip>
<MudTooltip Duration=""0"" Text=""Duration: 0"">
    <MudButton Color=""Color.Primary"">Zero duration</MudButton>
</MudTooltip>";

        public const string TreeViewAutoExpandExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView @ref=""TreeView"" Hover AutoExpand=""@AutoExpand"" @bind-SelectedValue=""SelectedValue"" SelectionMode=""@SelectionMode.ToggleSelection"">
        <MudTreeViewItem Value=""@(""C:"")"" Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"">
            <MudTreeViewItem Value=""@(""config"")"" Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"">
                <MudTreeViewItem Value='""launch.json""' Icon=""@Icons.Custom.FileFormats.FileCode"" />
                <MudTreeViewItem Value='""tasks.json""' Icon=""@Icons.Custom.FileFormats.FileCode"" />
            </MudTreeViewItem>
            <MudTreeViewItem Value=""@(""images"")"" Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"">
                <MudTreeViewItem Value=""@(""logo.png"")"" Icon=""@Icons.Custom.FileFormats.FileImage"" />
            </MudTreeViewItem>
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>

<MudStack Row Justify=""Justify.Center"" Style=""width: 100%"" Wrap=""Wrap.Wrap"">
    <MudButton Color=""Color.Primary"" OnClick=""@(()=>TreeView.ExpandAllAsync())"" Variant=""Variant.Filled"">Expand All</MudButton>
    <MudButton Color=""Color.Dark"" OnClick=""@(()=>TreeView.CollapseAllAsync())"" Variant=""Variant.Filled"">Collapse All</MudButton>
    <MudChipSet T=""string"" @bind-SelectedValue=""SelectedValue"" Color=""Color.Primary"" Variant=""Variant.Text"" SelectionMode=""@SelectionMode.ToggleSelection"">
        <MudChip Text=""config""/>
        <MudChip Text=""launch.json""/>
        <MudChip Text=""tasks.json""/>
        <MudChip Text=""images""/>
        <MudChip Text=""logo.png""/>
    </MudChipSet>
    <MudSwitch @bind-Value=""AutoExpand"" Color=""Color.Primary"">AutoExpand</MudSwitch>
</MudStack>

@code {
    public MudTreeView<string> TreeView;
    public string SelectedValue = null;
    public bool AutoExpand = true;
}";

        public const string TreeViewBasicExample = @"<MudTreeView T=""string"" ReadOnly>
    <MudTreeViewItem Text=""Getting Started"">
        <MudTreeViewItem Text=""Installation"" />
    </MudTreeViewItem>
    <MudTreeViewItem Value='""Components""'>
        <MudTreeViewItem Text=""Avatar"" Value='""MudAvatar""' />
        <MudTreeViewItem Text=""Button"" Value='""MudButton""' />
    </MudTreeViewItem>
</MudTreeView>";

        public const string TreeViewBindItemsExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView T=""string"" Hover SelectionMode=""@SelectionMode.ToggleSelection"" Color=""Color.Tertiary"">
        <MudTreeViewItem Text=""config"" @bind-Expanded=""ConfigExpanded"" Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"">
            <MudTreeViewItem Text=""launch.json"" @bind-Selected=""LaunchSelected""  Icon=""@Icons.Custom.FileFormats.FileCode"" />
            <MudTreeViewItem Text=""tasks.json"" @bind-Selected=""TasksSelected"" Icon=""@Icons.Custom.FileFormats.FileCode"" />
        </MudTreeViewItem>
        <MudTreeViewItem Text=""images"" @bind-Expanded=""ImagesExpanded"" Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"">
            <MudTreeViewItem Text=""logo.png"" @bind-Selected=""LogoSelected"" Icon=""@Icons.Custom.FileFormats.FileImage"" />
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>

<MudStack Row Justify=""Justify.Center"" AlignItems=""AlignItems.Center"" Style=""width: 100%"" Wrap=""Wrap.Wrap"">
    <MudSwitch @bind-Value=""ConfigExpanded"" Color=""Color.Tertiary"">config</MudSwitch>
    <MudSwitch @bind-Value=""ImagesExpanded"" Color=""Color.Tertiary"">images</MudSwitch>
    <MudCheckBox @bind-Value=""LaunchSelected"" Color=""Color.Tertiary"">launch.json</MudCheckBox>
    <MudCheckBox @bind-Value=""TasksSelected"" Color=""Color.Tertiary"">tasks.json</MudCheckBox>
    <MudCheckBox @bind-Value=""LogoSelected"" Color=""Color.Tertiary"">logo.png</MudCheckBox>
</MudStack>

@code {
    public bool ConfigExpanded;
    public bool ImagesExpanded;
    public bool LaunchSelected = true;
    public bool TasksSelected;
    public bool LogoSelected;
}";

        public const string TreeViewBodyContentExample = @"<MudPaper Width=""400px"" Elevation=""2"">
    <MudTreeView Items=""@TreeItems"" Hover=""true"">
        <ItemTemplate Context=""item"">
            <MudTreeViewItem Items=""@item.Children"" Icon=""@item.Icon"">
                <BodyContent>
                    <div style=""display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%"">
                        <MudText Style=""justify-self: start;"">@item.Text</MudText>
                        <div style=""justify-self: end;"">
                            <MudIconButton Icon=""@Icons.Material.Filled.Edit"" Size=""Size.Medium"" Color=""Color.Inherit"" />
                            <MudIconButton Icon=""@Icons.Material.Filled.Delete"" Size=""Size.Medium"" Color=""Color.Inherit"" />
                        </div>
                    </div>
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {

    private List<TreeItemData<string>> TreeItems { get; set; } = [];

    public class TreeItemData : TreeItemData<string>
    {
        public TreeItemData(string text, string icon) : base(text)
        {
            Text = text;
            Icon = icon;
        }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData("".github"", Icons.Custom.Brands.GitHub));
        TreeItems.Add(new TreeItemData("".vscode"", Icons.Custom.Brands.MicrosoftVisualStudio));
        TreeItems.Add(new TreeItemData(""content"", Icons.Custom.FileFormats.FileDocument));
        TreeItems.Add(new TreeItemData(""src"", Icons.Custom.FileFormats.FileCode) {
                Children = [
                    new TreeItemData(""MudBlazor"", Icons.Custom.Brands.MudBlazor),
                    new TreeItemData(""MudBlazor.Docs"", Icons.Custom.FileFormats.FileDocument) {
                        Children = [
                            new TreeItemData(""_Imports.razor"", Icons.Material.Filled.AlternateEmail),
                            new TreeItemData(""compilerconfig.json"", Icons.Custom.FileFormats.FileImage),
                            new TreeItemData(""MudBlazor.Docs.csproj"", Icons.Custom.Brands.MicrosoftVisualStudio),
                            new TreeItemData(""NewFilesToBuild.txt"", Icons.Custom.FileFormats.FileDocument)
                        ]
                    },

                    new TreeItemData(""MudBlazor.Docs.Client"", Icons.Material.Filled.Folder),
                    new TreeItemData(""MudBlazor.Docs.Compiler"", Icons.Material.Filled.Folder),
                    new TreeItemData(""MudBlazor.Docs.Server"", Icons.Material.Filled.Folder),
                    new TreeItemData(""MudBlazor.UnitTests"", Icons.Material.Filled.Folder),
                    new TreeItemData("".editorconfig"", Icons.Custom.FileFormats.FileCode),
                    new TreeItemData(""MudBlazor.sln"", Icons.Custom.Brands.MicrosoftVisualStudio)
                ]
        });
        TreeItems.Add(new TreeItemData(""History"", Icons.Material.Filled.Folder));
    }
}";

        public const string TreeViewCustomExample = @"<MudStack>
    <MudPaper Width=""400px"" MaxHeight=""400px"" Class=""overflow-y-auto"" Elevation=""2"">
        <MudTreeView Items=""@TreeItems"" ReadOnly>
            <ItemTemplate>
                @{                
                    var product = context.Value; // for convenient usage in the template
                }
                <MudTreeViewItem @bind-Expanded=""@context.Expanded"" Items=""@context.Children"" Value=""@context.Value"">
                    <Content>
                        <MudTreeViewItemToggleButton @bind-Expanded=""@context.Expanded"" Visible=""@context.HasChildren"" />
                        @if (product?.Price is not null) {
                            <MudCheckBox T=""bool"" Size=""Size.Small"" Value=""@context.Selected"" ValueChanged=""@((v)=> OnCheckboxChanged(v, context))"" />
                        }
                        <MudIcon Icon=""@product?.Icon"" Class=""ml-0 mr-2"" Color=""@Color.Default"" />
                        <MudText>@product?.Name</MudText>
                        @if (product?.Price is not null) {
                            <MudChip Class=""ml-1"">@product.Price.Value.ToString(""C"")</MudChip>
                        }
                    </Content>
                </MudTreeViewItem>
            </ItemTemplate>
        </MudTreeView>
    </MudPaper>
    <MudStack Class=""mt-3"" Style=""width: 400px"">
        <MudText Typo=""@Typo.subtitle1"" Inline>Selected items: @(string.Join("", "", (SelectedValues ?? []).Select(x => x.Name)))</MudText>
        <MudStack>
            <MudText Typo=""@Typo.subtitle1"">Sum: <MudChip T=""string"">@GetSelectedSum().ToString(""C"")</MudChip></MudText>
        </MudStack>
    </MudStack>
</MudStack>

@code {
    public void OnCheckboxChanged(bool selected, TreeItemData<Product> context)
    {
        context.Selected = selected;
        if (context.Value?.Price is null)
            return;
        if (context.Selected)
            SelectedValues.Add(context.Value);
        else
            SelectedValues.Remove(context.Value);
    }

    public HashSet<Product> SelectedValues { get; set; } = new();

    public List<TreeItemData<Product>> TreeItems { get; set; } = new();

    public class Product : IEquatable<Product>
    {
        public decimal? Price { get; set; }
        public string Name { get; init; }
        public string Icon { get; set; }

        public Product(string name, string icon, decimal? price = null)
        {
            Name = name;
            Icon = icon;
            Price = price;
        }

        public bool Equals(Product other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Name == other.Name;
        }

        public override bool Equals(object obj) => ReferenceEquals(this, obj) || obj is Product other && Equals(other);

        public override int GetHashCode() => Name?.GetHashCode() ?? 0;
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData<Product> { 
            Value=new Product(""Coffee Makers"", Icons.Material.Filled.Label), 
            Expanded = true,
            Children = [
                new TreeItemData<Product> { Value=new Product(""Moka Pot"", Icons.Material.Filled.LocalOffer, 36.99m),  },
                new TreeItemData<Product> { 
                    Value=new Product(""French Press"", Icons.Material.Filled.LocalOffer, 19.99m),
                    Expanded = true,
                    Children = [ 
                        new TreeItemData<Product> { Value = new Product(""Spare Sieve"", Icons.Material.Filled.LocalOffer, 6.00m) },
                        new TreeItemData<Product> { Value = new Product(""Cleaning Kit"", Icons.Material.Filled.LocalOffer, 17.59m) }
                    ]
                }
            ]
        });
        TreeItems.Add(new TreeItemData<Product> {
            Value = new Product(""Tea Pots"", Icons.Material.Filled.Label),
            Expanded = true,
            Children = [
                new TreeItemData<Product> {
                    Value=new Product(""Glass Teapot"", Icons.Material.Filled.LocalOffer, 36.99m),
                    Expanded = true,
                    Children = [ 
                        new TreeItemData<Product> { Value = new Product(""Glass Infuser"", Icons.Material.Filled.LocalOffer, 2.99m) }, 
                        new TreeItemData<Product> { Value = new Product(""Stainless Steel Infuser"", Icons.Material.Filled.LocalOffer, 5.99m) }
                    ]
                },
                new TreeItemData<Product> { Value = new Product(""Stainless Steel Teapot"", Icons.Material.Filled.LocalOffer, 14.15m) },
                new TreeItemData<Product> { Value = new Product(""Japanese Cast Iron Teapot"", Icons.Material.Filled.LocalOffer, 26.39m) },
                new TreeItemData<Product> { Value = new Product(""Porcelain Teapot"", Icons.Material.Filled.LocalOffer, 38.00m) }
            ]
        });
    }

    public decimal GetSelectedSum()
    {
        if (SelectedValues is null)
            return 0;
        return SelectedValues.Sum(p => p.Price ?? 0);
    }
}";

        public const string TreeViewFilteringExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudStack AlignItems=""AlignItems.Center"">
        <MudTextField T=""string"" Label=""Search"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Search"" TextChanged=""OnTextChanged"" Immediate=""true"" Clearable=""true"" />
        <MudTreeView Items=""@_treeItemData"" @ref=""_treeView"" FilterFunc=""MatchesName"">
            <ItemTemplate>
                <MudTreeViewItem @bind-Expanded=""@context.Expanded"" Items=""@context.Children"" Value=""@context.Value""
                                 Icon=""@context.Icon"" Text=""@context.Text"" Visible=""@context.Visible"" />
            </ItemTemplate>
        </MudTreeView>
    </MudStack>
</MudPaper>

@code {
    private List<TreeItemData<string>> _treeItemData = [];

    private MudTreeView<string> _treeView;

    private string _searchPhrase;

    public class TreeItemPresenter : TreeItemData<string>
    {
        public TreeItemPresenter(string text, string icon) : base(text)
        {
            Text = text;
            Icon = icon;
        }
    }

    protected override void OnInitialized()
    {
        _treeItemData.Add(new TreeItemPresenter(""All Mail"", Icons.Material.Filled.Email));
        _treeItemData.Add(new TreeItemPresenter(""Trash"", Icons.Material.Filled.Delete));
        _treeItemData.Add(new TreeItemPresenter(""Categories"", Icons.Material.Filled.Label)
        {
            Expanded = true,
            Children =
            [
                new TreeItemPresenter(""Social"", Icons.Material.Filled.Group),
                new TreeItemPresenter(""Updates"", Icons.Material.Filled.Info),
                new TreeItemPresenter(""Forums"", Icons.Material.Filled.QuestionAnswer),
                new TreeItemPresenter(""Promotions"", Icons.Material.Filled.LocalOffer)
            ]
        });
        _treeItemData.Add(new TreeItemPresenter(""History"", Icons.Material.Filled.Label));
    }

    private async void OnTextChanged(string searchPhrase) 
    {
        _searchPhrase = searchPhrase;
        await _treeView.FilterAsync();
    }

    private Task<bool> MatchesName(TreeItemData<string> item)
    {
        if (string.IsNullOrEmpty(item.Text))
        {
            return Task.FromResult(false);
        }

        return Task.FromResult(item.Text.Contains(_searchPhrase, StringComparison.OrdinalIgnoreCase));
    }
}";

        public const string TreeViewIconExample = @"<MudTreeView T=""string"">
    <MudTreeViewItem Value='""All Mail""' Icon=""@Icons.Material.Filled.Email"" />
    <MudTreeViewItem Value='""Drafts""' Icon=""@Icons.Material.Filled.Drafts"" />
    <MudTreeViewItem Value='""Orders""' Icon=""@Icons.Material.Filled.Label"" IconColor=""Color.Secondary"" />
    <MudTreeViewItem Value='""Categories""' Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"" IconColor=""Color.Info""
                     ExpandButtonIcon=""@Icons.Material.Filled.ArrowRight"" ExpandButtonIconColor=""Color.Primary"">
        <MudTreeViewItem Value='""Social""' Icon=""@Icons.Material.Filled.Group"" />
        <MudTreeViewItem Value='""Updates""' Icon=""@Icons.Material.Filled.Info"" IconColor=""Color.Tertiary"" />
        <MudTreeViewItem Value='""Forums""' Icon=""@Icons.Material.Filled.QuestionAnswer"" />
        <MudTreeViewItem Value='""Spam""' Icon=""@Icons.Material.Filled.LocalOffer"" />
    </MudTreeViewItem>
    <MudTreeViewItem Value='""Trash""' Icon=""@Icons.Material.Filled.Delete"" />
</MudTreeView>";

        public const string TreeViewItemTemplateExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView Items=""@TreeItems"" SelectionMode=""SelectionMode.MultiSelection"" @bind-SelectedValues=""SelectedValues"">
        <ItemTemplate>
            @{
                // Casting context from TreeItemData<string> to our own derived class TreeItemPresenter
                // for convenient usage in the template
                var presenter = context as TreeItemPresenter;
            }
            <MudTreeViewItem @bind-Expanded=""@context.Expanded"" Items=""@context.Children"" Value=""@context.Value""
                             Icon=""@context.Icon"" Text=""@context.Text"" EndText=""@presenter?.Number?.ToString()"" EndTextTypo=""@Typo.caption"" />
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

<MudStack Row Justify=""Justify.Center"" Style=""width: 100%"">
    <MudText Typo=""@Typo.subtitle1"">Sum of selected items: <MudChip T=""string"">@GetSelectedSum()</MudChip></MudText>
</MudStack>

@code {
    public IReadOnlyCollection<string> SelectedValues { get; set; }

    public List<TreeItemData<string>> TreeItems { get; set; } = new();
    public Dictionary<string, int?> ValueMap { get; set; }

    public class TreeItemPresenter : TreeItemData<string>
    {
        public int? Number { get; set; }

        public TreeItemPresenter(string text, string icon, int? number = null) : base(text)
        {
            Text = text;
            Icon = icon;
            Number = number;
        }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemPresenter(""All Mail"", Icons.Material.Filled.Email));
        TreeItems.Add(new TreeItemPresenter(""Trash"", Icons.Material.Filled.Delete));
        TreeItems.Add(new TreeItemPresenter(""Categories"", Icons.Material.Filled.Label) {
            Expanded = true,
            Children = [
                    new TreeItemPresenter(""Social"", Icons.Material.Filled.Group, 90),
                    new TreeItemPresenter(""Updates"", Icons.Material.Filled.Info, 2294),
                    new TreeItemPresenter(""Forums"", Icons.Material.Filled.QuestionAnswer, 3566),
                    new TreeItemPresenter(""Promotions"", Icons.Material.Filled.LocalOffer, 733)
                ]
        });
        TreeItems.Add(new TreeItemPresenter(""History"", Icons.Material.Filled.Label));
        ValueMap = TreeItems.Concat(TreeItems.SelectMany(x => x.Children ?? [])).OfType<TreeItemPresenter>().ToDictionary(x => x.Value, x => x.Number);
    }

    public int GetSelectedSum()
    {
        if (SelectedValues is null)
            return 0;
        return SelectedValues.Select(x => ValueMap.GetValueOrDefault(x, 0)).Sum(i => i ?? 0);
    }
}";

        public const string TreeViewMultiSelectionExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView Hover ReadOnly=""@ReadOnly"" TriState=""@TriState"" AutoSelectParent=""@AutoSelectParent"" @bind-SelectedValues=""SelectedValues"" SelectionMode=""SelectionMode.MultiSelection""
                 CheckBoxColor=""Color.Info"">
        <MudTreeViewItem Text=""bundle.zip"" Expanded Icon=""@Icons.Material.Filled.FolderZip"">
            <MudTreeViewItem Text=""config"" Expanded Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"">
                <MudTreeViewItem Value='""launch.json""' Icon=""@Icons.Custom.FileFormats.FileCode"" />
                <MudTreeViewItem Value='""tasks.json""' Icon=""@Icons.Custom.FileFormats.FileCode"" />
            </MudTreeViewItem>
            <MudTreeViewItem Text=""images"" Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"">
                <MudTreeViewItem Value=""@(""logo.png"")"" Icon=""@Icons.Custom.FileFormats.FileImage"" />
            </MudTreeViewItem>
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>

<MudStack Row Justify=""Justify.Center"" Style=""width: 100%"" Wrap=""Wrap.Wrap"">
    <MudChipSet T=""string"" @bind-SelectedValues=""SelectedValues"" SelectionMode=""SelectionMode.MultiSelection"" Color=""Color.Info"" Variant=""Variant.Text"">
        <MudChip Text=""bundle.zip""/>
        <MudChip Text=""config""/>
        <MudChip Text=""launch.json""/>
        <MudChip Text=""tasks.json""/>
        <MudChip Text=""images""/>
        <MudChip Text=""logo.png""/>
    </MudChipSet>
    <MudSwitch @bind-Value=""TriState"" Color=""Color.Info"">TriState</MudSwitch>
    <MudSwitch @bind-Value=""AutoSelectParent"" Color=""Color.Info"">AutoSelectParent</MudSwitch>
    <MudSwitch @bind-Value=""ReadOnly"" Color=""Color.Info"">ReadOnly</MudSwitch>    
</MudStack>

@code {
    public IReadOnlyCollection<string> SelectedValues = [""tasks.json"", ""launch.json""];
    public bool ReadOnly = false;
    public bool TriState = true;
    public bool AutoSelectParent = true;
}";

        public const string TreeViewServerExample = @"@using System.Collections.ObjectModel

<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView ServerData=""@LoadServerData"" Items=""@InitialTreeItems"">
        <ItemTemplate>
            <MudTreeViewItem Value=""@context.Value"" Icon=""@context.Icon"" LoadingIconColor=""Color.Info"" CanExpand=""@context.Expandable""/>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {
    private List<TreeItemData<string>> InitialTreeItems { get; set; } = new();
    private List<TreeItemData<string>> ServerTreeItems { get; set; } = new();

    protected override void OnInitialized()
    {
        // MudTreeView initially only gets these top-level items
        InitialTreeItems.Add(new TreeItemData<string> { Value = ""All Mail"", Icon = Icons.Material.Filled.Label, });
        InitialTreeItems.Add(new TreeItemData<string> { Value = ""Trash"", Icon = Icons.Material.Filled.Delete });

        // LoadServerData will load from this hierarchy
        ServerTreeItems.Add(new TreeItemData<string> {
                Value = ""All Mail"", Icon = Icons.Material.Filled.Label,
                Children = [
                        new TreeItemData<string> { Value = ""Promotions"", Icon = Icons.Material.Filled.Group, 
                                Children = [
                                    new TreeItemData<string> { Value = ""L.E.D Door Mats"", Icon = Icons.Material.Outlined.Lightbulb, Expandable = false },
                                    new TreeItemData<string> { Value = ""Car Beauty Salon"", Icon = Icons.Material.Filled.CarRepair, Expandable = false },
                                    new TreeItemData<string> { Value = ""Fakedoors.com"", Icon = Icons.Material.Outlined.DoorFront, Expandable = false },
                                    new TreeItemData<string> { Value = ""Bluetooth Toilet"", Icon = Icons.Material.Filled.Wc, Expandable = false }
                                ]},
                    new TreeItemData<string> { Value = ""Updates"", Icon = Icons.Material.Filled.Info, Expandable = false },
                    new TreeItemData<string> { Value = ""Forums"", Icon = Icons.Material.Filled.QuestionAnswer, Expandable = false },
                    new TreeItemData<string> { Value = ""Social"", Icon = Icons.Material.Filled.LocalOffer, Expandable = false }
                ]});
    }

    public async Task<IReadOnlyCollection<TreeItemData<string>>> LoadServerData(string parentValue)
    {
        // wait 500ms to simulate a server load, then recursively search through our tree to find the child items for the given value
        await Task.Delay(500);
        foreach (var item in ServerTreeItems) {
            if (item.Value == parentValue)
                return item.Children;
            if (!item.HasChildren)
                continue;
            var descendentItem = FindTreeItemData(parentValue, item);
            if (descendentItem != null)
                return descendentItem.Children;
        }
        return null;
    }

    private TreeItemData<string> FindTreeItemData(string value, TreeItemData<string> parent)
    {
        foreach (var child in parent.Children) {
            if (child.Value == value)
                return child;
            if (!child.HasChildren)
                continue;
            var descendentItem = FindTreeItemData(value, child);
            if (descendentItem != null)
                return descendentItem;
        }
        return null;
    }

}";

        public const string TreeViewSingleSelectionExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView Hover ReadOnly=""@ReadOnly"" @bind-SelectedValue=""SelectedValue"" SelectionMode=""@SelectionMode"">
        <MudTreeViewItem Value=""@(""config"")"" Expanded Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"">
            <MudTreeViewItem Value='""launch.json""' Icon=""@Icons.Custom.FileFormats.FileCode"" />
            <MudTreeViewItem Value='""tasks.json""' Icon=""@Icons.Custom.FileFormats.FileCode"" />
        </MudTreeViewItem>
        <MudTreeViewItem Value=""@(""images"")"" Icon=""@Icons.Custom.Uncategorized.Folder"" IconExpanded=""@Icons.Custom.Uncategorized.FolderOpen"">
            <MudTreeViewItem Value=""@(""logo.png"")"" Icon=""@Icons.Custom.FileFormats.FileImage"" />
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>

<MudStack Row Justify=""Justify.Center"" Style=""width: 100%"" Wrap=""Wrap.Wrap"">
    <MudRadioGroup @bind-Value=""SelectionMode"">
        <MudRadio Value=""SelectionMode.SingleSelection"" Color=""Color.Primary"">SingleSelection</MudRadio>
        <MudRadio Value=""SelectionMode.ToggleSelection"" Color=""Color.Primary"">ToggleSelection</MudRadio>
    </MudRadioGroup>
    <MudChipSet T=""string"" @bind-SelectedValue=""SelectedValue"" Color=""Color.Primary"" Variant=""Variant.Text"">
        <MudChip Text=""config""/>
        <MudChip Text=""launch.json""/>
        <MudChip Text=""tasks.json""/>
        <MudChip Text=""images""/>
        <MudChip Text=""logo.png""/>
    </MudChipSet>
    <MudSwitch @bind-Value=""ReadOnly"" Color=""Color.Primary"">ReadOnly</MudSwitch>    
</MudStack>

@code {
    public string SelectedValue = ""tasks.json"";
    public bool ReadOnly = false;
    public SelectionMode SelectionMode = SelectionMode.SingleSelection;
}";

        public const string TreeViewUsageExample = @"<MudPaper Width=""300px"" Elevation=""0"">
    <MudTreeView T=""string"" ReadOnly=""@ReadOnly"" Hover=""@Hover"" Dense=""@Dense"" Disabled=""@Disabled""
                 ExpandOnClick=""@ExpandOnClick"" ExpandOnDoubleClick=""@ExpandOnDoubleClick"">
        <MudTreeViewItem Text=""Applications"" Expanded>
            <MudTreeViewItem Text=""Terminal"" />
        </MudTreeViewItem>
        <MudTreeViewItem Text=""Documents"" Expanded>
            <MudTreeViewItem Text=""MudBlazor"" Expanded>
                <MudTreeViewItem Text=""API"" />
                <MudTreeViewItem Text=""Components"" />
                <MudTreeViewItem Text=""Features"" />
            </MudTreeViewItem>
        </MudTreeViewItem>
    </MudTreeView>
</MudPaper>

<MudStack Row Wrap=""Wrap.Wrap"" Justify=""Justify.Center"">
    <MudSwitch @bind-Value=""ReadOnly"" Color=""Color.Primary"">ReadOnly</MudSwitch>
    <MudSwitch @bind-Value=""Hover"" Color=""Color.Primary"">Hover</MudSwitch>
    <MudSwitch @bind-Value=""Ripple"" Color=""Color.Primary"">Ripple</MudSwitch>
    <MudSwitch @bind-Value=""Dense"" Color=""Color.Primary"">Dense</MudSwitch>
    <MudSwitch @bind-Value=""Disabled"" Color=""Color.Primary"">Disabled</MudSwitch>
    <MudSwitch @bind-Value=""ExpandOnClick"" Color=""Color.Primary"">ExpandOnClick</MudSwitch>
    <MudSwitch @bind-Value=""ExpandOnDoubleClick"" Color=""Color.Primary"">ExpandOnDoubleClick</MudSwitch>
</MudStack>

@code {
    public bool ReadOnly = true;
    public bool Hover = true;
    public bool Ripple;
    public bool Dense;
    public bool Disabled;
    public bool ExpandOnClick = true;
    public bool ExpandOnDoubleClick;
}";

        public const string TextAlignmentExample = @"<MudText Align=""Align.Left""><b>Left</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Start""><b>Start</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Right""><b>Right</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.End""><b>End</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Center""><b>Center</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Justify""><b>Justify</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Inherit""><b>Inherit</b> Lorem ipsum dolor sit amet.</MudText>";

        public const string TextGeneralExample = @"<MudText Typo=""Typo.h1"">h1. Heading</MudText>
<MudText Typo=""Typo.h2"">h2. Heading</MudText>
<MudText Typo=""Typo.h3"">h3. Heading</MudText>
<MudText Typo=""Typo.h4"">h4. Heading</MudText>
<MudText Typo=""Typo.h5"">h5. Heading</MudText>
<MudText Typo=""Typo.h6"">h6. Heading</MudText>
<MudText Typo=""Typo.subtitle1"">subtitle1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur</MudText>
<MudText Typo=""Typo.subtitle2"">subtitle2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur</MudText>
<MudText Typo=""Typo.body1"">body1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus, cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam.</MudText>
<MudText Typo=""Typo.body2"">body2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus, cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam.</MudText>
<MudText Typo=""Typo.button"">BUTTON TEXT</MudText>
<MudText Typo=""Typo.caption"">caption text</MudText>
<MudText Typo=""Typo.overline"">OVERLINE TEXT</MudText>
<MudText Typo=""Typo.button"" HtmlTag=""h3"">button typo but the element is h3</MudText>
<MudText Typo=""Typo.body2"" HtmlTag=""strong"">body2 typo but the element is strong</MudText>";

        public const string TextInlineExample = @"<MudText>The text after here is: <MudText Inline=""@_inline"" Color=""Color.Primary"">@(_inline ? ""inline."" : ""block."")</MudText></MudText>

<MudSwitch @bind-Value=""_inline"" Color=""Color.Primary"" Label=""Inline"" />

@code {
    bool _inline;
}";

        public const string ButtonGlobalsExample = @"<MudButton Color=""Color.Secondary"" Size=""Size.Large"" Variant=""Variant.Filled"">Button with new defaults</MudButton>";

        public const string ButtonGlobalsStartupExample = @"// Add MudBlazor services
Services.AddMudServices();

// Change the default appearance of all MudButton components
MudGlobal.ButtonDefaults.Color = Color.Secondary;
MudGlobal.ButtonDefaults.Size = Size.Large;
MudGlobal.ButtonDefaults.Variant = Variant.Filled;";

        public const string GlobalExceptionHandlerExample = @"// Add MudBlazor services
Services.AddMudServices();

// Send all exceptions to the console
MudGlobal.UnhandledExceptionHandler = (exception) => Console.WriteLine(exception);";

        public const string OverviewThemesCustomExample = @"<MudThemeProvider Theme=""MyCustomTheme"" />

@code{
    MudTheme MyCustomTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = Colors.Blue.Default,
            Secondary = Colors.Green.Accent4,
            AppbarBackground = Colors.Red.Default,
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Lighten1
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = ""260px"",
            DrawerWidthRight = ""300px""
        }
    };
}";

        public const string OverviewThemesDarkPaletteExample = @"@using MudBlazor.Utilities;

@{var DarkModeClass = new CssBuilder()
.AddClass(""mud-dark-palette-example-dark-mode"", _darkMode)
.AddClass(""mud-dark-palette-example-light-mode"", !_darkMode)
.Build();}
<MudPaper Width=""500px"" Class=""@DarkModeClass"">
<MudSwitch Color=""Color.Primary"" Class=""ma-4"" T=""bool"" @bind-Value=""_darkMode"" Label=""Toggle Light/Dark Mode""/>
    <MudText Class=""ma-4"">This is an example text!</MudText>
</MudPaper>

@code{
    private bool _darkMode;
}
<style>
    .mud-dark-palette-example-dark-mode.mud-paper {
        background-color: #32333d;
    }
    .mud-dark-palette-example-dark-mode .mud-typography {
        color: #ffffffb2;
    }
    
    .mud-dark-palette-example-light-mode.mud-paper {
            background-color: #ffffffff;
    }
    .mud-dark-palette-example-light-mode .mud-typography {
            color: #424242ff;
    }
</style>";

        public const string OverviewThemesDarkPaletteExampleSource = @"<MudThemeProvider @bind-IsDarkMode=""@_isDarkMode"" Theme=""_theme""/>
<MudSwitch @bind-Value=""_isDarkMode"" Color=""Color.Primary"" Class=""ma-4"" T=""bool"" Label=""Toggle Light/Dark Mode""/>

<MudText Class=""ma-4"">This is an example text!</MudText>

@code{
    private MudTheme _theme = new();
    private bool _isDarkMode;
}";

        public const string OverviewThemesDefaultExample = @"<MudThemeProvider />";

        public const string OverviewThemesScrollbarExample = @"<MudThemeProvider DefaultScrollbar=""true"" />";

        public const string OverviewThemesSystemPreferenceExample = @"<MudThemeProvider @ref=""@_mudThemeProvider"" @bind-IsDarkMode=""@_isDarkMode""/>

@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
}";

        public const string OverviewThemesWatchSystemPreferenceExample = @"<MudThemeProvider @ref=""@_mudThemeProvider"" @bind-IsDarkMode=""@_isDarkMode""/>

@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }
}";

        public const string TypographyDefaultFontExample = @"@code {
    MudTheme MyCustomTheme = new MudTheme()
    {
        Typography = new Typography()
        {
            Default = new DefaultTypography()
            {
                FontFamily = new[] { ""Poppins"", ""Helvetica"", ""Arial"", ""sans-serif"" }
            }
        }
    };
}";

        public const string TypographySettingsExample = @"@code {
    MudTheme MyCustomTheme = new MudTheme()
    {
        Typography = new Typography()
        {
            H6 = new H6Typography()
            {
                FontFamily = new[] { ""Roboto"", ""Helvetica"", ""Arial"", ""sans-serif"" },
                FontSize = ""1.25rem"",
                FontWeight = ""500"",
                LineHeight = ""1.6"",
                LetterSpacing = "".0075em""
            }
        }
    };
}";

        public const string ColorsMaterialCodeExample = @"<MudPaper Class=""pa-4"" Style=""@($""color:{Colors.Purple.Accent3};"")"">
    Colors.Purple.Accent3
</MudPaper>
<MudPaper Class=""pa-4"" Style=""@($""color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGray.Darken4};"")"">
    Colors.BlueGray.Darken4 Colors.LightGreen.Accent3
</MudPaper>";

        public const string ColorsMaterialExample = @"<MudPaper Class=""pa-4 red-text text-accent-4"">
    .red-text .text-accent-4
</MudPaper>
<MudPaper Class=""pa-4 blue darken-1 shades-text text-white"">
    .blue .darken-1 .shades-text .text-white
</MudPaper>";

        public const string ColorsMudBlazorCodeExample = @"<MudPaper Class=""pa-4"" Style=""@($""color:{Theme.PaletteLight.Dark}; background:{Theme.PaletteLight.Warning};"")"">
    Warning with Dark text
</MudPaper>
<MudPaper Class=""pa-4"" Style=""@($""color:{Theme.PaletteLight.SuccessLighten}; background:{Theme.PaletteLight.Dark};"")"">
    Dark with Success lighten
</MudPaper>

@code {
    private MudTheme Theme = new MudTheme();
}";

        public const string ColorsMudBlazorExample = @"<MudPaper Class=""pa-4 mud-info"">.mud-info</MudPaper>
<MudPaper Class=""pa-4 mud-secondary-text"">.mud-secondary-text</MudPaper>
<MudPaper Class=""pa-4 mud-theme-primary"">.mud-theme-primary</MudPaper>";

        public const string CustomConverterExample = @"<MudSimpleTable Elevation=""0"" Hover=""false"" Class=""mt-4"" Dense=""false"">
    <colgroup>
        <col style=""width: 70%;"" />
        <col style=""width: 15%;"" />
        <col style=""width: 15%;"" />
    </colgroup>
    <thead>
        <tr>
            <th>Mode</th>
            <th>TextField</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><CodeInline>Free decimal places (default)</CodeInline></td>
            <td>
                <MudTextField @bind-Value=""decimal_value_free"" Class=""mt-n1"" Immediate=""true"" />
            </td>
            <td><MudText HtmlTag=""span"">@ToS(decimal_value_free) </MudText></td>
        </tr>
        <tr>
            <td><CodeInline>No decimal places (what about int value?)</CodeInline></td>
            <td>
                <MudTextField Converter=""@(new DefaultConverter<decimal>() { GetFunc = (e) => Math.Round(decimal.Parse(e), 0), SetFunc = (e) => e.ToString(""#0"")})"" 
                              @bind-Value=""decimal_value_0d"" Class=""mt-n1"" Immediate=""false"" />
            </td>
            <td><MudText HtmlTag=""span"">@ToS(decimal_value_0d) </MudText></td>
        </tr>
        <tr>
            <td><CodeInline>Two decimal places</CodeInline></td>
            <td>
                <MudTextField Converter=""@(new DefaultConverter<decimal>() { GetFunc = (e) => Math.Round(decimal.Parse(e), 2),  SetFunc = (e) => e.ToString(""0.00"")})"" 
                              @bind-Value=""decimal_value_2d"" Class=""mt-n1"" Immediate=""false"" />
            </td>
            <td><MudText HtmlTag=""span"">@ToS(decimal_value_2d) </MudText></td>
        </tr>
        <tr>
            <td><CodeInline>Three decimal places</CodeInline></td>
            <td>
                <MudTextField Converter=""@(new DefaultConverter<decimal>() { GetFunc = (e) => Math.Round(decimal.Parse(e), 3), SetFunc = (e) => e.ToString(""0.000"")})""
                              @bind-Value=""decimal_value_3d"" Class=""mt-n1"" Immediate=""false"" />
            </td>
            <td><MudText HtmlTag=""span"">@ToS(decimal_value_3d) </MudText></td>
        </tr>
    </tbody>
</MudSimpleTable>

@code {
    decimal decimal_value_free = 99.99999999m;
    decimal decimal_value_0d = 99;
    decimal decimal_value_2d = 99.99m;
    decimal decimal_value_3d = 99.999m;

    string ToS(object value)
    {
        if (value == null)
            return ""null"";
        return """" + value;
    }

}";

        public const string PointConverterExample = @"@using System.Drawing
@using System.Globalization;
@using System.Text.Json
@using Color = MudBlazor.Color

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""Point""
                      Variant=""Variant.Outlined""
                      @bind-Value=""_point""
                      Immediate=""true"" />
    </MudItem>
    
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""Mirrored point"" 
                      Variant=""Variant.Outlined""  
                      @bind-Value=""_point"" 
                      Immediate=""true""/>
    </MudItem>

</MudGrid>

@code {
    Point _point;

    protected override void OnInitialized()
    {
        // should be in your Startup:
        DefaultConverter<Point>.GlobalGetFunc = x => $""[{x.X}, {x.Y}]"";
        DefaultConverter<Point>.GlobalSetFunc = x => { var tmp = JsonSerializer.Deserialize<int[]>(x); return new Point(tmp[0], tmp[1]); };

    }
}";

        public const string SpecialConverterExample = @"@using System.Globalization;

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSwitch Color=""Color.Primary"" @bind-Value=""state"">Flip the switch</MudSwitch>
    </MudItem>
    
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""Switch state"" Variant=""Variant.Outlined"" Converter=""@converter"" @bind-Value=""state"" Immediate=""true""/>
    </MudItem>

</MudGrid>

@code {
    bool state = true;

    Converter<bool> converter = new Converter<bool>
    {
        SetFunc = value => value ? ""ON"" : ""OFF"",
        GetFunc = text => (text ?? """").ToLowerInvariant() == ""on"",
    };
}";

        public const string TurkeyTestExample = @"@using System.Globalization;

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""en-US"" Variant=""Variant.Outlined"" Culture=""@en"" @bind-Value=""date"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""de-AT"" Variant=""Variant.Outlined"" Culture=""@de"" @bind-Value=""date""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""zh-CN"" Variant=""Variant.Outlined"" Culture=""@cn"" @bind-Value=""date""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""en-US: dddd, MMM dd"" Variant=""Variant.Outlined"" Culture=""@en"" Format=""dddd, MMM dd"" @bind-Value=""date"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""de-AT: dddd, dd. MM."" Variant=""Variant.Outlined"" Culture=""@de"" Format=""dddd, dd. MM."" @bind-Value=""date""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""zh-CN: yy年MM月dd日"" Variant=""Variant.Outlined"" Culture=""@cn"" Format=""yyyy年MM月dd日"" @bind-Value=""date""></MudTextField>
    </MudItem>
</MudGrid>

@code {
    CultureInfo en = @CultureInfo.GetCultureInfo(""en-US"");
    CultureInfo de = CultureInfo.GetCultureInfo(""de-AT"");
    CultureInfo cn = CultureInfo.GetCultureInfo(""zh-CN"");
    DateTime date = DateTime.Now;
}";

        public const string ElevationAllExample = @"<MudPaper Elevation=""0"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-0</MudPaper>
<MudPaper Elevation=""1"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-1</MudPaper>
<MudPaper Elevation=""2"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-2</MudPaper>
<MudPaper Elevation=""3"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-3</MudPaper>
<MudPaper Elevation=""4"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-4</MudPaper>
<MudPaper Elevation=""5"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-5</MudPaper>
<MudPaper Elevation=""6"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-6</MudPaper>
<MudPaper Elevation=""7"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-7</MudPaper>
<MudPaper Elevation=""8"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-8</MudPaper>
<MudPaper Elevation=""9"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-9</MudPaper>
<MudPaper Elevation=""10"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-10</MudPaper>
<MudPaper Elevation=""11"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-11</MudPaper>
<MudPaper Elevation=""12"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-12</MudPaper>
<MudPaper Elevation=""13"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-13</MudPaper>
<MudPaper Elevation=""14"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-14</MudPaper>
<MudPaper Elevation=""15"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-15</MudPaper>
<MudPaper Elevation=""16"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-16</MudPaper>
<MudPaper Elevation=""17"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-17</MudPaper>
<MudPaper Elevation=""18"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-18</MudPaper>
<MudPaper Elevation=""19"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-19</MudPaper>
<MudPaper Elevation=""20"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-20</MudPaper>
<MudPaper Elevation=""21"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-21</MudPaper>
<MudPaper Elevation=""22"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-22</MudPaper>
<MudPaper Elevation=""23"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-23</MudPaper>
<MudPaper Elevation=""24"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-24</MudPaper>
<MudPaper Elevation=""25"" Height=""84px"" Width=""150px"" Class=""d-flex align-center justify-center ma-8"">.mud-elevation-25</MudPaper>";

        public const string ElevationPlaygroundExample = @"<MudGrid>
    <MudItem xs=""12"" md=""8"" Class=""d-flex justify-center align-center"" Style=""height:500px;"">
        <MudPaper Style=""@($""background-color:{ColorValue};"")"" Elevation=""@Elevation"" Outlined=""@Outlined"" Height=""@($""{PaperHeight}px"")"" Width=""@($""{PaperWidth}px"")"" />
    </MudItem>
    <MudItem xs=""12"" md=""4"">
        <MudPaper Class=""pa-4 mt-6 mt-lg-16"" Elevation=""0"">
            <MudText Typo=""Typo.h6"">Options</MudText>
            <MudText><b>Elevation:</b> @Elevation</MudText>
            <MudSlider @bind-Value=""Elevation"" Max=""25"" Min=""0"" Color=""Color.Primary"" />
            <MudText><b>Outlined:</b> @Outlined</MudText>
            <MudSwitch @bind-Value=""Outlined"" Color=""Color.Primary"" />
            <MudText><b>Color:</b> @ColorValue</MudText>
            <MudColorPicker Class=""mb-2"" @bind-Text=""ColorValue"" Variant=""Variant.Outlined"" Margin=""Margin.Dense"" />
            <MudText><b>Width:</b> @($""{PaperWidth}px"")</MudText>
            <MudSlider @bind-Value=""PaperWidth"" Max=""400"" Min=""0"" Color=""Color.Primary"" />
            <MudText><b>Height:</b> @($""{PaperHeight}px"")</MudText>
            <MudSlider @bind-Value=""PaperHeight"" Max=""400"" Min=""0"" Color=""Color.Primary"" />
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public int PaperHeight { get; set; } = 300;
    public int PaperWidth { get; set; } = 300;
    public int Elevation { get; set; } = 5;
    public bool Outlined { get; set; } = false;
    public string ColorValue { get; set; } = ""#f9f9f9"";
}";

        public const string ElevationUsageExample = @"<MudPaper Elevation=""0"" Class=""py-8 px-10"">0</MudPaper>
<MudPaper Elevation=""1"" Class=""py-8 px-10"">1</MudPaper>
<MudPaper Elevation=""4"" Class=""py-8 px-10"">4</MudPaper>
<MudPaper Elevation=""4"" Outlined=""true"" Class=""py-8 px-10"">4</MudPaper>

<div class=""mud-elevation-0 py-8 px-10 rounded white"">0</div>
<div class=""mud-elevation-1 py-8 px-10 rounded white"">1</div>
<div class=""mud-elevation-4 py-8 px-10 rounded white"">4</div>";

        public const string BlockMaskExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 400px;"">
    <MudItem xs=""12"">
        <MudTextField Mask=""@mask"" Label=""Flight number"" 
                      @bind-Value=""text""  Variant=""@Variant.Outlined"" Clearable />
    </MudItem>
    <MudItem xs=""12"">
		Flight number: <b>@text</b>
    </MudItem>
</MudGrid>

@code {
    public string text { get; set; }

    IMask mask = new BlockMask(delimiters:"" "", new Block('a', 1,3), new Block('0', 1,4));
}";

        public const string CustomCharactersExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask1"" Label=""MAC Address""  HelperText=""@mask1.Mask""
                      @bind-Value=""mac1""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask2"" Label=""MAC with Placeholder"" HelperText=""@mask2.Mask""
                      @bind-Value=""mac2""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        MAC Address: <b>@mac1</b>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        Cleaned MAC Address: <b>@mac2</b>
    </MudItem>
</MudGrid>

@code {
    public string mac1, mac2;

    public PatternMask mask1 = new PatternMask(""##:##:##:##:##:##"") { 
        MaskChars = new[] { new MaskChar('#', @""[0-9a-fA-F]"") } 
    };

    public PatternMask mask2 = new PatternMask(""XX-XX-XX-XX-XX-XX"") { 
        MaskChars = new[] { new MaskChar('X', @""[0-9a-fA-F]"") },
        Placeholder = '_',
        CleanDelimiters = true,
        Transformation = AllUpperCase
    };
    
    // transform lower-case chars into upper-case chars
    private static char AllUpperCase(char c) => c.ToString().ToUpperInvariant()[0];

}";

        public const string DateMaskExample = @"@using System.Globalization


<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask1"" Label=""ISO Date""  HelperText=""@mask1.Mask""
                      @bind-Value=""isoDate""  Variant=""@Variant.Text"" Clearable />
        ISO: <b>@isoDate</b>
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask2"" Label=""US"" HelperText=""@mask2.Mask""
                      @bind-Value=""usDate""  Variant=""@Variant.Text"" Clearable />
        US: <b>@usDate</b>
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask3"" Label=""AT""  HelperText=""@mask3.Mask""
                      @bind-Value=""atDate""  Variant=""@Variant.Text"" Clearable />
        AT: <b>@atDate</b>
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask4"" Label=""Month"" HelperText=""@mask4.Mask""
                      @bind-Value=""monthAndYear""  Variant=""@Variant.Text"" Clearable />
        MM/YY: <b>@monthAndYear</b>
    </MudItem>
</MudGrid>

@code {
    string isoDate, usDate, atDate;
    string monthAndYear;

    IMask mask1 = new DateMask(""yyyy-MM-dd"");
    IMask mask2 = new DateMask(""MM/dd/yyyy"");
    IMask mask3 = new DateMask(""TT.MM.JJJJ"", 'J', 'M', 'T');
    IMask mask4 = new DateMask(""MM/YY"", 'Y', 'M');
}";

        public const string MultiMaskExample = @"@using MudBlazor.Interfaces

<MudGrid Class=""justify-space-between mb-3 mx-n3"" Style=""max-width: 800px;"">
    <MudItem xs=""12"">
        <MudTextField Mask=""@mask"" Label=""Credit Card Number"" Style=""max-width: 400px;""
                  @bind-Value=""cardNumber"" Variant=""@Variant.Text"" Clearable/>
    </MudItem>
    <MudItem xs=""12"">
        Credit Card: <b>@cardNumber</b>
    </MudItem>
</MudGrid>

@code {
    string cardNumber, cardType;

    MultiMask mask = new MultiMask(""0000 0000 0000 0000"",
        new MaskOption(""American Express"", ""0000 000000 00000"", @""^(34|37)""),
        new MaskOption(""Diners Club"", ""0000 000000 0000"", @""^(30[0-59])""),
        new MaskOption(""JCB"", ""0000 0000 0000 0000"", @""^(35|2131|1800)""),
        new MaskOption(""VISA"", ""0000 0000 0000 0000"", @""^4""),
        new MaskOption(""MasterCard"", ""0000 0000 0000 0000"", @""^(5[1-5]|2[2-7])""),
        new MaskOption(""Discover"", ""0000 0000 0000 0000"", @""^(6011|65|64[4-9])"")
    );
    MaskOption? option = null;
    Dictionary<string, Variant> variants = new();
    MudElement element;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        mask.OptionDetected += (o, input) =>
        {
            option = o;
            cardType = o == null ? ""Unknown"" : o.Value.Id;
            UpdateClasses();
            // re-render only MudElement's children
            (element as IMudStateHasChanged)?.StateHasChanged();
        };
        UpdateClasses();
    }

    void UpdateClasses()
    {
        foreach (var type in new[] { ""American Express"", ""Diners Club"", ""JCB"", ""VISA"", ""MasterCard"", ""Discover"" })
            variants[type] = type == cardType ? Variant.Filled : Variant.Outlined;
    }
}

@* Note: MudElement is used here to limit the render-update to this html tree  *@
<MudElement HtmlTag=""div"" @ref=""element"" Style=""max-width: 800px;"" Class=""mud-width-full"">
    <MudGrid Class=""justify-space-between"">
        <MudItem xs=""12"" sm=""6"">
            <MudAlert Variant=""@variants[""American Express""]"" NoIcon Dense Class=""mb-2"">
                American Express: starts with 34/37<br/>
                <pre>34&#183;&#183; &#183;&#183;&#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;&#183;</pre>
            </MudAlert>
            <MudAlert Variant=""@variants[""Diners Club""]"" NoIcon Dense Class=""mb-2"">
                Diners Club: starts with 300-305/309<br/>
                <pre>300&#183; &#183;&#183;&#183;&#183;&#183;&#183; &#183;&#183;&#183;</pre>
            </MudAlert>
            <MudAlert Variant=""@variants[""JCB""]"" NoIcon Dense Class=""mb-2"">
                JCB: starts with 35/2131/1800<br/>
                <pre>35&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;</pre>
            </MudAlert>
        </MudItem>
        <MudItem xs=""12"" sm=""6"">
            <MudAlert Variant=""@variants[""VISA""]"" NoIcon Dense Class=""mb-2"">
                VISA: starts with 4<br/>
                <pre>4&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;</pre>
            </MudAlert>
            <MudAlert Variant=""@variants[""MasterCard""]"" NoIcon Dense Class=""mb-2"">
                MasterCard: starts with 51-55/22-27<br/>
                <pre>51&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;</pre>
            </MudAlert>
            <MudAlert Variant=""@variants[""Discover""]"" NoIcon Dense Class=""mb-2"">
                Discover: starts with 6011/65/644-649<br/>
                <pre>6011 &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183; &#183;&#183;&#183;&#183;</pre>
            </MudAlert>
        </MudItem>
    </MudGrid>
    <MudText Class=""mud-text-secondary"" Typo=""Typo.body2"">Example inspired by Cleave.js</MudText>
</MudElement>";

        public const string PatternMaskExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 400px;"">
    <MudItem xs=""12"">
        <MudTextField Mask=""@(new PatternMask(""0000 0000 0000 0000""))"" Label=""Credit Card Number"" 
                      @bind-Value=""creditCard""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
	<MudItem xs=""4"">
        <MudTextField Mask=""@(new DateMask(""MM/YY"", 'Y', 'M'))"" Label=""Expires"" 
                      @bind-Value=""expiration""  Variant=""@Variant.Text"" />
    </MudItem>
    <MudItem xs=""4""/>
	<MudItem xs=""4"">
        <MudTextField Mask=""@(new PatternMask(""000""))"" Label=""CVC"" 
                      @bind-Value=""cvc""  Variant=""@Variant.Text"" />
    </MudItem>
    <MudItem xs=""12"">
		Credit Card Number: <b>@creditCard</b><br/>
		Expiration Date: <b>@expiration</b><br/>
        CVC: <b>@cvc</b>
    </MudItem>
</MudGrid>

@code {
    private string creditCard;
    private string expiration;
    private string cvc;
}";

        public const string RegexMaskEmailExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@emailMask"" Label=""Email Address""  HelperText=""@emailMask.Mask""
                      @bind-Value=""email""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@emailCustomMask"" Label=""Email Address with Custom Mask""  HelperText=""@emailCustomMask.Mask""
                      @bind-Value=""email2""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        Email 1: <b>@email</b>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        Email 2: <b>@email2</b>
    </MudItem>
</MudGrid>

@code {
    public string email;
    public string email2;
    public IMask emailMask = RegexMask.Email();
    public IMask emailCustomMask = RegexMask.Email(""<user>@<domain.com>"");
}";

        public const string RegexMaskExample = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask1"" Label=""Only digits (unlimited length)""  HelperText=""@mask1.Mask""
                      @bind-Value=""numbers""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        <MudTextField Mask=""@mask2"" Label=""Russian postal code"" HelperText=""@mask2.Mask""
                      @bind-Value=""russianZip""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        Number: <b>@numbers</b>
    </MudItem>
    <MudItem  xs=""12"" sm=""6"">
        Russian ZIP: <b>@russianZip</b>
    </MudItem>
</MudGrid>

@code {
    public string numbers, russianZip;

    public IMask mask1 = new RegexMask(@""^\d+$"");

    public IMask mask2 = new RegexMask(@""^[1-6]\d{0,5}$"");

}";

        public const string RegexMaskIPv4Example = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@ipv4Mask"" Label=""IPv4 Address""  HelperText=""@ipv4Mask.Mask""
                      @bind-Value=""ip""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@ipv4PortMask"" Label=""IPv4 Address with Port""  HelperText=""@ipv4PortMask.Mask""
                      @bind-Value=""ipPort""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        IPv4: <b>@ip</b>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        IPv4 w/Port: <b>@ipPort</b>
    </MudItem>
</MudGrid>

@code {
    public string ip;
    public string ipPort;
    public IMask ipv4Mask = RegexMask.IPv4();
    public IMask ipv4PortMask = RegexMask.IPv4(true);
}";

        public const string RegexMaskIPv6Example = @"<MudGrid Class=""justify-space-between"" Style=""max-width: 800px;"">
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@ipv6Mask"" Label=""IPv6 Address""  HelperText=""@ipv6Mask.Mask""
                      @bind-Value=""ip""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudTextField Mask=""@ipv6PortMask"" Label=""IPv6 Address with Port""  HelperText=""@ipv6PortMask.Mask""
                      @bind-Value=""ipPort""  Variant=""@Variant.Text"" Clearable />
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        IPv4: <b>@ip</b>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        IPv4 w/Port: <b>@ipPort</b>
    </MudItem>
</MudGrid>

@code {
    public string ip;
    public string ipPort;
    public IMask ipv6Mask = RegexMask.IPv6();
    public IMask ipv6PortMask = RegexMask.IPv6(true);
}";

        public const string RTLLanguagesBorderRadiusExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-s-xl"">
    <MudText Align=""Align.Center"">.rounded-s-xl</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-e-xl"">
    <MudText Align=""Align.Center"">.rounded-e-xl</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded-ts-xl"">
    <MudText Align=""Align.Center"">.rounded-ts-xl</MudText>
</div>
<div class=""mud-theme-info py-4 px-6 mx-4 rounded-te-xl"">
    <MudText Align=""Align.Center"">.rounded-te-xl</MudText>
</div>
<div class=""mud-theme-warning py-4 px-6 mx-4 rounded-bs-xl"">
    <MudText Align=""Align.Center"">.rounded-bs-xl</MudText>
</div>
<div class=""mud-theme-error py-4 px-6 mx-4 rounded-be-xl"">
    <MudText Align=""Align.Center"">.rounded-be-xl</MudText>
</div>";

        public const string RTLLanguagesLayoutExample = @"<MudRTLProvider RightToLeft=""@_rightToLeft"">
    <MudCard Class=""mb-2"" Style=""width: 400px"">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color=""Color.Secondary"">@Localizer(""CardAvatarLetter"")</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo=""Typo.body1"">@Localizer(""CardHeader"")</MudText>
                <MudText Typo=""Typo.body2"">@Localizer(""CardSubHeader"")</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon=""@Icons.Material.Filled.Settings"" Color=""Color.Default"" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardMedia Image=""_content/MudBlazor.Docs/images/pilars.jpg"" Height=""250"" />
        <MudCardContent>
            <MudText Typo=""Typo.body2"">@Localizer(""CardDescription"")</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudIconButton Icon=""@Icons.Material.Filled.Favorite"" Color=""Color.Default"" />
            <MudIconButton Icon=""@Icons.Material.Filled.Share"" Color=""Color.Default"" />
        </MudCardActions>
    </MudCard>
</MudRTLProvider>
<MudSwitch @bind-Value=""_rightToLeft"" Label=""Toggle Right to Left"" Color=""Color.Primary""/>

@code {
    private bool _rightToLeft = true;

    //This translation is for demonstration purposes only. In a real application, you should use a IStringLocalizer etc.
    private string Localizer(string key)
    {
        //This is just a google translation. If you have a better translation, feel free to share it with us  :)
        if (key.Equals(""CardAvatarLetter""))
            return _rightToLeft ? ""ا"" : ""I"";
        else if (key.Equals(""CardHeader""))
            return _rightToLeft ? ""استريا كرواتيا"" : ""Istra Croatia"";
        else if (key.Equals(""CardSubHeader""))
            return _rightToLeft ? ""شبه الجزيرة في أوروبا"" : ""Peninsula in Europe"";
        else if (key.Equals(""CardDescription""))
            return _rightToLeft ? ""التقطت هذه الصورة في قرية صغيرة في استرا كرواتيا"" : ""This photo was taken in a small village in Istra Croatia."";
        return """";
    }
}";

        public const string RTLLanguagesMRtlProviderExample = @"@inherits LayoutComponentBase

<MudRTLProvider>
    <MudThemeProvider/>
    <MudPopoverProvider/>
    <MudDialogProvider/>
    <MudSnackbarProvider/>
    <MudLayout>
        <MudMainContent>
            @Body
        </MudMainContent>
    </MudLayout>
</MudRTLProvider>";

        public const string RTLLanguagesTextfieldExample = @"<MudRTLProvider RightToLeft=""true"">
    <MudGrid>
        <MudItem xs=""12"" sm=""4"">
            <MudText Align=""Align.Left"">Text</MudText>
            <MudTextField Label=""الاسم الأول"" Variant=""Variant.Outlined"" @bind-Value=""_name"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Person""></MudTextField>
        </MudItem>
        <MudItem xs=""12"" sm=""4"">
            <MudText Align=""Align.Left"">Telephone</MudText>
            <MudTextField InputType=""InputType.Telephone"" Label=""رقم الهاتف"" Variant=""Variant.Outlined"" @bind-Value=""_telephone"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Smartphone""></MudTextField>
        </MudItem>
        <MudItem xs=""12"" sm=""4"">
            <MudText Align=""Align.Left"">Email</MudText>
            <MudTextField InputType=""InputType.Email"" Label=""البريد الإلكتروني"" Variant=""Variant.Outlined"" @bind-Value=""_email"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Filled.Email""></MudTextField>
        </MudItem>
    </MudGrid>
</MudRTLProvider>

@code {
    private string _name { get; set; } = ""John Smith"";
    private string _email { get; set; } = ""mail@example.com"";
    private long? _telephone { get; set; } = 1618033988;
}";

        public const string InstallationManualComponentsExample = @"@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />";

        public const string InstallationManualCssFontsExample = @"<link href=""https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"" rel=""stylesheet"" />
<link href=""_content/MudBlazor/MudBlazor.min.css"" rel=""stylesheet"" />";

        public const string InstallationManualImportsExample = @"@using MudBlazor";

        public const string InstallationManualPackageExample = @"dotnet add package MudBlazor";

        public const string InstallationTemplateInstallExample = @"dotnet new install MudBlazor.Templates";

        public const string InstallationTemplateUsageExampleAuto = @"dotnet new mudblazor --interactivity Auto --name MyApplication --all-interactive";

        public const string InstallationTemplateUsageExampleServer = @"dotnet new mudblazor --interactivity Server --name MyApplication --all-interactive";

        public const string InstallationTemplateUsageExampleWasm = @"dotnet new mudblazor --interactivity WebAssembly --name MyApplication --all-interactive";

        public const string LayoutBasicAppbarExample = @"@inherits LayoutComponentBase

<MudThemeProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        My Application
    </MudAppBar>
    <MudDrawer Open=""true"">

    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>";

        public const string LayoutBasicContainerExample = @"@inherits LayoutComponentBase

<MudMainContent>
    <MudContainer MaxWidth=""MaxWidth.Medium"">
        @Body
    </MudContainer>
</MudMainContent>";

        public const string LayoutBasicFunctionalityExample = @"@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@((e) => DrawerToggle())"" />
        My Application
    </MudAppBar>
    <MudDrawer @bind-Open=""@_drawerOpen"">
        <MyNavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}";

        public const string LayoutBasicMudBlazorExample = @"@inherits LayoutComponentBase

<MudThemeProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>";

        public const string LayoutBasicNavMenuExample = @"<MudNavMenu>
    <MudNavLink Href=""/"" Match=""NavLinkMatch.All"">Dashboard</MudNavLink>
    <MudNavLink Href=""/servers"" Match=""NavLinkMatch.Prefix"">Servers</MudNavLink>
    <MudNavGroup Title=""Settings"" Expanded=""true"">
        <MudNavLink Href=""/users""  Match=""NavLinkMatch.Prefix"">Users</MudNavLink>
        <MudNavLink Href=""/security""  Match=""NavLinkMatch.Prefix"">Security</MudNavLink>
    </MudNavGroup>
    <MudNavLink Href=""/about""  Match=""NavLinkMatch.Prefix"">About</MudNavLink>
</MudNavMenu>";

        public const string BasicUsageExample = @"<MudText Typo=""Typo.h6"">MudBlazor is @Text</MudText>
<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""ButtonOnClick"">@ButtonText</MudButton>

@code {
    public string Text { get; set; } = ""????"";
    public string ButtonText { get; set; } = ""Click Me"";
    public int ButtonClicked { get; set; }

    void ButtonOnClick()
    {
        ButtonClicked += 1;
        Text = $""Awesome x {ButtonClicked}"";
        ButtonText = ""Click Me Again"";
    }
}";

        public const string RightClickDrawerExample = @"<div @oncontextmenu=""ClickForDrawer"" @oncontextmenu:preventDefault class=""d-flex align-center justify-center"" style=""height: calc(100vh - 64px); background: linear-gradient(90deg, #00C9FF 0%, #92FE9D 100%);"">
    <MudDrawer @bind-Open=""@drawerOpen"" Anchor=""@Anchor.Right"" Elevation=""1"" Variant=""@DrawerVariant.Temporary"" Overlay=""false"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My Drawer</MudText>
        </MudDrawerHeader>
        <MudCard>
            <MudCardContent>
                <MudButton Color=""Color.Primary"" Variant=""Variant.Outlined"">New Record</MudButton>
            </MudCardContent>
        </MudCard>
        <MudList T=""string"">
            <MudListSubheader>List</MudListSubheader>
            <MudListItem Text=""Item 1""></MudListItem>
        </MudList>
    </MudDrawer>

    <MudText Class=""white-text"" Typo=""Typo.h6"">Right Click To Somewhere!</MudText>
</div>

@code{
    bool drawerOpen;

    private void ClickForDrawer(MouseEventArgs arg)
    {
        if (drawerOpen == false)
        {
            drawerOpen = true;
        }
        else
        {
            drawerOpen = false;
        }
    }
}";

        public const string Content1WireframeExample = @"<MudContainer Class=""mt-16 px-8"" MaxWidth=""MaxWidth.False"">
    <MudGrid>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""12"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""6"">
            <MudGrid>
                <MudItem xs=""12"">
                    <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
                </MudItem>
                <MudItem xs=""12"">
                    <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs=""12"" sm=""6"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 100%""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
        <MudItem xs=""12"" sm=""12"" md=""4"">
            <MudPaper Elevation=""2"" Class=""pa-4"" Style=""height: 200px;""></MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>";

        public const string Content2WireframeExample = @"<MudContainer Class=""mt-16"">
    <MudText Typo=""Typo.h3"" Align=""Align.Center"" GutterBottom=""true"">Pricing</MudText>
    <MudText Align=""Align.Center"">Some long pricing text should go here maybe? who knows what text you would want here, i guess i cant fill it in for you.</MudText>
    <MudGrid Class=""mt-8"">
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudCard Elevation=""25"" Class=""rounded-lg pb-4"">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo=""Typo.h5"" Align=""Align.Center"">Beginner</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class=""d-flex justify-center"">
                        <MudText Typo=""Typo.h3"">$5</MudText>
                        <MudText Typo=""Typo.h5"" Class=""ml-1 mt-5"" Color=""Color.Secondary"">/Monthly</MudText>
                    </div>
                    <MudList T=""string"" Class=""mx-auto mt-4"" Style=""width:300px;"">
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            Unlimited something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            10 something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            No something
                        </MudListItem>
                    </MudList>
                </MudCardContent>
                <MudCardActions Class=""d-flex justify-center"">
                    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Large"" Style=""width:50%;"">Start Now</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs=""12"" sm=""6"" md=""4"">
            <MudCard Elevation=""25"" Class=""rounded-lg pb-4"">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo=""Typo.h5"" Align=""Align.Center"">Starter</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class=""d-flex justify-center"">
                        <MudText Typo=""Typo.h3"">$10</MudText>
                        <MudText Typo=""Typo.h5"" Class=""ml-1 mt-5"" Color=""Color.Secondary"">/Monthly</MudText>
                    </div>
                    <MudList T=""string"" Class=""mx-auto mt-4"" Style=""width:300px;"">
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            Unlimited something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            10 something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            No something
                        </MudListItem>
                    </MudList>
                </MudCardContent>
                <MudCardActions Class=""d-flex justify-center"">
                    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Large"" Style=""width:50%;"">Start Now</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs=""12"" sm=""12"" md=""4"">
            <MudCard Elevation=""25"" Class=""rounded-lg pb-4"">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo=""Typo.h5"" Align=""Align.Center"">Professional</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class=""d-flex justify-center"">
                        <MudText Typo=""Typo.h3"">$15</MudText>
                        <MudText Typo=""Typo.h5"" Class=""ml-1 mt-5"" Color=""Color.Secondary"">/Monthly</MudText>
                    </div>
                    <MudList T=""string"" Class=""mx-auto mt-4"" Style=""width:300px;"">
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            Unlimited something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            10 something
                        </MudListItem>
                        <MudListItem Icon=""@Icons.Material.Filled.LiveHelp"">
                            No something
                        </MudListItem>
                    </MudList>
                </MudCardContent>
                <MudCardActions Class=""d-flex justify-center"">
                    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Size=""Size.Large"" Style=""width:50%;"">Start Now</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>";

        public const string Content3WireframeExample = @"<MudContainer Class=""mt-16"" MaxWidth=""MaxWidth.Medium"">
    <MudText Typo=""Typo.h3"" Align=""Align.Center"" GutterBottom=""true"">Checkout</MudText>
    <MudGrid Spacing=""12"" Class=""mt-16"">
        <MudItem xs=""7"">
            <MudText Typo=""Typo.h5"" GutterBottom=""true"">Billing address</MudText>
            <MudGrid>
                <MudItem xs=""12"">
                    <MudTextField T=""string"" Label=""Email"" />
                </MudItem>
                <MudItem xs=""12"">
                    <MudTextField T=""string"" Label=""Mobile number"" />
                </MudItem>
                <MudItem xs=""12"">
                    <MudTextField T=""string"" Label=""Personal number"" />
                </MudItem>
                <MudItem xs=""6"">
                    <MudTextField T=""string"" Label=""First name"" />
                </MudItem>
                <MudItem xs=""6"">
                    <MudTextField T=""string"" Label=""Last name"" />
                </MudItem>
                <MudItem xs=""12"">
                    <MudTextField T=""string"" Label=""Address"" />
                </MudItem>
                <MudItem xs=""6"">
                    <MudTextField T=""string"" Label=""Postal code"" />
                </MudItem>
                <MudItem xs=""6"">
                    <MudTextField T=""string"" Label=""Postal Area"" />
                </MudItem>
                <MudItem xs=""12"" Class=""d-flex justify-center"">
                    <MudButton Variant=""Variant.Filled"" DropShadow=""false"" Color=""Color.Primary"" Size=""Size.Large"" Class=""mt-8"">Continue to Payment</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs=""5"">
            <MudText Typo=""Typo.h5"" GutterBottom=""true"">Cart</MudText>
            <MudPaper Class=""d-flex flex-column"" Style=""height:100%;"" Outlined=""true"">
                <MudList T=""string"">
                    <MudListItem Icon=""@Icons.Material.Filled.ContentCut"">
                        <div class=""d-flex"">
                            <MudText>Scissor - Big</MudText>
                            <MudText HtmlTag=""span"" Class=""ml-auto"">$5</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem Icon=""@Icons.Material.Filled.AirplanemodeActive"">
                        <div class=""d-flex"">
                            <MudText>Model Airplane</MudText>
                            <MudText Class=""ml-auto"">$20</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem Icon=""@Icons.Material.Filled.Create"">
                        <div class=""d-flex"">
                            <MudText>Plastic Glue</MudText>
                            <MudText Class=""ml-auto"">$12</MudText>
                        </div>
                    </MudListItem>
                    <MudListItem Icon=""@Icons.Material.Filled.ColorLens"">
                        <div class=""d-flex"">
                            <MudText>Color set - Modern planes</MudText>
                            <MudText Class=""ml-auto"">$16</MudText>
                        </div>
                    </MudListItem>
                </MudList>
                <div class=""mt-auto"">
                    <MudDivider />
                    <div class=""d-flex pa-4"">
                        <MudText>Total:</MudText>
                        <MudText Class=""ml-auto""><b>$53</b></MudText>
                    </div>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>";

        public const string Layout1WireframeExample = @"<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@((e) => DrawerToggle())"" />
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Filled.MoreVert"" Color=""Color.Inherit"" Edge=""Edge.End"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""_drawerOpen"" Elevation=""2"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h5"" Class=""mt-1"">Application</MudText>
        </MudDrawerHeader>
        @*NavMenu*@
    </MudDrawer>
    <MudMainContent>
        @*Body*@
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}";

        public const string Layout2WireframeExample = @"<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Filled.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@((e) => DrawerToggle())"" />
        <MudText Typo=""Typo.h5"" Class=""ml-3"">Application</MudText>
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Filled.MoreVert"" Color=""Color.Inherit"" Edge=""Edge.End"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""_drawerOpen"" ClipMode=""DrawerClipMode.Always"" Elevation=""2"">
        @*NavMenu*@
    </MudDrawer>
    <MudMainContent>
        @*Body*@
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}";

        public const string Layout3WireframeExample = @"<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudText Typo=""Typo.h5"" Class=""ml-3"">Application</MudText>
        <MudSpacer />
        <MudIconButton Icon=""@Icons.Material.Filled.MoreVert"" Color=""Color.Inherit"" Edge=""Edge.End"" />
    </MudAppBar>
    <MudMainContent>
        @*Body*@
    </MudMainContent>
</MudLayout>";

    }
}
