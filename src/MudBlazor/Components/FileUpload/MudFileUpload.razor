@inherits MudFormComponent<T, string>

@typeparam T
@namespace MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor.Interfaces

<MudInputControl Class="@Classname" Style="@Style" Error="HasErrors" ErrorText="@GetErrorText()" Required="@Required">
    <InputContent>
        @for (var index = 1; index <= _numberOfActiveFileInputs; index++)
        {
            var localIndex = index;
            <InputFile @key="@localIndex"
            OnChange="OnChangeAsync"
            class="@GetInputClass(localIndex)"
            style="@InputStyle"
            hidden="@(Hidden && !_draggingState.Value ? "" : null)"
            multiple="@(typeof(T) == typeof(IReadOnlyList<IBrowserFile>) ? "" : null)"
            accept="@Accept"
            disabled="@(GetDisabledState())"
            @attributes="UserAttributes"
            @ondrop="@(() => _draggingState.SetValueAsync(false))"
            @ondragleave="@(() => _draggingState.SetValueAsync(false))"
            @ondragend="@(() => _draggingState.SetValueAsync(false))"
            id="@GetInputId(localIndex)"
            required="@Required"
            aria-required="@Required.ToString().ToLowerInvariant()" />
        }
        @if (ActivatorContent == null)
        {         
            @if (DragAndDrop)
            {
                <MudPaper Outlined="true" 
                @onclick="@(GetDisabledState() ? null : OpenFilePickerAsync)"
                @ondragenter="@(GetDisabledState() ? null : () => _draggingState.SetValueAsync(true))"
                Style="@DragStyle"
                Class="@DragClass">
                    <MudIcon Disabled="GetDisabledState()" Class="mb-2" Icon="@Icons.Material.Filled.Inbox" Color="Color.Primary" Size="Size.Large" />
                    <MudText Color="@(GetDisabledState() ? Color.Default : Color.Primary)">Drag and drop files here or click</MudText>
                </MudPaper>
            }
            else
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           Disabled="GetDisabledState()"
                           OnClick="@OpenFilePickerAsync">
                    Click to Upload
                </MudButton>
            }
        }
        else
        {
            <CascadingValue Name="ParentDisabled" Value="GetDisabledState()">
                <div disabled="@GetDisabledState()">
                    @ActivatorContent(this)
                </div>
            </CascadingValue>
        }
        <div class="mud-file-upload-files mt-1">
            @if (SelectedTemplate != null)
            {
                @SelectedTemplate(_filesState.Value)
            }            
            else
            {
                <!-- Make sure there is at least one file -->
                @if (!EqualityComparer<T>.Default.Equals(_filesState.Value, default))
                {
                    <div class="mud-file-upload-filelist">
                        @foreach (var file in GetFilenames())
                        {
                            <MudChip T="string"
                                     Color="Color.Secondary"
                                     Disabled="GetDisabledState()"
                                     Text="@file"
                                     CloseIcon="@Icons.Material.Outlined.Close"
                                     OnClose="@(GetDisabledState() ? null : async () => await RemoveFile(file))"
                                     tabindex="-1" />
                        }
                    </div>
                }
            }
        </div>
    </InputContent>
</MudInputControl>
