<MudPaper Class="pa-4">
    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="_index" InputData="@_data" InputLabels="@_labels"></MudChart>
</MudPaper>
<MudPaper Class="pa-4 mt-2 d-flex justify-center">
    <MudButton OnClick="AddDataSize" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    <MudButton @onclick="RandomizeData" Variant="Variant.Filled" Class="mx-4">Randomize</MudButton>
    <MudButton OnClick="RemoveDataSize" Variant="Variant.Filled" Color="Color.Secondary">Remove</MudButton>  
</MudPaper>
<MudText Typo="Typo.h6">Selected portion of the chart: @_index</MudText>

@code {
    private int _index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private int _dataSize = 4;
    private double[] _data = [50, 25, 20, 5];
    private readonly string[] _labels =
    [
        "Fossil", "Nuclear", "Solar", "Wind", "Oil", "Coal", "Gas", "Biomass",
        "Hydro", "Geothermal", "Nuclear Fusion", "Pumped Storage", "Solar", "Wind", "Oil",
        "Coal", "Gas", "Biomass", "Hydro", "Geothermal"
    ];


    void RandomizeData()
    {
        var newData = new double[_dataSize];
        for (int i = 0; i < newData.Length; i++)
            newData[i] = Random.Shared.NextDouble() * 100;
        _data = newData;
        StateHasChanged();
    }

    private void AddDataSize()
    {
        if (_dataSize < 20)
        {
            _dataSize += 1;
            RandomizeData();
        }
    }

    private void RemoveDataSize()
    {
        if (_dataSize > 0)
        {
            _dataSize -= 1;
            RandomizeData();
        }
    }
}