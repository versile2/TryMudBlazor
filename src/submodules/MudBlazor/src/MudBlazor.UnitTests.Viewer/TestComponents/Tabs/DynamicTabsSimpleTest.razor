<MudDynamicTabs @ref="@DynamicTabs" @bind-ActivePanelIndex="@UserIndex"
                AddTab="@AddTabCallback" CloseTab="@CloseTabCallback"
                AddIconToolTip="Click to add a new tab" CloseIconToolTip="Close tab. All data will be lost"
                PanelClass="px-4 py-6" Elevation="4" Rounded ApplyEffectsToContainer>
    @foreach (var tab in UserTabs)
    {
        <MudTabPanel ID="@tab.Id" Text="@tab.Label" ShowCloseIcon="@tab.ShowCloseIcon">@tab.Content</MudTabPanel>
    }
</MudDynamicTabs>
<MudButton OnClick="@RestoreUserTabs">Restore</MudButton>
<MudSwitch T="bool" Color="Color.Primary" Value="@_showCloseIcon" ValueChanged="@ToggleShowCloseIcon">@($"Show {_closeToggableTab}'s close icon")</MudSwitch>
<MudText>UserTabs index: @UserIndex / DynamicTabs ActivePanelIndex: @DynamicTabs.ActivePanelIndex</MudText>
<MudText>UserTabs.Count: @UserTabs.Count / DynamicTabs Panels.Count: @DynamicTabs.Panels.Count</MudText>

@code {
    private bool _showCloseIcon;
    private bool _stateHasChanged;
    private readonly string _closeToggableTab = "Tab B";

    public MudDynamicTabs DynamicTabs { get; private set; } = null!;

    public List<TabView> UserTabs { get; } = [];

    public int UserIndex { get; private set; }

    private void RestoreUserTabs()
    {
        UserTabs.Clear();
        UserTabs.Add(new TabView { Id = Guid.NewGuid(), Label = "Tab A", Content = "Tab A content" });
        UserTabs.Add(new TabView { Id = Guid.NewGuid(), Label = _closeToggableTab, Content = $"{_closeToggableTab} content", ShowCloseIcon = _showCloseIcon });
        UserTabs.Add(new TabView { Id = Guid.NewGuid(), Label = "Tab C", Content = "Tab C content" });
        UserIndex = 1; // Start on 2nd tab: "Tab B"
        _stateHasChanged = true;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RestoreUserTabs();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (_stateHasChanged)
        {
            _stateHasChanged = false;
            StateHasChanged();
        }
    }

    private void ToggleShowCloseIcon(bool show)
    {
        var tab = UserTabs?.SingleOrDefault(t => t.Label.Equals(_closeToggableTab));
        if (tab is not null) tab.ShowCloseIcon = show;
        _showCloseIcon = show;
    }

    public void AddTab(Guid id)
    {
        UserTabs.Add(new TabView { Id = id, Label = "dynamic tab", Content = $"Tab ID: {id}" });
        UserIndex = UserTabs.Count - 1; // Automatically switch to the new tab.
        _stateHasChanged = true;
    }

    public void RemoveTab(Guid id)
    {
        var tabView = UserTabs.SingleOrDefault((t) => Equals(t.Id, id));
        if (tabView is not null)
        {
            UserTabs.Remove(tabView);
            _stateHasChanged = true;
        }
    }

    private void AddTabCallback() => AddTab(Guid.NewGuid());

    private void CloseTabCallback(MudTabPanel panel)
    {
        if (panel.ID is Guid guid)
        {
            RemoveTab(guid);
        }
    }

    public class TabView
    {
        public required string Label { get; init; }

        public required string Content { get; init; }

        public required Guid Id { get; init; }

        public bool ShowCloseIcon { get; set; } = true;
    }
}